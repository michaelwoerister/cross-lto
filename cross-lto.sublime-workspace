{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"int",
				"int32_t"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 44513 files for \"thinlto\"\n\n/home/mw/llvm/cmake/modules/HandleLLVMOptions.cmake:\n   38  if(CMAKE_MAKE_PROGRAM MATCHES \"ninja\")\n   39    if(NOT LLVM_PARALLEL_LINK_JOBS AND uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n   40:     message(STATUS \"ThinLTO provides its own parallel linking - limiting parallel link jobs to 2.\")\n   41      set(LLVM_PARALLEL_LINK_JOBS \"2\")\n   42    endif()\n   ..\n  820             CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  821    elseif(UNIX AND LLVM_USE_LINKER STREQUAL \"lld\")\n  822:     append(\"-Wl,--thinlto-cache-dir=${PROJECT_BINARY_DIR}/lto.cache\"\n  823             CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  824    elseif(LLVM_USE_LINKER STREQUAL \"gold\")\n\n/home/mw/llvm/docs/BranchWeightMetadata.rst:\n  155  \n  156  If \"function_entry_count\" has more than 2 operands, the later operands are\n  157: the GUID of the functions that needs to be imported by ThinLTO. This is only\n  158  set by sampling based profile. It is needed because the sampling based profile\n  159  was collected on a binary that had already imported and inlined these functions,\n  160: and we need to ensure the IR matches in the ThinLTO backends for profile\n  161  annotation. The reason why we cannot annotate this on the callsite is that it\n  162  can only goes down 1 level in the call chain. For the cases where\n\n/home/mw/llvm/include/llvm/InitializePasses.h:\n  387  void initializeWinEHPreparePass(PassRegistry&);\n  388  void initializeWriteBitcodePassPass(PassRegistry&);\n  389: void initializeWriteThinLTOBitcodePass(PassRegistry&);\n  390  void initializeXRayInstrumentationPass(PassRegistry&);\n  391  void initializeMIRCanonicalizerPass(PassRegistry &);\n\n/home/mw/llvm/include/llvm/Analysis/SyntheticCountsUtils.h:\n   28  /// This class is templated on the type of the call graph and designed to work\n   29  /// with the traditional per-module callgraph and the summary callgraphs used in\n   30: /// ThinLTO. This contains only static methods and alias templates.\n   31  template <typename CallGraphType> class SyntheticCountsUtils {\n   32  public:\n\n/home/mw/llvm/include/llvm/Bitcode/BitcodeReader.h:\n   50    /// Basic information extracted from a bitcode module to be used for LTO.\n   51    struct BitcodeLTOInfo {\n   52:     bool IsThinLTO;\n   53      bool HasSummary;\n   54    };\n   ..\n   94      /// Read the bitcode module and prepare for lazy deserialization of function\n   95      /// bodies. If ShouldLazyLoadMetadata is true, lazily load metadata as well.\n   96:     /// If IsImporting is true, this module is being parsed for ThinLTO\n   97      /// importing into another module.\n   98      Expected<std::unique_ptr<Module>> getLazyModule(LLVMContext &Context,\n   ..\n  104  \n  105      /// Returns information about the module to be used for LTO: whether to\n  106:     /// compile with ThinLTO, and whether it has a summary.\n  107      Expected<BitcodeLTOInfo> getLTOInfo();\n  108  \n  ...\n  135    /// deserialization of function bodies. If ShouldLazyLoadMetadata is true,\n  136    /// lazily load metadata as well. If IsImporting is true, this module is\n  137:   /// being parsed for ThinLTO importing into another module.\n  138    Expected<std::unique_ptr<Module>>\n  139    getLazyBitcodeModule(MemoryBufferRef Buffer, LLVMContext &Context,\n  ...\n  144    /// the memory buffer if successful. If successful, this moves Buffer. On\n  145    /// error, this *does not* move Buffer. If IsImporting is true, this module is\n  146:   /// being parsed for ThinLTO importing into another module.\n  147    Expected<std::unique_ptr<Module>> getOwningLazyBitcodeModule(\n  148        std::unique_ptr<MemoryBuffer> &&Buffer, LLVMContext &Context,\n  ...\n  181    /// Parse the module summary index out of an IR file and return the module\n  182    /// summary index object if found, or an empty summary if not. If Path refers\n  183:   /// to an empty file and IgnoreEmptyThinLTOIndexFile is true, then\n  184    /// this function will return nullptr.\n  185    Expected<std::unique_ptr<ModuleSummaryIndex>>\n  186    getModuleSummaryIndexForFile(StringRef Path,\n  187:                                bool IgnoreEmptyThinLTOIndexFile = false);\n  188  \n  189    /// isBitcodeWrapper - Return true if the given bytes are the magic bytes\n\n/home/mw/llvm/include/llvm/Bitcode/BitcodeWriter.h:\n   76      ///\n   77      /// If \\c Index is supplied, the bitcode will contain the summary index\n   78:     /// (currently for use in ThinLTO optimization).\n   79      ///\n   80      /// \\p GenerateHash enables hashing the Module and including the hash in the\n   81:     /// bitcode (currently for use in ThinLTO incremental build).\n   82      ///\n   83      /// If \\p ModHash is non-null, when GenerateHash is true, the resulting\n   ..\n   96      /// information for thin link.\n   97      ///\n   98:     /// ModHash is for use in ThinLTO incremental build, generated while the\n   99      /// IR bitcode file writing.\n  100      void writeThinLinkBitcode(const Module &M, const ModuleSummaryIndex &Index,\n  ...\n  116    ///\n  117    /// If \\c Index is supplied, the bitcode will contain the summary index\n  118:   /// (currently for use in ThinLTO optimization).\n  119    ///\n  120    /// \\p GenerateHash enables hashing the Module and including the hash in the\n  121:   /// bitcode (currently for use in ThinLTO incremental build).\n  122    ///\n  123    /// If \\p ModHash is non-null, when GenerateHash is true, the resulting\n  ...\n  138    /// only contains the necessary information for thin link.\n  139    ///\n  140:   /// ModHash is for use in ThinLTO incremental build, generated while the IR\n  141    /// bitcode file writing.\n  142    void WriteThinLinkBitcodeToFile(const Module &M, raw_ostream &Out,\n  ...\n  146    /// Write the specified module summary index to the given raw output stream,\n  147    /// where it will be written in a new bitcode block. This is used when\n  148:   /// writing the combined index file for ThinLTO. When writing a subset of the\n  149    /// index for a distributed backend, provide the \\p ModuleToSummariesForIndex\n  150    /// map.\n\n/home/mw/llvm/include/llvm/Bitcode/BitcodeWriterPass.h:\n   31  /// reproduced when deserialized.\n   32  ///\n   33: /// If \\c EmitSummaryIndex, emit the summary index (currently for use in ThinLTO\n   34  /// optimization).\n   35  ///\n   36  /// If \\c EmitModuleHash, compute and emit the module hash in the bitcode\n   37: /// (currently for use in ThinLTO incremental build).\n   38  ModulePass *createBitcodeWriterPass(raw_ostream &Str,\n   39                                      bool ShouldPreserveUseListOrder = false,\n   ..\n   58    ///\n   59    /// If \\c EmitSummaryIndex, emit the summary index (currently\n   60:   /// for use in ThinLTO optimization).\n   61    explicit BitcodeWriterPass(raw_ostream &OS,\n   62                               bool ShouldPreserveUseListOrder = false,\n\n/home/mw/llvm/include/llvm/IR/GlobalValue.h:\n  476  \n  477    /// Return the modified name for a global value suitable to be\n  478:   /// used as the key for a global lookup (e.g. profile or ThinLTO).\n  479    /// The value's original name is \\c Name and has linkage of type\n  480    /// \\c Linkage. The value is defined in module \\c FileName.\n  ...\n  484  \n  485    /// Return the modified name for this global value suitable to be\n  486:   /// used as the key for a global lookup (e.g. profile or ThinLTO).\n  487    std::string getGlobalIdentifier() const;\n  488  \n  489    /// Declare a type to represent a global unique identifier for a global value.\n  490:   /// This is a 64 bits hash that is used by PGO and ThinLTO to have a compact\n  491    /// unique way to identify a symbol.\n  492    using GUID = uint64_t;\n\n/home/mw/llvm/include/llvm/IR/ModuleSummaryIndex.h:\n  117      /// Summary string representation. This StringRef points to BC module\n  118      /// string table and is valid until module data is stored in memory.\n  119:     /// This is guaranteed to happen until runThinLTOBackend function is\n  120      /// called, so it is safe to use this field during thin link. This field\n  121      /// is only valid if summary index was loaded from BC file.\n  ...\n  321  \n  322    /// Sets the linkage to the value determined by global summary-based\n  323:   /// optimization. Will be applied in the ThinLTO backends.\n  324    void setLinkage(GlobalValue::LinkageTypes Linkage) {\n  325      Flags.Linkage = Linkage;\n  ...\n  748  \n  749    /// Indicates that distributed backend should skip compilation of the\n  750:   /// module. Flag is suppose to be set by distributed ThinLTO indexing\n  751    /// when it detected that the module is not needed during the final\n  752    /// linking. As result distributed backend should just output a minimal\n\n/home/mw/llvm/include/llvm/LTO/Caching.h:\n    9  //\n   10  // This file defines the localCache function, which allows clients to add a\n   11: // filesystem cache to ThinLTO.\n   12  //\n   13  //===----------------------------------------------------------------------===//\n\n/home/mw/llvm/include/llvm/LTO/Config.h:\n   50    bool UseNewPM = false;\n   51  \n   52:   /// Disable entirely the optimizer, including importing for ThinLTO\n   53    bool CodeGenOnly = false;\n   54  \n   ..\n   96    /// single native object file. Each task has a unique identifier between 0 and\n   97    /// getMaxTasks()-1, which is supplied to the callback via the Task parameter.\n   98:   /// A task represents the entire pipeline for ThinLTO and regular\n   99    /// (non-parallel) LTO, but a parallel code generation task will be split into\n  100    /// N tasks before code generation, where N is the parallelism level.\n  ...\n  115    ///\n  116    /// Note that in out-of-process backend scenarios, none of the hooks will be\n  117:   /// called for ThinLTO tasks.\n  118    typedef std::function<bool(unsigned Task, const Module &)> ModuleHookFn;\n  119  \n  120    /// This module hook is called after linking (regular LTO) or loading\n  121:   /// (ThinLTO) the module, before modifying it.\n  122    ModuleHookFn PreOptModuleHook;\n  123  \n  124    /// This hook is called after promoting any internal functions\n  125:   /// (ThinLTO-specific).\n  126    ModuleHookFn PostPromoteModuleHook;\n  127  \n  ...\n  129    ModuleHookFn PostInternalizeModuleHook;\n  130  \n  131:   /// This hook is called after importing from other modules (ThinLTO-specific).\n  132    ModuleHookFn PostImportModuleHook;\n  133  \n  ...\n  141  \n  142    /// A combined index hook is called after all per-module indexes have been\n  143:   /// combined (ThinLTO-specific). It can be used to implement -save-temps for\n  144    /// the combined index.\n  145    ///\n  146:   /// If this function returns false, any further processing for ThinLTO tasks\n  147    /// is aborted.\n  148    ///\n  ...\n  157    /// phases to disk. A client can use this function to implement -save-temps.\n  158    ///\n  159:   /// FIXME: Temporary files derived from ThinLTO backends are currently named\n  160    /// after the input file name, rather than the output file name, when\n  161    /// UseInputModulePath is set to true.\n\n/home/mw/llvm/include/llvm/LTO/LTO.h:\n   42  \n   43  /// Resolve Weak and LinkOnce values in the \\p Index. Linkage changes recorded\n   44: /// in the index and the ThinLTO backends must apply the changes to the Module\n   45: /// via thinLTOResolveWeakForLinkerModule.\n   46  ///\n   47  /// This is done for correctness (if value exported, ensure we always\n   48  /// emit a copy), and compile-time optimization (allow drop of duplicates).\n   49: void thinLTOResolveWeakForLinkerInIndex(\n   50      ModuleSummaryIndex &Index,\n   51      function_ref<bool(GlobalValue::GUID, const GlobalValueSummary *)>\n   ..\n   55  \n   56  /// Update the linkages in the given \\p Index to mark exported values\n   57: /// as external and non-exported values as internal. The ThinLTO backends\n   58: /// must apply the changes to the Module via thinLTOInternalizeModule.\n   59: void thinLTOInternalizeAndPromoteInIndex(\n   60      ModuleSummaryIndex &Index,\n   61      function_ref<bool(StringRef, GlobalValue::GUID)> isExported);\n   ..\n   66  /// prefix matching \\p OldPrefix with \\p NewPrefix. Also, create the\n   67  /// resulting directory if it does not yet exist.\n   68: std::string getThinLTOOutputFile(const std::string &Path,\n   69                                   const std::string &OldPrefix,\n   70                                   const std::string &NewPrefix);\n   ..\n  189      NativeObjectCache;\n  190  \n  191: /// A ThinBackend defines what happens after the thin-link phase during ThinLTO.\n  192  /// The details of this type definition aren't important; clients can only\n  193  /// create a ThinBackend using one of the create*ThinBackend() functions below.\n  ...\n  207  /// To find the path to write the index to, the backend checks if the path has a\n  208  /// prefix of OldPrefix; if so, it replaces that prefix with NewPrefix. It then\n  209: /// appends \".thinlto.bc\" and writes the index to that path. If\n  210  /// ShouldEmitImportsFiles is true it also writes a list of imported files to a\n  211  /// similar path with \".imports\" appended instead.\n  212  /// LinkedObjectsFile is an output stream to write the list of object files for\n  213: /// the final ThinLTO linking. Can be nullptr.\n  214  /// OnWrite is callback which receives module identifier and notifies LTO user\n  215  /// that index file for the module (and optionally imports file) was created.\n  ...\n  223  /// This class implements a resolution-based interface to LLVM's LTO\n  224  /// functionality. It supports regular LTO, parallel LTO code generation and\n  225: /// ThinLTO. You can use it from a linker in the following way:\n  226  /// - Set hooks and code generation options (see lto::Config struct defined in\n  227  ///   Config.h), and use the lto::Config object to create an lto::LTO object.\n  ...\n  299    } RegularLTO;\n  300  \n  301:   struct ThinLTOState {\n  302:     ThinLTOState(ThinBackend Backend);\n  303  \n  304      ThinBackend Backend;\n  ...\n  306      MapVector<StringRef, BitcodeModule> ModuleMap;\n  307      DenseMap<GlobalValue::GUID, StringRef> PrevailingModuleForGUID;\n  308:   } ThinLTO;\n  309  \n  310    // The global resolution for a particular (mangled) symbol name. This is in\n  ...\n  314    // been added and the client has called run(). During run() we apply\n  315    // internalization decisions either directly to the module (for regular LTO)\n  316:   // or to the combined index (for ThinLTO).\n  317    struct GlobalResolution {\n  318      /// The unmangled name of the global.\n  ...\n  335  \n  336      /// This field keeps track of the partition number of this global. The\n  337:     /// regular LTO object is partition 0, while each ThinLTO object has its own\n  338      /// partition number from 1 onwards.\n  339      ///\n  ...\n  381                         bool LivenessFromIndex);\n  382  \n  383:   Error addThinLTO(BitcodeModule BM, ArrayRef<InputFile::Symbol> Syms,\n  384                     const SymbolResolution *&ResI, const SymbolResolution *ResE);\n  385  \n  386    Error runRegularLTO(AddStreamFn AddStream);\n  387:   Error runThinLTO(AddStreamFn AddStream, NativeObjectCache Cache);\n  388  \n  389    mutable bool CalledGetMaxTasks = false;\n\n/home/mw/llvm/include/llvm/LTO/LTOBackend.h:\n   11  // optimization and code generation on a loaded module. It is generally used\n   12  // internally by the LTO class but can also be used independently, for example\n   13: // to implement a standalone ThinLTO backend.\n   14  //\n   15  //===----------------------------------------------------------------------===//\n   ..\n   36  \n   37  /// Runs a regular LTO backend. The regular LTO backend can also act as the\n   38: /// regular LTO phase of ThinLTO, which may need to access the combined index.\n   39  Error backend(Config &C, AddStreamFn AddStream,\n   40                unsigned ParallelCodeGenParallelismLevel,\n   41                std::unique_ptr<Module> M, ModuleSummaryIndex &CombinedIndex);\n   42  \n   43: /// Runs a ThinLTO backend.\n   44  Error thinBackend(Config &C, unsigned Task, AddStreamFn AddStream, Module &M,\n   45                    const ModuleSummaryIndex &CombinedIndex,\n\n/home/mw/llvm/include/llvm/LTO/legacy/LTOModule.h:\n   70    static bool isBitcodeFile(StringRef path);\n   71  \n   72:   /// Returns 'true' if the Module is produced for ThinLTO.\n   73:   bool isThinLTO();\n   74  \n   75    /// Returns 'true' if the memory buffer is LLVM bitcode for the specified\n\n/home/mw/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:\n    1: //===-ThinLTOCodeGenerator.h - LLVM Link Time Optimizer -------------------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // This file declares the ThinLTOCodeGenerator class, similar to the\n   11: // LTOCodeGenerator but for the ThinLTO scheme. It provides an interface for\n   12  // linker plugin.\n   13  //\n   14  //===----------------------------------------------------------------------===//\n   15  \n   16: #ifndef LLVM_LTO_THINLTOCODEGENERATOR_H\n   17: #define LLVM_LTO_THINLTOCODEGENERATOR_H\n   18  \n   19  #include \"llvm-c/lto.h\"\n   ..\n   34  \n   35  /// Wrapper around MemoryBufferRef, owning the identifier\n   36: class ThinLTOBuffer {\n   37    std::string OwnedIdentifier;\n   38    StringRef Buffer;\n   39  \n   40  public:\n   41:   ThinLTOBuffer(StringRef Buffer, StringRef Identifier)\n   42        : OwnedIdentifier(Identifier), Buffer(Buffer) {}\n   43  \n   ..\n   63  \n   64  /// This class define an interface similar to the LTOCodeGenerator, but adapted\n   65: /// for ThinLTO processing.\n   66: /// The ThinLTOCodeGenerator is not intended to be reuse for multiple\n   67  /// compilation: the model is that the client adds modules to the generator and\n   68: /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the\n   69  /// codegenerator.\n   70: class ThinLTOCodeGenerator {\n   71  public:\n   72    /// Add given module to the code generator.\n   ..\n   82    /**\n   83     * Adds to a list of all global symbols that are cross-referenced between\n   84:    * ThinLTO files. If the ThinLTO CodeGenerator can ensure that every\n   85:    * references from a ThinLTO module to this symbol is optimized away, then\n   86     * the symbol can be discarded.\n   87     */\n   ..\n  124     * \\defgroup Cache controlling options\n  125     *\n  126:    * These entry points control the ThinLTO cache. The cache is intended to\n  127     * support incremental build, and thus needs to be persistent accross build.\n  128     * The client enabled the cache by supplying a path to an existing directory.\n  ...\n  296  \n  297    /**\n  298:    * Perform post-importing ThinLTO optimizations.\n  299     */\n  300    void optimize(Module &Module);\n  301  \n  302    /**\n  303:    * Perform ThinLTO CodeGen.\n  304     */\n  305    std::unique_ptr<MemoryBuffer> codegen(Module &Module);\n  ...\n  320    /// Vector holding the input buffers containing the bitcode modules to\n  321    /// process.\n  322:   std::vector<ThinLTOBuffer> Modules;\n  323  \n  324    /// Set of symbols that need to be preserved outside of the set of bitcode\n\n/home/mw/llvm/include/llvm/Linker/IRMover.h:\n   72    ///   are passed as an argument, and the callback is expected to be called\n   73    ///   if the GlobalValue needs to be added to the \\p ValuesToLink and linked.\n   74:   /// - \\p IsPerformingImport is true when this IR link is to perform ThinLTO\n   75    ///   function importing from Src.\n   76    Error move(std::unique_ptr<Module> Src, ArrayRef<GlobalValue *> ValuesToLink,\n\n/home/mw/llvm/include/llvm/Passes/PassBuilder.h:\n   73    };\n   74  \n   75:   /// \\brief ThinLTO phase.\n   76    ///\n   77:   /// This enumerates the LLVM ThinLTO optimization phases.\n   78:   enum class ThinLTOPhase {\n   79:     /// No ThinLTO behavior needed.\n   80      None,\n   81:     // ThinLTO prelink (summary) phase.\n   82      PreLink,\n   83:     // ThinLTO postlink (backend compile) phase.\n   84      PostLink\n   85    };\n   ..\n  228    /// build them.\n  229    ///\n  230:   /// \\p Phase indicates the current ThinLTO phase.\n  231    FunctionPassManager\n  232    buildFunctionSimplificationPipeline(OptimizationLevel Level,\n  233:                                       ThinLTOPhase Phase,\n  234                                        bool DebugLogging = false);\n  235  \n  ...\n  248    /// build them.\n  249    ///\n  250:   /// \\p Phase indicates the current ThinLTO phase.\n  251    ModulePassManager\n  252    buildModuleSimplificationPipeline(OptimizationLevel Level,\n  253:                                     ThinLTOPhase Phase,\n  254                                      bool DebugLogging = false);\n  255  \n  ...\n  284                                                    bool DebugLogging = false);\n  285  \n  286:   /// Build a pre-link, ThinLTO-targeting default optimization pipeline to\n  287    /// a pass manager.\n  288    ///\n  289    /// This adds the pre-link optimizations tuned to prepare a module for\n  290:   /// a ThinLTO run. It works to minimize the IR which needs to be analyzed\n  291    /// without making irreversible decisions which could be made better during\n  292    /// the LTO run.\n  ...\n  297    /// build them.\n  298    ModulePassManager\n  299:   buildThinLTOPreLinkDefaultPipeline(OptimizationLevel Level,\n  300                                       bool DebugLogging = false);\n  301  \n  302:   /// Build an ThinLTO default optimization pipeline to a pass manager.\n  303    ///\n  304    /// This provides a good default optimization pipeline for link-time\n  ...\n  311    /// require some transformations for semantic reasons, they should explicitly\n  312    /// build them.\n  313:   ModulePassManager buildThinLTODefaultPipeline(OptimizationLevel Level,\n  314                                                  bool DebugLogging = false);\n  315  \n  ...\n  481    ///\n  482    /// This extension point allows adding optimization once at the start of the\n  483:   /// pipeline. This does not apply to 'backend' compiles (LTO and ThinLTO\n  484    /// link-time pipelines).\n  485    void registerPipelineStartEPCallback(\n\n/home/mw/llvm/include/llvm/ProfileData/SampleProf.h:\n  365      S.insert(Function::getGUID(Name));\n  366      // Import hot CallTargets, which may not be available in IR because full\n  367:     // profile annotation cannot be done until backend compilation in ThinLTO.\n  368      for (const auto &BS : BodySamples)\n  369        for (const auto &TS : BS.second.getCallTargets())\n\n/home/mw/llvm/include/llvm/Transforms/IPO.h:\n  263  ModulePass *createSampleProfileLoaderPass(StringRef Name);\n  264  \n  265: /// Write ThinLTO-ready bitcode to Str.\n  266: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  267                                            raw_ostream *ThinLinkOS = nullptr);\n  268  \n\n/home/mw/llvm/include/llvm/Transforms/IPO/FunctionImport.h:\n    1: //===- llvm/Transforms/IPO/FunctionImport.h - ThinLTO importing -*- C++ -*-===//\n    2  //\n    3  //                      The LLVM Compiler Infrastructure\n    .\n  127  bool convertToDeclaration(GlobalValue &GV);\n  128  \n  129: /// Compute the set of summaries needed for a ThinLTO backend compilation of\n  130  /// \\p ModulePath.\n  131  //\n  ...\n  150  /// Resolve WeakForLinker values in \\p TheModule based on the information\n  151  /// recorded in the summaries during global summary-based analysis.\n  152: void thinLTOResolveWeakForLinkerModule(Module &TheModule,\n  153                                         const GVSummaryMapTy &DefinedGlobals);\n  154  \n  155  /// Internalize \\p TheModule based on the information recorded in the summaries\n  156  /// during global summary-based analysis.\n  157: void thinLTOInternalizeModule(Module &TheModule,\n  158                                const GVSummaryMapTy &DefinedGlobals);\n  159  \n\n/home/mw/llvm/include/llvm/Transforms/IPO/PassManagerBuilder.h:\n  155    bool MergeFunctions;\n  156    bool PrepareForLTO;\n  157:   bool PrepareForThinLTO;\n  158:   bool PerformThinLTO;\n  159    bool DivergentTarget;\n  160  \n  ...\n  200    void populateModulePassManager(legacy::PassManagerBase &MPM);\n  201    void populateLTOPassManager(legacy::PassManagerBase &PM);\n  202:   void populateThinLTOPassManager(legacy::PassManagerBase &PM);\n  203  };\n  204  \n\n/home/mw/llvm/include/llvm/Transforms/IPO/SampleProfile.h:\n   26  class SampleProfileLoaderPass : public PassInfoMixin<SampleProfileLoaderPass> {\n   27  public:\n   28:   SampleProfileLoaderPass(std::string File = \"\", bool IsThinLTOPreLink = false)\n   29:       : ProfileFileName(File), IsThinLTOPreLink(IsThinLTOPreLink) {}\n   30  \n   31    PreservedAnalyses run(Module &M, ModuleAnalysisManager &AM);\n   ..\n   33  private:\n   34    std::string ProfileFileName;\n   35:   bool IsThinLTOPreLink;\n   36  };\n   37  \n\n/home/mw/llvm/include/llvm/Transforms/IPO/ThinLTOBitcodeWriter.h:\n    1: //===- ThinLTOBitcodeWriter.h - Bitcode writing pass for ThinLTO ----------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // This pass prepares a module containing type metadata for ThinLTO by splitting\n   11  // it into regular and thin LTO parts if possible, and writing both parts to\n   12  // a multi-module bitcode file. Modules that do not contain type metadata are\n   ..\n   15  //===----------------------------------------------------------------------===//\n   16  \n   17: #ifndef LLVM_TRANSFORMS_IPO_THINLTOBITCODEWRITER_H\n   18: #define LLVM_TRANSFORMS_IPO_THINLTOBITCODEWRITER_H\n   19  \n   20  #include <llvm/IR/PassManager.h>\n   ..\n   23  namespace llvm {\n   24  \n   25: class ThinLTOBitcodeWriterPass\n   26:     : public PassInfoMixin<ThinLTOBitcodeWriterPass> {\n   27    raw_ostream &OS;\n   28    raw_ostream *ThinLinkOS;\n   ..\n   31    // Writes bitcode to OS. Also write thin link file to ThinLinkOS, if\n   32    // it's not nullptr.\n   33:   ThinLTOBitcodeWriterPass(raw_ostream &OS, raw_ostream *ThinLinkOS)\n   34        : OS(OS), ThinLinkOS(ThinLinkOS) {}\n   35  \n\n/home/mw/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:\n   22  class Module;\n   23  \n   24: /// Class to handle necessary GlobalValue changes required by ThinLTO\n   25  /// function importing, including linkage changes and any necessary renaming.\n   26  class FunctionImportGlobalProcessing {\n   ..\n   70    std::string getName(const GlobalValue *SGV, bool DoPromote);\n   71  \n   72:   /// Process globals so that they can be used in ThinLTO. This includes\n   73    /// promoting local variables so that they can be reference externally by\n   74    /// thin lto imported globals and converting strong external globals to\n   75    /// available_externally.\n   76:   void processGlobalsForThinLTO();\n   77:   void processGlobalForThinLTO(GlobalValue &GV);\n   78  \n   79    /// Get the new linkage for SGV that should be used in the linked destination\n   80:   /// module. Specifically, for ThinLTO importing or exporting it may need\n   81    /// to be adjusted. When \\p DoPromote is true then we must adjust the\n   82    /// linkage for a required promotion of a local to global scope.\n   ..\n   89        : M(M), ImportIndex(Index), GlobalsToImport(GlobalsToImport) {\n   90      // If we have a ModuleSummaryIndex but no function to import,\n   91:     // then this is the primary module being compiled in a ThinLTO\n   92      // backend compilation, and we need to see if it has functions that\n   93      // may be exported to another backend compilation.\n   ..\n  110  \n  111  /// Perform in-place global value handling on the given Module for\n  112: /// exported local functions renamed and promoted for ThinLTO.\n  113: bool renameModuleForThinLTO(\n  114      Module &M, const ModuleSummaryIndex &Index,\n  115      SetVector<GlobalValue *> *GlobalsToImport = nullptr);\n\n/home/mw/llvm/include/llvm/Transforms/Utils/ImportedFunctionsInliningStatistics.h:\n    8  //===----------------------------------------------------------------------===//\n    9  // Generating inliner statistics for imported functions, mostly useful for\n   10: // ThinLTO.\n   11  //===----------------------------------------------------------------------===//\n   12  \n   ..\n   23  class Module;\n   24  class Function;\n   25: /// \\brief Calculate and dump ThinLTO specific inliner stats.\n   26  /// The main statistics are:\n   27  /// (1) Number of inlined imported functions,\n\n/home/mw/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h:\n    9  //\n   10  // This file implements naming anonymous globals to make sure they can be\n   11: // referred to by ThinLTO.\n   12  //\n   13  //===----------------------------------------------------------------------===//\n\n/home/mw/llvm/include/llvm-c/lto.h:\n   97  \n   98  /** opaque reference to a thin code generator */\n   99: typedef struct LLVMOpaqueThinLTOCodeGenerator *thinlto_code_gen_t;\n  100  \n  101  #ifdef __cplusplus\n  ...\n  553  /**\n  554   * @} // endgoup LLVMCLTO\n  555:  * @defgroup LLVMCTLTO ThinLTO\n  556   * @ingroup LLVMC\n  557   *\n  ...\n  560  \n  561  /**\n  562:  * Type to wrap a single object returned by ThinLTO.\n  563   *\n  564   * \\since LTO_API_VERSION=18\n  ...\n  570  \n  571  /**\n  572:  * Instantiates a ThinLTO code generator.\n  573   * Returns NULL on error (check lto_get_error_message() for details).\n  574   *\n  575   *\n  576:  * The ThinLTOCodeGenerator is not intended to be reuse for multiple\n  577   * compilation: the model is that the client adds modules to the generator and\n  578:  * ask to perform the ThinLTO optimizations / codegen, and finally destroys the\n  579   * codegenerator.\n  580   *\n  581   * \\since LTO_API_VERSION=18\n  582   */\n  583: extern thinlto_code_gen_t thinlto_create_codegen(void);\n  584  \n  585  /**\n  586   * Frees the generator and all memory it internally allocated.\n  587:  * Upon return the thinlto_code_gen_t is no longer valid.\n  588   *\n  589   * \\since LTO_API_VERSION=18\n  590   */\n  591: extern void thinlto_codegen_dispose(thinlto_code_gen_t cg);\n  592  \n  593  /**\n  594:  * Add a module to a ThinLTO code generator. Identifier has to be unique among\n  595   * all the modules in a code generator. The data buffer stays owned by the\n  596   * client, and is expected to be available for the entire lifetime of the\n  597:  * thinlto_code_gen_t it is added to.\n  598   *\n  599   * On failure, returns NULL (check lto_get_error_message() for details).\n  ...\n  602   * \\since LTO_API_VERSION=18\n  603   */\n  604: extern void thinlto_codegen_add_module(thinlto_code_gen_t cg,\n  605                                         const char *identifier, const char *data,\n  606                                         int length);\n  ...\n  608  /**\n  609   * Optimize and codegen all the modules added to the codegenerator using\n  610:  * ThinLTO. Resulting objects are accessible using thinlto_module_get_object().\n  611   *\n  612   * \\since LTO_API_VERSION=18\n  613   */\n  614: extern void thinlto_codegen_process(thinlto_code_gen_t cg);\n  615  \n  616  /**\n  617:  * Returns the number of object files produced by the ThinLTO CodeGenerator.\n  618   *\n  619   * It usually matches the number of input files, but this is not a guarantee of\n  ...\n  623   * \\since LTO_API_VERSION=18\n  624   */\n  625: extern unsigned int thinlto_module_get_num_objects(thinlto_code_gen_t cg);\n  626  \n  627  /**\n  628:  * Returns a reference to the ith object file produced by the ThinLTO\n  629   * CodeGenerator.\n  630   *\n  631:  * Client should use \\p thinlto_module_get_num_objects() to get the number of\n  632   * available objects.\n  633   *\n  634   * \\since LTO_API_VERSION=18\n  635   */\n  636: extern LTOObjectBuffer thinlto_module_get_object(thinlto_code_gen_t cg,\n  637                                                   unsigned int index);\n  638  \n  639  /**\n  640:  * Returns the number of object files produced by the ThinLTO CodeGenerator.\n  641   *\n  642   * It usually matches the number of input files, but this is not a guarantee of\n  ...\n  646   * \\since LTO_API_VERSION=21\n  647   */\n  648: unsigned int thinlto_module_get_num_object_files(thinlto_code_gen_t cg);\n  649  \n  650  /**\n  651:  * Returns the path to the ith object file produced by the ThinLTO\n  652   * CodeGenerator.\n  653   *\n  654:  * Client should use \\p thinlto_module_get_num_object_files() to get the number\n  655   * of available objects.\n  656   *\n  657   * \\since LTO_API_VERSION=21\n  658   */\n  659: const char *thinlto_module_get_object_file(thinlto_code_gen_t cg,\n  660                                             unsigned int index);\n  661  \n  ...\n  666   * \\since LTO_API_VERSION=18\n  667   */\n  668: extern lto_bool_t thinlto_codegen_set_pic_model(thinlto_code_gen_t cg,\n  669                                                  lto_codegen_model);\n  670  \n  ...\n  676   * \\since LTO_API_VERSION=18\n  677   */\n  678: extern void thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg,\n  679                                                const char *save_temps_dir);\n  680  \n  ...\n  683   * path can be used by a linker to request on-disk files instead of in-memory\n  684   * buffers. When set, results are available through\n  685:  * thinlto_module_get_object_file() instead of thinlto_module_get_object().\n  686   *\n  687   * \\since LTO_API_VERSION=21\n  688   */\n  689: void thinlto_set_generated_objects_dir(thinlto_code_gen_t cg,\n  690                                         const char *save_temps_dir);\n  691  \n  ...\n  695   * \\since LTO_API_VERSION=18\n  696   */\n  697: extern void thinlto_codegen_set_cpu(thinlto_code_gen_t cg, const char *cpu);\n  698  \n  699  /**\n  ...\n  703   * \\since LTO_API_VERSION=19\n  704   */\n  705: extern void thinlto_codegen_disable_codegen(thinlto_code_gen_t cg,\n  706                                              lto_bool_t disable);\n  707  \n  ...\n  711   * \\since LTO_API_VERSION=19\n  712   */\n  713: extern void thinlto_codegen_set_codegen_only(thinlto_code_gen_t cg,\n  714                                               lto_bool_t codegen_only);\n  715  \n  ...\n  719   * \\since LTO_API_VERSION=18\n  720   */\n  721: extern void thinlto_debug_options(const char *const *options, int number);\n  722  \n  723  /**\n  724:  * Test if a module has support for ThinLTO linking.\n  725   *\n  726   * \\since LTO_API_VERSION=18\n  727   */\n  728: extern lto_bool_t lto_module_is_thinlto(lto_module_t mod);\n  729  \n  730  /**\n  ...\n  732   * generated code. If a function is not listed there, it might be inlined into\n  733   * every usage and optimized away. For every single module, the functions\n  734:  * referenced from code outside of the ThinLTO modules need to be added here.\n  735   *\n  736   * \\since LTO_API_VERSION=18\n  737   */\n  738: extern void thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg,\n  739                                                       const char *name,\n  740                                                       int length);\n  ...\n  742  /**\n  743   * Adds a symbol to the list of global symbols that are cross-referenced between\n  744:  * ThinLTO files. If the ThinLTO CodeGenerator can ensure that every\n  745:  * references from a ThinLTO module to this symbol is optimized away, then\n  746   * the symbol can be discarded.\n  747   *\n  748   * \\since LTO_API_VERSION=18\n  749   */\n  750: extern void thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg,\n  751                                                          const char *name,\n  752                                                          int length);\n  ...\n  754  /**\n  755   * @} // endgoup LLVMCTLTO\n  756:  * @defgroup LLVMCTLTO_CACHING ThinLTO Cache Control\n  757   * @ingroup LLVMCTLTO\n  758   *\n  759:  * These entry points control the ThinLTO cache. The cache is intended to\n  760   * support incremental builds, and thus needs to be persistent across builds.\n  761   * The client enables the cache by supplying a path to an existing directory.\n  ...\n  779   * \\since LTO_API_VERSION=18\n  780   */\n  781: extern void thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg,\n  782                                            const char *cache_dir);\n  783  \n  ...\n  789   * \\since LTO_API_VERSION=18\n  790   */\n  791: extern void thinlto_codegen_set_cache_pruning_interval(thinlto_code_gen_t cg,\n  792                                                         int interval);\n  793  \n  ...\n  805   * \\since LTO_API_VERSION=18\n  806   */\n  807: extern void thinlto_codegen_set_final_cache_size_relative_to_available_space(\n  808:     thinlto_code_gen_t cg, unsigned percentage);\n  809  \n  810  /**\n  ...\n  814   * \\since LTO_API_VERSION=18\n  815   */\n  816: extern void thinlto_codegen_set_cache_entry_expiration(thinlto_code_gen_t cg,\n  817                                                         unsigned expiration);\n  818  \n  ...\n  825   * \\since LTO_API_VERSION=22\n  826   */\n  827: extern void thinlto_codegen_set_cache_size_bytes(thinlto_code_gen_t cg,\n  828                                                   unsigned max_size_bytes);\n  829  \n  ...\n  834   * \\since LTO_API_VERSION=22\n  835   */\n  836: extern void thinlto_codegen_set_cache_size_files(thinlto_code_gen_t cg,\n  837                                                   unsigned max_size_files);\n  838  \n\n/home/mw/llvm/lib/Analysis/InlineCost.cpp:\n  923        DEBUG(dbgs() << \"Hot callsite.\\n\");\n  924        // FIXME: This should update the threshold only if it exceeds the\n  925:       // current threshold, but AutoFDO + ThinLTO currently relies on this\n  926:       // behavior to prevent inlining of hot callsites during ThinLTO\n  927        // compile phase.\n  928        Threshold = HotCallSiteThreshold.getValue();\n\n/home/mw/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:\n  533    setLiveRoot(Index, \"llvm.global.annotations\");\n  534  \n  535:   bool IsThinLTO = true;\n  536    if (auto *MD =\n  537:           mdconst::extract_or_null<ConstantInt>(M.getModuleFlag(\"ThinLTO\")))\n  538:     IsThinLTO = MD->getZExtValue();\n  539  \n  540    for (auto &GlobalList : Index) {\n  ...\n  546             \"Expected module's index to have one summary per GUID\");\n  547      auto &Summary = GlobalList.second.SummaryList[0];\n  548:     if (!IsThinLTO) {\n  549        Summary->setNotEligibleToImport();\n  550        continue;\n\n/home/mw/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:\n 4967          // We might not have a VST if there were no values in the\n 4968          // summary. An empty summary block generated when we are\n 4969:         // performing ThinLTO compiles so we don't later invoke\n 4970          // the regular LTO process on them.\n 4971          if (VSTOffset > 0) {\n ....\n 5192      // via the bitcode offset of the summary records (which were saved\n 5193      // in the combined index VST entries). The records also contain\n 5194:     // information used for ThinLTO renaming and importing.\n 5195      Record.clear();\n 5196      auto BitCode = Stream.readRecord(Entry.ID, Record);\n ....\n 5803        return error(\"Malformed block\");\n 5804      case BitstreamEntry::EndBlock:\n 5805:       return BitcodeLTOInfo{/*IsThinLTO=*/false, /*HasSummary=*/false};\n 5806  \n 5807      case BitstreamEntry::SubBlock:\n 5808        if (Entry.ID == bitc::GLOBALVAL_SUMMARY_BLOCK_ID)\n 5809:         return BitcodeLTOInfo{/*IsThinLTO=*/true, /*HasSummary=*/true};\n 5810  \n 5811        if (Entry.ID == bitc::FULL_LTO_GLOBALVAL_SUMMARY_BLOCK_ID)\n 5812:         return BitcodeLTOInfo{/*IsThinLTO=*/false, /*HasSummary=*/true};\n 5813  \n 5814        // Ignore other sub-blocks.\n ....\n 5924  Expected<std::unique_ptr<ModuleSummaryIndex>>\n 5925  llvm::getModuleSummaryIndexForFile(StringRef Path,\n 5926:                                    bool IgnoreEmptyThinLTOIndexFile) {\n 5927    ErrorOr<std::unique_ptr<MemoryBuffer>> FileOrErr =\n 5928        MemoryBuffer::getFileOrSTDIN(Path);\n 5929    if (!FileOrErr)\n 5930      return errorCodeToError(FileOrErr.getError());\n 5931:   if (IgnoreEmptyThinLTOIndexFile && !(*FileOrErr)->getBufferSize())\n 5932      return nullptr;\n 5933    return getModuleSummaryIndex(**FileOrErr);\n\n/home/mw/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:\n   92  STATISTIC(NumMDRecordLoaded, \"Number of Metadata records loaded\");\n   93  \n   94: /// Flag whether we need to import full type definitions for ThinLTO.\n   95  /// Currently needed for Darwin and LLDB.\n   96  static cl::opt<bool> ImportFullTypeDefinitions(\n   97      \"import-full-type-definitions\", cl::init(false), cl::Hidden,\n   98:     cl::desc(\"Import full type definitions for ThinLTO.\"));\n   99  \n  100  static cl::opt<bool> DisableLazyLoading(\n  ...\n  457    bool NeedDeclareExpressionUpgrade = false;\n  458  \n  459:   /// True if metadata is being parsed for a module being ThinLTO imported.\n  460    bool IsImporting = false;\n  461  \n  ...\n 1273      Metadata *Discriminator = nullptr;\n 1274      auto *Identifier = getMDString(Record[15]);\n 1275:     // If this module is being parsed so that it can be ThinLTO imported\n 1276      // into another module, composite types only need to be imported\n 1277      // as type declarations (unless full type definitions requested).\n\n/home/mw/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:\n  156    ValueEnumerator VE;\n  157  \n  158:   /// Optional per-module index to write for ThinLTO.\n  159    const ModuleSummaryIndex *Index;\n  160  \n  ...\n 3500  /// the module's bitcode.\n 3501  void ModuleBitcodeWriterBase::writePerModuleGlobalValueSummary() {\n 3502:   // By default we compile with ThinLTO if the module has a summary, but the\n 3503    // client can request full LTO with a module flag.\n 3504:   bool IsThinLTO = true;\n 3505    if (auto *MD =\n 3506:           mdconst::extract_or_null<ConstantInt>(M.getModuleFlag(\"ThinLTO\")))\n 3507:     IsThinLTO = MD->getZExtValue();\n 3508:   Stream.EnterSubblock(IsThinLTO ? bitc::GLOBALVAL_SUMMARY_BLOCK_ID\n 3509                                   : bitc::FULL_LTO_GLOBALVAL_SUMMARY_BLOCK_ID,\n 3510                         4);\n ....\n 4178  // Write the specified module summary index to the given raw output stream,\n 4179  // where it will be written in a new bitcode block. This is used when\n 4180: // writing the combined index file for ThinLTO. When writing a subset of the\n 4181  // index for a distributed backend, provide a \\p ModuleToSummariesForIndex map.\n 4182  void llvm::WriteIndexToFile(\n ....\n 4197  /// Class to manage the bitcode writing for a thin link bitcode file.\n 4198  class ThinLinkBitcodeWriter : public ModuleBitcodeWriterBase {\n 4199:   /// ModHash is for use in ThinLTO incremental build, generated while writing\n 4200    /// the module bitcode file.\n 4201    const ModuleHash *ModHash;\n ....\n 4339  // Write the specified thin link bitcode file to the given raw output stream,\n 4340  // where it will be written in a new bitcode block. This is used when\n 4341: // writing the per-module index file for ThinLTO.\n 4342  void llvm::WriteThinLinkBitcodeToFile(const Module &M, raw_ostream &Out,\n 4343                                        const ModuleSummaryIndex &Index,\n\n/home/mw/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:\n  716  \n  717    // Include the DWO file name in the hash if there's more than one CU.\n  718:   // This handles ThinLTO's situation where imported CUs may very easily be\n  719:   // duplicate with the same CU partially imported into another ThinLTO unit.\n  720    StringRef DWOName;\n  721    if (CUMap.size() > 1)\n\n/home/mw/llvm/lib/LTO/CMakeLists.txt:\n    6    LTOCodeGenerator.cpp\n    7    UpdateCompilerUsed.cpp\n    8:   ThinLTOCodeGenerator.cpp\n    9  \n   10    ADDITIONAL_HEADER_DIRS\n\n/home/mw/llvm/lib/LTO/Caching.cpp:\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // This file implements the Caching for ThinLTO.\n   11  //\n   12  //===----------------------------------------------------------------------===//\n   ..\n  116        if (!Temp) {\n  117          errs() << \"Error: \" << toString(Temp.takeError()) << \"\\n\";\n  118:         report_fatal_error(\"ThinLTO: Can't get a temporary file\");\n  119        }\n  120  \n\n/home/mw/llvm/lib/LTO/LTO.cpp:\n   53  static cl::opt<bool>\n   54      DumpThinCGSCCs(\"dump-thin-cg-sccs\", cl::init(false), cl::Hidden,\n   55:                    cl::desc(\"Dump the SCCs in the ThinLTO index's callgraph\"));\n   56  \n   57  // The values are (type identifier, summary) pairs.\n   ..\n  276  }\n  277  \n  278: static void thinLTOResolveWeakForLinkerGUID(\n  279      GlobalValueSummaryList &GVSummaryList, GlobalValue::GUID GUID,\n  280      DenseSet<GlobalValueSummary *> &GlobalInvolvedWithAlias,\n  ...\n  315  // referencing them because of the import. We make sure we always emit at least\n  316  // one copy.\n  317: void llvm::thinLTOResolveWeakForLinkerInIndex(\n  318      ModuleSummaryIndex &Index,\n  319      function_ref<bool(GlobalValue::GUID, const GlobalValueSummary *)>\n  ...\n  331  \n  332    for (auto &I : Index)\n  333:     thinLTOResolveWeakForLinkerGUID(I.second.SummaryList, I.first,\n  334                                      GlobalInvolvedWithAlias, isPrevailing,\n  335                                      recordNewLinkage);\n  336  }\n  337  \n  338: static void thinLTOInternalizeAndPromoteGUID(\n  339      GlobalValueSummaryList &GVSummaryList, GlobalValue::GUID GUID,\n  340      function_ref<bool(StringRef, GlobalValue::GUID)> isExported) {\n  ...\n  350  // Update the linkages in the given \\p Index to mark exported values\n  351  // as external and non-exported values as internal.\n  352: void llvm::thinLTOInternalizeAndPromoteInIndex(\n  353      ModuleSummaryIndex &Index,\n  354      function_ref<bool(StringRef, GlobalValue::GUID)> isExported) {\n  355    for (auto &I : Index)\n  356:     thinLTOInternalizeAndPromoteGUID(I.second.SummaryList, I.first, isExported);\n  357  }\n  358  \n  ...\n  398        Mover(llvm::make_unique<IRMover>(*CombinedModule)) {}\n  399  \n  400: LTO::ThinLTOState::ThinLTOState(ThinBackend Backend)\n  401      : Backend(Backend), CombinedIndex(/*IsPeformingAnalysis*/ false) {\n  402    if (!Backend)\n  ...\n  409      : Conf(std::move(Conf)),\n  410        RegularLTO(ParallelCodeGenParallelismLevel, this->Conf),\n  411:       ThinLTO(std::move(Backend)) {}\n  412  \n  413  // Requires a destructor for MapVector<BitcodeModule>.\n  ...\n  515    auto ModSyms = Input.module_symbols(ModI);\n  516    addModuleToGlobalRes(ModSyms, {ResI, ResE},\n  517:                        LTOInfo->IsThinLTO ? ThinLTO.ModuleMap.size() + 1 : 0,\n  518                         LTOInfo->HasSummary);\n  519  \n  520:   if (LTOInfo->IsThinLTO)\n  521:     return addThinLTO(BM, ModSyms, ResI, ResE);\n  522  \n  523    Expected<RegularLTOState::AddedModule> ModOrErr =\n  ...\n  531    // Regular LTO module summaries are added to a dummy module that represents\n  532    // the combined regular LTO module.\n  533:   if (Error Err = BM.readSummary(ThinLTO.CombinedIndex, \"\", -1ull))\n  534      return Err;\n  535    RegularLTO.ModsWithSummaries.push_back(std::move(*ModOrErr));\n  ...\n  686    std::vector<GlobalValue *> Keep;\n  687    for (GlobalValue *GV : Mod.Keep) {\n  688:     if (LivenessFromIndex && !ThinLTO.CombinedIndex.isGUIDLive(GV->getGUID()))\n  689        continue;\n  690  \n  ...\n  709  }\n  710  \n  711: // Add a ThinLTO module to the link.\n  712: Error LTO::addThinLTO(BitcodeModule BM, ArrayRef<InputFile::Symbol> Syms,\n  713                        const SymbolResolution *&ResI,\n  714                        const SymbolResolution *ResE) {\n  715    if (Error Err =\n  716:           BM.readSummary(ThinLTO.CombinedIndex, BM.getModuleIdentifier(),\n  717:                          ThinLTO.ModuleMap.size()))\n  718      return Err;\n  719  \n  ...\n  726            Sym.getIRName(), GlobalValue::ExternalLinkage, \"\"));\n  727        if (Res.Prevailing) {\n  728:         ThinLTO.PrevailingModuleForGUID[GUID] = BM.getModuleIdentifier();\n  729  \n  730          // For linker redefined symbols (via --wrap or --defsym) we want to\n  ...\n  733          // linkage so that we can switch it when we import the GV.\n  734          if (Res.LinkerRedefined)\n  735:           if (auto S = ThinLTO.CombinedIndex.findSummaryInModule(\n  736                    GUID, BM.getModuleIdentifier()))\n  737              S->setLinkage(GlobalValue::WeakAnyLinkage);\n  ...\n  741        // as local in the summary for the module we are adding.\n  742        if (Res.FinalDefinitionInLinkageUnit) {\n  743:         if (auto S = ThinLTO.CombinedIndex.findSummaryInModule(\n  744                  GUID, BM.getModuleIdentifier())) {\n  745            S->setDSOLocal(true);\n  ...\n  749    }\n  750  \n  751:   if (!ThinLTO.ModuleMap.insert({BM.getModuleIdentifier(), BM}).second)\n  752      return make_error<StringError>(\n  753:         \"Expected at most one ThinLTO module per bitcode file\",\n  754          inconvertibleErrorCode());\n  755  \n  ...\n  759  unsigned LTO::getMaxTasks() const {\n  760    CalledGetMaxTasks = true;\n  761:   return RegularLTO.ParallelCodeGenParallelismLevel + ThinLTO.ModuleMap.size();\n  762  }\n  763  \n  ...\n  789      return It->second;\n  790    };\n  791:   computeDeadSymbols(ThinLTO.CombinedIndex, GUIDPreservedSymbols, isPrevailing);\n  792  \n  793    if (auto E = runRegularLTO(AddStream))\n  794      return E;\n  795:   return runThinLTO(AddStream, Cache);\n  796  }\n  797  \n  ...\n  859    }\n  860    return backend(Conf, AddStream, RegularLTO.ParallelCodeGenParallelismLevel,\n  861:                  std::move(RegularLTO.CombinedModule), ThinLTO.CombinedIndex);\n  862  }\n  863  \n  864: /// This class defines the interface to the ThinLTO backend.\n  865  class lto::ThinBackendProc {\n  866  protected:\n  ...\n  900    InProcessThinBackend(\n  901        Config &Conf, ModuleSummaryIndex &CombinedIndex,\n  902:       unsigned ThinLTOParallelismLevel,\n  903        const StringMap<GVSummaryMapTy> &ModuleToDefinedGVSummaries,\n  904        AddStreamFn AddStream, NativeObjectCache Cache)\n  905        : ThinBackendProc(Conf, CombinedIndex, ModuleToDefinedGVSummaries),\n  906:         BackendThreadPool(ThinLTOParallelismLevel),\n  907          AddStream(std::move(AddStream)), Cache(std::move(Cache)) {\n  908      // Create a mapping from type identifier GUIDs to type identifier summaries.\n  ...\n  920    }\n  921  \n  922:   Error runThinLTOBackendThread(\n  923        AddStreamFn AddStream, NativeObjectCache Cache, unsigned Task,\n  924        BitcodeModule BM, ModuleSummaryIndex &CombinedIndex,\n  ...\n  978              MapVector<StringRef, BitcodeModule> &ModuleMap,\n  979              const TypeIdSummariesByGuidTy &TypeIdSummariesByGuid) {\n  980:           Error E = runThinLTOBackendThread(\n  981                AddStream, Cache, Task, BM, CombinedIndex, ImportList, ExportList,\n  982                ResolvedODR, DefinedGlobals, ModuleMap, TypeIdSummariesByGuid);\n  ...\n 1018  // prefix matching \\p OldPrefix with \\p NewPrefix. Also, create the\n 1019  // resulting directory if it does not yet exist.\n 1020: std::string lto::getThinLTOOutputFile(const std::string &Path,\n 1021                                        const std::string &OldPrefix,\n 1022                                        const std::string &NewPrefix) {\n ....\n 1061      StringRef ModulePath = BM.getModuleIdentifier();\n 1062      std::string NewModulePath =\n 1063:         getThinLTOOutputFile(ModulePath, OldPrefix, NewPrefix);\n 1064  \n 1065      if (LinkedObjectsFile)\n ....\n 1071  \n 1072      std::error_code EC;\n 1073:     raw_fd_ostream OS(NewModulePath + \".thinlto.bc\", EC,\n 1074                        sys::fs::OpenFlags::F_None);\n 1075      if (EC)\n ....\n 1104  }\n 1105  \n 1106: Error LTO::runThinLTO(AddStreamFn AddStream, NativeObjectCache Cache) {\n 1107:   if (ThinLTO.ModuleMap.empty())\n 1108      return Error::success();\n 1109  \n 1110:   if (Conf.CombinedIndexHook && !Conf.CombinedIndexHook(ThinLTO.CombinedIndex))\n 1111      return Error::success();\n 1112  \n ....\n 1114    // Summary).\n 1115    StringMap<GVSummaryMapTy>\n 1116:       ModuleToDefinedGVSummaries(ThinLTO.ModuleMap.size());\n 1117:   ThinLTO.CombinedIndex.collectDefinedGVSummariesPerModule(\n 1118        ModuleToDefinedGVSummaries);\n 1119    // Create entries for any modules that didn't have any GV summaries\n ....\n 1124    // is passed the map of summaries for the module, without any special\n 1125    // handling for this case.\n 1126:   for (auto &Mod : ThinLTO.ModuleMap)\n 1127      if (!ModuleToDefinedGVSummaries.count(Mod.first))\n 1128        ModuleToDefinedGVSummaries.try_emplace(Mod.first);\n 1129  \n 1130    StringMap<FunctionImporter::ImportMapTy> ImportLists(\n 1131:       ThinLTO.ModuleMap.size());\n 1132    StringMap<FunctionImporter::ExportSetTy> ExportLists(\n 1133:       ThinLTO.ModuleMap.size());\n 1134    StringMap<std::map<GlobalValue::GUID, GlobalValue::LinkageTypes>> ResolvedODR;\n 1135  \n 1136    if (DumpThinCGSCCs)\n 1137:     ThinLTO.CombinedIndex.dumpSCCs(outs());\n 1138  \n 1139    if (Conf.OptLevel > 0)\n 1140:     ComputeCrossModuleImport(ThinLTO.CombinedIndex, ModuleToDefinedGVSummaries,\n 1141                               ImportLists, ExportLists);\n 1142  \n ....\n 1148    for (auto &Res : GlobalResolutions) {\n 1149      // If the symbol does not have external references or it is not prevailing,\n 1150:     // then not need to mark it as exported from a ThinLTO partition.\n 1151      if (Res.second.Partition != GlobalResolution::External ||\n 1152          !Res.second.isPrevailingIRSymbol())\n ....\n 1155          GlobalValue::dropLLVMManglingEscape(Res.second.IRName));\n 1156      // Mark exported unless index-based analysis determined it to be dead.\n 1157:     if (ThinLTO.CombinedIndex.isGUIDLive(GUID))\n 1158        ExportedGUIDs.insert(GUID);\n 1159    }\n ....\n 1161    // Any functions referenced by the jump table in the regular LTO object must\n 1162    // be exported.\n 1163:   for (auto &Def : ThinLTO.CombinedIndex.cfiFunctionDefs())\n 1164      ExportedGUIDs.insert(\n 1165          GlobalValue::getGUID(GlobalValue::dropLLVMManglingEscape(Def)));\n ....\n 1171             ExportedGUIDs.count(GUID);\n 1172    };\n 1173:   thinLTOInternalizeAndPromoteInIndex(ThinLTO.CombinedIndex, isExported);\n 1174  \n 1175    auto isPrevailing = [&](GlobalValue::GUID GUID,\n 1176                            const GlobalValueSummary *S) {\n 1177:     return ThinLTO.PrevailingModuleForGUID[GUID] == S->modulePath();\n 1178    };\n 1179    auto recordNewLinkage = [&](StringRef ModuleIdentifier,\n ....\n 1182      ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n 1183    };\n 1184:   thinLTOResolveWeakForLinkerInIndex(ThinLTO.CombinedIndex, isPrevailing,\n 1185                                       recordNewLinkage);\n 1186  \n 1187    std::unique_ptr<ThinBackendProc> BackendProc =\n 1188:       ThinLTO.Backend(Conf, ThinLTO.CombinedIndex, ModuleToDefinedGVSummaries,\n 1189                        AddStream, Cache);\n 1190  \n ....\n 1192    // module and parallel code generation partitions.\n 1193    unsigned Task = RegularLTO.ParallelCodeGenParallelismLevel;\n 1194:   for (auto &Mod : ThinLTO.ModuleMap) {\n 1195      if (Error E = BackendProc->start(Task, Mod.second, ImportLists[Mod.first],\n 1196                                       ExportLists[Mod.first],\n 1197:                                      ResolvedODR[Mod.first], ThinLTO.ModuleMap))\n 1198        return E;\n 1199      ++Task;\n\n/home/mw/llvm/lib/LTO/LTOBackend.cpp:\n   11  // optimization and code generation on a loaded module. It is generally used\n   12  // internally by the LTO class but can also be used independently, for example\n   13: // to implement a standalone ThinLTO backend.\n   14  //\n   15  //===----------------------------------------------------------------------===//\n   ..\n   69  \n   70        std::string PathPrefix;\n   71:       // If this is the combined module (not a ThinLTO backend compile) or the\n   72        // user hasn't requested using the input module's path, emit to a file\n   73        // named from the provided OutputFileName with the Task ID appended.\n   ..\n  139  \n  140  static void runNewPMPasses(Config &Conf, Module &Mod, TargetMachine *TM,\n  141:                            unsigned OptLevel, bool IsThinLTO) {\n  142    Optional<PGOOptions> PGOOpt;\n  143    if (!Conf.SampleProfile.empty())\n  ...\n  188    }\n  189  \n  190:   if (IsThinLTO)\n  191:     MPM = PB.buildThinLTODefaultPipeline(OL, Conf.DebugPassManager);\n  192    else\n  193      MPM = PB.buildLTODefaultPipeline(OL, Conf.DebugPassManager);\n  ...\n  241  \n  242  static void runOldPMPasses(Config &Conf, Module &Mod, TargetMachine *TM,\n  243:                            bool IsThinLTO, ModuleSummaryIndex *ExportSummary,\n  244                             const ModuleSummaryIndex *ImportSummary) {\n  245    legacy::PassManager passes;\n  ...\n  259    PMB.OptLevel = Conf.OptLevel;\n  260    PMB.PGOSampleUse = Conf.SampleProfile;\n  261:   if (IsThinLTO)\n  262:     PMB.populateThinLTOPassManager(passes);\n  263    else\n  264      PMB.populateLTOPassManager(passes);\n  ...\n  267  \n  268  bool opt(Config &Conf, TargetMachine *TM, unsigned Task, Module &Mod,\n  269:          bool IsThinLTO, ModuleSummaryIndex *ExportSummary,\n  270           const ModuleSummaryIndex *ImportSummary) {\n  271    // FIXME: Plumb the combined index into the new pass manager.\n  ...\n  274                           Conf.DisableVerify);\n  275    else if (Conf.UseNewPM)\n  276:     runNewPMPasses(Conf, Mod, TM, Conf.OptLevel, IsThinLTO);\n  277    else\n  278:     runOldPMPasses(Conf, Mod, TM, IsThinLTO, ExportSummary, ImportSummary);\n  279    return !Conf.PostOptModuleHook || Conf.PostOptModuleHook(Task, Mod);\n  280  }\n  ...\n  383  \n  384    if (!C.CodeGenOnly) {\n  385:     if (!opt(C, TM.get(), 0, *Mod, /*IsThinLTO=*/false,\n  386               /*ExportSummary=*/&CombinedIndex, /*ImportSummary=*/nullptr)) {\n  387        finalizeOptimizationRemarks(std::move(DiagnosticOutputFile));\n  ...\n  440      return Error::success();\n  441  \n  442:   renameModuleForThinLTO(Mod, CombinedIndex);\n  443  \n  444    dropDeadSymbols(Mod, DefinedGlobals, CombinedIndex);\n  445  \n  446:   thinLTOResolveWeakForLinkerModule(Mod, DefinedGlobals);\n  447  \n  448    if (Conf.PostPromoteModuleHook && !Conf.PostPromoteModuleHook(Task, Mod))\n  ...\n  450  \n  451    if (!DefinedGlobals.empty())\n  452:     thinLTOInternalizeModule(Mod, DefinedGlobals);\n  453  \n  454    if (Conf.PostInternalizeModuleHook &&\n  ...\n  473      return Error::success();\n  474  \n  475:   if (!opt(Conf, TM.get(), Task, Mod, /*IsThinLTO=*/true,\n  476             /*ExportSummary=*/nullptr, /*ImportSummary=*/&CombinedIndex))\n  477      return Error::success();\n\n/home/mw/llvm/lib/LTO/LTOModule.cpp:\n   71  }\n   72  \n   73: bool LTOModule::isThinLTO() {\n   74    Expected<BitcodeLTOInfo> Result = getBitcodeLTOInfo(MBRef);\n   75    if (!Result) {\n   ..\n   77      return false;\n   78    }\n   79:   return Result->IsThinLTO;\n   80  }\n   81  \n\n/home/mw/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:\n    1: //===-ThinLTOCodeGenerator.cpp - LLVM Link Time Optimizer -----------------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n   13  //===----------------------------------------------------------------------===//\n   14  \n   15: #include \"llvm/LTO/legacy/ThinLTOCodeGenerator.h\"\n   16  \n   17  #include \"llvm/ADT/Statistic.h\"\n   ..\n   57  using namespace llvm;\n   58  \n   59: #define DEBUG_TYPE \"thinlto\"\n   60  \n   61  namespace llvm {\n   ..\n  128  \n  129  static StringMap<MemoryBufferRef>\n  130: generateModuleMap(const std::vector<ThinLTOBuffer> &Modules) {\n  131    StringMap<MemoryBufferRef> ModuleMap;\n  132    for (auto &ModuleBuffer : Modules) {\n  ...\n  140  \n  141  static void promoteModule(Module &TheModule, const ModuleSummaryIndex &Index) {\n  142:   if (renameModuleForThinLTO(TheModule, Index))\n  143:     report_fatal_error(\"renameModuleForThinLTO failed\");\n  144  }\n  145  \n  146  namespace {\n  147: class ThinLTODiagnosticInfo : public DiagnosticInfo {\n  148    const Twine &Msg;\n  149  public:\n  150:   ThinLTODiagnosticInfo(const Twine &DiagMsg,\n  151                          DiagnosticSeverity Severity = DS_Error)\n  152        : DiagnosticInfo(DK_Linker, Severity), Msg(DiagMsg) {}\n  ...\n  161      report_fatal_error(\"Broken module found, compilation aborted!\");\n  162    if (BrokenDebugInfo) {\n  163:     TheModule.getContext().diagnose(ThinLTODiagnosticInfo(\n  164          \"Invalid debug info found, debug info will be stripped\", DS_Warning));\n  165      StripDebugInfo(TheModule);\n  ...\n  180        SMDiagnostic Err = SMDiagnostic(Buffer.getBufferIdentifier(),\n  181                                        SourceMgr::DK_Error, EIB.message());\n  182:       Err.print(\"ThinLTO\", errs());\n  183      });\n  184      report_fatal_error(\"Can't load module, abort.\");\n  ...\n  204        SMDiagnostic Err = SMDiagnostic(TheModule.getModuleIdentifier(),\n  205                                        SourceMgr::DK_Error, EIB.message());\n  206:       Err.print(\"ThinLTO\", errs());\n  207      });\n  208      report_fatal_error(\"importFunctions failed\");\n  ...\n  235  \n  236    // Add optimizations\n  237:   PMB.populateThinLTOPassManager(PM);\n  238  \n  239    PM.run(TheModule);\n  ...\n  409      if (EC) {\n  410        errs() << \"Error: \" << EC.message() << \"\\n\";\n  411:       report_fatal_error(\"ThinLTO: Can't get a temporary file\");\n  412      }\n  413      {\n  ...\n  423  \n  424  static std::unique_ptr<MemoryBuffer>\n  425: ProcessThinLTOModule(Module &TheModule, ModuleSummaryIndex &Index,\n  426                       StringMap<MemoryBufferRef> &ModuleMap, TargetMachine &TM,\n  427                       const FunctionImporter::ImportMapTy &ImportList,\n  ...\n  429                       const DenseSet<GlobalValue::GUID> &GUIDPreservedSymbols,\n  430                       const GVSummaryMapTy &DefinedGlobals,\n  431:                      const ThinLTOCodeGenerator::CachingOptions &CacheOptions,\n  432                       bool DisableCodeGen, StringRef SaveTempsDir,\n  433                       bool Freestanding, unsigned OptLevel, unsigned count) {\n  ...\n  440  \n  441      // Apply summary-based LinkOnce/Weak resolution decisions.\n  442:     thinLTOResolveWeakForLinkerModule(TheModule, DefinedGlobals);\n  443  \n  444      // Save temps: after promotion.\n  ...\n  450    if (!ExportList.empty() || !GUIDPreservedSymbols.empty()) {\n  451      // Apply summary-based internalization decisions.\n  452:     thinLTOInternalizeModule(TheModule, DefinedGlobals);\n  453    }\n  454  \n  ...\n  483  \n  484  /// Resolve LinkOnce/Weak symbols. Record resolutions in the \\p ResolvedODR map\n  485: /// for caching, and in the \\p Index for application during the ThinLTO\n  486  /// backends. This is needed for correctness for exported symbols (ensure\n  487  /// at least one copy kept) and a compile-time optimization (to drop duplicate\n  ...\n  509    };\n  510  \n  511:   thinLTOResolveWeakForLinkerInIndex(Index, isPrevailing, recordNewLinkage);\n  512  }\n  513  \n  ...\n  530  } // end anonymous namespace\n  531  \n  532: void ThinLTOCodeGenerator::addModule(StringRef Identifier, StringRef Data) {\n  533:   ThinLTOBuffer Buffer(Data, Identifier);\n  534    LLVMContext Context;\n  535    StringRef TripleStr;\n  ...\n  546    else if (TMBuilder.TheTriple != TheTriple) {\n  547      if (!TMBuilder.TheTriple.isCompatibleWith(TheTriple))\n  548:       report_fatal_error(\"ThinLTO modules with incompatible triples not \"\n  549                           \"supported\");\n  550      initTMBuilder(TMBuilder, Triple(TMBuilder.TheTriple.merge(TheTriple)));\n  ...\n  554  }\n  555  \n  556: void ThinLTOCodeGenerator::preserveSymbol(StringRef Name) {\n  557    PreservedSymbols.insert(Name);\n  558  }\n  559  \n  560: void ThinLTOCodeGenerator::crossReferenceSymbol(StringRef Name) {\n  561    // FIXME: At the moment, we don't take advantage of this extra information,\n  562    // we're conservatively considering cross-references as preserved.\n  ...\n  588   * \"thin-link\".\n  589   */\n  590: std::unique_ptr<ModuleSummaryIndex> ThinLTOCodeGenerator::linkCombinedIndex() {\n  591    std::unique_ptr<ModuleSummaryIndex> CombinedIndex =\n  592        llvm::make_unique<ModuleSummaryIndex>(/*IsPeformingAnalysis=*/false);\n  ...\n  616    };\n  617  \n  618:   thinLTOInternalizeAndPromoteInIndex(Index, isExported);\n  619  }\n  620  \n  ...\n  635   * Index is updated to reflect linkage changes from weak resolution.\n  636   */\n  637: void ThinLTOCodeGenerator::promote(Module &TheModule,\n  638                                     ModuleSummaryIndex &Index) {\n  639    auto ModuleCount = Index.modulePaths().size();\n  ...\n  661    resolveWeakForLinkerInIndex(Index, ResolvedODR);\n  662  \n  663:   thinLTOResolveWeakForLinkerModule(\n  664        TheModule, ModuleToDefinedGVSummaries[ModuleIdentifier]);\n  665  \n  ...\n  674   * Perform cross-module importing for the module identified by ModuleIdentifier.\n  675   */\n  676: void ThinLTOCodeGenerator::crossModuleImport(Module &TheModule,\n  677                                               ModuleSummaryIndex &Index) {\n  678    auto ModuleMap = generateModuleMap(Modules);\n  ...\n  703   * Compute the list of summaries needed for importing into module.\n  704   */\n  705: void ThinLTOCodeGenerator::gatherImportedSummariesForModule(\n  706      StringRef ModulePath, ModuleSummaryIndex &Index,\n  707      std::map<std::string, GVSummaryMapTy> &ModuleToSummariesForIndex) {\n  ...\n  726   * Emit the list of files needed for importing into module.\n  727   */\n  728: void ThinLTOCodeGenerator::emitImports(StringRef ModulePath,\n  729                                         StringRef OutputName,\n  730                                         ModuleSummaryIndex &Index) {\n  ...\n  750   * Perform internalization. Index is updated to reflect linkage changes.\n  751   */\n  752: void ThinLTOCodeGenerator::internalize(Module &TheModule,\n  753                                         ModuleSummaryIndex &Index) {\n  754    initTMBuilder(TMBuilder, Triple(TheModule.getTargetTriple()));\n  ...\n  781    // Internalization\n  782    internalizeAndPromoteInIndex(ExportLists, GUIDPreservedSymbols, Index);\n  783:   thinLTOInternalizeModule(TheModule,\n  784                             ModuleToDefinedGVSummaries[ModuleIdentifier]);\n  785  }\n  786  \n  787  /**\n  788:  * Perform post-importing ThinLTO optimizations.\n  789   */\n  790: void ThinLTOCodeGenerator::optimize(Module &TheModule) {\n  791    initTMBuilder(TMBuilder, Triple(TheModule.getTargetTriple()));\n  792  \n  ...\n  796  \n  797  /**\n  798:  * Perform ThinLTO CodeGen.\n  799   */\n  800: std::unique_ptr<MemoryBuffer> ThinLTOCodeGenerator::codegen(Module &TheModule) {\n  801    initTMBuilder(TMBuilder, Triple(TheModule.getTargetTriple()));\n  802    return codegenModule(TheModule, *TMBuilder.create());\n  ...\n  810                                          const MemoryBuffer &OutputBuffer) {\n  811    SmallString<128> OutputPath(SavedObjectsDirectoryPath);\n  812:   llvm::sys::path::append(OutputPath, Twine(count) + \".thinlto.o\");\n  813    OutputPath.c_str(); // Ensure the string is null terminated.\n  814    if (sys::fs::exists(OutputPath))\n  ...\n  840  }\n  841  \n  842: // Main entry point for the ThinLTO processing\n  843: void ThinLTOCodeGenerator::run() {\n  844    // Prepare the resulting object vector\n  845    assert(ProducedBinaries.empty() && \"The generator should not be reused\");\n  ...\n  932    // Use global summary-based analysis to identify symbols that can be\n  933    // internalized (because they aren't exported or preserved as per callback).\n  934:   // Changes are made in the index, consumed in the ThinLTO backends.\n  935    internalizeAndPromoteInIndex(ExportLists, GUIDPreservedSymbols, *Index);\n  936  \n  ...\n  999          if (!DiagFileOrErr) {\n 1000            errs() << \"Error: \" << toString(DiagFileOrErr.takeError()) << \"\\n\";\n 1001:           report_fatal_error(\"ThinLTO: Can't get an output file for the \"\n 1002                               \"remarks\");\n 1003          }\n ....\n 1013          auto &ImportList = ImportLists[ModuleIdentifier];\n 1014          // Run the main process now, and generates a binary\n 1015:         auto OutputBuffer = ProcessThinLTOModule(\n 1016              *TheModule, *Index, ModuleMap, *TMBuilder.create(), ImportList,\n 1017              ExportList, GUIDPreservedSymbols,\n\n/home/mw/llvm/lib/Linker/IRMover.cpp:\n  402    }\n  403  \n  404:   /// Whether we are importing globals for ThinLTO, as opposed to linking the\n  405    /// source module. If this flag is set, it means that we can rely on some\n  406    /// other object file to define any non-GlobalValue entities defined by the\n  ...\n  488    GlobalValue *copyGlobalAliasProto(const GlobalAlias *SGA);\n  489  \n  490:   /// When importing for ThinLTO, prevent importing of types listed on\n  491    /// the DICompileUnit that we don't need a copy of in the importing\n  492    /// module.\n  ...\n 1038    if (!SrcCompileUnits)\n 1039      return;\n 1040:   // When importing for ThinLTO, prevent importing of types listed on\n 1041    // the DICompileUnit that we don't need a copy of in the importing\n 1042    // module. They will be emitted by the originating module.\n\n/home/mw/llvm/lib/Passes/PassBuilder.cpp:\n  184  \n  185  static Regex DefaultAliasRegex(\n  186:     \"^(default|thinlto-pre-link|thinlto|lto-pre-link|lto)<(O[0123sz])>$\");\n  187  \n  188  static bool isOptimizingForSize(PassBuilder::OptimizationLevel Level) {\n  ...\n  336  FunctionPassManager\n  337  PassBuilder::buildFunctionSimplificationPipeline(OptimizationLevel Level,\n  338:                                                  ThinLTOPhase Phase,\n  339                                                   bool DebugLogging) {\n  340    assert(Level != O0 && \"Must request optimizations!\");\n  ...\n  407  \n  408    LPM2.addPass(LoopDeletionPass());\n  409:   // Do not enable unrolling in PreLinkThinLTO phase during sample PGO\n  410    // because it changes IR to makes profile annotation in back compile\n  411    // inaccurate.\n  412:   if (Phase != ThinLTOPhase::PreLink ||\n  413        !PGOOpt || PGOOpt->SampleProfileFile.empty())\n  414      LPM2.addPass(LoopFullUnrollPass(Level));\n  ...\n  544  ModulePassManager\n  545  PassBuilder::buildModuleSimplificationPipeline(OptimizationLevel Level,\n  546:                                                ThinLTOPhase Phase,\n  547                                                 bool DebugLogging) {\n  548    ModulePassManager MPM(DebugLogging);\n  ...\n  562      EarlyFPM.addPass(CallSiteSplittingPass());\n  563  \n  564:   // In SamplePGO ThinLTO backend, we need instcombine before profile annotation\n  565    // to convert bitcast to direct calls so that they can be inlined during the\n  566    // profile annotation prepration step.\n  ...\n  569    // FIXME: revisit how SampleProfileLoad/Inliner/ICP is structured.\n  570    if (PGOOpt && !PGOOpt->SampleProfileFile.empty() &&\n  571:       Phase == ThinLTOPhase::PostLink)\n  572      EarlyFPM.addPass(InstCombinePass());\n  573    MPM.addPass(createModuleToFunctionPassAdaptor(std::move(EarlyFPM)));\n  ...\n  577      // the debug info.\n  578      MPM.addPass(SampleProfileLoaderPass(PGOOpt->SampleProfileFile,\n  579:                                         Phase == ThinLTOPhase::PreLink));\n  580:     // Do not invoke ICP in the ThinLTOPrelink phase as it makes it hard\n  581:     // for the profile annotation to be accurate in the ThinLTO backend.\n  582:     if (Phase != ThinLTOPhase::PreLink)\n  583        // We perform early indirect call promotion here, before globalopt.\n  584:       // This is important for the ThinLTO backend phase because otherwise\n  585        // imported available_externally functions look unreferenced and are\n  586        // removed.\n  587:       MPM.addPass(PGOIndirectCallPromotion(Phase == ThinLTOPhase::PostLink,\n  588                                             true));\n  589    }\n  ...\n  623  \n  624    // Add all the requested passes for instrumentation PGO, if requested.\n  625:   if (PGOOpt && Phase != ThinLTOPhase::PostLink &&\n  626        (!PGOOpt->ProfileGenFile.empty() || !PGOOpt->ProfileUseFile.empty())) {\n  627      addPGOInstrPasses(MPM, DebugLogging, Level, PGOOpt->RunProfileGen,\n  ...\n  656    // the callees have already been fully optimized, and we want to inline them\n  657    // into the callers so that our optimizations can reflect that.\n  658:   // For PreLinkThinLTO pass, we disable hot-caller heuristic for sample PGO\n  659    // because it makes profile annotation in the backend inaccurate.\n  660    InlineParams IP = getInlineParamsFromOptLevel(Level);\n  661:   if (Phase == ThinLTOPhase::PreLink &&\n  662        PGOOpt && !PGOOpt->SampleProfileFile.empty())\n  663      IP.HotCallSiteThreshold = 0;\n  ...\n  851  \n  852    // Add the core simplification pipeline.\n  853:   MPM.addPass(buildModuleSimplificationPipeline(Level, ThinLTOPhase::None,\n  854                                                  DebugLogging));\n  855  \n  ...\n  861  \n  862  ModulePassManager\n  863: PassBuilder::buildThinLTOPreLinkDefaultPipeline(OptimizationLevel Level,\n  864                                                  bool DebugLogging) {\n  865    assert(Level != O0 && \"Must request optimizations for the default pipeline!\");\n  ...\n  877      C(MPM);\n  878  \n  879:   // If we are planning to perform ThinLTO later, we don't bloat the code with\n  880    // unrolling/vectorization/... now. Just simplify the module as much as we\n  881    // can.\n  882:   MPM.addPass(buildModuleSimplificationPipeline(Level, ThinLTOPhase::PreLink,\n  883                                                  DebugLogging));\n  884  \n  ...\n  886    // large bodies.\n  887    // FIXME: It isn't clear whether this is really the right place to run this\n  888:   // in ThinLTO. Because there is another canonicalization and simplification\n  889    // phase that will run after the thin link, running this here ends up with\n  890    // less information than will be available later and it may grow functions in\n  ...\n  900  \n  901  ModulePassManager\n  902: PassBuilder::buildThinLTODefaultPipeline(OptimizationLevel Level,\n  903                                           bool DebugLogging) {\n  904    // FIXME: The summary index is not hooked in the new pass manager yet.\n  ...\n  911    MPM.addPass(ForceFunctionAttrsPass());\n  912  \n  913:   // During the ThinLTO backend phase we perform early indirect call promotion\n  914    // here, before globalopt. Otherwise imported available_externally functions\n  915    // look unreferenced and are removed.\n  ...\n  921  \n  922    // Add the core simplification pipeline.\n  923:   MPM.addPass(buildModuleSimplificationPipeline(Level, ThinLTOPhase::PostLink,\n  924                                                  DebugLogging));\n  925  \n  ...\n 1169  /// alias.\n 1170  static bool startsWithDefaultPipelineAliasPrefix(StringRef Name) {\n 1171:   return Name.startswith(\"default\") || Name.startswith(\"thinlto\") ||\n 1172           Name.startswith(\"lto\");\n 1173  }\n ....\n 1416      if (Matches[1] == \"default\") {\n 1417        MPM.addPass(buildPerModuleDefaultPipeline(L, DebugLogging));\n 1418:     } else if (Matches[1] == \"thinlto-pre-link\") {\n 1419:       MPM.addPass(buildThinLTOPreLinkDefaultPipeline(L, DebugLogging));\n 1420:     } else if (Matches[1] == \"thinlto\") {\n 1421:       MPM.addPass(buildThinLTODefaultPipeline(L, DebugLogging));\n 1422      } else if (Matches[1] == \"lto-pre-link\") {\n 1423        MPM.addPass(buildLTOPreLinkDefaultPipeline(L, DebugLogging));\n\n/home/mw/llvm/lib/ProfileData/InstrProf.cpp:\n   66  // source file will strip all the directory names and only leave the basename.\n   67  //\n   68: // Note current ThinLTO module importing for the indirect-calls assumes\n   69  // the source directory name not being stripped. A non-zero option value here\n   70  // can potentially prevent some inter-module indirect-call-promotions.\n   ..\n  243  // symbols. This happens after value profile annotation, but those internal\n  244  // linkage functions should not have a source prefix.\n  245: // Additionally, for ThinLTO mode, exported internal functions are promoted\n  246  // and renamed. We need to ensure that the original internal PGO name is\n  247  // used when computing the GUID that is compared against the profiled GUIDs.\n  ...\n  343        return E;\n  344      MD5FuncMap.emplace_back(Function::getGUID(PGOFuncName), &F);\n  345:     // In ThinLTO, local function may have been promoted to global and have\n  346      // suffix added to the function name. We need to add the stripped function\n  347      // name to the symbol table so that we can find a match from profile.\n\n/home/mw/llvm/lib/Transforms/IPO/CMakeLists.txt:\n   33    StripSymbols.cpp\n   34    SyntheticCountsPropagation.cpp\n   35:   ThinLTOBitcodeWriter.cpp\n   36    WholeProgramDevirt.cpp\n   37  \n\n/home/mw/llvm/lib/Transforms/IPO/FunctionImport.cpp:\n    1: //===- FunctionImport.cpp - ThinLTO Summary-based Function Import ---------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n  119  #endif\n  120                                    ),\n  121:     cl::Hidden, cl::desc(\"Enable import metadata like 'thinlto_src_module'\"));\n  122  \n  123  /// Summary file to use for function importing when using -function-import from\n  ...\n  674  }\n  675  \n  676: /// Compute the set of summaries needed for a ThinLTO backend compilation of\n  677  /// \\p ModulePath.\n  678  void llvm::gatherImportedSummariesForModule(\n  ...\n  743  \n  744  /// Fixup WeakForLinker linkages in \\p TheModule based on summary analysis.\n  745: void llvm::thinLTOResolveWeakForLinkerModule(\n  746      Module &TheModule, const GVSummaryMapTy &DefinedGlobals) {\n  747    auto updateLinkage = [&](GlobalValue &GV) {\n  ...\n  756      // Switch the linkage to weakany if asked for, e.g. we do this for\n  757      // linker redefined symbols (via --wrap or --defsym).\n  758:     // We record that the visibility should be changed here in `addThinLTO`\n  759      // as we need access to the resolution vectors for each input file in\n  760      // order to find which symbols have been redefined.\n  761      // We may consider reorganizing this code and moving the linkage recording\n  762:     // somewhere else, e.g. in thinLTOResolveWeakForLinkerInIndex.\n  763      if (NewLinkage == GlobalValue::WeakAnyLinkage) {\n  764        GV.setLinkage(NewLinkage);\n  ...\n  777        if (!convertToDeclaration(GV))\n  778          // FIXME: Change this to collect replaced GVs and later erase\n  779:         // them from the parent module once thinLTOResolveWeakForLinkerGUID is\n  780          // changed to enable this for aliases.\n  781          llvm_unreachable(\"Expected GV to be converted\");\n  ...\n  810  \n  811  /// Run internalization on \\p TheModule based on symmary analysis.\n  812: void llvm::thinLTOInternalizeModule(Module &TheModule,\n  813                                      const GVSummaryMapTy &DefinedGlobals) {\n  814    // Declare a callback for the internalize pass that will ask for every\n  ...\n  907            return std::move(Err);\n  908          if (EnableImportMetadata) {\n  909:           // Add 'thinlto_src_module' metadata for statistics and debugging.\n  910            F.setMetadata(\n  911:               \"thinlto_src_module\",\n  912                MDNode::get(DestModule.getContext(),\n  913                            {MDString::get(DestModule.getContext(),\n  ...\n  951                << SrcModule->getSourceFileName() << \"\\n\");\n  952          if (EnableImportMetadata) {\n  953:           // Add 'thinlto_src_module' metadata for statistics and debugging.\n  954            Fn->setMetadata(\n  955:               \"thinlto_src_module\",\n  956                MDNode::get(DestModule.getContext(),\n  957                            {MDString::get(DestModule.getContext(),\n  ...\n  967  \n  968      // Link in the specified functions.\n  969:     if (renameModuleForThinLTO(*SrcModule, Index, &GlobalsToImport))\n  970        return true;\n  971  \n  ...\n 1034    // Next we need to promote to global scope and rename any local values that\n 1035    // are potentially exported to other modules.\n 1036:   if (renameModuleForThinLTO(M, *Index, nullptr)) {\n 1037      errs() << \"Error renaming module\\n\";\n 1038      return false;\n\n/home/mw/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:\n  254  \n  255    // For functions: true if this is a definition (either in the merged module or\n  256:   // in one of the thinlto modules).\n  257    bool IsDefinition;\n  258  \n  259:   // For functions: true if this function is either defined or used in a thinlto\n  260:   // module and its jumptable entry needs to be exported to thinlto backends.\n  261    bool IsExported;\n  262  \n  ...\n  341  \n  342    // Mapping from type identifiers to the call sites that test them, as well as\n  343:   // whether the type identifier needs to be exported to ThinLTO backends as\n  344:   // part of the regular LTO phase of the ThinLTO pipeline (see exportTypeId).\n  345    struct TypeIdUserInfo {\n  346      std::vector<CallInst *> CallSites;\n  ...\n  351    /// This structure describes how to lower type tests for a particular type\n  352    /// identifier. It is either built directly from the global analysis (during\n  353:   /// regular LTO or the regular LTO phase of ThinLTO), or indirectly using type\n  354:   /// identifier summaries and external symbol references (in ThinLTO backends).\n  355    struct TypeIdLowering {\n  356      TypeTestResolution::Kind TheKind = TypeTestResolution::Unsat;\n  ...\n  812  }\n  813  \n  814: /// Export the given type identifier so that ThinLTO backends may import it.\n  815  /// Type identifiers are exported by adding coarse-grained information about how\n  816  /// to test the type identifier to the summary, and creating symbols in the\n  ...\n  961  }\n  962  \n  963: // ThinLTO backend: the function F has a jump table entry; update this module\n  964  // accordingly. isDefinition describes the type of the jump table entry.\n  965  void LowerTypeTestsModule::importFunction(Function *F, bool isDefinition) {\n\n/home/mw/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp:\n   95  \n   96  static cl::opt<bool>\n   97:     EnablePrepareForThinLTO(\"prepare-for-thinlto\", cl::init(false), cl::Hidden,\n   98:                             cl::desc(\"Enable preparation for ThinLTO.\"));\n   99  \n  100  static cl::opt<bool> RunPGOInstrGen(\n  ...\n  164      PGOInstrGen = PGOOutputFile;\n  165      PGOInstrUse = RunPGOInstrUse;\n  166:     PrepareForThinLTO = EnablePrepareForThinLTO;\n  167:     PerformThinLTO = false;\n  168      DivergentTarget = false;\n  169  }\n  ...\n  295      MPM.add(createPGOInstrumentationUseLegacyPass(PGOInstrUse));\n  296    // Indirect call promotion that promotes intra-module targets only.\n  297:   // For ThinLTO this is done earlier due to interactions with globalopt\n  298    // for imported functions. We don't run this at -O0.\n  299    if (OptLevel > 0)\n  ...\n  421        MPM.add(createBarrierNoopPass());\n  422  \n  423:     if (PerformThinLTO) {\n  424        // Drop available_externally and unreferenced globals. This is necessary\n  425:       // with ThinLTO in order to avoid leaving undefined references to dead\n  426        // globals in the object file.\n  427        MPM.add(createEliminateAvailableExternallyPass());\n  ...\n  435      // as there could be passes (e.g. Adddress sanitizer) which introduce\n  436      // new unnamed globals.\n  437:     if (PrepareForThinLTO)\n  438        MPM.add(createNameAnonGlobalPass());\n  439      return;\n  ...\n  446    addInitialAliasAnalysisPasses(MPM);\n  447  \n  448:   // For ThinLTO there are two passes of indirect call promotion. The\n  449:   // first is during the compile phase when PerformThinLTO=false and\n  450    // intra-module indirect call targets are promoted. The second is during\n  451:   // the ThinLTO backend when PerformThinLTO=true, when we promote imported\n  452    // inter-module indirect calls. For that we perform indirect call promotion\n  453    // earlier in the pass pipeline, here before globalopt. Otherwise imported\n  454    // available_externally functions look unreferenced and are removed.\n  455:   if (PerformThinLTO)\n  456      MPM.add(createPGOIndirectCallPromotionLegacyPass(/*InLTO = */ true,\n  457                                                       !PGOSampleUse.empty()));\n  458  \n  459:   // For SamplePGO in ThinLTO compile phase, we do not want to unroll loops\n  460    // as it will change the CFG too much to make the 2nd profile annotation\n  461    // in backend more difficult.\n  462:   bool PrepareForThinLTOUsingPGOSampleProfile =\n  463:       PrepareForThinLTO && !PGOSampleUse.empty();\n  464:   if (PrepareForThinLTOUsingPGOSampleProfile)\n  465      DisableUnrollLoops = true;\n  466  \n  ...\n  485    MPM.add(createCFGSimplificationPass()); // Clean up after IPCP & DAE\n  486  \n  487:   // For SamplePGO in ThinLTO compile phase, we do not want to do indirect\n  488    // call promotion as it will change the CFG too much to make the 2nd\n  489    // profile annotation in backend more difficult.\n  490:   // PGO instrumentation is added during the compile phase for ThinLTO, do\n  491    // not run it a second time\n  492:   if (!PerformThinLTO && !PrepareForThinLTOUsingPGOSampleProfile)\n  493      addPGOInstrPasses(MPM);\n  494  \n  ...\n  522      MPM.add(createPartialInliningPass());\n  523  \n  524:   if (OptLevel > 1 && !PrepareForLTO && !PrepareForThinLTO)\n  525      // Remove avail extern fns and globals definitions if we aren't\n  526      // compiling an object file for later LTO. For LTO we want to preserve\n  ...\n  547    }\n  548  \n  549:   // If we are planning to perform ThinLTO later, let's not bloat the code with\n  550    // unrolling/vectorization/... now. We'll first run the inliner + CGSCC passes\n  551:   // during ThinLTO and perform the rest of the optimizations afterward.\n  552:   if (PrepareForThinLTO) {\n  553      // Ensure we perform any last passes, but do so before renaming anonymous\n  554      // globals in case the passes add any.\n  ...\n  559    }\n  560  \n  561:   if (PerformThinLTO)\n  562:     // Optimize globals now when performing ThinLTO, this enables more\n  563      // optimizations later.\n  564      MPM.add(createGlobalOptimizerPass());\n  ...\n  868  }\n  869  \n  870: void PassManagerBuilder::populateThinLTOPassManager(\n  871      legacy::PassManagerBase &PM) {\n  872:   PerformThinLTO = true;\n  873  \n  874    if (VerifyInput)\n  ...\n  896    if (VerifyOutput)\n  897      PM.add(createVerifierPass());\n  898:   PerformThinLTO = false;\n  899  }\n  900  \n\n/home/mw/llvm/lib/Transforms/IPO/SampleProfile.cpp:\n  179  public:\n  180    SampleProfileLoader(\n  181:       StringRef Name, bool IsThinLTOPreLink,\n  182        std::function<AssumptionCache &(Function &)> GetAssumptionCache,\n  183        std::function<TargetTransformInfo &(Function &)> GetTargetTransformInfo)\n  184        : GetAC(std::move(GetAssumptionCache)),\n  185          GetTTI(std::move(GetTargetTransformInfo)), Filename(Name),\n  186:         IsThinLTOPreLink(IsThinLTOPreLink) {}\n  187  \n  188    bool doInitialization(Module &M);\n  ...\n  280    bool ProfileIsValid = false;\n  281  \n  282:   /// \\brief Flag indicating if the pass is invoked in ThinLTO compile phase.\n  283    ///\n  284    /// In this phase, in annotation, we should not promote indirect calls.\n  285    /// Instead, we will mark GUIDs that needs to be annotated to the function.\n  286:   bool IsThinLTOPreLink;\n  287  \n  288    /// \\brief Total number of samples collected in this profile.\n  ...\n  302  \n  303    SampleProfileLoaderLegacyPass(StringRef Name = SampleProfileFile,\n  304:                                 bool IsThinLTOPreLink = false)\n  305:       : ModulePass(ID), SampleLoader(Name, IsThinLTOPreLink,\n  306                                       [&](Function &F) -> AssumptionCache & {\n  307                                         return ACT->getAssumptionCache(F);\n  ...\n  786          uint64_t Sum;\n  787          for (const auto *FS : findIndirectCallFunctionSamples(*I, Sum)) {\n  788:           if (IsThinLTOPreLink) {\n  789              FS->findInlinedFunctions(InlinedGUIDs, F.getParent(),\n  790                                       Samples->getTotalSamples() *\n  ...\n  826          if (inlineCallInstruction(I))\n  827            LocalChanged = true;\n  828:       } else if (IsThinLTOPreLink) {\n  829          findCalleeFunctionSamples(*I)->findInlinedFunctions(\n  830              InlinedGUIDs, F.getParent(),\n  ...\n 1325      // Only set weights if there is at least one non-zero weight.\n 1326      // In any other case, let the analyzer set weights.\n 1327:     // Do not set weights if the weights are present. In ThinLTO, the profile\n 1328      // annotation is done twice. If the first annotation already set the\n 1329      // weights, the second pass does not need to set it.\n ....\n 1601    SampleProfileLoader SampleLoader(\n 1602        ProfileFileName.empty() ? SampleProfileFile : ProfileFileName,\n 1603:       IsThinLTOPreLink, GetAssumptionCache, GetTTI);\n 1604  \n 1605    SampleLoader.doInitialization(M);\n\n/home/mw/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:\n    1: //===- ThinLTOBitcodeWriter.cpp - Bitcode writing pass for ThinLTO --------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n    8  //===----------------------------------------------------------------------===//\n    9  \n   10: #include \"llvm/Transforms/IPO/ThinLTOBitcodeWriter.h\"\n   11  #include \"llvm/Analysis/BasicAliasAnalysis.h\"\n   12  #include \"llvm/Analysis/ModuleSummaryAnalysis.h\"\n   ..\n  196  // a multi-module bitcode file with the two parts to OS. Otherwise, write only a\n  197  // regular LTO bitcode file to OS.\n  198: void splitAndWriteThinLTOBitcode(\n  199      raw_ostream &OS, raw_ostream *ThinLinkOS,\n  200      function_ref<AAResults &(Function &)> AARGetter, Module &M) {\n  ...\n  205      WriteBitcodeToFile(M, OS);\n  206      if (ThinLinkOS)\n  207:       // We don't have a ThinLTO part, but still write the module to the\n  208        // ThinLinkOS if requested so that the expected output file is produced.\n  209        WriteBitcodeToFile(M, *ThinLinkOS);\n  ...\n  364    // Mark the merged module as requiring full LTO. We still want an index for\n  365    // it though, so that it can participate in summary-based dead stripping.\n  366:   MergedM->addModuleFlag(Module::Error, \"ThinLTO\", uint32_t(0));\n  367    ModuleSummaryIndex MergedMIndex =\n  368        buildModuleSummaryIndex(*MergedM, nullptr, &PSI);\n  ...\n  410  }\n  411  \n  412: void writeThinLTOBitcode(raw_ostream &OS, raw_ostream *ThinLinkOS,\n  413                           function_ref<AAResults &(Function &)> AARGetter,\n  414                           Module &M, const ModuleSummaryIndex *Index) {\n  415    // See if this module has any type metadata. If so, we need to split it.\n  416    if (requiresSplit(M))\n  417:     return splitAndWriteThinLTOBitcode(OS, ThinLinkOS, AARGetter, M);\n  418  \n  419    // Otherwise we can just write it out as a regular module.\n  ...\n  432  }\n  433  \n  434: class WriteThinLTOBitcode : public ModulePass {\n  435    raw_ostream &OS; // raw_ostream to print on\n  436    // The output stream on which to emit a minimized module for use\n  ...\n  440  public:\n  441    static char ID; // Pass identification, replacement for typeid\n  442:   WriteThinLTOBitcode() : ModulePass(ID), OS(dbgs()), ThinLinkOS(nullptr) {\n  443:     initializeWriteThinLTOBitcodePass(*PassRegistry::getPassRegistry());\n  444    }\n  445  \n  446:   explicit WriteThinLTOBitcode(raw_ostream &o, raw_ostream *ThinLinkOS)\n  447        : ModulePass(ID), OS(o), ThinLinkOS(ThinLinkOS) {\n  448:     initializeWriteThinLTOBitcodePass(*PassRegistry::getPassRegistry());\n  449    }\n  450  \n  451:   StringRef getPassName() const override { return \"ThinLTO Bitcode Writer\"; }\n  452  \n  453    bool runOnModule(Module &M) override {\n  454      const ModuleSummaryIndex *Index =\n  455          &(getAnalysis<ModuleSummaryIndexWrapperPass>().getIndex());\n  456:     writeThinLTOBitcode(OS, ThinLinkOS, LegacyAARGetter(*this), M, Index);\n  457      return true;\n  458    }\n  ...\n  466  } // anonymous namespace\n  467  \n  468: char WriteThinLTOBitcode::ID = 0;\n  469: INITIALIZE_PASS_BEGIN(WriteThinLTOBitcode, \"write-thinlto-bitcode\",\n  470:                       \"Write ThinLTO Bitcode\", false, true)\n  471  INITIALIZE_PASS_DEPENDENCY(AssumptionCacheTracker)\n  472  INITIALIZE_PASS_DEPENDENCY(ModuleSummaryIndexWrapperPass)\n  473  INITIALIZE_PASS_DEPENDENCY(TargetLibraryInfoWrapperPass)\n  474: INITIALIZE_PASS_END(WriteThinLTOBitcode, \"write-thinlto-bitcode\",\n  475:                     \"Write ThinLTO Bitcode\", false, true)\n  476  \n  477: ModulePass *llvm::createWriteThinLTOBitcodePass(raw_ostream &Str,\n  478                                                  raw_ostream *ThinLinkOS) {\n  479:   return new WriteThinLTOBitcode(Str, ThinLinkOS);\n  480  }\n  481  \n  482  PreservedAnalyses\n  483: llvm::ThinLTOBitcodeWriterPass::run(Module &M, ModuleAnalysisManager &AM) {\n  484    FunctionAnalysisManager &FAM =\n  485        AM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();\n  486:   writeThinLTOBitcode(OS, ThinLinkOS,\n  487                        [&FAM](Function &F) -> AAResults & {\n  488                          return FAM.getResult<AAManager>(F);\n\n/home/mw/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:\n   31  // eligible for virtual call optimization (i.e. calls that use either of the\n   32  // llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics). During\n   33: // ThinLTO, the pass operates in two phases:\n   34  // - Export phase: this is run during the thin link over a single merged module\n   35  //   that contains all vtables with !type metadata that participate in the link.\n   ..\n  318  struct CallSiteInfo {\n  319    /// The set of call sites for this slot. Used during regular LTO and the\n  320:   /// import phase of ThinLTO (as well as the export phase of ThinLTO for any\n  321    /// call sites that appear in the merged module itself); in each of these\n  322    /// cases we are directly operating on the call sites at the IR level.\n  ...\n  328    bool AllCallSitesDevirted = true;\n  329  \n  330:   // These fields are used during the export phase of ThinLTO and reflect\n  331    // information collected from function summaries.\n  332  \n  ...\n  792    // If the only implementation has local linkage, we must promote to external\n  793    // to make it visible to thin LTO objects. We can only get here during the\n  794:   // ThinLTO export phase.\n  795    if (TheFn->hasLocalLinkage()) {\n  796      std::string NewName = (TheFn->getName() + \"$merged\").str();\n\n/home/mw/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:\n  183      }\n  184      // A non-promoted imported local definition stays local.\n  185:     // The ThinLTO pass will eventually force-import their definitions.\n  186      return SGV->getLinkage();\n  187  \n  ...\n  194    case GlobalValue::CommonLinkage:\n  195      // Linkage stays common on definitions.\n  196:     // The ThinLTO pass will eventually force-import their definitions.\n  197      return SGV->getLinkage();\n  198    }\n  ...\n  201  }\n  202  \n  203: void FunctionImportGlobalProcessing::processGlobalForThinLTO(GlobalValue &GV) {\n  204  \n  205    // Check the summaries to see if the symbol gets resolved to a known local\n  ...\n  242  }\n  243  \n  244: void FunctionImportGlobalProcessing::processGlobalsForThinLTO() {\n  245    for (GlobalVariable &GV : M.globals())\n  246:     processGlobalForThinLTO(GV);\n  247    for (Function &SF : M)\n  248:     processGlobalForThinLTO(SF);\n  249    for (GlobalAlias &GA : M.aliases())\n  250:     processGlobalForThinLTO(GA);\n  251  }\n  252  \n  253  bool FunctionImportGlobalProcessing::run() {\n  254:   processGlobalsForThinLTO();\n  255    return false;\n  256  }\n  257  \n  258: bool llvm::renameModuleForThinLTO(Module &M, const ModuleSummaryIndex &Index,\n  259                                    SetVector<GlobalValue *> *GlobalsToImport) {\n  260:   FunctionImportGlobalProcessing ThinLTOProcessing(M, Index, GlobalsToImport);\n  261:   return ThinLTOProcessing.run();\n  262  }\n  263  \n\n/home/mw/llvm/lib/Transforms/Utils/ImportedFunctionsInliningStatistics.cpp:\n    8  //===----------------------------------------------------------------------===//\n    9  // Generating inliner statistics for imported functions, mostly useful for\n   10: // ThinLTO.\n   11  //===----------------------------------------------------------------------===//\n   12  \n   ..\n   28    if (!ValueLookup) {\n   29      ValueLookup = llvm::make_unique<InlineGraphNode>();\n   30:     ValueLookup->Imported = F.getMetadata(\"thinlto_src_module\") != nullptr;\n   31    }\n   32    return *ValueLookup;\n   ..\n   66        continue;\n   67      AllFunctions++;\n   68:     ImportedFunctions += int(F.getMetadata(\"thinlto_src_module\") != nullptr);\n   69    }\n   70  }\n\n/home/mw/llvm/lib/Transforms/Utils/NameAnonGlobals.cpp:\n    1: //===- NameAnonGlobals.cpp - ThinLTO Support: Name Unnamed Globals --------===//\n    2  //\n    3  //                     The LLVM Compiler Infrastructure\n    .\n    9  //\n   10  // This file implements naming anonymous globals to make sure they can be\n   11: // referred to by ThinLTO.\n   12  //\n   13  //===----------------------------------------------------------------------===//\n\n/home/mw/llvm/test/Bitcode/module_hash.ll:\n   16  \n   17  ; Generate the combined index and gather the hashes there.\n   18: ; RUN: llvm-lto --thinlto-action=thinlink -o - %t.m1.bc %t.m2.bc | llvm-bcanalyzer -dump  | grep '<HASH ' >> %t.hash\n   19  \n   20  ; Validate the output now, the hahes in the individual modules and the combined index are in the same file.\n\n/home/mw/llvm/test/Bitcode/thinlto-alias.ll:\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4: ; RUN: opt -module-summary %p/Inputs/thinlto-alias.ll -o %t2.o\n    5: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    6: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    7  \n    8  ; CHECK: <SOURCE_FILENAME\n    .\n   33  ; COMBINED-NEXT:  </GLOBALVAL_SUMMARY_BLOCK\n   34  \n   35: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   36  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   37  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-alias2.ll:\n   10  ; CHECK-NEXT:  </GLOBALVAL_SUMMARY_BLOCK>\n   11  \n   12: ; ModuleID = 'thinlto-alias2.ll'\n   13  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   14  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-deadstrip-flag.ll:\n    3  \n    4  ; Ensure dead stripping performed flag is set on distributed index\n    5: ; RUN: llvm-lto2 run %t.o -o %t.out -thinlto-distributed-indexes \\\n    6  ; RUN:\t\t-r %t.o,glob,plx\n    7: ; RUN: llvm-bcanalyzer -dump %t.o.thinlto.bc | FileCheck %s --check-prefix=WITHDEAD\n    8  ; WITHDEAD: <FLAGS op0=1/>\n    9  \n   10  ; Ensure dead stripping performed flag is not set on distributed index\n   11  ; when option used to disable dead stripping computation.\n   12: ; RUN: llvm-lto2 run %t.o -o %t.out -thinlto-distributed-indexes \\\n   13  ; RUN:\t\t-r %t.o,glob,plx -compute-dead=false\n   14: ; RUN: llvm-bcanalyzer -dump %t.o.thinlto.bc | FileCheck %s --check-prefix=NODEAD\n   15  ; NODEAD: <FLAGS op0=0/>\n   16  \n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph-cast.ll:\n   14  ; CHECK-NEXT:  </GLOBALVAL_SUMMARY_BLOCK>\n   15  \n   16: ; ModuleID = 'thinlto-function-summary-callgraph-cast.ll'\n   17  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   18  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph-pgo.ll:\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4  \n    5: ; RUN: opt -module-summary %p/Inputs/thinlto-function-summary-callgraph.ll -o %t2.o\n    6: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    7: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    8  \n    9  ; Check parsing for old summary versions generated from this file.\n   10: ; RUN: llvm-lto -thinlto-index-stats %p/Inputs/thinlto-function-summary-callgraph-pgo.1.bc  | FileCheck %s --check-prefix=OLD\n   11: ; RUN: llvm-lto -thinlto-index-stats %p/Inputs/thinlto-function-summary-callgraph-pgo-combined.1.bc  | FileCheck %s --check-prefix=OLD-COMBINED\n   12  \n   13  ; CHECK: <SOURCE_FILENAME\n   ..\n   34  ; COMBINED-NEXT:  </GLOBALVAL_SUMMARY_BLOCK>\n   35  \n   36: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   37  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   38  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph-profile-summary.ll:\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4: ; RUN: opt -module-summary %p/Inputs/thinlto-function-summary-callgraph-profile-summary.ll -o %t2.o\n    5: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    6: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    7  \n    8  \n    .\n   58  \n   59  \n   60: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   61  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   62  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph-relbf.ll:\n   18  \n   19  \n   20: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   21  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   22  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph-sample-profile-summary.ll:\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4: ; RUN: opt -module-summary %p/Inputs/thinlto-function-summary-callgraph-sample-profile-summary.ll -o %t2.o\n    5: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    6: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    7  \n    8  \n    .\n   64  \n   65  \n   66: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   67  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   68  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-callgraph.ll:\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4  \n    5: ; RUN: opt -module-summary %p/Inputs/thinlto-function-summary-callgraph.ll -o %t2.o\n    6: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    7: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    8  \n    9  ; Check parsing for old summary versions generated from this file.\n   10: ; RUN: llvm-lto -thinlto-index-stats %p/Inputs/thinlto-function-summary-callgraph.1.bc  | FileCheck %s --check-prefix=OLD\n   11: ; RUN: llvm-lto -thinlto-index-stats %p/Inputs/thinlto-function-summary-callgraph-combined.1.bc  | FileCheck %s --check-prefix=OLD-COMBINED\n   12  \n   13  ; CHECK: <SOURCE_FILENAME\n   ..\n   37  ; COMBINED-NEXT:  </GLOBALVAL_SUMMARY_BLOCK>\n   38  \n   39: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   40  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   41  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-originalnames.ll:\n    1  ; Test to check the callgraph in summary\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t.o\n    4  ; RUN: llvm-bcanalyzer -dump %t.index.bc | FileCheck %s --check-prefix=COMBINED\n    5  \n    .\n   20  source_filename = \"/path/to/source.c\"\n   21  \n   22: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   23  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   24  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-function-summary-refgraph.ll:\n   65  ; CHECK-NEXT: blob data = 'barglobalvarfuncfunc2foofunc3WXYZllvm.ctpop.i8main{{.*}}'\n   66  \n   67: ; ModuleID = 'thinlto-function-summary-refgraph.ll'\n   68  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   69  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/thinlto-summary-linkage-types.ll:\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4: ; RUN: llvm-lto -thinlto -o %t2 %t.o\n    5: ; RUN: llvm-bcanalyzer -dump %t2.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    6  \n    7  define private void @private()\n\n/home/mw/llvm/test/Bitcode/thinlto-summary-local-5.0.ll.bc:\n    <binary>\n\n/home/mw/llvm/test/Bitcode/thinlto-summary-section.ll:\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    4: ; RUN: llvm-lto -thinlto -o %t2 %t.o\n    5: ; RUN: llvm-bcanalyzer -dump %t2.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    6  \n    7  ; Flags should be 0x57 (87) for local linkage (0x3), dso_local (0x40) and not being importable\n\n/home/mw/llvm/test/Bitcode/thinlto-type-tests.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    3: ; RUN: llvm-lto -thinlto -o %t2 %t.o\n    4: ; RUN: llvm-bcanalyzer -dump %t2.thinlto.bc | FileCheck --check-prefix=COMBINED %s\n    5  \n    6  ; COMBINED: <TYPE_TESTS op0=-2012135647395072713/>\n\n/home/mw/llvm/test/Bitcode/thinlto-type-vcalls.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2  ; RUN: llvm-bcanalyzer -dump %t.o | FileCheck %s\n    3: ; RUN: llvm-lto -thinlto -o %t2 %t.o\n    4: ; RUN: llvm-bcanalyzer -dump %t2.thinlto.bc | FileCheck --check-prefix=COMBINED %s\n    5  \n    6  target datalayout = \"e-p:64:64\"\n\n/home/mw/llvm/test/Bitcode/Inputs/thinlto-function-summary-callgraph-profile-summary.ll:\n    1: ; ModuleID = 'thinlto-function-summary-callgraph-profile-summary2.ll'\n    2  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    3  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/Inputs/thinlto-function-summary-callgraph-sample-profile-summary.ll:\n    1: ; ModuleID = 'thinlto-function-summary-callgraph-profile-summary2.ll'\n    2  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    3  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Bitcode/Inputs/thinlto-function-summary-callgraph.ll:\n    1: ; ModuleID = 'thinlto-function-summary-callgraph2.ll'\n    2  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    3  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/CodeGen/X86/dropped_constructor.ll:\n    1  ; Test to ensure that a global value that was dropped to a declaration\n    2: ; (e.g. ThinLTO will drop non-prevailing weak to declarations) does not\n    3  ; provoke creation of a comdat when it had an initializer.\n    4  ; RUN: llc -mtriple x86_64-unknown-linux-gnu < %s | FileCheck %s\n\n/home/mw/llvm/test/DebugInfo/X86/split-dwarf-omit-empty.ll:\n   14  ; Then strip out the @llvm.used global, so no out of line definition of 'f2'\n   15  ; will be emitted. This emulates something more like the available_externally\n   16: ; import performed by ThinLTO.\n   17  \n   18  ; CHECK: .debug_info contents:\n\n/home/mw/llvm/test/LTO/Resolution/X86/comdat-mixed-lto.ll:\n    1: ; Test of comdat handling with mixed thinlto and regular lto compilation.\n    2  \n    3: ; This module is compiled with ThinLTO\n    4  ; RUN: opt -module-summary -o %t1.o %s\n    5  ; Input module compiled for regular LTO\n\n/home/mw/llvm/test/LTO/Resolution/X86/dead-strip-fulllto.ll:\n   42  }\n   43  \n   44: !0 = !{i32 1, !\"ThinLTO\", i32 0}\n   45  !llvm.module.flags = !{ !0 }\n   46  \n\n/home/mw/llvm/test/LTO/Resolution/X86/export-jumptable.ll:\n    3  ; table.\n    4  \n    5: ; RUN: opt -thinlto-bc -o %t %s\n    6  ; RUN: llvm-lto2 run -o %t2 -r %t,f1,p -r %t,f2,p -r %t,_start,px %t -save-temps\n    7  ; RUN: llvm-dis %t2.1.2.internalize.bc -o - | FileCheck %s\n\n/home/mw/llvm/test/LTO/Resolution/X86/lowertypetests.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-lto2 run -r %t,f,plx -r %t,g_alias,plx -r %t,foo,lx -r %t,foo,plx -r %t,bar,lx -r %t,bar,plx -o %t1 %t\n    3  ; RUN: llvm-nm %t1.0 | FileCheck --check-prefix=MERGED %s\n\n/home/mw/llvm/test/LTO/Resolution/X86/mixed_lto.ll:\n    9  ; NM0: T g\n   10  \n   11: ; Task 1 is the (first) ThinLTO file (Inputs/mixed_lto.ll)\n   12  ; RUN: llvm-nm %t3.o.1 | FileCheck %s --check-prefix=NM1\n   13  ; NM1-DAG: T main\n\n/home/mw/llvm/test/LTO/Resolution/X86/multi-thinlto.ll:\n    2  ; RUN: llvm-cat -b -o %t2.o %t.o %t.o\n    3  ; RUN: not llvm-lto2 run -o %t3.o %t2.o 2>&1 | FileCheck %s\n    4: ; CHECK: Expected at most one ThinLTO module per bitcode file\n    5  \n    6  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/LTO/X86/strip-debug-info.ll:\n    7  ; RUN: llvm-nm %t.o | FileCheck %s \n    8  ; ---- Thin LTO (codegen only) ------------------------------\n    9: ; RUN: llvm-lto -thinlto -thinlto-action=codegen \\\n   10  ; RUN:     %t.bc -disable-verify 2>&1 | \\\n   11  ; RUN:     FileCheck %s -allow-empty -check-prefix=CHECK-WARN\n   ..\n   14  ; RUN: opt -disable-verify -module-summary %S/Inputs/strip-debug-info-bar.ll \\\n   15  ; RUN:     -o %t2.bc\n   16: ; RUN: llvm-lto -thinlto -thinlto-action=run \\\n   17  ; RUN:     %t.bc -disable-verify 2>&1 | \\\n   18  ; RUN:     FileCheck %s -allow-empty -check-prefix=CHECK-WARN\n   19  ; ---- Thin LTO (optimize, strip imported file) -------------\n   20  ; RUN: opt -disable-verify -strip-debug -module-summary %t.bc -o %t-stripped.bc\n   21: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t-stripped.bc %t2.bc\n   22: ; RUN: llvm-lto -thinlto -thinlto-action=import \\\n   23: ; RUN:     -thinlto-index=%t.index.bc \\\n   24  ; RUN:     -exported-symbol foo -exported-symbol _foo \\\n   25  ; RUN:     %t-stripped.bc -disable-verify 2>&1 | \\\n\n/home/mw/llvm/test/Linker/funcimport.ll:\n    1: ; First ensure that the ThinLTO handling in llvm-link and llvm-lto handles\n    2  ; bitcode without summary sections gracefully.\n    3  ; RUN: opt %s -o %t.bc\n    4  ; RUN: opt %p/Inputs/funcimport.ll -o %t2.bc\n    5  ; RUN: llvm-link %t.bc -summary-index=%t.bc -S\n    6: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    7  \n    8  ; Do setup work for all below tests: generate bitcode and combined index\n    9  ; RUN: opt -module-summary %s -o %t.bc\n   10  ; RUN: opt -module-summary %p/Inputs/funcimport.ll -o %t2.bc\n   11: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   12  \n   13  ; Ensure statics are promoted/renamed correctly from this file (all but\n   14  ; constant variable need promotion).\n   15: ; RUN: llvm-link %t.bc -summary-index=%t3.thinlto.bc -S | FileCheck %s --check-prefix=EXPORTSTATIC\n   16  ; EXPORTSTATIC-DAG: @staticvar.llvm.{{.*}} = hidden global\n   17  ; Eventually @staticconstvar can be exported as a copy and not promoted\n   ..\n   26  ; and that the associated linkonce function is not in the output, as it is\n   27  ; lazily linked and never referenced/materialized.\n   28: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=globalfunc1:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOB1\n   29  ; IMPORTGLOB1-DAG: define available_externally void @globalfunc1\n   30  ; IMPORTGLOB1-DAG: declare void @weakalias\n   ..\n   37  ; turned into a declaration, but that strong alias to an imported function\n   38  ; is imported as alias.\n   39: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=globalfunc2:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOB2\n   40  ; IMPORTGLOB2-DAG: declare void @analias\n   41  ; IMPORTGLOB2-DAG: define available_externally void @globalfunc2\n   ..\n   45  ; Ensure that strong alias imported in second pass of importing ends up\n   46  ; as an alias.\n   47: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=globalfunc1:%t.bc -import=globalfunc2:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOB3\n   48  ; IMPORTGLOB3-DAG: declare void @analias\n   49  ; IMPORTGLOB3-DAG: define available_externally void @globalfunc1\n   ..\n   54  ; as an alias, and that seeing the alias definition during a second inlining\n   55  ; pass is handled correctly.\n   56: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=globalfunc2:%t.bc -import=globalfunc1:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOB4\n   57  ; IMPORTGLOB4-DAG: declare void @analias\n   58  ; IMPORTGLOB4-DAG: define available_externally void @globalfunc2\n   ..\n   61  \n   62  ; An alias is never imported.\n   63: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=linkoncefunc:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOB5\n   64  ; IMPORTGLOB5-NOT: @linkoncealias\n   65  ; IMPORTGLOB5-DAG: define available_externally void @linkoncefunc()\n   ..\n   67  ; Ensure that imported static variable and function references are correctly\n   68  ; promoted and renamed (including static constant variable).\n   69: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=referencestatics:%t.bc -S | FileCheck %s --check-prefix=IMPORTSTATIC\n   70  ; IMPORTSTATIC-DAG: @staticvar.llvm.{{.*}} = external hidden global\n   71  ; Eventually @staticconstvar can be imported as a copy\n   ..\n   79  ; are handled correctly (including referenced variable imported as\n   80  ; available_externally definition)\n   81: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=referenceglobals:%t.bc -S | FileCheck %s --check-prefix=IMPORTGLOBALS\n   82  ; IMPORTGLOBALS-DAG: @globalvar = external global\n   83  ; IMPORTGLOBALS-DAG: declare void @globalfunc1()\n   ..\n   85  \n   86  ; Ensure that common variable correctly imported as common defition.\n   87: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=referencecommon:%t.bc -S | FileCheck %s --check-prefix=IMPORTCOMMON\n   88  ; IMPORTCOMMON-DAG: @commonvar = external global\n   89  ; IMPORTCOMMON-DAG: define available_externally i32 @referencecommon\n   90  \n   91  ; Ensure that imported static function pointer correctly promoted and renamed.\n   92: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=callfuncptr:%t.bc -S | FileCheck %s --check-prefix=IMPORTFUNCPTR\n   93  ; IMPORTFUNCPTR-DAG: @P.llvm.{{.*}} = external hidden global void ()*\n   94  ; IMPORTFUNCPTR-DAG: define available_externally void @callfuncptr\n   ..\n   98  ; Imported weak_any definition should be skipped with warning, and imported\n   99  ; reference should turned into an external_weak declaration.\n  100: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=callweakfunc:%t.bc -import=weakfunc:%t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORTWEAKFUNC\n  101  ; IMPORTWEAKFUNC-DAG: Ignoring import request for weak-any function weakfunc\n  102  ; IMPORTWEAKFUNC-DAG: declare void @weakfunc\n\n/home/mw/llvm/test/Linker/funcimport2.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/funcimport2.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto -o %t3 %t1.bc %t2.bc\n    4: ; RUN: llvm-link -import=bar:%t2.bc %t1.bc -summary-index=%t3.thinlto.bc -S | FileCheck %s\n    5  \n    6  ; CHECK: define available_externally hidden void @foo() {\n\n/home/mw/llvm/test/Linker/funcimport_appending_global.ll:\n    1  ; RUN: opt -module-summary %s -o %t.bc\n    2  ; RUN: opt -module-summary %p/Inputs/funcimport_appending_global.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    4  \n    5  ; Do the import now\n    6: ; RUN: llvm-link %t.bc -summary-index=%t3.thinlto.bc -import=foo:%t2.bc -S | FileCheck %s\n    7  \n    8  ; Ensure that global constructor (appending linkage) is not imported\n\n/home/mw/llvm/test/Linker/funcimport_comdat.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/funcimport_comdat.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Ensure linking of comdat containing external linkage global and function\n    7  ; removes the imported available_externally defs from comdat.\n    8: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=comdat1_func1:%t.bc -S | FileCheck %s --check-prefix=IMPORTCOMDAT\n    9  ; IMPORTCOMDAT-NOT: $comdat1 = comdat any\n   10  ; IMPORTCOMDAT-NOT: comdat($comdat1)\n   ..\n   12  ; Ensure linking of comdat containing internal linkage function with alias\n   13  ; removes the imported and promoted available_externally defs from comdat.\n   14: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=comdat2_func1:%t.bc -S | FileCheck %s --check-prefix=IMPORTCOMDAT2\n   15  ; IMPORTCOMDAT2-NOT: $comdat2 = comdat any\n   16  ; IMPORTCOMDAT2-NOT: comdat($comdat2)\n\n/home/mw/llvm/test/Linker/thinlto_funcimport_debug.ll:\n    1  ; Do setup work for all below tests: generate bitcode and combined index\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_funcimport_debug.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; If we import func1 and not func2 we should only link DISubprogram for func1\n    7: ; RUN: llvm-link %t2.bc -summary-index=%t3.thinlto.bc -import=func1:%t.bc -S | FileCheck %s\n    8  \n    9  ; CHECK: declare i32 @func2\n\n/home/mw/llvm/test/Other/new-pm-pgo.ll:\n    4  ; RUN: opt -debug-pass-manager -passes='default<O2>' -pgo-kind=new-pm-pgo-sample-use-pipeline -profile-file='%S/Inputs/new-pm-pgo.prof' %s 2>&1 \\\n    5  ; RUN:     |FileCheck %s --check-prefixes=SAMPLE_USE,SAMPLE_USE_O\n    6: ; RUN: opt -debug-pass-manager -passes='thinlto-pre-link<O2>' -pgo-kind=new-pm-pgo-sample-use-pipeline -profile-file='%S/Inputs/new-pm-pgo.prof' %s 2>&1 \\\n    7  ; RUN:     |FileCheck %s --check-prefixes=SAMPLE_USE,SAMPLE_USE_PRE_LINK\n    8: ; RUN: opt -debug-pass-manager -passes='thinlto<O2>' -pgo-kind=new-pm-pgo-sample-use-pipeline -profile-file='%S/Inputs/new-pm-pgo.prof' %s 2>&1 \\\n    9  ; RUN:     |FileCheck %s --check-prefixes=SAMPLE_USE,SAMPLE_USE_POST_LINK\n   10  ; RUN: opt -debug-pass-manager -passes='default<O2>' -new-pm-debug-info-for-profiling %s 2>&1 |FileCheck %s --check-prefixes=SAMPLE_GEN\n\n/home/mw/llvm/test/Other/new-pm-thinlto-defaults.ll:\n   10  ; Prelink pipelines:\n   11  ; RUN: opt -disable-verify -debug-pass-manager \\\n   12: ; RUN:     -passes='thinlto-pre-link<O1>,name-anon-globals' -S %s 2>&1 \\\n   13  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O1,CHECK-PRELINK-O,CHECK-PRELINK-O-NODIS,CHECK-PRELINK-O1\n   14  ; RUN: opt -disable-verify -debug-pass-manager \\\n   15: ; RUN:     -passes='thinlto-pre-link<O2>,name-anon-globals' -S  %s 2>&1 \\\n   16  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O2,CHECK-PRELINK-O,CHECK-PRELINK-O-NODIS,CHECK-PRELINK-O2\n   17  ; RUN: opt -disable-verify -debug-pass-manager \\\n   18: ; RUN:     -passes='thinlto-pre-link<O3>,name-anon-globals' -S -passes-ep-pipeline-start='no-op-module' %s 2>&1 \\\n   19  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O3,CHECK-PRELINK-O,CHECK-PRELINK-O-NODIS,CHECK-PRELINK-O3,CHECK-EP-PIPELINE-START\n   20  ; RUN: opt -disable-verify -debug-pass-manager \\\n   21: ; RUN:     -passes='thinlto-pre-link<Os>,name-anon-globals' -S %s 2>&1 \\\n   22  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-Os,CHECK-PRELINK-O,CHECK-PRELINK-O-NODIS,CHECK-PRELINK-Os\n   23  ; RUN: opt -disable-verify -debug-pass-manager \\\n   24: ; RUN:     -passes='thinlto-pre-link<Oz>,name-anon-globals' -S %s 2>&1 \\\n   25  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-Oz,CHECK-PRELINK-O,CHECK-PRELINK-O-NODIS,CHECK-PRELINK-Oz\n   26  ; RUN: opt -disable-verify -debug-pass-manager -new-pm-debug-info-for-profiling \\\n   27: ; RUN:     -passes='thinlto-pre-link<O2>,name-anon-globals' -S  %s 2>&1 \\\n   28  ; RUN:     | FileCheck %s --check-prefixes=CHECK-DIS,CHECK-O,CHECK-O2,CHECK-PRELINK-O,CHECK-PRELINK-O2\n   29  ;\n   30  ; Postlink pipelines:\n   31  ; RUN: opt -disable-verify -debug-pass-manager \\\n   32: ; RUN:     -passes='thinlto<O1>' -S %s 2>&1 \\\n   33  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O1,CHECK-POSTLINK-O,CHECK-POSTLINK-O1\n   34  ; RUN: opt -disable-verify -debug-pass-manager \\\n   35: ; RUN:     -passes='thinlto<O2>' -S  %s 2>&1 \\\n   36  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O2,CHECK-POSTLINK-O,CHECK-POSTLINK-O2\n   37  ; RUN: opt -disable-verify -debug-pass-manager -passes-ep-pipeline-start='no-op-module' \\\n   38: ; RUN:     -passes='thinlto<O3>' -S  %s 2>&1 \\\n   39  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O3,CHECK-POSTLINK-O,CHECK-POSTLINK-O3\n   40  ; RUN: opt -disable-verify -debug-pass-manager \\\n   41: ; RUN:     -passes='thinlto<Os>' -S %s 2>&1 \\\n   42  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-Os,CHECK-POSTLINK-O,CHECK-POSTLINK-Os\n   43  ; RUN: opt -disable-verify -debug-pass-manager \\\n   44: ; RUN:     -passes='thinlto<Oz>' -S %s 2>&1 \\\n   45  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-Oz,CHECK-POSTLINK-O,CHECK-POSTLINK-Oz\n   46  ; RUN: opt -disable-verify -debug-pass-manager -new-pm-debug-info-for-profiling \\\n   47: ; RUN:     -passes='thinlto<O2>' -S  %s 2>&1 \\\n   48  ; RUN:     | FileCheck %s --check-prefixes=CHECK-O,CHECK-O2,CHECK-POSTLINK-O,CHECK-POSTLINK-O2\n   49  ;\n\n/home/mw/llvm/test/ThinLTO/X86/alias_import.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/alias_import.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=promote -thinlto-index %t.index.bc %t2.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=PROMOTE\n    5: ; RUN: llvm-lto -thinlto-action=import -thinlto-index %t.index.bc %t1.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=IMPORT\n    6  \n    7  ; Alias can't point to \"available_externally\", so they are implemented by\n\n/home/mw/llvm/test/ThinLTO/X86/alias_resolution.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/alias_resolution.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=promote -thinlto-index %t.index.bc %t2.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=PROMOTE_MOD2 --check-prefix=NOTPROMOTED\n    5: ; RUN: llvm-lto -thinlto-action=promote -thinlto-index %t.index.bc %t1.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=PROMOTE_MOD1 --check-prefix=NOTPROMOTED\n    6  \n    7  ; There is no importing going on with this IR, but let's check the ODR resolution for compile time\n\n/home/mw/llvm/test/ThinLTO/X86/autoupgrade.ll:\n    2  ; Do setup work for all below tests: generate bitcode and combined index\n    3  ; RUN: opt -module-summary %s -o %t.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %p/Inputs/autoupgrade.bc\n    5  \n    6  ; We can't use llvm-dis here, because it would do the autoupgrade itself.\n\n/home/mw/llvm/test/ThinLTO/X86/cache-icall.ll:\n    1: ; Test that the list of CFI jumptable entries is part of ThinLTO cache key.\n    2  \n    3  ; Linking Inputs/cache-icall.ll results in f() being added to CFI jumptable; otherwise it is not.\n    .\n    5  ; file for %t.o from the cache.\n    6  \n    7: ; RUN: opt -module-hash -module-summary -thinlto-bc %s -o %t.bc\n    8: ; RUN: opt -module-hash -module-summary -thinlto-bc %p/Inputs/cache-icall.ll -o %t2.bc\n    9  \n   10  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n\n/home/mw/llvm/test/ThinLTO/X86/cache.ll:\n    6  ; Verify that enabling caching is ignoring module without hash\n    7  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n    8: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache\n    9  ; RUN: ls %t.cache/llvmcache.timestamp\n   10  ; RUN: ls %t.cache | count 1\n   ..\n   28  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   29  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo %t.cache/foo\n   30: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache\n   31  ; RUN: ls %t.cache | count 4\n   32  ; RUN: ls %t.cache/llvmcache.timestamp\n   ..\n   49  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo\n   50  ; RUN: touch -t 197001011200 %t.cache/llvmcache.timestamp\n   51: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache\n   52  ; RUN: not ls %t.cache/llvmcache-foo\n   53  \n   ..\n   57  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo\n   58  ; RUN: touch -t 197001011200 %t.cache/llvmcache.timestamp\n   59: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache --thinlto-cache-pruning-interval -1\n   60  ; RUN: ls %t.cache/llvmcache-foo\n   61  \n   ..\n   67  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo\n   68  ; RUN: touch %t.cache/llvmcache.timestamp\n   69: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache\n   70  ; RUN: ls %t.cache/llvmcache-foo\n   71  \n   ..\n   78  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo\n   79  ; RUN: touch %t.cache/llvmcache.timestamp\n   80: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache --thinlto-cache-pruning-interval 0\n   81  ; RUN: not ls %t.cache/llvmcache-foo\n   82  \n   ..\n   91  ; RUN: \"%python\" -c \"with open(r'%t.cache/llvmcache-foo-76', 'w') as file: file.truncate(76)\"\n   92  ; RUN: \"%python\" -c \"with open(r'%t.cache/llvmcache-foo-77', 'w') as file: file.truncate(77)\"\n   93: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache --thinlto-cache-max-size-bytes 100\n   94  ; RUN: ls %t.cache/llvmcache-foo-16\n   95  ; RUN: ls %t.cache/llvmcache-foo-8\n   ..\n  108  ; RUN: \"%python\" -c \"print(' ' * 75)\" > %t.cache/llvmcache-foo-76\n  109  ; RUN: \"%python\" -c \"print(' ' * 76)\" > %t.cache/llvmcache-foo-77\n  110: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=globalfunc %t2.bc %t.bc -thinlto-cache-dir %t.cache --thinlto-cache-max-size-files 2\n  111  ; RUN: ls %t.cache/llvmcache-foo-16\n  112  ; RUN: ls %t.cache/llvmcache-foo-8\n\n/home/mw/llvm/test/ThinLTO/X86/cfi-icall.ll:\n    1: ; RUN: opt -thinlto-bc %s -o %t1.bc\n    2: ; RUN: llvm-lto2 run  -thinlto-distributed-indexes %t1.bc -o %t.out -save-temps \\\n    3  ; RUN:   -r %t1.bc,foo,plx \\\n    4  ; RUN:   -r %t1.bc,bar,x\n\n/home/mw/llvm/test/ThinLTO/X86/crash_debuginfo.ll:\n    1  ; RUN: opt -module-summary -o %t-dst.bc %s\n    2  ; RUN: opt -module-summary -o %t-src.bc %p/Inputs/crash_debuginfo.ll\n    3: ; RUN: llvm-lto -thinlto -o %t-index %t-dst.bc %t-src.bc\n    4: ; RUN: opt -function-import -inline -summary-file %t-index.thinlto.bc %t-dst.bc -o %t.out\n    5  ; RUN: llvm-nm %t.out | FileCheck %s\n    6  \n    .\n   10  ; CHECK-NOT: bar\n   11  \n   12: ; ModuleID = 'test/ThinLTO/X86/crash_debuginfo.ll'\n   13: source_filename = \"test/ThinLTO/X86/crash_debuginfo.ll\"\n   14  target datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\n   15  target triple = \"x86_64-apple-macosx10.7.0\"\n\n/home/mw/llvm/test/ThinLTO/X86/deadstrip.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/deadstrip.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    4  \n    5: ; RUN: llvm-lto -exported-symbol=_main -thinlto-action=promote %t1.bc -thinlto-index=%t.index.bc -o - | llvm-lto -exported-symbol=_main -thinlto-action=internalize -thinlto-index %t.index.bc -thinlto-module-id=%t1.bc - -o - | llvm-dis -o - | FileCheck %s\n    6: ; RUN: llvm-lto -exported-symbol=_main -thinlto-action=promote %t2.bc -thinlto-index=%t.index.bc -o - | llvm-lto -exported-symbol=_main -thinlto-action=internalize -thinlto-index %t.index.bc -thinlto-module-id=%t2.bc - -o - | llvm-dis -o - | FileCheck %s --check-prefix=CHECK2\n    7  \n    8: ; RUN: llvm-lto -exported-symbol=_main -thinlto-action=run %t1.bc %t2.bc\n    9: ; RUN: llvm-nm %t1.bc.thinlto.o | FileCheck %s --check-prefix=CHECK-NM\n   10  \n   11  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.out -save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/debuginfo-compositetype-import.ll:\n    1  ; Test to ensure DICompositeType are imported as type declarations\n    2: ; for ThinLTO\n    3  \n    4  ; RUN: opt -module-summary %s -o %t1.bc\n    5  ; RUN: opt -module-summary %p/Inputs/debuginfo-compositetype-import.ll -o %t2.bc\n    6: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    7  \n    8  ; By default, composite types are imported as type declarations\n    9: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t.index.bc -o - | llvm-dis -o - | FileCheck %s\n   10  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.out -save-temps \\\n   11  ; RUN:   -r %t2.bc,main,plx \\\n   ..\n   20  \n   21  ; Ensure that full type definitions of composite types are imported if requested\n   22: ; RUN: llvm-lto -import-full-type-definitions -thinlto-action=import %t2.bc -thinlto-index=%t.index.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=FULL\n   23  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.out -save-temps \\\n   24  ; RUN:   -import-full-type-definitions \\\n\n/home/mw/llvm/test/ThinLTO/X86/debuginfo-cu-import.ll:\n    1  ; Test to ensure only the necessary DICompileUnit fields are imported\n    2: ; for ThinLTO\n    3  \n    4  ; RUN: opt -module-summary %s -o %t1.bc\n    5  ; RUN: opt -module-summary %p/Inputs/debuginfo-cu-import.ll -o %t2.bc\n    6: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    7  \n    8  ; Don't import enums, macros, retainedTypes or globals lists.\n    9  ; Only import local scope imported entities.\n   10: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t.index.bc -o - | llvm-dis -o - | FileCheck %s\n   11  ; CHECK-NOT: DICompileUnit{{.*}} enums:\n   12  ; CHECK-NOT: DICompileUnit{{.*}} macros:\n\n/home/mw/llvm/test/ThinLTO/X86/diagnostic-handler-remarks-with-hotness.ll:\n    5  ; with -lto-pass-remarks-with-hotness.\n    6  \n    7: ; RUN: llvm-lto -thinlto-action=run \\\n    8  ; RUN:          -lto-pass-remarks-output=%t.yaml \\\n    9  ; RUN:          -lto-pass-remarks-with-hotness \\\n\n/home/mw/llvm/test/ThinLTO/X86/diagnostic-handler-remarks.ll:\n    4  ; Optimization records are collected regardless of the diagnostic handler\n    5  ; RUN: rm -f %t.yaml.thin.0.yaml %t.yaml.thin.1.yaml\n    6: ; RUN: llvm-lto -thinlto-action=run \\\n    7  ; RUN:          -lto-pass-remarks-output=%t.yaml \\\n    8  ; RUN:          -exported-symbol _func2 \\\n\n/home/mw/llvm/test/ThinLTO/X86/dicompositetype-unique-alias.ll:\n    1  ; RUN: opt -module-summary -o %t1.bc %s\n    2  ; RUN: opt -module-summary -o %t2.bc %S/Inputs/dicompositetype-unique-alias.ll\n    3: ; RUN: llvm-lto --thinlto-action=run %t1.bc %t2.bc -thinlto-save-temps=%t3.\n    4  ; RUN: llvm-dis %t3.0.3.imported.bc -o - | FileCheck %s\n    5  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t --save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/dicompositetype-unique2.ll:\n    1  ; RUN: opt -module-summary -o %t1.bc %s\n    2  ; RUN: opt -module-summary -o %t2.bc %S/Inputs/dicompositetype-unique2.ll\n    3: ; RUN: llvm-lto --thinlto-action=run %t1.bc %t2.bc -thinlto-save-temps=%t3.\n    4  ; RUN: llvm-dis %t3.0.3.imported.bc -o - | FileCheck %s\n    5  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t --save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/distributed_import.ll:\n    3  ; Generate bitcode files with summary, as well as minimized bitcode without\n    4  ; the debug metadata for the thin link.\n    5: ; RUN: opt -thinlto-bc %s -thin-link-bitcode-file=%t1.thinlink.bc -o %t1.bc\n    6: ; RUN: opt -thinlto-bc %p/Inputs/distributed_import.ll -thin-link-bitcode-file=%t2.thinlink.bc -o %t2.bc\n    7  ; RUN: llvm-bcanalyzer -dump %t1.thinlink.bc | FileCheck --check-prefix=THINLINKBITCODE %s\n    8  \n    9  ; First perform the thin link on the normal bitcode file.\n   10  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.o -save-temps \\\n   11: ; RUN:     -thinlto-distributed-indexes \\\n   12  ; RUN:     -r=%t1.bc,g, \\\n   13  ; RUN:     -r=%t1.bc,analias, \\\n   ..\n   16  ; RUN:     -r=%t2.bc,analias,px \\\n   17  ; RUN:     -r=%t2.bc,aliasee,px\n   18: ; RUN: opt -function-import -import-all-index -enable-import-metadata -summary-file %t1.bc.thinlto.bc %t1.bc -o %t1.out\n   19: ; RUN: opt -function-import -import-all-index -summary-file %t2.bc.thinlto.bc %t2.bc -o %t2.out\n   20  ; RUN: llvm-dis -o - %t1.out | FileCheck %s --check-prefix=IMPORT\n   21  ; RUN: llvm-dis -o - %t2.out | FileCheck %s --check-prefix=EXPORT\n   22  \n   23  ; Save the generated index files.\n   24: ; RUN: cp %t1.bc.thinlto.bc %t1.bc.thinlto.bc.orig\n   25: ; RUN: cp %t2.bc.thinlto.bc %t2.bc.thinlto.bc.orig\n   26  \n   27  ; Copy the minimized bitcode to the regular bitcode path so the module\n   ..\n   35  ; Next perform the thin link on the minimized bitcode files, and compare dumps\n   36  ; of the resulting indexes to the above dumps to ensure they are identical.\n   37: ; RUN: rm -f %t1.bc.thinlto.bc %t2.bc.thinlto.bc\n   38  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.o -save-temps \\\n   39: ; RUN:     -thinlto-distributed-indexes \\\n   40  ; RUN:     -r=%t1.bc,g, \\\n   41  ; RUN:     -r=%t1.bc,analias, \\\n   ..\n   44  ; RUN:     -r=%t2.bc,analias,px \\\n   45  ; RUN:     -r=%t2.bc,aliasee,px\n   46: ; RUN: diff %t1.bc.thinlto.bc.orig %t1.bc.thinlto.bc\n   47: ; RUN: diff %t2.bc.thinlto.bc.orig %t2.bc.thinlto.bc\n   48  \n   49  ; Make sure importing occurs as expected\n   50  ; RUN: cp %t1.bc.sv %t1.bc\n   51  ; RUN: cp %t2.bc.sv %t2.bc\n   52: ; RUN: opt -function-import -import-all-index -enable-import-metadata -summary-file %t1.bc.thinlto.bc %t1.bc -o %t1.out\n   53: ; RUN: opt -function-import -import-all-index -summary-file %t2.bc.thinlto.bc %t2.bc -o %t2.out\n   54  ; RUN: llvm-dis -o - %t1.out | FileCheck %s --check-prefix=IMPORT\n   55  ; RUN: llvm-dis -o - %t2.out | FileCheck %s --check-prefix=EXPORT\n   56  \n   57: ; IMPORT: define available_externally i32 @g() !thinlto_src_module\n   58: ; IMPORT: define available_externally void @analias() !thinlto_src_module\n   59  ; EXPORT: @G.llvm.\n   60  \n\n/home/mw/llvm/test/ThinLTO/X86/distributed_indexes.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/distributed_indexes.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=distributedindexes -thinlto-index %t.index.bc %t1.bc %t2.bc\n    5: ; RUN: llvm-bcanalyzer -dump %t1.bc.thinlto.bc | FileCheck %s --check-prefix=BACKEND1\n    6: ; RUN: llvm-bcanalyzer -dump %t2.bc.thinlto.bc | FileCheck %s --check-prefix=BACKEND2\n    7  \n    8  ; The backend index for this module contains summaries from itself and\n\n/home/mw/llvm/test/ThinLTO/X86/drop-debug-info.ll:\n    1  ; RUN: opt -module-summary %s -o %t.bc\n    2: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t.bc %p/Inputs/drop-debug-info.bc\n    3  \n    4  ; The imported module has out-of-date debug information, let's make sure we can\n\n/home/mw/llvm/test/ThinLTO/X86/emit_imports.ll:\n    5  ; RUN: opt -module-summary %p/Inputs/empty.ll -o %t3.bc\n    6  ; RUN: rm -f %t3.bc.imports\n    7: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc %t2.bc %t3.bc\n    8: ; RUN: llvm-lto -thinlto-action=emitimports -thinlto-index %t.index.bc %t1.bc %t2.bc %t3.bc\n    9  \n   10  ; The imports file for this module contains the bitcode file for\n   ..\n   20  ; RUN: cat %t3.bc.imports | count 0\n   21  \n   22: ; RUN: rm -f %t1.thinlto.bc %t1.bc.imports\n   23: ; RUN: rm -f %t2.thinlto.bc %t2.bc.imports\n   24: ; RUN: rm -f %t3.bc.thinlto.bc %t3.bc.imports\n   25  ; RUN: llvm-lto2 run %t1.bc %t2.bc %t3.bc -o %t.o -save-temps \\\n   26: ; RUN:     -thinlto-distributed-indexes \\\n   27  ; RUN:     -r=%t1.bc,g, \\\n   28  ; RUN:     -r=%t1.bc,f,px \\\n   ..\n   39  \n   40  ; The index file should be created even for the input with an empty summary.\n   41: ; RUN: ls %t3.bc.thinlto.bc\n   42  \n   43  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/ThinLTO/X86/empty-module.ll:\n    2  \n    3  ; RUN: rm -f %t2.0\n    4: ; RUN: llvm-lto2 run  %t.bc -r %t.bc,foo,pl -o %t2 -thinlto-distributed-indexes\n    5  ; RUN: llvm-readobj -h %t2.0 | FileCheck %s\n    6  ; RUN: llvm-nm %t2.0 | count 0\n\n/home/mw/llvm/test/ThinLTO/X86/empty_module_with_cache.ll:\n    4  ; Verify that enabling caching is working, even if the module is empty\n    5  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n    6: ; RUN: llvm-lto -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache\n    7  ; RUN: ls %t.cache/llvmcache.timestamp\n    8  ; RUN: ls %t.cache | count 3\n    .\n   21  ; Verify that caching is disabled for module without hash\n   22  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   23: ; RUN: llvm-lto -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache\n   24  ; RUN: ls %t.cache/llvmcache.timestamp\n   25  ; RUN: ls %t.cache | count 1\n\n/home/mw/llvm/test/ThinLTO/X86/export.ll:\n    2  ; RUN: opt -module-summary %s -o %t1.bc\n    3  ; RUN: opt -module-summary %p/Inputs/export.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t1.bc %t2.bc\n    5  \n    6  ; Ensure statics are promoted/renamed correctly from this file.\n    7: ; RUN: llvm-lto -thinlto-action=promote %t1.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s\n    8  ; CHECK-DAG: @staticvar.llvm.0 = hidden global\n    9  ; CHECK-DAG: define hidden void @staticfunc.llvm.0\n\n/home/mw/llvm/test/ThinLTO/X86/funcimport-tbaa.ll:\n    4  ; RUN: opt -module-summary %s -o %t.bc -bitcode-mdindex-threshold=0 -disable-verify\n    5  ; RUN: opt -module-summary %p/Inputs/funcimport-tbaa.ll -o %t2.bc\n    6: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    7  \n    8  \n    9: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t3.bc -o - \\\n   10  ; RUN:  | llvm-dis -o - | FileCheck %s --check-prefix=IMPORTGLOB1\n   11  ; IMPORTGLOB1: define available_externally float @globalfunc1\n\n/home/mw/llvm/test/ThinLTO/X86/funcimport.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/funcimport.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6: ; RUN: llvm-lto -thinlto-index-stats %t3.bc | FileCheck %s -check-prefix=STATS\n    7  ; STATS: Index {{.*}} contains 24 nodes (13 functions, 3 alias, 8 globals) and 19 edges (8 refs and 11 calls)\n    8  \n    9  ; Ensure statics are promoted/renamed correctly from this file (all but\n   10  ; constant variable need promotion).\n   11: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=EXPORTSTATIC\n   12  ; EXPORTSTATIC-DAG: @staticvar.llvm.0 = hidden global\n   13  ; Eventually @staticconstvar can be exported as a copy and not promoted\n   ..\n   22  ; and that the associated linkonce function is not in the output, as it is\n   23  ; lazily linked and never referenced/materialized.\n   24: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=IMPORTGLOB1\n   25  ; IMPORTGLOB1-DAG: define available_externally void @globalfunc1\n   26  ; IMPORTGLOB1-DAG: declare void @weakalias\n   ..\n   33  \n   34  ; Verify that the optimizer run\n   35: ; RUN: llvm-lto -thinlto-action=optimize %t2.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=OPTIMIZED\n   36  ; OPTIMIZED: define i32 @main()\n   37  \n   38  ; Verify that the codegen run\n   39: ; RUN: llvm-lto -thinlto-action=codegen %t2.bc -o - | llvm-nm -o - | FileCheck %s --check-prefix=CODEGEN\n   40  ; CODEGEN: T _main\n   41  \n   42  ; Verify that all run together\n   43: ; RUN: llvm-lto -thinlto-action=run %t2.bc  %t.bc\n   44: ; RUN: llvm-nm -o - < %t.bc.thinlto.o | FileCheck %s --check-prefix=ALL\n   45: ; RUN: llvm-nm -o - < %t2.bc.thinlto.o | FileCheck %s --check-prefix=ALL2\n   46  ; ALL: T _callfuncptr\n   47  ; ALL2: T _main\n\n/home/mw/llvm/test/ThinLTO/X86/globals-import-const-fold.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/globals-import-cf-baz.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=thinlink %t1.bc %t2.bc -o %t3.index.bc\n    4  \n    5: ; RUN: llvm-lto -thinlto-action=import %t1.bc %t2.bc -thinlto-index=%t3.index.bc\n    6: ; RUN: llvm-dis %t1.bc.thinlto.imported.bc -o - | FileCheck --check-prefix=IMPORT %s\n    7: ; RUN: llvm-lto -thinlto-action=optimize %t1.bc.thinlto.imported.bc -o %t1.bc.thinlto.opt.bc\n    8: ; RUN: llvm-dis %t1.bc.thinlto.opt.bc -o - | FileCheck --check-prefix=OPTIMIZE %s\n    9  \n   10  ; IMPORT: @baz = available_externally local_unnamed_addr constant i32 10\n\n/home/mw/llvm/test/ThinLTO/X86/globals-import.ll:\n    7  ; RUN: opt -module-summary %p/Inputs/globals-import.ll -o %t2.bc\n    8  ; RUN: opt -module-summary %p/Inputs/globals-import.ll -o %t2b.bc\n    9: ; RUN: llvm-lto -thinlto-action=thinlink %t1.bc %t2.bc %t2b.bc -o %t3.index.bc\n   10  \n   11: ; RUN: llvm-lto -thinlto-action=import %t1.bc -thinlto-index=%t3.index.bc\n   12: ; RUN: llvm-dis %t1.bc.thinlto.imported.bc -o - | FileCheck --check-prefix=IMPORT %s\n   13: ; RUN: llvm-lto -thinlto-action=promote %t2.bc -thinlto-index=%t3.index.bc\n   14: ; RUN: llvm-lto -thinlto-action=promote %t2b.bc -thinlto-index=%t3.index.bc\n   15: ; RUN: llvm-dis %t2.bc.thinlto.promoted.bc -o - | FileCheck --check-prefix=PROMOTE1 %s\n   16: ; RUN: llvm-dis %t2b.bc.thinlto.promoted.bc -o - | FileCheck --check-prefix=PROMOTE2 %s\n   17  \n   18  ; IMPORT: @baz.llvm.0 = available_externally hidden constant i32 10, align 4\n\n/home/mw/llvm/test/ThinLTO/X86/import_opaque_type.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/import_opaque_type.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6  ; Check that we import correctly the imported type to replace the opaque one here\n    7: ; RUN: llvm-lto -thinlto-action=import %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s\n    8  \n    9  \n\n/home/mw/llvm/test/ThinLTO/X86/internalize.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t1.bc\n    3: ; RUN: llvm-lto -thinlto-action=internalize -thinlto-index %t.index.bc %t1.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=REGULAR\n    4: ; RUN: llvm-lto -thinlto-action=internalize -thinlto-index %t.index.bc %t1.bc -o -  --exported-symbol=foo | llvm-dis -o - | FileCheck %s --check-prefix=INTERNALIZE\n    5  \n    6  ; RUN: llvm-lto2 run %t1.bc -o %t.o -save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/lazyload_metadata.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc -bitcode-mdindex-threshold=0\n    3  ; RUN: opt -module-summary %p/Inputs/lazyload_metadata.ll -o %t2.bc -bitcode-mdindex-threshold=0\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  ; REQUIRES: asserts\n    6  \n    .\n    8  ; metadata for @globalfunc2 and @globalfunc3\n    9  \n   10: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t3.bc \\\n   11  ; RUN:          -o /dev/null -stats \\\n   12  ; RUN:  2>&1 | FileCheck %s -check-prefix=LAZY\n   ..\n   14  ; LAZY: 2 bitcode-reader  - Number of MDStrings loaded\n   15  \n   16: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t3.bc \\\n   17  ; RUN:          -o /dev/null -disable-ondemand-mds-loading -stats \\\n   18  ; RUN:  2>&1 | FileCheck %s -check-prefix=NOTLAZY\n\n/home/mw/llvm/test/ThinLTO/X86/linkonce_aliasee_ref_import.ll:\n    3  \n    4  ; Import with instr limit to ensure only foo imported.\n    5: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=main -import-instr-limit=5 %t1.bc %t2.bc\n    6: ; RUN: llvm-nm -o - < %t1.bc.thinlto.o | FileCheck %s --check-prefix=NM1\n    7: ; RUN: llvm-nm -o - < %t2.bc.thinlto.o | FileCheck %s --check-prefix=NM2\n    8  \n    9  ; Import with instr limit to ensure only foo imported.\n   ..\n   16  ; RUN:    -r=%t2.bc,foo,l \\\n   17  ; RUN:    -import-instr-limit=5\n   18: ; RUN: llvm-nm -o - < %t1.bc.thinlto.o | FileCheck %s --check-prefix=NM1\n   19: ; RUN: llvm-nm -o - < %t2.bc.thinlto.o | FileCheck %s --check-prefix=NM2\n   20  \n   21  ; Check that we converted baz.clone to a weak\n\n/home/mw/llvm/test/ThinLTO/X86/linkonce_odr_unnamed_addr.ll:\n    4  ; RUN: opt -module-summary %s -o %t.bc\n    5  ; RUN: opt -module-summary %s -o %t2.bc\n    6: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    7: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s\n    8  \n    9  ; CHECK: @linkonceodrunnamed = weak_odr hidden unnamed_addr constant i32 0\n\n/home/mw/llvm/test/ThinLTO/X86/linkonce_resolution_comdat.ll:\n    4  ; RUN: opt -module-summary %s -o %t1.bc\n    5  ; RUN: opt -module-summary %p/Inputs/linkonce_resolution_comdat.ll -o %t2.bc\n    6: ; RUN: llvm-lto -thinlto-action=run %t1.bc %t2.bc -exported-symbol=f -exported-symbol=g -thinlto-save-temps=%t3.\n    7  \n    8  ; RUN: llvm-dis %t3.0.3.imported.bc -o - | FileCheck %s --check-prefix=IMPORT1\n    .\n   14  ; IMPORT2: define available_externally i32 @f(i8*) unnamed_addr {\n   15  \n   16: ; RUN: llvm-nm -o - < %t1.bc.thinlto.o | FileCheck %s --check-prefix=NM1\n   17  ; NM1: W f\n   18  \n   19: ; RUN: llvm-nm -o - < %t2.bc.thinlto.o | FileCheck %s --check-prefix=NM2\n   20  ; f() would have been turned into available_externally since it is preempted,\n   21  ; and inlined into g()\n\n/home/mw/llvm/test/ThinLTO/X86/llvm.used.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/llvm.used.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6  \n    7: ; RUN: llvm-lto -thinlto-action=import %t2.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s\n    8  ; CHECK: define available_externally void @globalfunc\n    9  \n\n/home/mw/llvm/test/ThinLTO/X86/local_name_conflict.ll:\n    7  ; RUN: opt -module-summary -module-hash %p/Inputs/local_name_conflict1.ll -o %t2.bc\n    8  ; RUN: opt -module-summary -module-hash %p/Inputs/local_name_conflict2.ll -o %t3.bc\n    9: ; RUN: llvm-lto -thinlto-action=thinlink -o %t4.bc %t.bc %t2.bc %t3.bc\n   10  \n   11  ; This module will import b() which should cause the copy of foo from\n   12  ; that module (%t3.bc) to be imported. Check that the imported reference's\n   13  ; promoted name matches the imported copy.\n   14: ; RUN: llvm-lto -thinlto-action=import %t.bc -thinlto-index=%t4.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=IMPORT\n   15  ; IMPORT: call i32 @foo.llvm.[[HASH:[0-9]+]]\n   16  ; IMPORT: define available_externally hidden i32 @foo.llvm.[[HASH]]()\n   17  \n   18  ; The copy in %t2.bc should not be exported/promoted/renamed\n   19: ; RUN: llvm-lto -thinlto-action=promote %t2.bc -thinlto-index=%t4.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=NOEXPORTSTATIC\n   20  ; NOEXPORTSTATIC: define internal i32 @foo()\n   21  \n   22  ; Make sure foo is promoted and renamed without complaint in %t3.bc.\n   23: ; RUN: llvm-lto -thinlto-action=promote %t3.bc -thinlto-index=%t4.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=EXPORTSTATIC\n   24  ; EXPORTSTATIC: define hidden i32 @foo.llvm.\n   25  \n\n/home/mw/llvm/test/ThinLTO/X86/merge-triple.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.bc\n    2  ; RUN: opt -module-summary %p/Inputs/merge-triple.ll -o %t2.bc\n    3: ; RUN: llvm-lto -thinlto-action=optimize %t1.bc %t2.bc\n    4: ; RUN: llvm-dis < %t1.bc.thinlto.imported.bc | FileCheck %s --check-prefix=CHECK1\n    5: ; RUN: llvm-dis < %t2.bc.thinlto.imported.bc | FileCheck %s --check-prefix=CHECK2\n    6  \n    7  target triple = \"x86_64-apple-macosx10.12.0\"\n\n/home/mw/llvm/test/ThinLTO/X86/module_asm2.ll:\n    5  ; RUN: opt -module-summary %p/Inputs/module_asm2.ll -o %t2.bc\n    6  \n    7: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=main -exported-symbol=func1 -exported-symbol=func2 -exported-symbol=func3 -exported-symbol=callglobalfunc -exported-symbol=callweakfunc %t1.bc %t2.bc\n    8: ; RUN:  llvm-nm %t1.bc.thinlto.o | FileCheck  %s --check-prefix=NM0\n    9: ; RUN:  llvm-nm %t2.bc.thinlto.o | FileCheck  %s --check-prefix=NM1\n   10  \n   11  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.o -save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/module_asm_glob.ll:\n    2  ; RUN: opt -module-summary %p/Inputs/module_asm.ll -o %t2.bc\n    3  \n    4: ; RUN: llvm-lto -thinlto-action=run -exported-symbol=main %t1.bc %t2.bc\n    5: ; RUN: llvm-nm %t1.bc.thinlto.o | FileCheck  %s --check-prefix=NM0\n    6: ; RUN: llvm-nm %t2.bc.thinlto.o | FileCheck  %s --check-prefix=NM1\n    7  \n    8  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.o -save-temps \\\n\n/home/mw/llvm/test/ThinLTO/X86/noinline.ll:\n    1: ; This test checks that ThinLTO doesn't try to import noinline function\n    2  ; which, when takes place, causes promotion of its callee.\n    3  ; RUN: opt -module-summary %s -o %t1.bc\n\n/home/mw/llvm/test/ThinLTO/X86/prefix_replace.ll:\n    5  ; Ensure that there is no existing file at the new path, so we properly\n    6  ; test the creation of the new file there.\n    7: ; RUN: rm -f %t/newpath/prefix_replace.o.thinlto.bc\n    8  \n    9: ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t/oldpath/prefix_replace.o\n   10: ; RUN: llvm-lto -thinlto-action=distributedindexes -thinlto-prefix-replace=\"%t/oldpath/;%t/newpath/\" -thinlto-index %t.index.bc %t/oldpath/prefix_replace.o\n   11  \n   12: ; RUN: ls %t/newpath/prefix_replace.o.thinlto.bc\n   13  \n   14  define void @f() {\n\n/home/mw/llvm/test/ThinLTO/X86/referenced_by_constant.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/referenced_by_constant.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6  ; Check the import side: we currently only import bar() (with a future\n    .\n    9  ; cause @referencedbyglobal and @localreferencedbyglobal to be exported\n   10  ; and promoted).\n   11: ; RUN: llvm-lto -thinlto-action=import %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o -   | FileCheck %s --check-prefix=IMPORT\n   12  ; IMPORT: @someglobal.llvm.0 = external hidden unnamed_addr constant\n   13  ; IMPORT: @someglobal2.llvm.0 = external hidden unnamed_addr constant\n   ..\n   16  ; Check the export side: we currently only export bar(), which causes\n   17  ; @someglobal and @someglobal2 to be promoted (see above).\n   18: ; RUN: llvm-lto -thinlto-action=promote %t2.bc -thinlto-index=%t3.bc -o - | llvm-dis -o -   | FileCheck %s --check-prefix=EXPORT\n   19  ; EXPORT: @someglobal.llvm.0 = hidden unnamed_addr constant\n   20  ; EXPORT: @someglobal2.llvm.0 = hidden unnamed_addr constant\n\n/home/mw/llvm/test/ThinLTO/X86/save_objects.ll:\n    4  ; Check that the generating object files is working without cache\n    5  ; RUN: rm -Rf %t.thin.out\n    6: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main \n    7  ; RUN: ls %t.thin.out | count 2\n    8  \n    .\n   10  ; RUN: rm -Rf %t.thin.out\n   11  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   12: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache \n   13  ; RUN: ls %t.thin.out | count 2\n   14  ; RUN: ls %t.cache | count 3\n   ..\n   17  ; RUN: rm -Rf %t.thin.out\n   18  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   19: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache \n   20  ; RUN: ls %t.thin.out | count 2\n   21  ; RUN: ls %t.cache | count 3\n\n/home/mw/llvm/test/ThinLTO/X86/section.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/section.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6  ; Check that we don't promote 'var_with_section'\n    7: ; RUN: llvm-lto -thinlto-action=promote %t2.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=PROMOTE\n    8  ; PROMOTE: @var_with_section = internal global i32 0, section \"some_section\"\n    9  \n   10: ; RUN: llvm-lto -thinlto-action=import %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=IMPORT\n   11  ; Check that section prevent import of @reference_gv_with_section.\n   12  ; IMPORT: declare void @reference_gv_with_section()\n\n/home/mw/llvm/test/ThinLTO/X86/tli-nobuiltin.ll:\n   12  ; LTO-FREESTANDING: fprintf\n   13  \n   14: ; Same with ThinLTO now.\n   15  ; RUN: opt -module-hash -module-summary %s -o %t.bc\n   16  \n   17  ; Regular run: expects fprintf to be turned into fwrite\n   18: ; RUN: llvm-lto -exported-symbol=_foo -thinlto-action=run %t.bc\n   19: ; RUN: llvm-nm %t.bc.thinlto.o | FileCheck %s --check-prefix=ThinLTO\n   20: ; ThinLTO: fwrite\n   21  \n   22  ; Freestanding run: expects fprintf to NOT be turned into fwrite\n   23: ; RUN: llvm-lto -lto-freestanding -exported-symbol=_foo -thinlto-action=run %t.bc\n   24: ; RUN: llvm-nm %t.bc.thinlto.o | FileCheck %s --check-prefix=ThinLTO-FREESTANDING\n   25: ; ThinLTO-FREESTANDING: fprintf\n   26  \n   27  \n\n/home/mw/llvm/test/ThinLTO/X86/weak_resolution.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/weak_resolution.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.bc %t.bc %t2.bc\n    5  \n    6  ; Verify that prevailing weak for linker symbol is selected across modules,\n    7  ; non-prevailing ODR are not kept when possible, but non-ODR non-prevailing\n    8  ; are not affected.\n    9: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=MOD1\n   10: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t3.bc -exported-symbol=linkoncefunc -o - | llvm-lto -thinlto-action=internalize -thinlto-module-id=%t.bc - -thinlto-index=%t3.bc -exported-symbol=linkoncefunc -o - | llvm-dis -o - | FileCheck %s --check-prefix=MOD1-INT\n   11: ; RUN: llvm-lto -thinlto-action=promote %t2.bc -thinlto-index=%t3.bc -o - | llvm-dis -o - | FileCheck %s --check-prefix=MOD2\n   12  ; When exported, we always preserve a linkonce\n   13: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t3.bc -o - --exported-symbol=linkonceodrfuncInSingleModule | llvm-dis -o - | FileCheck %s --check-prefix=EXPORTED\n   14  \n   15  target datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/ThinLTO/X86/weak_resolution_single.ll:\n    1  ; RUN: opt -module-summary %s -o %t.bc\n    2: ; RUN: llvm-lto -thinlto-action=thinlink -o %t2.bc %t.bc\n    3  \n    4: ; RUN: llvm-lto -thinlto-action=promote %t.bc -thinlto-index=%t2.bc -exported-symbol=foo -o - | llvm-lto -thinlto-action=internalize -thinlto-module-id=%t.bc - -thinlto-index=%t2.bc -exported-symbol=foo -o - | llvm-dis -o - | FileCheck %s\n    5  \n    6  ; CHECK: define weak_odr void @foo()\n\n/home/mw/llvm/test/ThinLTO/X86/Inputs/crash_debuginfo.ll:\n    1: ; ModuleID = 'test/ThinLTO/X86/Inputs/crash_debuginfo.ll'\n    2  source_filename = \"src.bc\"\n    3  target datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/Transforms/CrossDSOCFI/cfi_functions.ll:\n    1: ; Test that types referenced in ThinLTO-style !cfi.functions are known to __cfi_check.\n    2  ; RUN: opt -S -cross-dso-cfi < %s | FileCheck %s\n    3  ; RUN: opt -S -passes=cross-dso-cfi < %s | FileCheck %s\n\n/home/mw/llvm/test/Transforms/FunctionImport/adjustable_threshold.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/adjustable_threshold.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Test import with default progressive instruction factor\n    7: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=10 -S | FileCheck %s --check-prefix=CHECK --check-prefix=INSTLIM-DEFAULT\n    8  ; INSTLIM-DEFAULT: call void @staticfunc2.llvm.\n    9  \n   10  ; Test import with a reduced progressive instruction factor\n   11: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=10 -import-instr-evolution-factor=0.5 -S | FileCheck %s --check-prefix=CHECK --check-prefix=INSTLIM-PROGRESSIVE\n   12  ; INSTLIM-PROGRESSIVE-NOT: call void @staticfunc\n   13  \n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/funcimport.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -print-summary-global-ids -o %t3 %t.bc %t2.bc 2>&1 | FileCheck %s --check-prefix=GUID\n    5  \n    6  ; Do the import now\n    7: ; RUN: opt -function-import -stats -print-imports -enable-import-metadata -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=CHECK --check-prefix=INSTLIMDEF\n    8  ; Try again with new pass manager\n    9: ; RUN: opt -passes='function-import' -stats -print-imports -enable-import-metadata -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=CHECK --check-prefix=INSTLIMDEF\n   10: ; RUN: opt -passes='function-import' -debug-only=function-import -enable-import-metadata -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=DUMP\n   11  ; \"-stats\" and \"-debug-only\" require +Asserts.\n   12  ; REQUIRES: asserts\n   13  \n   14  ; Test import with smaller instruction limit\n   15: ; RUN: opt -function-import -enable-import-metadata  -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=5 -S | FileCheck %s --check-prefix=CHECK --check-prefix=INSTLIM5\n   16  ; INSTLIM5-NOT: @staticfunc.llvm.\n   17  \n   ..\n   48  \n   49  ; INSTLIMDEF-DAG: Import referencestatics\n   50: ; INSTLIMDEF-DAG: define available_externally i32 @referencestatics(i32 %i) !thinlto_src_module !0 {\n   51  ; INSTLIM5-DAG: declare i32 @referencestatics(...)\n   52  declare i32 @referencestatics(...) #1\n   ..\n   57  ; INSTLIMDEF-DAG: Import staticfunc\n   58  ; INSTLIMDEF-DAG: %call = call i32 @staticfunc.llvm.\n   59: ; INSTLIMDEF-DAG: define available_externally hidden i32 @staticfunc.llvm.{{.*}} !thinlto_src_module !0 {\n   60  \n   61  ; INSTLIMDEF-DAG: Import referenceglobals\n   62: ; CHECK-DAG: define available_externally i32 @referenceglobals(i32 %i) !thinlto_src_module !0 {\n   63  declare i32 @referenceglobals(...) #1\n   64  \n   ..\n   66  ; should in turn be imported.\n   67  ; INSTLIMDEF-DAG: Import globalfunc1\n   68: ; CHECK-DAG: define available_externally void @globalfunc1() !thinlto_src_module !0\n   69  \n   70  ; INSTLIMDEF-DAG: Import referencecommon\n   71: ; CHECK-DAG: define available_externally i32 @referencecommon(i32 %i) !thinlto_src_module !0 {\n   72  declare i32 @referencecommon(...) #1\n   73  \n   74  ; INSTLIMDEF-DAG: Import setfuncptr\n   75: ; CHECK-DAG: define available_externally void @setfuncptr() !thinlto_src_module !0 {\n   76  declare void @setfuncptr(...) #1\n   77  \n   78  ; INSTLIMDEF-DAG: Import callfuncptr\n   79: ; CHECK-DAG: define available_externally void @callfuncptr() !thinlto_src_module !0 {\n   80  declare void @callfuncptr(...) #1\n   81  \n   ..\n   88  ; Ensure that @referencelargelinkonce definition is pulled in, but later we\n   89  ; also check that the linkonceodr function is not.\n   90: ; CHECK-DAG: define available_externally void @referencelargelinkonce() !thinlto_src_module !0 {\n   91  ; INSTLIM5-DAG: declare void @linkonceodr()\n   92  declare void @referencelargelinkonce(...)\n   ..\n  101  \n  102  ; INSTLIMDEF-DAG: Import funcwithpersonality\n  103: ; INSTLIMDEF-DAG: define available_externally hidden void @funcwithpersonality.llvm.{{.*}}() personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) !thinlto_src_module !0 {\n  104  ; INSTLIM5-DAG: declare hidden void @funcwithpersonality.llvm.{{.*}}()\n  105  \n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_alias.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/funcimport_alias.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Do the import now. Ensures that the importer handles an external call\n    7  ; from imported callanalias() to a function that is defined already in\n    8  ; the dest module, but as an alias.\n    9: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -S | FileCheck %s\n   10  \n   11  define i32 @main() #0 {\n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_cutoff.ll:\n    7  ; RUN: opt -module-summary %s -o %t.bc\n    8  ; RUN: opt -module-summary %p/Inputs/funcimport_cutoff.ll -o %t2.bc\n    9: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   10  \n   11  ; First do with default options, which should import both foo and bar\n   12: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORT\n   13  \n   14  ; Next try to restrict to 1 import. This should import just foo.\n   15: ; RUN: opt -import-cutoff=1 -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORT1\n   16  \n   17  ; Next try to restrict to 0 imports. This should not import.\n   18: ; RUN: opt -import-cutoff=0 -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=NOIMPORT\n   19  \n   20  define i32 @main() {\n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_debug.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/funcimport_debug.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Do the import now and confirm that metadata is linked for imported function.\n    7: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -S | FileCheck %s\n    8  \n    9  ; CHECK: define available_externally void @func()\n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_forcecold.ll:\n    8  ; RUN: opt -module-summary %s -o %t.bc\n    9  ; RUN: opt -module-summary %p/Inputs/funcimport_forcecold.ll -o %t2.bc\n   10: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   11: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORT\n   12  \n   13  ; Next rebuild caller module summary with non-critical edges forced cold (which\n   ..\n   15  ; Make sure we don't import.\n   16  ; RUN: opt -force-summary-edges-cold=all-non-critical -module-summary %s -o %t.bc\n   17: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   18: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=NOIMPORT\n   19  \n   20  ; Next rebuild caller module summary with all edges forced cold.\n   21  ; Make sure we don't import.\n   22  ; RUN: opt -force-summary-edges-cold=all -module-summary %s -o %t.bc\n   23: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   24: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=NOIMPORT\n   25  \n   26  define i32 @main() {\n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_forcecold_samplepgo.ll:\n    8  ; RUN: opt -module-summary %s -o %t.bc\n    9  ; RUN: opt -module-summary %p/Inputs/funcimport_forcecold.ll -o %t2.bc\n   10: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   11: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORT\n   12  \n   13  ; Next rebuild caller module summary with only non-critical edges forced cold,\n   14  ; which should still import in this case.\n   15  ; RUN: opt -force-summary-edges-cold=all-non-critical -module-summary %s -o %t.bc\n   16: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   17: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=IMPORT\n   18  \n   19  ; Next rebuild caller module summary with all edges forced cold.\n   20  ; Make sure we don't import.\n   21  ; RUN: opt -force-summary-edges-cold=all -module-summary %s -o %t.bc\n   22: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n   23: ; RUN: opt -function-import -stats -print-imports -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s --check-prefix=NOIMPORT\n   24  \n   25  define i32 @main() !prof !1 {\n\n/home/mw/llvm/test/Transforms/FunctionImport/funcimport_var.ll:\n    3  ; RUN: opt -module-summary %s -o %t.bc\n    4  ; RUN: opt -module-summary %p/Inputs/funcimport_var2.ll -o %t2.bc\n    5: ; RUN: llvm-lto -thinlto -thinlto-action=thinlink -o %t3 %t.bc %t2.bc\n    6: ; RUN: llvm-lto -thinlto -thinlto-action=import -thinlto-index=%t3 %t.bc %t2.bc\n    7: ; RUN: llvm-lto -thinlto -thinlto-action=run %t.bc %t2.bc\n    8: ; RUN: llvm-nm %t.bc.thinlto.o | FileCheck %s\n    9  ; RUN: llvm-lto2 run %t.bc %t2.bc -o %t.out \\\n   10  ; RUN:   -r %t.bc,_Z4LinkPKcS0_,plx \\\n\n/home/mw/llvm/test/Transforms/FunctionImport/hotness_based_import.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/hotness_based_import.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Test import with default hot multiplier (3) and default hot-evolution-factor (1.0)\n    7: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-DEFAULT\n    8: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S -import-hot-multiplier=3.0 -import-cold-multiplier=0.0 | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-DEFAULT\n    9: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S -import-hot-multiplier=3.0 | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-DEFAULT\n   10: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S -import-hot-multiplier=3.0 -import-instr-evolution-factor=0.0 | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-DEFAULT\n   11: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S -import-hot-multiplier=3.0 -import-hot-evolution-factor=1.0 | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-DEFAULT\n   12  ; HOT-DEFAULT-DAG: define available_externally void @hot1()\n   13  ; HOT-DEFAULT-DAG: define available_externally void @hot2()\n   ..\n   25  ; This one tests if we decay threshold for hot callsites. With hot-evolution-factor of 0\n   26  ; we should not import any of calledFromHot functions\n   27: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 --S -import-hot-multiplier=3.0 -import-hot-evolution-factor=0.0 | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-EVOLUTION\n   28  ; HOT-EVOLUTION-DAG: define available_externally void @hot1()\n   29  ; HOT-EVOLUTION-DAG: define available_externally void @hot2()\n   ..\n   38  \n   39  ; Test import with hot multiplier 1.0 - treat hot callsites as normal.\n   40: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 -import-hot-multiplier=1.0 --S | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-ONE\n   41  ; HOT-ONE-DAG: define available_externally void @hot1()\n   42  ; HOT-ONE-DAG: define available_externally void @none1()\n   ..\n   48  ; HOT-ONE-NOT: define available_externally void @cold2()\n   49  \n   50: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=1 -import-hot-multiplier=1.0 -import-cold-multiplier=1.0 --S | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-COLD-ONE\n   51  ; HOT-COLD-ONE-DAG: define available_externally void @hot1()\n   52  ; HOT-COLD-ONE-DAG: define available_externally void @cold()\n   ..\n   59  \n   60  ; Test import with hot multiplier 0.0 and high threshold - don't import functions called from hot callsite.\n   61: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=10 -import-hot-multiplier=0.0 -import-cold-multiplier=1.0 --S | FileCheck %s --check-prefix=CHECK --check-prefix=HOT-ZERO\n   62  ; HOT-ZERO-DAG: define available_externally void @cold()\n   63  ; HOT-ZERO-DAG: define available_externally void @none1()\n   ..\n   74  \n   75  \n   76: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   77  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   78  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Transforms/FunctionImport/hotness_based_import2.ll:\n    3  ; RUN: opt -module-summary %s -o %t.bc\n    4  ; RUN: opt -module-summary %p/Inputs/hotness_based_import2.ll -o %t2.bc\n    5: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    6  \n    7  ; Teset with limit set to 10 and multipliers set to 1. Since cold call to\n    .\n   10  ; encounter it again from hot path, we re-enqueue with higher non-decayed\n   11  ; threshold which will allow it to be imported.\n   12: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -import-instr-limit=10 -import-hot-multiplier=1.0 -import-cold-multiplier=1.0 -S | FileCheck %s --check-prefix=CHECK\n   13  ; CHECK-DAG: define available_externally void @hot()\n   14  ; CHECK-DAG: define available_externally void @calledFromHot()\n   15  \n   16: ; ModuleID = 'thinlto-function-summary-callgraph.ll'\n   17  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   18  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Transforms/FunctionImport/inlineasm.ll:\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3  ; RUN: opt -module-summary %p/Inputs/inlineasm.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Attempt the import now, ensure below that file containing inline assembly\n    7  ; is not imported from. Otherwise we would need to promote its local variable\n    8  ; used in the inline assembly, which would not see the rename.\n    9: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -S 2>&1 | FileCheck %s\n   10  \n   11  define i32 @main() #0 {\n\n/home/mw/llvm/test/Transforms/FunctionImport/Inputs/hotness_based_import.ll:\n    1: ; ModuleID = 'thinlto-function-summary-callgraph-profile-summary2.ll'\n    2  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    3  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Transforms/FunctionImport/Inputs/hotness_based_import2.ll:\n    1: ; ModuleID = 'thinlto-function-summary-callgraph-profile-summary2.ll'\n    2  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    3  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/Transforms/Inline/inline_stats.ll:\n   39  declare void @external_decl()\n   40  \n   41: define void @external1() alwaysinline !thinlto_src_module !0 {\n   42      call fastcc void @internal2()\n   43      call fastcc void @external2();\n   ..\n   46  }\n   47  \n   48: define void @external2() alwaysinline !thinlto_src_module !1 {\n   49      ret void\n   50  }\n   51  \n   52: define void @external3() alwaysinline !thinlto_src_module !1 {\n   53      ret void\n   54  }\n   55  \n   56: define void @external4() !thinlto_src_module !1 {\n   57      call fastcc void @external1()\n   58      call fastcc void @external2()\n   ..\n   60  }\n   61  \n   62: define void @external5() !thinlto_src_module !1 {\n   63      ret void\n   64  }\n   ..\n   66  ; Assume big piece of code here. This function won't be inlined, so all the\n   67  ; inlined function it will have won't affect real inlines.\n   68: define void @external_big() noinline !thinlto_src_module !1 {\n   69  ; CHECK-NOT: call fastcc void @internal2()\n   70      call fastcc void @internal2()\n   ..\n   82  \n   83  ; It should not be imported, but it should not break anything.\n   84: define void @external_notcalled() !thinlto_src_module !0 {\n   85      call void @external_notcalled()\n   86      ret void\n\n/home/mw/llvm/test/Transforms/NameAnonGlobals/rename.ll:\n    1  ; RUN: opt -S -name-anon-globals < %s | FileCheck %s\n    2: ; RUN: opt -prepare-for-thinlto -O0 -module-summary -o %t.bc < %s\n    3  \n    4  \n\n/home/mw/llvm/test/Transforms/PGOProfile/thinlto_indirect_call_promotion.ll:\n    1  ; Do setup work for all below tests: generate bitcode and combined index\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_indirect_call_promotion.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -o %t4.bc -print-imports 2>&1 | FileCheck %s --check-prefix=IMPORTS\n    7  ; IMPORTS-DAG: Import a\n    8  ; IMPORTS-DAG: Import c\n\n/home/mw/llvm/test/Transforms/PGOProfile/thinlto_samplepgo_icp.ll:\n    1  ; Do setup work for all below tests: generate bitcode and combined index\n    2  ; RUN: opt -module-summary %s -o %t.bc\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_samplepgo_icp.ll -o %t2.bc\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.bc %t2.bc\n    5  \n    6  ; Checks if calls to static target functions are properly imported and promoted\n    7  ; by ICP. Note that the GUID in the profile is from the oroginal name.\n    8: ; RUN: opt -function-import -summary-file %t3.thinlto.bc %t.bc -o %t4.bc -print-imports 2>&1 | FileCheck %s --check-prefix=IMPORTS\n    9  ; IMPORTS: Import _ZL3foov.llvm.0\n   10  ; RUN: opt %t4.bc -icp-lto -pgo-icall-prom -S | FileCheck %s --check-prefix=ICALL-PROM\n\n/home/mw/llvm/test/Transforms/PGOProfile/thinlto_samplepgo_icp2.ll:\n    1  ; Checks if indirect calls to static target functions that are actually\n    2  ; dead in the new binary target (due to a profile collected from a slightly\n    3: ; different binary) are properly traversed during ThinLTO liveness analysis.\n    4  ; If the liveness analysis is changed to ignore indirect edges and the\n    5  ; importer is changed to check liveness before importing, this test will\n    .\n   11  ; Do setup work for all below tests: generate bitcode and combined index\n   12  ; RUN: opt -module-summary %s -o %t.bc\n   13: ; RUN: opt -module-summary %p/Inputs/thinlto_samplepgo_icp2a.ll -o %t2a.bc\n   14: ; RUN: opt -module-summary %p/Inputs/thinlto_samplepgo_icp2b.ll -o %t2b.bc\n   15  \n   16  ; Use -import-instr-limit=5 so that we don't import _ZL3barv, which would\n\n/home/mw/llvm/test/Transforms/PGOProfile/thinlto_samplepgo_icp3.ll:\n    3  ; Do setup work for all below tests: generate bitcode and combined index\n    4  ; RUN: opt -module-summary %s -o %t.bc\n    5: ; RUN: opt -module-summary %p/Inputs/thinlto_samplepgo_icp3.ll -o %t2.bc\n    6  \n    7  ; Test to make sure importing and dead stripping works in the\n    8  ; case where the target is a local function that also indirectly calls itself.\n    9: ; RUN: llvm-lto2 run -thinlto-threads=1 -save-temps -o %t3 %t.bc %t2.bc -r %t.bc,fptr,plx -r %t.bc,main,plx -r %t2.bc,_Z6updatei,pl -r %t2.bc,fptr,l -print-imports 2>&1 | FileCheck %s --check-prefix=IMPORTS\n   10  ; Make sure we import the promted indirectly called target\n   11  ; IMPORTS: Import _ZL3foov.llvm.0\n\n/home/mw/llvm/test/Transforms/PGOProfile/Inputs/thinlto_indirect_call_promotion.ll:\n    2  target triple = \"x86_64-unknown-linux-gnu\"\n    3  \n    4: source_filename = \"thinlto_indirect_call_promotion.c\"\n    5  \n    6  define void @a() {\n    .\n   14  }\n   15  \n   16: !1 = !{!\"thinlto_indirect_call_promotion.c:c\"}\n   17  \n\n/home/mw/llvm/test/Transforms/SampleProfile/function_metadata.ll:\n    1: ; RUN: opt < %s -passes='thinlto-pre-link<O2>' -pgo-kind=new-pm-pgo-sample-use-pipeline -profile-file=%S/Inputs/function_metadata.prof -S | FileCheck %s\n    2  \n    3  ; Tests whether the functions in the inline stack are added to the\n\n/home/mw/llvm/test/Transforms/SimplifyCFG/critedge-assume.ll:\n    1: ; RUN: opt -o %t %s -instcombine -simplifycfg -thinlto-bc -verify-assumption-cache\n    2  ; RUN: llvm-dis -o - %t | FileCheck %s\n    3  \n    .\n    8  ; assumption cache is verified after simplifycfg has run. To satisfy 1, we\n    9  ; run the instcombine pass first in our pipeline. To satisfy 2, we use the\n   10: ; ThinLTOBitcodeWriter pass to write bitcode (that pass uses the assumption\n   11  ; cache). That ensures that the pass manager does not call releaseMemory()\n   12  ; on the AssumptionCacheTracker before the end of the pipeline, which would\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/circular-reference.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=M0 %s\n    3  ; RUN: llvm-modextract -b -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=M1 %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/comdat.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=THIN %s\n    3  ; RUN: llvm-modextract -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=MERGED %s\n    .\n   18  \n   19  ; Comdat with two members without type metadata. All comdat members live in\n   20: ; the ThinLTO module and no renaming needs to take place.\n   21  ; THIN: $nt = comdat any\n   22  $nt = comdat any\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/filter-alias.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=CHECK0 %s\n    3  ; RUN: llvm-modextract -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=CHECK1 %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/function-alias.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=CHECK1 %s\n    3  \n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/new-pm.ll:\n    1: ; RUN: opt -passes='no-op-module' -debug-pass-manager -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s 2>&1 | FileCheck %s --check-prefix=DEBUG_PM\n    2  ; RUN: llvm-bcanalyzer -dump %t2 | FileCheck %s --check-prefix=BITCODE\n    3  \n    4: ; DEBUG_PM: ThinLTOBitcodeWriterPass\n    5  ; BITCODE: Foo\n    6  \n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/no-type-md.ll:\n    1  ; Generate bitcode files with summary, as well as minimized bitcode without\n    2  ; the debug metadata for the thin link.\n    3: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t.thinlink.bc -o %t.bc %s\n    4  ; RUN: llvm-dis -o - %t.bc | FileCheck %s\n    5  ; RUN: llvm-bcanalyzer -dump %t.bc | FileCheck --check-prefix=BCA %s\n    .\n    7  ; Make sure the combined index files produced by both the normal and the\n    8  ; thin link bitcode files are identical\n    9: ; RUN: llvm-lto -thinlto -o %t3 %t.bc\n   10  ; Copy the minimized bitcode to the regular bitcode path so the module\n   11  ; paths in the index are the same (save and restore the regular bitcode\n   ..\n   13  ; RUN: mv %t.bc %t.bc.sv\n   14  ; RUN: cp %t.thinlink.bc %t.bc\n   15: ; RUN: llvm-lto -thinlto -o %t4 %t.bc\n   16  ; RUN: mv %t.bc.sv %t.bc\n   17: ; RUN: diff %t3.thinlto.bc %t4.thinlto.bc\n   18  \n   19: ; Try again using -thinlto-action to produce combined index\n   20: ; RUN: rm -f %t3.thinlto.bc %t4.thinlto.bc\n   21: ; RUN: llvm-lto -thinlto-action=thinlink -o %t3.thinlto.bc %t.bc\n   22  ; Copy the minimized bitcode to the regular bitcode path so the module\n   23  ; paths in the index are the same.\n   24  ; RUN: cp %t.thinlink.bc %t.bc\n   25: ; RUN: llvm-lto -thinlto-action=thinlink -o %t4.thinlto.bc %t.bc\n   26: ; RUN: diff %t3.thinlto.bc %t4.thinlto.bc\n   27  \n   28  ; BCA: <GLOBALVAL_SUMMARY_BLOCK\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/pr33536.ll:\n    2  ; to make more precise AA queries for functions.\n    3  ;\n    4: ; RUN: opt -aa-pipeline=default -passes='no-op-module' -debug-pass-manager -thinlto-bc -o %t %s\n    5  ; RUN: llvm-modextract -b -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=M0 %s\n    6  ; RUN: llvm-modextract -b -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=M1 %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split-internal-typeid.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o %t0 %t\n    3  ; RUN: llvm-modextract -b -n 1 -o %t1 %t\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split-internal1.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o %t0 %t\n    3  ; RUN: llvm-modextract -b -n 1 -o %t1 %t\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split-internal2.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o %t0 %t\n    3  ; RUN: llvm-modextract -b -n 1 -o %t1 %t\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split-vfunc-internal.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=M0 %s\n    3  ; RUN: llvm-modextract -b -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=M1 %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split-vfunc.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=M0 %s\n    3  ; RUN: llvm-modextract -b -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=M1 %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/split.ll:\n    1  ; Generate bitcode files with summary, as well as minimized bitcode without\n    2  ; the debug metadata for the thin link.\n    3: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s\n    4  ; RUN: llvm-modextract -b -n 0 -o %t0.bc %t\n    5  ; RUN: llvm-modextract -b -n 1 -o %t1.bc %t\n    .\n   14  ; Make sure the combined index files produced by both the normal and the\n   15  ; thin link bitcode files are identical\n   16: ; RUN: llvm-lto -thinlto -o %t3 %t0.bc\n   17  ; Copy the minimized bitcode to the regular bitcode path so the module\n   18  ; paths in the index are the same.\n   19  ; RUN: cp %t0.thinlink.bc %t0.bc\n   20: ; RUN: llvm-lto -thinlto -o %t4 %t0.bc\n   21: ; RUN: diff %t3.thinlto.bc %t4.thinlto.bc\n   22  \n   23  ; ERROR: llvm-modextract: error: module index out of range; bitcode file contains 2 module(s)\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/unsplittable.ll:\n    1: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s\n    2  ; RUN: llvm-dis -o - %t | FileCheck %s\n    3  ; RUN: llvm-bcanalyzer -dump %t | FileCheck --check-prefix=BCA %s\n\n/home/mw/llvm/test/Transforms/ThinLTOBitcodeWriter/x86/module-asm.ll:\n    1: ; RUN: opt -thinlto-bc -o %t %s\n    2  ; RUN: llvm-modextract -b -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=M0 %s\n    3  ; RUN: llvm-modextract -b -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=M1 %s\n\n/home/mw/llvm/test/tools/gold/X86/asm_undefined2.ll:\n    5  ; RUN: llvm-dis < %t2.0.5.precodegen.bc | FileCheck %s\n    6  \n    7: ; ThinLTO testcase\n    8  ; RUN: opt -module-summary %s -o %t.o\n    9  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   10  ; RUN:     --plugin-opt=save-temps \\\n   11: ; RUN:     --plugin-opt=thinlto -o %t2 %t.o\n   12  ; RUN: llvm-dis < %t.o.5.precodegen.bc | FileCheck --check-prefix=CHECKTHIN %s\n   13  \n\n/home/mw/llvm/test/tools/gold/X86/cache.ll:\n    5  ; RUN: rm -Rf %t.cache\n    6  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    7: ; RUN:     --plugin-opt=thinlto \\\n    8  ; RUN:     --plugin-opt=cache-dir=%t.cache \\\n    9  ; RUN:     -o %t3.o %t2.o %t.o\n   ..\n   20  ; RUN: rm -Rf %t.cache\n   21  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   22: ; RUN:     --plugin-opt=thinlto \\\n   23  ; RUN:     --plugin-opt=cache-dir=%t.cache \\\n   24  ; RUN:     -o %t3.o %t2.o %t.o\n   ..\n   33  ; RUN: touch -t 197001011200 %t.cache/llvmcache-foo %t.cache/foo\n   34  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   35: ; RUN:     --plugin-opt=thinlto \\\n   36  ; RUN:     --plugin-opt=cache-dir=%t.cache \\\n   37  ; RUN:     --plugin-opt=cache-policy=prune_after=1h:prune_interval=0s \\\n   ..\n   47  ; This should leave the file in place.\n   48  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   49: ; RUN:     --plugin-opt=thinlto \\\n   50  ; RUN:     --plugin-opt=cache-dir=%t.cache \\\n   51  ; RUN:     --plugin-opt=cache-policy=cache_size_bytes=128k:prune_interval=0s \\\n   ..\n   56  ; This should remove it.\n   57  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   58: ; RUN:     --plugin-opt=thinlto \\\n   59  ; RUN:     --plugin-opt=save-temps \\\n   60  ; RUN:     --plugin-opt=cache-dir=%t.cache \\\n\n/home/mw/llvm/test/tools/gold/X86/common_thinlto.ll:\n    1  ; RUN: opt -module-summary %s -o %t1.o\n    2: ; RUN: opt -module-summary %p/Inputs/common_thinlto.ll -o %t2.o\n    3  \n    4  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    5  ; RUN:    --plugin-opt=save-temps \\\n    6: ; RUN:    --plugin-opt=thinlto \\\n    7  ; RUN:    -m elf_x86_64 \\\n    8  ; RUN:    -shared %t1.o %t2.o -o %t3\n\n/home/mw/llvm/test/tools/gold/X86/global_with_section.ll:\n   14  ; RUN: llvm-dis %t3.o.0.2.internalize.bc -o - | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK2-REGULARLTO\n   15  \n   16: ; Next try ThinLTO\n   17  ; RUN: opt -module-summary %s -o %t.o\n   18  ; RUN: llvm-lto2 dump-symtab %t.o | FileCheck %s --check-prefix=SYMTAB\n   19  ; RUN: opt -module-summary %p/Inputs/global_with_section.ll -o %t2.o\n   20  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   21: ; RUN:     --plugin-opt=thinlto \\\n   22  ; RUN:     --plugin-opt=save-temps \\\n   23  ; RUN:     -o %t3.o %t.o %t2.o\n   24  ; Check results of internalization\n   25: ; RUN: llvm-dis %t.o.2.internalize.bc -o - | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-THINLTO\n   26: ; RUN: llvm-dis %t2.o.2.internalize.bc -o - | FileCheck %s --check-prefix=CHECK2-THINLTO\n   27  \n   28  ; SYMTAB: deadfunc_with_section\n   ..\n   48  ; CHECK-REGULARLTO-DAG: @var_with_nonC_section = internal global i32 0, section \".nonCsection\"\n   49  ; Check we dropped definition of dead variable.\n   50: ; CHECK-THINLTO-NOT: @var_with_nonC_section\n   51  @var_with_nonC_section = global i32 0, section \".nonCsection\"\n   52  \n   ..\n   62  ; CHECK2-REGULARLTO-DAG: define internal void @deadfunc_with_nonC_section() section \".nonCsection\"\n   63  ; Check dead function converted to declaration.\n   64: ; CHECK-THINLTO-NOT: @deadfunc_with_nonC_section()\n   65  define void @deadfunc_with_nonC_section() section \".nonCsection\" {\n   66    call void @deadfunc2_called_from_nonC_section()\n   ..\n   71  ; @deadfunc2_called_from_section can be internalized.\n   72  ; CHECK2-REGULARLTO: define internal void @deadfunc2_called_from_section\n   73: ; In ThinLTO mode, we can't internalize it as it needs to be preserved\n   74  ; (due to the access from @deadfunc_with_section which must be preserved), and\n   75  ; can't be internalized since the reference is from a different module.\n   76: ; CHECK2-THINLTO: define dso_local void @deadfunc2_called_from_section\n   77  declare void @deadfunc2_called_from_section()\n   78  \n   ..\n   81  ; CHECK2-REGULARLTO: define internal void @deadfunc2_called_from_nonC_section\n   82  ; Check dead function converted to declaration.\n   83: ; CHECK2-THINLTO-NOT: @deadfunc2_called_from_nonC_section\n   84  declare void @deadfunc2_called_from_nonC_section()\n   85  \n\n/home/mw/llvm/test/tools/gold/X86/mixed_lto.ll:\n    5  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    6  ; RUN:     -shared \\\n    7: ; RUN:     --plugin-opt=thinlto \\\n    8  ; RUN:     --plugin-opt=-import-instr-limit=0 \\\n    9  ; RUN:     -o %t3.o %t2.o %t.o\n\n/home/mw/llvm/test/tools/gold/X86/new-pm.ll:\n    3  \n    4  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    5: ; RUN:     --plugin-opt=thinlto \\\n    6  ; RUN:     --plugin-opt=new-pass-manager \\\n    7  ; RUN:     --plugin-opt=debug-pass-manager \\\n\n/home/mw/llvm/test/tools/gold/X86/pr19901_thinlto.ll:\n    2  ; RUN: opt -module-summary %p/Inputs/pr19901-1.ll -o %t2.o\n    3  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    4: ; RUN:     --plugin-opt=thinlto \\\n    5  ; RUN:     -shared -m elf_x86_64 -o %t.so %t2.o %t.o\n    6  ; RUN: llvm-readobj -t %t.so | FileCheck %s\n\n/home/mw/llvm/test/tools/gold/X86/stats.ll:\n    9  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext  -shared \\\n   10  ; RUN:    -m elf_x86_64 \\\n   11: ; RUN:    -plugin-opt=thinlto \\\n   12: ; RUN:    -plugin-opt=thinlto-index-only \\\n   13  ; RUN:    -plugin-opt=-stats %t.o -o %t2 2>&1 | FileCheck %s\n   14  \n\n/home/mw/llvm/test/tools/gold/X86/thinlto.ll:\n    1: ; First ensure that the ThinLTO handling in the gold plugin handles\n    2  ; bitcode without summary sections gracefully.\n    3  ; RUN: llvm-as %s -o %t.o\n    4: ; RUN: llvm-as %p/Inputs/thinlto.ll -o %t2.o\n    5  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    6  ; RUN:    -m elf_x86_64 \\\n    7: ; RUN:    --plugin-opt=thinlto \\\n    8: ; RUN:    --plugin-opt=thinlto-index-only \\\n    9  ; RUN:    -shared %t.o %t2.o -o %t3\n   10  ; RUN: not test -e %t3\n   11  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   12  ; RUN:    -m elf_x86_64 \\\n   13: ; RUN:    --plugin-opt=thinlto \\\n   14  ; RUN:    -shared %t.o %t2.o -o %t4\n   15  ; RUN: llvm-nm %t4 | FileCheck %s --check-prefix=NM\n   ..\n   17  ; Next generate summary sections and test gold handling.\n   18  ; RUN: opt -module-summary %s -o %t.o\n   19: ; RUN: opt -module-summary %p/Inputs/thinlto.ll -o %t2.o\n   20  \n   21  ; Ensure gold generates an index and not a binary if requested.\n   22  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   23  ; RUN:    -m elf_x86_64 \\\n   24: ; RUN:    --plugin-opt=thinlto \\\n   25: ; RUN:    --plugin-opt=thinlto-index-only \\\n   26  ; RUN:    -shared %t.o %t2.o -o %t3\n   27: ; RUN: llvm-bcanalyzer -dump %t.o.thinlto.bc | FileCheck %s --check-prefix=BACKEND1\n   28: ; RUN: llvm-bcanalyzer -dump %t2.o.thinlto.bc | FileCheck %s --check-prefix=BACKEND2\n   29  ; RUN: not test -e %t3\n   30  \n   31: ; Ensure gold generates an index as well as a binary with save-temps in ThinLTO mode.\n   32  ; First force single-threaded mode\n   33  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   34  ; RUN:    -m elf_x86_64 \\\n   35  ; RUN:    --plugin-opt=save-temps \\\n   36: ; RUN:    --plugin-opt=thinlto \\\n   37  ; RUN:    --plugin-opt=jobs=1 \\\n   38  ; RUN:    -shared %t.o %t2.o -o %t4\n   ..\n   44  ; RUN:    -m elf_x86_64 \\\n   45  ; RUN:    --plugin-opt=save-temps \\\n   46: ; RUN:    --plugin-opt=thinlto \\\n   47  ; RUN:    --plugin-opt=jobs=1 \\\n   48  ; RUN:    --no-map-whole-files \\\n   ..\n   55  ; RUN:    -m elf_x86_64 \\\n   56  ; RUN:    --plugin-opt=save-temps \\\n   57: ; RUN:    --plugin-opt=thinlto \\\n   58  ; RUN:    --plugin-opt=jobs=2 \\\n   59  ; RUN:    -shared %t.o %t2.o -o %t4\n   ..\n   65  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   66  ; RUN:    -m elf_x86_64 \\\n   67: ; RUN:    --plugin-opt=thinlto \\\n   68  ; RUN:    --plugin-opt=jobs=2 \\\n   69  ; RUN:    --plugin-opt=obj-path=%t5.o \\\n   ..\n   72  ; RUN: llvm-nm %t5.o2 | FileCheck %s --check-prefix=NM2\n   73  \n   74: ; Test to ensure that thinlto-index-only with obj-path creates the file.\n   75  ; RUN: rm -f %t5.o %t5.o1\n   76  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   77  ; RUN:    -m elf_x86_64 \\\n   78: ; RUN:    --plugin-opt=thinlto \\\n   79  ; RUN:    --plugin-opt=jobs=2 \\\n   80: ; RUN:    --plugin-opt=thinlto-index-only \\\n   81  ; RUN:    --plugin-opt=obj-path=%t5.o \\\n   82  ; RUN:    -shared %t.o %t2.o -o %t4\n   ..\n   89  \n   90  ; The backend index for this module contains summaries from itself and\n   91: ; Inputs/thinlto.ll, as it imports from the latter.\n   92  ; BACKEND1: <MODULE_STRTAB_BLOCK\n   93: ; BACKEND1-NEXT: <ENTRY {{.*}} record string = '{{.*}}/test/tools/gold/X86/Output/thinlto.ll.tmp{{.*}}.o'\n   94: ; BACKEND1-NEXT: <ENTRY {{.*}} record string = '{{.*}}/test/tools/gold/X86/Output/thinlto.ll.tmp{{.*}}.o'\n   95  ; BACKEND1-NEXT: </MODULE_STRTAB_BLOCK\n   96  ; BACKEND1-NEXT: <GLOBALVAL_SUMMARY_BLOCK\n   ..\n  103  ; BACKEND1-NEXT: </GLOBALVAL_SUMMARY_BLOCK\n  104  \n  105: ; The backend index for Input/thinlto.ll contains summaries from itself only,\n  106  ; as it does not import anything.\n  107  ; BACKEND2: <MODULE_STRTAB_BLOCK\n  108: ; BACKEND2-NEXT: <ENTRY {{.*}} record string = '{{.*}}/test/tools/gold/X86/Output/thinlto.ll.tmp2.o'\n  109  ; BACKEND2-NEXT: </MODULE_STRTAB_BLOCK\n  110  ; BACKEND2-NEXT: <GLOBALVAL_SUMMARY_BLOCK\n  ...\n  116  \n  117  ; COMBINED: <MODULE_STRTAB_BLOCK\n  118: ; COMBINED-NEXT: <ENTRY {{.*}} record string = '{{.*}}/test/tools/gold/X86/Output/thinlto.ll.tmp{{.*}}.o'\n  119: ; COMBINED-NEXT: <ENTRY {{.*}} record string = '{{.*}}/test/tools/gold/X86/Output/thinlto.ll.tmp{{.*}}.o'\n  120  ; COMBINED-NEXT: </MODULE_STRTAB_BLOCK\n  121  ; COMBINED-NEXT: <GLOBALVAL_SUMMARY_BLOCK\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_afdo.ll:\n    1  ; Generate summary sections\n    2  ; RUN: opt -module-summary %s -o %t1.o\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto.ll -o %t2.o\n    4  \n    5  ; RUN: rm -f %t1.o.4.opt.bc\n    6  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    7  ; RUN:    -m elf_x86_64 \\\n    8: ; RUN:    --plugin-opt=thinlto \\\n    9  ; RUN:    --plugin-opt=save-temps \\\n   10  ; RUN:    --plugin-opt=sample-profile=%p/Inputs/afdo.prof \\\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_alias.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2: ; RUN: opt -module-summary %p/Inputs/thinlto_alias.ll -o %t2.o\n    3  \n    4  ; Ensure that a preempted weak symbol that is linked in as a local\n    .\n   11  ; preempted.\n   12  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   13: ; RUN:     --plugin-opt=thinlto \\\n   14  ; RUN:     --plugin-opt=save-temps \\\n   15  ; RUN:     -o %t3.o %t2.o %t.o\n   ..\n   20  ; This does not currently pass because the gold plugin now uses the\n   21  ; combined summary rather than the IRMover to change the module's linkage\n   22: ; during the ThinLTO backend. The internalization step implemented by IRMover\n   23  ; for preempted symbols has not yet been implemented for the combined summary.\n   24  ; XFAIL: *\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_archive.ll:\n    1  ; Generate summary sections\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_archive1.ll -o %t2.o\n    4: ; RUN: opt -module-summary %p/Inputs/thinlto_archive2.ll -o %t3.o\n    5  \n    6  ; Generate the static library\n    .\n   11  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   12  ; RUN:    -m elf_x86_64 \\\n   13: ; RUN:    --plugin-opt=thinlto \\\n   14  ; RUN:    --plugin-opt=-print-imports \\\n   15  ; RUN:    --plugin-opt=jobs=1 \\\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_emit_imports.ll:\n    1  ; Generate summary sections and test gold handling.\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto.ll -o %t2.o\n    4  ; Include a file with an empty module summary index, to ensure that the expected\n    5  ; output files are created regardless, for a distributed build system.\n    6: ; RUN: opt -module-summary %p/Inputs/thinlto_empty.ll -o %t3.o\n    7  \n    8  ; Ensure gold generates imports files if requested for distributed backends.\n    9: ; RUN: rm -f %t3.o.imports %t3.o.thinlto.bc\n   10  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   11: ; RUN:    --plugin-opt=thinlto \\\n   12: ; RUN:    --plugin-opt=thinlto-index-only \\\n   13: ; RUN:    --plugin-opt=thinlto-emit-imports-files \\\n   14  ; RUN:    -shared %t.o %t2.o %t3.o -o %t4\n   15  \n   16  ; The imports file for this module contains the bitcode file for\n   17: ; Inputs/thinlto.ll\n   18  ; RUN: cat %t.o.imports | count 1\n   19  ; RUN: cat %t.o.imports | FileCheck %s --check-prefix=IMPORTS1\n   20: ; IMPORTS1: test/tools/gold/X86/Output/thinlto_emit_imports.ll.tmp2.o\n   21  \n   22: ; The imports file for Input/thinlto.ll is empty as it does not import anything.\n   23  ; RUN: cat %t2.o.imports | count 0\n   24  \n   25: ; The imports file for Input/thinlto_empty.ll is empty but should exist.\n   26  ; RUN: cat %t3.o.imports | count 0\n   27  \n   28  ; The index file should be created even for the input with an empty summary.\n   29: ; RUN: ls %t3.o.thinlto.bc\n   30  \n   31  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_emit_linked_objects.ll:\n    1  ; First generate bitcode with a module summary index for each file\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_emit_linked_objects.ll -o %t2.o\n    4  \n    5: ; Next do the ThinLink step, specifying thinlto-index-only so that the gold\n    6  ; plugin exits after generating individual indexes. The objects the linker\n    7  ; decided to include in the link should be emitted into the file specified\n    8: ; after 'thinlto-index-only='. Note that in this test both files should\n    9  ; be included in the link, but in a case where there was an object in\n   10  ; a library that had no strongly referenced symbols, that file would not\n   ..\n   12  ; requires gold version 1.12.\n   13  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   14: ; RUN:    --plugin-opt=thinlto \\\n   15: ; RUN:    --plugin-opt=thinlto-index-only=%t3 \\\n   16  ; RUN:    -o %t5 \\\n   17  ; RUN:    %t.o \\\n   ..\n   19  \n   20  ; RUN: cat %t3 | FileCheck %s\n   21: ; CHECK: thinlto_emit_linked_objects.ll.tmp.o\n   22: ; CHECK: thinlto_emit_linked_objects.ll.tmp2.o\n   23  \n   24  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_funcimport.ll:\n    1  ; Do setup work for all below tests: generate bitcode and combined index\n    2  ; RUN: opt -module-summary %s -o %t1.bc\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto_funcimport.ll -o %t2.bc\n    4  \n    5  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    6  ; RUN:    --plugin-opt=save-temps \\\n    7: ; RUN:    --plugin-opt=thinlto \\\n    8  ; RUN:    -shared %t1.bc %t2.bc -o %t\n    9  ; RUN: llvm-dis %t2.bc.3.import.bc -o - | FileCheck %s\n   ..\n   14  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   15  ; RUN:    --plugin-opt=save-temps \\\n   16: ; RUN:    --plugin-opt=thinlto \\\n   17  ; RUN:    --plugin-opt=O0 \\\n   18  ; RUN:    -shared %t1.bc %t2.bc -o %t\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_internalize.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2: ; RUN: opt -module-summary %p/Inputs/thinlto_internalize.ll -o %t2.o\n    3  \n    4  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    5: ; RUN:     --plugin-opt=thinlto \\\n    6  ; RUN:     --plugin-opt=-import-instr-limit=0 \\\n    7  ; RUN:     --plugin-opt=save-temps \\\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_linkonceresolution.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2: ; RUN: opt -module-summary %p/Inputs/thinlto_linkonceresolution.ll -o %t2.o\n    3  \n    4: ; Ensure the plugin ensures that for ThinLTO the prevailing copy of a\n    5  ; linkonce symbol is changed to weak to ensure it is not eliminated.\n    6  ; Note that gold picks the first copy of f() as the prevailing one,\n    .\n    9  ; being imported from %t2.o which hides the problem.\n   10  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   11: ; RUN:     --plugin-opt=thinlto \\\n   12  ; RUN:     --plugin-opt=-import-instr-limit=0 \\\n   13  ; RUN:     --plugin-opt=save-temps \\\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_no_objects.ll:\n    1: ; Check that thinlto-index-only= always creates linked objects file, even\n    2  ; if nothing to add there.\n    3  \n    4: ; Non-ThinLTO file should not get into list of linked objects.\n    5  ; RUN: opt %s -o %t.o\n    6  \n    7  ; RUN: rm -f %t3\n    8  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    9: ; RUN:    --plugin-opt=thinlto \\\n   10: ; RUN:    --plugin-opt=thinlto-index-only=%t3 \\\n   11  ; RUN:    -o %t5 \\\n   12  ; RUN:    %t.o\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_object_suffix_replace.ll:\n    1: ; Test to make sure the thinlto-object-suffix-replace option is handled\n    2  ; correctly.\n    3  \n    4  ; Generate bitcode file with summary, as well as a minimized bitcode without\n    5  ; the debug metadata for the thin link.\n    6: ; RUN: opt -thinlto-bc %s -thin-link-bitcode-file=%t1.thinlink.bc -o %t1.o\n    7  \n    8  ; First perform the thin link on the normal bitcode file, and save the\n    .\n   10  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   11  ; RUN:    -m elf_x86_64 \\\n   12: ; RUN:    --plugin-opt=thinlto \\\n   13: ; RUN:    --plugin-opt=thinlto-index-only \\\n   14  ; RUN:    -shared %t1.o -o %t3\n   15: ; RUN: cp %t1.o.thinlto.bc %t1.o.thinlto.bc.orig\n   16  \n   17  ; Next perform the thin link on the minimized bitcode file, and compare dump\n   18  ; of the resulting index to the above dump to ensure they are identical.\n   19: ; RUN: rm -f %t1.o.thinlto.bc\n   20  ; Make sure it isn't inadvertently using the regular bitcode file.\n   21  ; RUN: rm -f %t1.o\n   22  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   23  ; RUN:    -m elf_x86_64 \\\n   24: ; RUN:    --plugin-opt=thinlto \\\n   25: ; RUN:    --plugin-opt=thinlto-index-only \\\n   26: ; RUN:    --plugin-opt=thinlto-object-suffix-replace=\".thinlink.bc;.o\" \\\n   27  ; RUN:    -shared %t1.thinlink.bc -o %t3\n   28: ; RUN: diff %t1.o.thinlto.bc.orig %t1.o.thinlto.bc\n   29  \n   30  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_prefix_replace.ll:\n    1: ; Check that changing the output path via thinlto-prefix-replace works\n    2  ; RUN: mkdir -p %t/oldpath\n    3: ; RUN: opt -module-summary %s -o %t/oldpath/thinlto_prefix_replace.o\n    4  ; Ensure that there is no existing file at the new path, so we properly\n    5  ; test the creation of the new file there.\n    6: ; RUN: rm -f %t/newpath/thinlto_prefix_replace.o.thinlto.bc\n    7  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    8: ; RUN:    --plugin-opt=thinlto \\\n    9: ; RUN:    --plugin-opt=thinlto-index-only \\\n   10: ; RUN:    --plugin-opt=thinlto-prefix-replace=\"%t/oldpath/;%t/newpath/\" \\\n   11: ; RUN:    -shared %t/oldpath/thinlto_prefix_replace.o -o %t/thinlto_prefix_replace\n   12: ; RUN: ls %t/newpath/thinlto_prefix_replace.o.thinlto.bc\n   13  \n   14  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_weak_library.ll:\n    1: ; Test to ensure that ThinLTO sorts the modules before passing to the\n    2  ; final native link based on the linker's determination of which\n    3  ; object within a static library contains the prevailing def of a symbol.\n    .\n    5  ; First generate bitcode with a module summary index for each file\n    6  ; RUN: opt -module-summary %s -o %t.o\n    7: ; RUN: opt -module-summary %p/Inputs/thinlto_weak_library1.ll -o %t2.o\n    8: ; RUN: opt -module-summary %p/Inputs/thinlto_weak_library2.ll -o %t3.o\n    9  \n   10  ; Although the objects are ordered \"%t2.o %t3.o\" in the library, the\n   ..\n   14  ; %t3.o before %t2.o in the final native link.\n   15  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   16: ; RUN:    --plugin-opt=thinlto \\\n   17  ; RUN:    --plugin-opt=save-temps \\\n   18  ; RUN:    -m elf_x86_64 \\\n   ..\n   27  ; CHECK: declare dso_local i32 @f()\n   28  \n   29: ; ModuleID = 'thinlto_weak_library.c'\n   30: source_filename = \"thinlto_weak_library.c\"\n   31  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   32  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/tools/gold/X86/thinlto_weak_resolution.ll:\n    1  ; RUN: opt -module-summary %s -o %t.o\n    2: ; RUN: opt -module-summary %p/Inputs/thinlto_weak_resolution.ll -o %t2.o\n    3  \n    4  ; Verify that prevailing weak for linker symbol is kept.\n    .\n    6  ; so listing %t.o first is sufficient to ensure that its copies are prevailing.\n    7  ; RUN: %gold -m elf_x86_64 -plugin %llvmshlibdir/LLVMgold%shlibext \\\n    8: ; RUN:     --plugin-opt=thinlto \\\n    9  ; RUN:     --plugin-opt=save-temps \\\n   10  ; RUN:     -shared \\\n\n/home/mw/llvm/test/tools/gold/X86/Inputs/thinlto_weak_library1.ll:\n    1: ; ModuleID = 'thinlto_weak_library1.c'\n    2: source_filename = \"thinlto_weak_library1.c\"\n    3  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    4  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/tools/gold/X86/Inputs/thinlto_weak_library2.ll:\n    1: ; ModuleID = 'thinlto_weak_library2.c'\n    2: source_filename = \"thinlto_weak_library2.c\"\n    3  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n    4  target triple = \"x86_64-unknown-linux-gnu\"\n\n/home/mw/llvm/test/tools/gold/X86/v1.12/thinlto_emit_linked_objects.ll:\n    1: ; RUN: rm -f %t*.o.thinlto.bc\n    2  ; RUN: rm -f %t*.o.imports\n    3  \n    4  ; First generate bitcode with a module summary index for each file\n    5  ; RUN: opt -module-summary %s -o %t1.o\n    6: ; RUN: opt -module-summary %p/Inputs/thinlto_emit_linked_objects2.ll -o %t2.o\n    7: ; RUN: opt %p/Inputs/thinlto_emit_linked_objects3.ll -o %t3.o\n    8  \n    9: ; Next do the ThinLink step, specifying thinlto-index-only so that the gold\n   10  ; plugin exits after generating individual indexes. The objects the linker\n   11  ; decided to include in the link should be emitted into the file specified\n   12: ; after 'thinlto-index-only='. In this version of the test, only %t1.o will\n   13  ; be included in the link, and not %t2.o since it is within\n   14  ; a library (--start-lib/--end-lib pair) and not strongly referenced.\n   15  ; Note that the support for detecting this is in gold v1.12.\n   16  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   17: ; RUN:    --plugin-opt=thinlto \\\n   18: ; RUN:    --plugin-opt=thinlto-index-only=%t.index \\\n   19: ; RUN:    --plugin-opt=thinlto-emit-imports-files \\\n   20  ; RUN:    -m elf_x86_64 \\\n   21  ; RUN:    -o %t4 \\\n   ..\n   25  ; Ensure that the expected output files are created, even for the file\n   26  ; the linker decided not to include in the link.\n   27: ; RUN: ls %t1.o.thinlto.bc\n   28: ; RUN: ls %t2.o.thinlto.bc\n   29: ; RUN: ls %t3.o.thinlto.bc\n   30  ; RUN: ls %t1.o.imports\n   31  ; RUN: ls %t2.o.imports\n   32  ; RUN: ls %t3.o.imports\n   33  \n   34: ; Regular *thinlto.bc file. \"SkipModuleByDistributedBackend\" flag (0x2)\n   35  ; should not be set.\n   36: ; RUN: llvm-bcanalyzer --dump %t1.o.thinlto.bc | FileCheck %s -check-prefixes=CHECK-BC1\n   37  ; CHECK-BC1: <GLOBALVAL_SUMMARY_BLOCK\n   38  ; CHECK-BC1: <FLAGS op0=1/>\n   ..\n   41  ; Nothing interesting in the corresponding object file, so\n   42  ; \"SkipModuleByDistributedBackend\" flag (0x2) should be set.\n   43: ; RUN: llvm-bcanalyzer --dump %t2.o.thinlto.bc | FileCheck %s -check-prefixes=CHECK-BC2\n   44  ; CHECK-BC2: <GLOBALVAL_SUMMARY_BLOCK\n   45  ; CHECK-BC2: <FLAGS op0=2/>\n   ..\n   47  \n   48  ; Empty as the corresponding object file is not ThinTLO.\n   49: ; RUN: not llvm-bcanalyzer --dump %t3.o.thinlto.bc 2>&1 | FileCheck %s -check-prefixes=CHECK-BC3\n   50  ; CHECK-BC3: LLVM ERROR: Unexpected end of file\n   51  \n   52  ; RUN: cat %t.index | FileCheck %s\n   53: ; CHECK: thinlto_emit_linked_objects.ll.tmp1.o\n   54: ; CHECK-NOT: thinlto_emit_linked_objects.ll.tmp2.o\n   55: ; CHECK-NOT: thinlto_emit_linked_objects.ll.tmp3.o\n   56  \n   57  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/llvm/test/tools/gold/X86/v1.16/wrap-1.ll:\n    5  ; RUN: cat %t.out.resolution.txt | FileCheck -check-prefix=RESOLS %s\n    6  \n    7: ; ThinLTO\n    8  ; RUN: opt -module-summary %s -o %t.o\n    9  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext %t.o -o %t.out -wrap=bar -plugin-opt=save-temps\n\n/home/mw/llvm/test/tools/gold/X86/v1.16/wrap-2.ll:\n    4  ; with GNU ld). Because regular LTO hands back a single object file to gold,\n    5  ; it doesn't perform the desired defsym renaming. This isn't an issue with\n    6: ; ThinLTO which hands back multiple native objects to gold. For regular\n    7  ; LTO defsym handling, gold will need a fix (not the gold plugin).\n    8  ; RUN-TODO: llvm-as %s -o %t.o\n    .\n   12  ; RUN-TODO: llvm-readobj -t %t.so | FileCheck -check-prefix=BIND %s\n   13  \n   14: ; ThinLTO\n   15  ; RUN: opt -module-summary %s -o %t.o\n   16  ; RUN: opt -module-summary %S/Inputs/wrap-bar.ll -o %t1.o\n\n/home/mw/llvm/test/tools/llvm-lto/error.ll:\n    5  ; CHECK-LIST: llvm-lto: error loading file '{{.*}}/Inputs/empty.bc': The file was not recognized as a valid object file\n    6  \n    7: ; RUN: not llvm-lto --thinlto %S/Inputs/empty.bc 2>&1 | FileCheck %s --check-prefix=CHECK-THIN\n    8  ; CHECK-THIN: llvm-lto: error loading file '{{.*}}/Inputs/empty.bc': Invalid bitcode signature\n    9  \n\n/home/mw/llvm/test/tools/llvm-lto/thinlto.ll:\n    1: ; Test combined function index generation for ThinLTO via llvm-lto.\n    2  ; RUN: opt -module-summary %s -o %t.o\n    3: ; RUN: opt -module-summary %p/Inputs/thinlto.ll -o %t2.o\n    4: ; RUN: llvm-lto -thinlto -o %t3 %t.o %t2.o\n    5: ; RUN: llvm-bcanalyzer -dump %t3.thinlto.bc | FileCheck %s --check-prefix=COMBINED\n    6  ; RUN: not test -e %t3\n    7  \n    8  ; COMBINED: <MODULE_STRTAB_BLOCK\n    9: ; COMBINED-NEXT: <ENTRY {{.*}} record string = '{{.*}}thinlto.ll.tmp{{.*}}.o'\n   10: ; COMBINED-NEXT: <ENTRY {{.*}} record string = '{{.*}}thinlto.ll.tmp{{.*}}.o'\n   11  ; COMBINED-NEXT: </MODULE_STRTAB_BLOCK\n   12  ; COMBINED-NEXT: <GLOBALVAL_SUMMARY_BLOCK\n\n/home/mw/llvm/tools/clang/cmake/caches/Apple-stage2-ThinLTO.cmake:\n    1: # This file sets up a CMakeCache for Apple-style stage2 ThinLTO bootstrap. It is\n    2  # specified by the stage1 build.\n    3  \n\n/home/mw/llvm/tools/clang/docs/ClangCommandLineReference.rst:\n 1805  .. option:: -ftest-coverage\n 1806  \n 1807: .. option:: -fthinlto-index=<arg>\n 1808  \n 1809: Perform ThinLTO importing using provided function summary index\n 1810  \n 1811  .. option:: -fthreadsafe-statics, -fno-threadsafe-statics\n\n/home/mw/llvm/tools/clang/docs/ThinLTO.rst:\n    1  =======\n    2: ThinLTO\n    3  =======\n    4  \n    .\n    9  ============\n   10  \n   11: *ThinLTO* compilation is a new type of LTO that is both scalable and\n   12  incremental. *LTO* (Link Time Optimization) achieves better\n   13  runtime performance through whole-program analysis and cross-module\n   ..\n   16  in time or memory, and also prevents fast incremental compiles.\n   17  \n   18: In ThinLTO mode, as with regular LTO, clang emits LLVM bitcode after the\n   19: compile phase. The ThinLTO bitcode is augmented with a compact summary\n   20  of the module. During the link step, only the summaries are read and\n   21  merged into a combined summary index, which includes an index of function\n   ..\n   25  However, all transformations, including function importing, occur\n   26  later when the modules are optimized in fully parallel backends.\n   27: By default, linkers_ that support ThinLTO are set up to launch\n   28: the ThinLTO backends in threads. So the usage model is not affected\n   29  as the distinction between the fast serial thin link step and the backends\n   30  is transparent to the user.\n   31  \n   32: For more information on the ThinLTO design and current performance,\n   33: see the LLVM blog post `ThinLTO: Scalable and Incremental LTO\n   34: <http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html>`_.\n   35  While tuning is still in progress, results in the blog post show that\n   36: ThinLTO already performs well compared to LTO, in many cases matching\n   37  the performance improvement.\n   38  \n   ..\n   44  .. _compiler:\n   45  \n   46: The 3.9 release of clang includes ThinLTO support. However, ThinLTO\n   47  is under active development, and new features, improvements and bugfixes\n   48: are being added for the next release. For the latest ThinLTO support,\n   49  `build a recent version of clang and LLVM\n   50  <http://llvm.org/docs/CMake.html>`_.\n   ..\n   55  .. _linker:\n   56  \n   57: ThinLTO is currently supported for the following linkers:\n   58  \n   59  - **gold (via the gold-plugin)**:\n   ..\n   72  -----\n   73  \n   74: To utilize ThinLTO, simply add the -flto=thin option to compile and link. E.g.\n   75  \n   76  .. code-block:: console\n   ..\n   86    % lld-link /out:a.exe file1.obj file2.obj\n   87  \n   88: As mentioned earlier, by default the linkers will launch the ThinLTO backend\n   89  threads in parallel, passing the resulting native object files back to the\n   90  linker for the final native link.  As such, the usage model the same as\n   ..\n  106  .. _parallelism:\n  107  \n  108: By default, the ThinLTO link step will launch up to\n  109  ``std::thread::hardware_concurrency`` number of threads in parallel.\n  110  For machines with hyper-threading, this is the total number of\n  ...\n  118    ``-Wl,-mllvm,-threads=N``\n  119  - lld:\n  120:   ``-Wl,--thinlto-jobs=N``\n  121  - lld-link:\n  122    ``/opt:lldltojobs=N``\n  ...\n  126  .. _incremental:\n  127  \n  128: ThinLTO supports fast incremental builds through the use of a cache,\n  129  which currently must be enabled through a linker option.\n  130  \n  ...\n  134    ``-Wl,-cache_path_lto,/path/to/cache``\n  135  - ELF lld (as of LLVM 5.0):\n  136:   ``-Wl,--thinlto-cache-dir=/path/to/cache``\n  137  - COFF lld-link (as of LLVM 6.0):\n  138    ``/lldltocache:/path/to/cache``\n  ...\n  141  -------------\n  142  \n  143: To help keep the size of the cache under control, ThinLTO supports cache\n  144  pruning. Cache pruning is supported with gold, ld64 and ELF and COFF lld, but\n  145  currently only gold, ELF and COFF lld allow you to control the policy with a\n  ...\n  149    ``-Wl,-plugin-opt,cache-policy=POLICY``\n  150  - ELF lld (as of LLVM 5.0):\n  151:   ``-Wl,--thinlto-cache-policy,POLICY``\n  152  - COFF lld-link (as of LLVM 6.0):\n  153    ``/lldltocachepolicy:POLICY``\n  ...\n  169    the byte size-based pruning. The default is no byte size-based pruning.\n  170  \n  171:   Note that ThinLTO will apply both size-based pruning policies simultaneously,\n  172    and changing one does not affect the other. For example, a policy of\n  173    ``cache_size_bytes=1g`` on its own will cause both the 1GB and default 75%\n  ...\n  193  ---------------\n  194  \n  195: To bootstrap clang/LLVM with ThinLTO, follow these steps:\n  196  \n  197: 1. The host compiler_ must be a version of clang that supports ThinLTO.\n  198: #. The host linker_ must support ThinLTO (and in the case of gold, must be\n  199     `configured with plugins enabled <http://llvm.org/docs/GoldPlugin.html>`_.\n  200  #. Use the following additional `CMake variables\n  ...\n  228  \n  229  * From LLVM project blog:\n  230:   `ThinLTO: Scalable and Incremental LTO\n  231:   <http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html>`_\n  232  \n\n/home/mw/llvm/tools/clang/docs/index.rst:\n   42     MSVCCompatibility\n   43     OpenMPSupport\n   44:    ThinLTO\n   45     CommandGuide/index\n   46     FAQ\n\n/home/mw/llvm/tools/clang/docs/CommandGuide/clang.rst:\n  332    LLVM bitcode is suitable for monolithic Link Time Optimization (LTO), where\n  333    the linker merges all such modules into a single combined module for\n  334:   optimization. With \"thin\", :doc:`ThinLTO <../ThinLTO>`\n  335    compilation is invoked instead.\n  336  \n\n/home/mw/llvm/tools/clang/include/clang/CodeGen/BackendUtil.h:\n   49  \n   50    llvm::Expected<llvm::BitcodeModule>\n   51:   FindThinLTOModule(llvm::MemoryBufferRef MBRef);\n   52    llvm::BitcodeModule *\n   53:   FindThinLTOModule(llvm::MutableArrayRef<llvm::BitcodeModule> BMs);\n   54  }\n   55  \n\n/home/mw/llvm/tools/clang/include/clang/Driver/CC1Options.td:\n  351  def fno_lto_unit: Flag<[\"-\"], \"fno-lto-unit\">;\n  352  def fthin_link_bitcode_EQ : Joined<[\"-\"], \"fthin-link-bitcode=\">,\n  353:     HelpText<\"Write minimized bitcode to <file> for the ThinLTO thin link only\">;\n  354  def fdebug_pass_manager : Flag<[\"-\"], \"fdebug-pass-manager\">,\n  355      HelpText<\"Prints debug information for the new pass manager\">;\n\n/home/mw/llvm/tools/clang/include/clang/Driver/Options.td:\n 1139             \"of 0 means the number of threads will be derived from \"\n 1140             \"the number of CPUs detected)\">;\n 1141: def fthinlto_index_EQ : Joined<[\"-\"], \"fthinlto-index=\">,\n 1142    Flags<[CC1Option]>, Group<f_Group>,\n 1143:   HelpText<\"Perform ThinLTO importing using provided function summary index\">;\n 1144  def fmacro_backtrace_limit_EQ : Joined<[\"-\"], \"fmacro-backtrace-limit=\">,\n 1145                                  Group<f_Group>, Flags<[DriverOption, CoreOption]>;\n\n/home/mw/llvm/tools/clang/include/clang/Frontend/CodeGenOptions.h:\n  197    std::string ProfileInstrumentUsePath;\n  198  \n  199:   /// Name of the function summary index file to use for ThinLTO function\n  200    /// importing.\n  201:   std::string ThinLTOIndexFile;\n  202  \n  203    /// Name of a file that can optionally be written with minimized bitcode\n  204:   /// to be used as input for the ThinLTO thin link step, which only needs\n  205    /// the summary and module symbol table (and not, e.g. any debug metadata).\n  206    std::string ThinLinkBitcodeFile;\n\n/home/mw/llvm/tools/clang/lib/CodeGen/BackendUtil.cpp:\n   50  #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n   51  #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n   52: #include \"llvm/Transforms/IPO/ThinLTOBitcodeWriter.h\"\n   53  #include \"llvm/Transforms/Instrumentation.h\"\n   54  #include \"llvm/Transforms/Instrumentation/BoundsChecking.h\"\n   ..\n  503    } else {\n  504      // We do not want to inline hot callsites for SamplePGO module-summary build\n  505:     // because profile annotation will happen again in ThinLTO backend, and we\n  506      // want the IR of the hot path to match the profile.\n  507      PMBuilder.Inliner = createFunctionInliningPass(\n  ...\n  518    PMBuilder.DisableUnrollLoops = !CodeGenOpts.UnrollLoops;\n  519    PMBuilder.MergeFunctions = CodeGenOpts.MergeFunctions;\n  520:   PMBuilder.PrepareForThinLTO = CodeGenOpts.EmitSummaryIndex;\n  521    PMBuilder.PrepareForLTO = CodeGenOpts.PrepareForLTO;\n  522    PMBuilder.RerollLoops = CodeGenOpts.RerollLoops;\n  ...\n  767        }\n  768        PerModulePasses.add(\n  769:           createWriteThinLTOBitcodePass(*OS, ThinLinkOS.get()));\n  770      }\n  771      else\n  ...\n  908  \n  909    if (!CodeGenOpts.DisableLLVMPasses) {\n  910:     bool IsThinLTO = CodeGenOpts.EmitSummaryIndex;\n  911      bool IsLTO = CodeGenOpts.PrepareForLTO;\n  912  \n  ...\n  923          MPM.addPass(createModuleToFunctionPassAdaptor(BoundsCheckingPass()));\n  924  \n  925:       // Lastly, add a semantically necessary pass for ThinLTO.\n  926:       if (IsThinLTO)\n  927          MPM.addPass(NameAnonGlobalPass());\n  928      } else {\n  ...\n  943          });\n  944  \n  945:       if (IsThinLTO) {\n  946:         MPM = PB.buildThinLTOPreLinkDefaultPipeline(\n  947              Level, CodeGenOpts.DebugPassManager);\n  948          MPM.addPass(NameAnonGlobalPass());\n  ...\n  981        }\n  982        MPM.addPass(\n  983:           ThinLTOBitcodeWriterPass(*OS, ThinLinkOS ? &*ThinLinkOS : nullptr));\n  984      } else {\n  985        MPM.addPass(BitcodeWriterPass(*OS, CodeGenOpts.EmitLLVMUseLists,\n  ...\n 1021  }\n 1022  \n 1023: Expected<BitcodeModule> clang::FindThinLTOModule(MemoryBufferRef MBRef) {\n 1024    Expected<std::vector<BitcodeModule>> BMsOrErr = getBitcodeModuleList(MBRef);\n 1025    if (!BMsOrErr)\n ....\n 1027  \n 1028    // The bitcode file may contain multiple modules, we want the one that is\n 1029:   // marked as being the ThinLTO module.\n 1030:   if (const BitcodeModule *Bm = FindThinLTOModule(*BMsOrErr))\n 1031      return *Bm;\n 1032  \n ....\n 1035  }\n 1036  \n 1037: BitcodeModule *clang::FindThinLTOModule(MutableArrayRef<BitcodeModule> BMs) {\n 1038    for (BitcodeModule &BM : BMs) {\n 1039      Expected<BitcodeLTOInfo> LTOInfo = BM.getLTOInfo();\n 1040:     if (LTOInfo && LTOInfo->IsThinLTO)\n 1041        return &BM;\n 1042    }\n ....\n 1044  }\n 1045  \n 1046: static void runThinLTOBackend(ModuleSummaryIndex *CombinedIndex, Module *M,\n 1047                                const HeaderSearchOptions &HeaderOpts,\n 1048                                const CodeGenOptions &CGOpts,\n ....\n 1092      }\n 1093  \n 1094:     Expected<BitcodeModule> BMOrErr = FindThinLTOModule(**MBOrErr);\n 1095      if (!BMOrErr) {\n 1096        handleAllErrors(BMOrErr.takeError(), [&](ErrorInfoBase &EIB) {\n ....\n 1143            ModuleToDefinedGVSummaries[M->getModuleIdentifier()], ModuleMap)) {\n 1144      handleAllErrors(std::move(E), [&](ErrorInfoBase &EIB) {\n 1145:       errs() << \"Error running ThinLTO backend: \" << EIB.message() << '\\n';\n 1146      });\n 1147    }\n ....\n 1157                                std::unique_ptr<raw_pwrite_stream> OS) {\n 1158    std::unique_ptr<llvm::Module> EmptyModule;\n 1159:   if (!CGOpts.ThinLTOIndexFile.empty()) {\n 1160:     // If we are performing a ThinLTO importing compile, load the function index\n 1161:     // into memory and pass it into runThinLTOBackend, which will run the\n 1162      // function importer and invoke LTO passes.\n 1163      Expected<std::unique_ptr<ModuleSummaryIndex>> IndexOrErr =\n 1164:         llvm::getModuleSummaryIndexForFile(CGOpts.ThinLTOIndexFile,\n 1165:                                            /*IgnoreEmptyThinLTOIndexFile*/true);\n 1166      if (!IndexOrErr) {\n 1167        logAllUnhandledErrors(IndexOrErr.takeError(), errs(),\n 1168                              \"Error loading index file '\" +\n 1169:                             CGOpts.ThinLTOIndexFile + \"': \");\n 1170        return;\n 1171      }\n 1172      std::unique_ptr<ModuleSummaryIndex> CombinedIndex = std::move(*IndexOrErr);\n 1173:     // A null CombinedIndex means we should skip ThinLTO compilation\n 1174      // (LLVM will optionally ignore empty index files, returning null instead\n 1175      // of an error).\n 1176      if (CombinedIndex) {\n 1177        if (!CombinedIndex->skipModuleByDistributedBackend()) {\n 1178:         runThinLTOBackend(CombinedIndex.get(), M, HeaderOpts, CGOpts, TOpts,\n 1179                            LOpts, std::move(OS), CGOpts.SampleProfileFile,\n 1180                            Action);\n\n/home/mw/llvm/tools/clang/lib/CodeGen/CodeGenAction.cpp:\n  925    SourceManager &SM = CI.getSourceManager();\n  926  \n  927:   // For ThinLTO backend invocations, ensure that the context\n  928    // merges types based on ODR identifiers. We also need to read\n  929    // the correct module out of a multi-module bitcode file.\n  930:   if (!CI.getCodeGenOpts().ThinLTOIndexFile.empty()) {\n  931      VMContext->enableDebugTypeODRUniquing();\n  932  \n  ...\n  943      if (!BMsOrErr)\n  944        return DiagErrors(BMsOrErr.takeError());\n  945:     BitcodeModule *Bm = FindThinLTOModule(*BMsOrErr);\n  946:     // We have nothing to do if the file contains no ThinLTO module. This is\n  947:     // possible if ThinLTO compilation was not able to split module. Content of\n  948      // the file was already processed by indexing and will be passed to the\n  949      // linker using merged object file.\n\n/home/mw/llvm/tools/clang/lib/Driver/ToolChains/Clang.cpp:\n 3259        // The Darwin and PS4 linkers currently use the legacy LTO API, which\n 3260        // does not support LTO unit features (CFI, whole program vtable opt)\n 3261:       // under ThinLTO.\n 3262        if (!(RawTriple.isOSDarwin() || RawTriple.isPS4()) ||\n 3263            D.getLTOMode() == LTOK_Full)\n ....\n 3266    }\n 3267  \n 3268:   if (const Arg *A = Args.getLastArg(options::OPT_fthinlto_index_EQ)) {\n 3269      if (!types::isLLVMIR(Input.getType()))\n 3270        D.Diag(diag::err_drv_argument_only_allowed_with) << A->getAsString(Args)\n 3271                                                         << \"-x ir\";\n 3272:     Args.AddLastArg(CmdArgs, options::OPT_fthinlto_index_EQ);\n 3273    }\n 3274  \n\n/home/mw/llvm/tools/clang/lib/Driver/ToolChains/CommonArgs.cpp:\n  371  \n  372  void tools::AddGoldPlugin(const ToolChain &ToolChain, const ArgList &Args,\n  373:                           ArgStringList &CmdArgs, bool IsThinLTO,\n  374                            const Driver &D) {\n  375    // Tell the linker to load the plugin. This has to come before AddLinkerInputs\n  ...\n  414    }\n  415  \n  416:   if (IsThinLTO)\n  417:     CmdArgs.push_back(\"-plugin-opt=thinlto\");\n  418  \n  419    if (unsigned Parallelism = getLTOParallelism(Args, D))\n\n/home/mw/llvm/tools/clang/lib/Driver/ToolChains/CommonArgs.h:\n   61  \n   62  void AddGoldPlugin(const ToolChain &ToolChain, const llvm::opt::ArgList &Args,\n   63:                    llvm::opt::ArgStringList &CmdArgs, bool IsThinLTO,\n   64                     const Driver &D);\n   65  \n\n/home/mw/llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp:\n  734    }\n  735    Opts.LTOUnit = Args.hasFlag(OPT_flto_unit, OPT_fno_lto_unit, false);\n  736:   if (Arg *A = Args.getLastArg(OPT_fthinlto_index_EQ)) {\n  737      if (IK.getLanguage() != InputKind::LLVM_IR)\n  738        Diags.Report(diag::err_drv_argument_only_allowed_with)\n  739            << A->getAsString(Args) << \"-x ir\";\n  740:     Opts.ThinLTOIndexFile = Args.getLastArgValue(OPT_fthinlto_index_EQ);\n  741    }\n  742    Opts.ThinLinkBitcodeFile = Args.getLastArgValue(OPT_fthin_link_bitcode_EQ);\n\n/home/mw/llvm/tools/clang/test/CodeGen/function-sections.c:\n   10  // RUN: %clang_cc1 -triple x86_64-pc-linux-gnu -S -fno-data-sections -fdata-sections -o - < %s | FileCheck %s --check-prefix=DATA_SECT\n   11  \n   12: // Try again through a clang invocation of the ThinLTO backend.\n   13  // RUN: %clang_cc1 -triple x86_64-pc-linux-gnu -O2 %s -flto=thin -emit-llvm-bc -o %t.o\n   14: // RUN: llvm-lto -thinlto -o %t %t.o\n   15: // RUN: %clang_cc1 -triple x86_64-pc-linux-gnu -O2 -x ir %t.o -fthinlto-index=%t.thinlto.bc -S -ffunction-sections -o - | FileCheck %s --check-prefix=FUNC_SECT\n   16: // RUN: %clang_cc1 -triple x86_64-pc-linux-gnu -O2 -x ir %t.o -fthinlto-index=%t.thinlto.bc -S -fdata-sections -o - | FileCheck %s --check-prefix=DATA_SECT\n   17  \n   18  const int hello = 123;\n\n/home/mw/llvm/tools/clang/test/CodeGen/lto-newpm-pipeline.c:\n   34  // CHECK-THIN-O0: Running pass: AlwaysInlinerPass\n   35  // CHECK-THIN-O0-NEXT: Running pass: NameAnonGlobalPass\n   36: // CHECK-THIN-O0-NEXT: Running pass: ThinLTOBitcodeWriterPass\n   37  // CHECK-THIN-O0: Finished llvm::Module pass manager run.\n   38  \n   ..\n   44  // CHECK-FULL-OPTIMIZED: Running pass: BitcodeWriterPass\n   45  \n   46: // The ThinLTO pre-link pipeline shouldn't contain passes like\n   47  // LoopVectorizePass.\n   48  // CHECK-THIN-OPTIMIZED: Starting llvm::Function pass manager run.\n   49  // CHECK-THIN-OPTIMIZED-NOT: Running pass: LoopVectorizePass\n   50  // CHECK-THIN-OPTIMIZED: Running pass: NameAnonGlobalPass\n   51: // CHECK-THIN-OPTIMIZED: Running pass: ThinLTOBitcodeWriterPass\n   52  \n   53  void Foo() {}\n\n/home/mw/llvm/tools/clang/test/CodeGen/pgo-sample-thinlto-summary.c:\n    1: // RUN: %clang_cc1 -O2 -fprofile-sample-use=%S/Inputs/pgo-sample-thinlto-summary.prof %s -emit-llvm -o - 2>&1 | FileCheck %s -check-prefix=SAMPLEPGO\n    2: // RUN: %clang_cc1 -O2 -fprofile-sample-use=%S/Inputs/pgo-sample-thinlto-summary.prof %s -emit-llvm -flto=thin -o - 2>&1 | FileCheck %s -check-prefix=THINLTO\n    3: // RUN: %clang_cc1 -O2 -fexperimental-new-pass-manager -fprofile-sample-use=%S/Inputs/pgo-sample-thinlto-summary.prof %s -emit-llvm -o - 2>&1 | FileCheck %s -check-prefix=SAMPLEPGO\n    4: // RUN: %clang_cc1 -O2 -fexperimental-new-pass-manager -fprofile-sample-use=%S/Inputs/pgo-sample-thinlto-summary.prof %s -emit-llvm -flto=thin -o - 2>&1 | FileCheck %s -check-prefix=THINLTO\n    5  // Checks if hot call is inlined by normal compile, but not inlined by\n    6: // thinlto compile.\n    7  \n    8  int baz(int);\n    .\n   15  \n   16  // SAMPLEPGO-LABEL: define {{(dso_local )?}}void @bar\n   17: // THINLTO-LABEL: define {{(dso_local )?}}void @bar\n   18  // SAMPLEPGO-NOT: call{{.*}}foo\n   19: // THINLTO: call{{.*}}foo\n   20  void bar(int n) {\n   21    for (int i = 0; i < n; i++)\n   ..\n   23  }\n   24  \n   25: // Checks if loop unroll is invoked by normal compile, but not thinlto compile.\n   26  // SAMPLEPGO-LABEL: define {{(dso_local )?}}void @unroll\n   27: // THINLTO-LABEL: define {{(dso_local )?}}void @unroll\n   28  // SAMPLEPGO: call{{.*}}baz\n   29  // SAMPLEPGO: call{{.*}}baz\n   30: // THINLTO: call{{.*}}baz\n   31: // THINLTO-NOT: call{{.*}}baz\n   32  void unroll() {\n   33    for (int i = 0; i < 2; i++)\n   ..\n   35  }\n   36  \n   37: // Checks that icp is not invoked for ThinLTO, but invoked for normal samplepgo.\n   38  // SAMPLEPGO-LABEL: define {{(dso_local )?}}void @icp\n   39: // THINLTO-LABEL: define {{(dso_local )?}}void @icp\n   40  // SAMPLEPGO: if.true.direct_targ\n   41  // FIXME: the following condition needs to be reversed once\n   42  //        LTOPreLinkDefaultPipeline is customized.\n   43: // THINLTO-NOT: if.true.direct_targ\n   44  void icp(void (*p)()) {\n   45    p();\n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-backend-option.ll:\n    1: ; Test to ensure -backend-options work when invoking the ThinLTO backend path.\n    2  \n    3  ; This test uses a non-existent backend option to test that backend options are\n    .\n    8  \n    9  ; RUN: %clang -flto=thin -c -o %t.o %s\n   10: ; RUN: llvm-lto -thinlto -o %t %t.o\n   11: ; RUN: not %clang_cc1 -x ir %t.o -fthinlto-index=%t.thinlto.bc -backend-option -nonexistent -emit-obj -o /dev/null 2>&1 | FileCheck %s -check-prefix=UNKNOWN\n   12  ; UNKNOWN: clang: Unknown command line argument '-nonexistent'\n   13  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-debug-pm.c:\n    1  // Test to ensure -fdebug-pass-manager works when invoking the\n    2: // ThinLTO backend path with the new PM.\n    3  // REQUIRES: x86-registered-target\n    4  // RUN: %clang_cc1 -o %t.o -flto=thin -fexperimental-new-pass-manager -triple x86_64-unknown-linux-gnu -emit-llvm-bc %s\n    5: // RUN: llvm-lto -thinlto -o %t %t.o\n    6: // RUN: %clang_cc1 -triple x86_64-unknown-linux-gnu -emit-obj -O2 -o %t2.o -x ir %t.o -fthinlto-index=%t.thinlto.bc -fdebug-pass-manager -fexperimental-new-pass-manager 2>&1 | FileCheck %s\n    7  // CHECK: Running pass:\n    8  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-distributed-backend-skip.ll:\n    1  ; REQUIRES: x86-registered-target\n    2  \n    3: ; Check that ThinLTO backend respects \"SkipModuleByDistributedBackend\"\n    4  ; flag which can be set by indexing.\n    5  \n    6: ; RUN: opt -thinlto-bc -o %t.o %s\n    7  \n    8  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n    9: ; RUN:   -fthinlto-index=%S/Inputs/thinlto-distributed-backend-skip.bc \\\n   10  ; RUN:   -emit-llvm -o - -x ir %t.o | FileCheck %s\n   11  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-distributed-cfi-devirt.ll:\n    1  ; REQUIRES: x86-registered-target\n    2  \n    3: ; Backend test for distribute ThinLTO with CFI.\n    4  ; It additionally enables -fwhole-program-vtables to get more information in\n    5  ; TYPE_IDs of GLOBALVAL_SUMMARY_BLOCK.\n    6  \n    7: ; RUN: opt -thinlto-bc -o %t.o %s\n    8  \n    9: ; RUN: llvm-lto2 run -thinlto-distributed-indexes %t.o \\\n   10  ; RUN:   -o %t2.index \\\n   11  ; RUN:   -r=%t.o,test,px \\\n   ..\n   22  \n   23  ; Ensure that typeids are in the index.\n   24: ; RUN: llvm-bcanalyzer -dump %t.o.thinlto.bc | FileCheck %s\n   25  ; CHECK-LABEL: <GLOBALVAL_SUMMARY_BLOCK\n   26  ; CHECK: <TYPE_ID op0=0 op1=6 op2=4 op3=7 op4=0 op5=0 op6=0 op7=0 op8=0 op9=2 op10=6 op11=0 op12=0 op13=8 op14=1 op15=6 op16=9 op17=0/>\n   ..\n   31  \n   32  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n   33: ; RUN:   -emit-obj -fthinlto-index=%t.o.thinlto.bc \\\n   34  ; RUN:   -emit-llvm -o - -x ir %t.o | FileCheck %s --check-prefixes=CHECK-IR\n   35  \n   36  ; Check that backend does not fail generating native code.\n   37  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n   38: ; RUN:   -emit-obj -fthinlto-index=%t.o.thinlto.bc \\\n   39  ; RUN:   -o %t.native.o -x ir %t.o\n   40  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-distributed-cfi.ll:\n    1  ; REQUIRES: x86-registered-target\n    2  \n    3: ; Backend test for distribute ThinLTO with CFI.\n    4  \n    5: ; RUN: opt -thinlto-bc -o %t.o %s\n    6  \n    7: ; RUN: llvm-lto2 run -thinlto-distributed-indexes %t.o \\\n    8  ; RUN:   -o %t2.index \\\n    9  ; RUN:   -r=%t.o,test,px \\\n   ..\n   13  \n   14  ; Check that typeids are in the index.\n   15: ; RUN: llvm-bcanalyzer -dump %t.o.thinlto.bc | FileCheck %s\n   16  ; CHECK-LABEL: <GLOBALVAL_SUMMARY_BLOCK\n   17  ; CHECK: <TYPE_ID op0=0 op1=6 op2=3 op3=0 op4=0 op5=0 op6=0 op7=0/>\n   ..\n   22  \n   23  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n   24: ; RUN:   -emit-obj -fthinlto-index=%t.o.thinlto.bc \\\n   25  ; RUN:   -emit-llvm -o - -x ir %t.o | FileCheck %s --check-prefixes=CHECK-IR\n   26  \n   27  ; Ensure that backend does not fail generating native code.\n   28  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n   29: ; RUN:   -emit-obj -fthinlto-index=%t.o.thinlto.bc \\\n   30  ; RUN:   -o %t.native.o -x ir %t.o\n   31  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-distributed.ll:\n    1  ; REQUIRES: x86-registered-target\n    2  \n    3: ; Trivial test for distributes ThinLTO\n    4  \n    5: ; RUN: opt -thinlto-bc -o %t.o %s\n    6  \n    7: ; RUN: llvm-lto2 run -thinlto-distributed-indexes %t.o \\\n    8  ; RUN:   -o %t2.index \\\n    9  ; RUN:   -r=%t.o,main,px\n   10  \n   11  ; RUN: %clang_cc1 -triple x86_64-grtev4-linux-gnu \\\n   12: ; RUN:   -emit-obj -fthinlto-index=%t.o.thinlto.bc \\\n   13  ; RUN:   -o %t.native.o -x ir %t.o\n   14  \n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-emit-llvm.c:\n    1  // Test to ensure -emit-llvm and -emit-llvm-bc work when invoking the\n    2: // ThinLTO backend path.\n    3  // RUN: %clang -O2 %s -flto=thin -c -o %t.o\n    4: // RUN: llvm-lto -thinlto -o %t %t.o\n    5: // RUN: %clang_cc1 -O2 -x ir %t.o -fthinlto-index=%t.thinlto.bc -emit-llvm -o - | FileCheck %s\n    6: // RUN: %clang_cc1 -O2 -x ir %t.o -fthinlto-index=%t.thinlto.bc -emit-llvm-bc -o - | llvm-dis -o - | FileCheck %s\n    7  \n    8  // CHECK: define{{.*}} void @foo()\n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto-multi-module.ll:\n    2  \n    3  ; RUN: opt -module-summary -o %t1.o %s\n    4: ; RUN: llvm-lto -thinlto -o %t %t1.o\n    5  \n    6: ; RUN: opt -module-summary -o %t2.o %S/Inputs/thinlto-multi-module.ll\n    7  ; RUN: llvm-cat -b -o %t1cat.o %t2.o %t1.o\n    8  ; RUN: cp %t1cat.o %t1.o\n    9: ; RUN: %clang -target x86_64-unknown-linux-gnu -O2 -o %t3.o -x ir %t1.o -c -fthinlto-index=%t.thinlto.bc\n   10  ; RUN: llvm-nm %t3.o | FileCheck --check-prefix=CHECK-OBJ %s\n   11  ; CHECK-OBJ: T f1\n\n/home/mw/llvm/tools/clang/test/CodeGen/thinlto_backend.ll:\n    2  \n    3  ; RUN: opt -module-summary -o %t1.o %s\n    4: ; RUN: opt -module-summary -o %t2.o %S/Inputs/thinlto_backend.ll\n    5: ; RUN: llvm-lto -thinlto -o %t %t1.o %t2.o\n    6  \n    7  ; Ensure clang -cc1 give expected error for incorrect input type\n    8: ; RUN: not %clang_cc1 -O2 -o %t1.o -x c %s -c -fthinlto-index=%t.thinlto.bc 2>&1 | FileCheck %s -check-prefix=CHECK-WARNING\n    9: ; CHECK-WARNING: error: invalid argument '-fthinlto-index={{.*}}' only allowed with '-x ir'\n   10  \n   11  ; Ensure we get expected error for missing index file\n   12: ; RUN: %clang -O2 -o %t4.o -x ir %t1.o -c -fthinlto-index=bad.thinlto.bc 2>&1 | FileCheck %s -check-prefix=CHECK-ERROR1\n   13: ; CHECK-ERROR1: Error loading index file 'bad.thinlto.bc'\n   14  \n   15: ; Ensure we ignore empty index file, and run non-ThinLTO compilation which\n   16  ; would not import f2\n   17: ; RUN: touch %t4.thinlto.bc\n   18: ; RUN: %clang -target x86_64-unknown-linux-gnu -O2 -o %t4.o -x ir %t1.o -c -fthinlto-index=%t4.thinlto.bc\n   19  ; RUN: llvm-nm %t4.o | FileCheck --check-prefix=CHECK-OBJ-IGNORE-EMPTY %s\n   20  ; CHECK-OBJ-IGNORE-EMPTY: T f1\n   21  ; CHECK-OBJ-IGNORE-EMPTY: U f2\n   22  \n   23: ; Ensure we don't fail with index and non-ThinLTO object file, and output must\n   24  ; be empty file.\n   25  ; RUN: opt -o %t5.o %s\n   26: ; RUN: %clang -target x86_64-unknown-linux-gnu -O2 -o %t4.o -x ir %t5.o -c -fthinlto-index=%t.thinlto.bc\n   27  ; RUN: llvm-nm %t4.o | count 0\n   28  \n   29  ; Ensure f2 was imported\n   30: ; RUN: %clang -target x86_64-unknown-linux-gnu -O2 -o %t3.o -x ir %t1.o -c -fthinlto-index=%t.thinlto.bc\n   31  ; RUN: llvm-nm %t3.o | FileCheck --check-prefix=CHECK-OBJ %s\n   32  ; CHECK-OBJ: T f1\n   ..\n   35  ; Ensure we get expected error for input files without summaries\n   36  ; RUN: opt -o %t2.o %s\n   37: ; RUN: %clang -target x86_64-unknown-linux-gnu -O2 -o %t3.o -x ir %t1.o -c -fthinlto-index=%t.thinlto.bc 2>&1 | FileCheck %s -check-prefix=CHECK-ERROR2\n   38  ; CHECK-ERROR2: Error loading imported file '{{.*}}': Could not find module summary\n   39  \n\n/home/mw/llvm/tools/clang/test/CodeGen/Inputs/thinlto-multi-module.ll:\n    6  }\n    7  \n    8: !0 = !{i32 1, !\"ThinLTO\", i32 0}\n    9  !llvm.module.flags = !{ !0 }\n   10  \n\n/home/mw/llvm/tools/clang/test/Driver/thinlto.c:\n    9  // RUN: FileCheck -check-prefix=CHECK-COMPILELINK-ACTIONS < %t %s\n   10  //\n   11: // CHECK-COMPILELINK-ACTIONS: 0: input, \"{{.*}}thinlto.c\", c\n   12  // CHECK-COMPILELINK-ACTIONS: 1: preprocessor, {0}, cpp-output\n   13  // CHECK-COMPILELINK-ACTIONS: 2: compiler, {1}, ir\n   ..\n   15  // CHECK-COMPILELINK-ACTIONS: 4: linker, {3}, image\n   16  \n   17: // -flto=thin should cause link using gold plugin with thinlto option,\n   18  // also confirm that it takes precedence over earlier -fno-lto and -flto=full.\n   19  // RUN: %clang -target x86_64-unknown-linux -### %s -flto=full -fno-lto -flto=thin 2> %t\n   ..\n   21  //\n   22  // CHECK-LINK-THIN-ACTION: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   23: // CHECK-LINK-THIN-ACTION: \"-plugin-opt=thinlto\"\n   24  \n   25  // Check that subsequent -flto=full takes precedence\n   ..\n   28  //\n   29  // CHECK-LINK-FULL-ACTION: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   30: // CHECK-LINK-FULL-ACTION-NOT: \"-plugin-opt=thinlto\"\n   31  \n   32  // Check that subsequent -fno-lto takes precedence\n   ..\n   35  //\n   36  // CHECK-LINK-NOLTO-ACTION-NOT: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   37: // CHECK-LINK-NOLTO-ACTION-NOT: \"-plugin-opt=thinlto\"\n   38  \n\n/home/mw/llvm/tools/clang/test/Driver/thinlto.cu:\n   14  // RUN: FileCheck -check-prefix=CHECK-COMPILELINK-ACTIONS < %t %s\n   15  //\n   16: // CHECK-COMPILELINK-ACTIONS: 0: input, \"{{.*}}thinlto.cu\", cuda, (host-cuda)\n   17  // CHECK-COMPILELINK-ACTIONS: 1: preprocessor, {0}, cuda-cpp-output\n   18  // CHECK-COMPILELINK-ACTIONS: 2: compiler, {1}, ir, (host-cuda)\n   19: // CHECK-COMPILELINK-ACTIONS: 3: input, \"{{.*}}thinlto.cu\", cuda, (device-cuda, sm_20)\n   20  // CHECK-COMPILELINK-ACTIONS: 4: preprocessor, {3}, cuda-cpp-output, (device-cuda, sm_20)\n   21  // CHECK-COMPILELINK-ACTIONS: 5: compiler, {4}, ir, (device-cuda, sm_20)\n   ..\n   29  // CHECK-COMPILELINK-ACTIONS: 13: linker, {12}, image, (host-cuda)\n   30  \n   31: // -flto=thin should cause link using gold plugin with thinlto option,\n   32  // also confirm that it takes precedence over earlier -fno-lto and -flto=full.\n   33  // RUN: %clangxx -nocudainc -nocudalib \\\n   ..\n   36  //\n   37  // CHECK-LINK-THIN-ACTION: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   38: // CHECK-LINK-THIN-ACTION: \"-plugin-opt=thinlto\"\n   39  \n   40  // Check that subsequent -flto=full takes precedence\n   ..\n   44  //\n   45  // CHECK-LINK-FULL-ACTION: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   46: // CHECK-LINK-FULL-ACTION-NOT: \"-plugin-opt=thinlto\"\n   47  \n   48  // Check that subsequent -fno-lto takes precedence\n   ..\n   52  //\n   53  // CHECK-LINK-NOLTO-ACTION-NOT: \"-plugin\" \"{{.*}}{{[/\\\\]}}LLVMgold.{{dll|dylib|so}}\"\n   54: // CHECK-LINK-NOLTO-ACTION-NOT: \"-plugin-opt=thinlto\"\n   55  \n\n/home/mw/llvm/tools/clang/test/Driver/thinlto_backend.c:\n    1  // RUN: %clang -O2 %s -flto=thin -c -o %t.o\n    2: // RUN: llvm-lto -thinlto -o %t %t.o\n    3  \n    4: // -fthinlto_index should be passed to cc1\n    5: // RUN: %clang -O2 -o %t1.o -x ir %t.o -c -fthinlto-index=%t.thinlto.bc -### 2>&1 | FileCheck %s -check-prefix=CHECK-THINLTOBE-ACTION\n    6: // CHECK-THINLTOBE-ACTION: -fthinlto-index=\n    7  \n    8  // Ensure clang driver gives the expected error for incorrect input type\n    9: // RUN: not %clang -O2 -o %t1.o %s -c -fthinlto-index=%t.thinlto.bc 2>&1 | FileCheck %s -check-prefix=CHECK-WARNING\n   10: // CHECK-WARNING: error: invalid argument '-fthinlto-index={{.*}}' only allowed with '-x ir'\n   11  \n\n/home/mw/llvm/tools/clang/test/Integration/thinlto_profile_sample_accurate.c:\n    1: // Test to ensure -emit-llvm profile-sample-accurate is honored in ThinLTO.\n    2  // RUN: %clang -O2 %s -flto=thin -fprofile-sample-accurate -c -o %t.o\n    3: // RUN: llvm-lto -thinlto -o %t %t.o\n    4: // RUN: %clang_cc1 -O2 -x ir %t.o -fthinlto-index=%t.thinlto.bc -emit-llvm -o - | FileCheck %s\n    5  \n    6  // CHECK: define{{.*}} void @foo()\n\n/home/mw/llvm/tools/gold/gold-plugin.cpp:\n  134    // Default parallelism of 0 used to indicate that user did not specify.\n  135    // Actual parallelism default value depends on implementation.\n  136:   // Currently only affects ThinLTO, where the default is\n  137    // llvm::heavyweight_hardware_concurrency.\n  138    static unsigned Parallelism = 0;\n  ...\n  148    static std::string triple;\n  149    static std::string mcpu;\n  150:   // When the thinlto plugin option is specified, only read the function\n  151    // the information from intermediate files and write a combined\n  152:   // global index for the ThinLTO backends.\n  153:   static bool thinlto = false;\n  154:   // If false, all ThinLTO backend compilations through code gen are performed\n  155    // using multiple threads in the gold-plugin, before handing control back to\n  156    // gold. If true, write individual backend index files which reflect\n  157    // the import decisions, and exit afterwards. The assumption is\n  158    // that the build system will launch the backend processes.\n  159:   static bool thinlto_index_only = false;\n  160    // If non-empty, holds the name of a file in which to write the list of\n  161    // oject files gold selected for inclusion in the link after symbol\n  162    // resolution (i.e. they had selected symbols). This will only be non-empty\n  163:   // in the thinlto_index_only case. It is used to identify files, which may\n  164    // have originally been within archive libraries specified via\n  165    // --start-lib/--end-lib pairs, that should be included in the final\n  ...\n  167    // may change the symbol resolution detected in the final link and which\n  168    // files to include out of --start-lib/--end-lib libraries as a result).\n  169:   static std::string thinlto_linked_objects_file;\n  170    // If true, when generating individual index files for distributed backends,\n  171    // also generate a \"${bitcodefile}.imports\" file at the same location for each\n  172    // bitcode file, listing the files it imports from in plain text. This is to\n  173    // support distributed build file staging.\n  174:   static bool thinlto_emit_imports_files = false;\n  175    // Option to control where files for a distributed backend (the individual\n  176    // index files and optional imports files) are created.\n  ...\n  179    // corresponding bitcode file, will use a path formed by replacing the\n  180    // bitcode file's path prefix matching oldprefix with newprefix.\n  181:   static std::string thinlto_prefix_replace;\n  182    // Option to control the name of modules encoded in the individual index\n  183    // files for a distributed backend. This enables the use of minimized\n  ...\n  185    // file used in the backend differs just in some part of the file suffix.\n  186    // If specified, expects a string of the form \"oldsuffix:newsuffix\".\n  187:   static std::string thinlto_object_suffix_replace;\n  188:   // Optional path to a directory for caching ThinLTO objects.\n  189    static std::string cache_dir;\n  190:   // Optional pruning policy for ThinLTO caches.\n  191    static std::string cache_policy;\n  192    // Additional options to pass into the code generator.\n  ...\n  221      } else if (opt == \"disable-output\") {\n  222        TheOutputType = OT_DISABLE;\n  223:     } else if (opt == \"thinlto\") {\n  224:       thinlto = true;\n  225:     } else if (opt == \"thinlto-index-only\") {\n  226:       thinlto_index_only = true;\n  227:     } else if (opt.startswith(\"thinlto-index-only=\")) {\n  228:       thinlto_index_only = true;\n  229:       thinlto_linked_objects_file = opt.substr(strlen(\"thinlto-index-only=\"));\n  230:     } else if (opt == \"thinlto-emit-imports-files\") {\n  231:       thinlto_emit_imports_files = true;\n  232:     } else if (opt.startswith(\"thinlto-prefix-replace=\")) {\n  233:       thinlto_prefix_replace = opt.substr(strlen(\"thinlto-prefix-replace=\"));\n  234:       if (thinlto_prefix_replace.find(';') == std::string::npos)\n  235:         message(LDPL_FATAL, \"thinlto-prefix-replace expects 'old;new' format\");\n  236:     } else if (opt.startswith(\"thinlto-object-suffix-replace=\")) {\n  237:       thinlto_object_suffix_replace =\n  238:           opt.substr(strlen(\"thinlto-object-suffix-replace=\"));\n  239:       if (thinlto_object_suffix_replace.find(';') == std::string::npos)\n  240          message(LDPL_FATAL,\n  241:                 \"thinlto-object-suffix-replace expects 'old;new' format\");\n  242      } else if (opt.startswith(\"cache-dir=\")) {\n  243        cache_dir = opt.substr(strlen(\"cache-dir=\"));\n  ...\n  516    // Keep track of the first handle for each file descriptor, since there are\n  517    // multiple in the case of an archive. This is used later in the case of\n  518:   // ThinLTO parallel backends to ensure that each file is only opened and\n  519    // released once.\n  520    auto LeaderHandle =\n  521        FDToLeaderHandle.insert(std::make_pair(file->fd, file->handle)).first;\n  522    cf.leader_handle = LeaderHandle->second;\n  523:   // Save the filesize since for parallel ThinLTO backends we can only\n  524    // invoke get_input_file once per archive (only for the leader handle).\n  525    cf.filesize = file->filesize;\n  ...\n  636  }\n  637  \n  638: /// Parse the thinlto-object-suffix-replace option into the \\p OldSuffix and\n  639  /// \\p NewSuffix strings, if it was specified.\n  640: static void getThinLTOOldAndNewSuffix(std::string &OldSuffix,\n  641                                        std::string &NewSuffix) {\n  642:   assert(options::thinlto_object_suffix_replace.empty() ||\n  643:          options::thinlto_object_suffix_replace.find(\";\") != StringRef::npos);\n  644:   StringRef SuffixReplace = options::thinlto_object_suffix_replace;\n  645    std::tie(OldSuffix, NewSuffix) = SuffixReplace.split(';');\n  646  }\n  ...\n  648  /// Given the original \\p Path to an output file, replace any filename\n  649  /// suffix matching \\p OldSuffix with \\p NewSuffix.\n  650: static std::string getThinLTOObjectFileName(StringRef Path, StringRef OldSuffix,\n  651                                              StringRef NewSuffix) {\n  652    if (OldSuffix.empty() && NewSuffix.empty())\n  ...\n  794  }\n  795  \n  796: /// Parse the thinlto_prefix_replace option into the \\p OldPrefix and\n  797  /// \\p NewPrefix strings, if it was specified.\n  798: static void getThinLTOOldAndNewPrefix(std::string &OldPrefix,\n  799                                        std::string &NewPrefix) {\n  800:   StringRef PrefixReplace = options::thinlto_prefix_replace;\n  801    assert(PrefixReplace.empty() || PrefixReplace.find(\";\") != StringRef::npos);\n  802    std::tie(OldPrefix, NewPrefix) = PrefixReplace.split(';');\n  ...\n  806  /// OnIndexWrite is callback to let caller know when LTO writes index files.\n  807  /// LinkedObjectsFile is an output stream to write the list of object files for\n  808: /// the final ThinLTO linking. Can be nullptr.\n  809  static std::unique_ptr<LTO> createLTO(IndexWriteCallback OnIndexWrite,\n  810                                        raw_fd_ostream *LinkedObjectsFile) {\n  ...\n  830    if (options::Parallelism)\n  831      Backend = createInProcessThinBackend(options::Parallelism);\n  832:   if (options::thinlto_index_only) {\n  833      std::string OldPrefix, NewPrefix;\n  834:     getThinLTOOldAndNewPrefix(OldPrefix, NewPrefix);\n  835      Backend = createWriteIndexesThinBackend(OldPrefix, NewPrefix,\n  836:                                             options::thinlto_emit_imports_files,\n  837                                              LinkedObjectsFile, OnIndexWrite);\n  838    }\n  ...\n  881  \n  882  // Write empty files that may be expected by a distributed build\n  883: // system when invoked with thinlto_index_only. This is invoked when\n  884  // the linker has decided not to include the given module in the\n  885  // final link. Frequently the distributed build system will want to\n  886  // confirm that all expected outputs are created based on all of the\n  887  // modules provided to the linker.\n  888: // If SkipModule is true then .thinlto.bc should contain just\n  889  // SkipModuleByDistributedBackend flag which requests distributed backend\n  890  // to skip the compilation of the corresponding module and produce an empty\n  ...\n  895                                                bool SkipModule) {\n  896    std::string NewModulePath =\n  897:       getThinLTOOutputFile(ModulePath, OldPrefix, NewPrefix);\n  898    std::error_code EC;\n  899    {\n  900:     raw_fd_ostream OS(NewModulePath + \".thinlto.bc\", EC,\n  901                        sys::fs::OpenFlags::F_None);\n  902      if (EC)\n  903        message(LDPL_FATAL, \"Failed to write '%s': %s\",\n  904:               (NewModulePath + \".thinlto.bc\").c_str(), EC.message().c_str());\n  905  \n  906      if (SkipModule) {\n  ...\n  910      }\n  911    }\n  912:   if (options::thinlto_emit_imports_files) {\n  913      raw_fd_ostream OS(NewModulePath + \".imports\", EC,\n  914                        sys::fs::OpenFlags::F_None);\n  ...\n  920  \n  921  // Creates and returns output stream with a list of object files for final\n  922: // linking of distributed ThinLTO.\n  923  static std::unique_ptr<raw_fd_ostream> CreateLinkedObjectsFile() {\n  924:   if (options::thinlto_linked_objects_file.empty())\n  925      return nullptr;\n  926:   assert(options::thinlto_index_only);\n  927    std::error_code EC;\n  928    auto LinkedObjectsFile = llvm::make_unique<raw_fd_ostream>(\n  929:       options::thinlto_linked_objects_file, EC, sys::fs::OpenFlags::F_None);\n  930    if (EC)\n  931      message(LDPL_FATAL, \"Failed to create '%s': %s\",\n  932:             options::thinlto_linked_objects_file.c_str(), EC.message().c_str());\n  933    return LinkedObjectsFile;\n  934  }\n  ...\n  937  static std::vector<std::pair<SmallString<128>, bool>> runLTO() {\n  938    // Map to own RAII objects that manage the file opening and releasing\n  939:   // interfaces with gold. This is needed only for ThinLTO mode, since\n  940    // unlike regular LTO, where addModule will result in the opened file\n  941    // being merged into a new combined module, we need to keep these files open\n  ...\n  954  \n  955    std::string OldPrefix, NewPrefix;\n  956:   if (options::thinlto_index_only)\n  957:     getThinLTOOldAndNewPrefix(OldPrefix, NewPrefix);\n  958  \n  959    std::string OldSuffix, NewSuffix;\n  960:   getThinLTOOldAndNewSuffix(OldSuffix, NewSuffix);\n  961  \n  962    for (claimed_file &F : Modules) {\n  963:     if (options::thinlto && !HandleToInputFile.count(F.leader_handle))\n  964        HandleToInputFile.insert(std::make_pair(\n  965            F.leader_handle, llvm::make_unique<PluginInputFile>(F.handle)));\n  ...\n  968      // will locate the full bitcode files for compiling/importing.\n  969      std::string Identifier =\n  970:         getThinLTOObjectFileName(F.name, OldSuffix, NewSuffix);\n  971      auto ObjFilename = ObjectToIndexFileState.insert({Identifier, false});\n  972      assert(ObjFilename.second);\n  973      if (const void *View = getSymbolsAndView(F))\n  974        addModule(*Lto, F, View, ObjFilename.first->first());\n  975:     else if (options::thinlto_index_only) {\n  976        ObjFilename.first->second = true;\n  977        writeEmptyDistributedBuildOutputs(Identifier, OldPrefix, NewPrefix,\n  ...\n 1012    // Write empty output files that may be expected by the distributed build\n 1013    // system.\n 1014:   if (options::thinlto_index_only)\n 1015      for (auto &Identifier : ObjectToIndexFileState)\n 1016        if (!Identifier.getValue())\n ....\n 1037      return LDPS_OK;\n 1038  \n 1039:   if (options::thinlto_index_only) {\n 1040      if (llvm::AreStatisticsEnabled())\n 1041        llvm::PrintStatistics();\n\n/home/mw/llvm/tools/llvm-link/llvm-link.cpp:\n   52  \n   53  // Option to simulate function importing for testing. This enables using\n   54: // llvm-link to simulate ThinLTO backend processes.\n   55  static cl::list<std::string> Imports(\n   56      \"import\", cl::ZeroOrMore, cl::value_desc(\"function:filename\"),\n   ..\n  313  \n  314        // Promotion\n  315:       if (renameModuleForThinLTO(*M, *Index))\n  316          return true;\n  317      }\n\n/home/mw/llvm/tools/llvm-lto/llvm-lto.cpp:\n   33  #include \"llvm/LTO/legacy/LTOCodeGenerator.h\"\n   34  #include \"llvm/LTO/legacy/LTOModule.h\"\n   35: #include \"llvm/LTO/legacy/ThinLTOCodeGenerator.h\"\n   36  #include \"llvm/Support/Allocator.h\"\n   37  #include \"llvm/Support/Casting.h\"\n   ..\n   72  \n   73  static cl::opt<bool>\n   74:     IndexStats(\"thinlto-index-stats\",\n   75                 cl::desc(\"Print statistic for the index in every input files\"),\n   76                 cl::init(false));\n   ..\n  100  \n  101  static cl::opt<bool>\n  102:     ThinLTO(\"thinlto\", cl::init(false),\n  103:             cl::desc(\"Only write combined global index for ThinLTO backends\"));\n  104  \n  105: enum ThinLTOModes {\n  106    THINLINK,\n  107    THINDISTRIBUTE,\n  ...\n  115  };\n  116  \n  117: cl::opt<ThinLTOModes> ThinLTOMode(\n  118:     \"thinlto-action\", cl::desc(\"Perform a single ThinLTO stage:\"),\n  119      cl::values(\n  120          clEnumValN(\n  ...\n  126                     \"Emit imports files for distributed backends.\"),\n  127          clEnumValN(THINPROMOTE, \"promote\",\n  128:                    \"Perform pre-import promotion (requires -thinlto-index).\"),\n  129          clEnumValN(THINIMPORT, \"import\", \"Perform both promotion and \"\n  130                                           \"cross-module importing (requires \"\n  131:                                          \"-thinlto-index).\"),\n  132          clEnumValN(THININTERNALIZE, \"internalize\",\n  133                     \"Perform internalization driven by -exported-symbol \"\n  134:                    \"(requires -thinlto-index).\"),\n  135:         clEnumValN(THINOPT, \"optimize\", \"Perform ThinLTO optimizations.\"),\n  136          clEnumValN(THINCODEGEN, \"codegen\", \"CodeGen (expected to match llc)\"),\n  137:         clEnumValN(THINALL, \"run\", \"Perform ThinLTO end-to-end\")));\n  138  \n  139  static cl::opt<std::string>\n  140:     ThinLTOIndex(\"thinlto-index\",\n  141                   cl::desc(\"Provide the index produced by a ThinLink, required \"\n  142                            \"to perform the promotion and/or importing.\"));\n  143  \n  144: static cl::opt<std::string> ThinLTOPrefixReplace(\n  145:     \"thinlto-prefix-replace\",\n  146      cl::desc(\"Control where files for distributed backends are \"\n  147               \"created. Expects 'oldprefix;newprefix' and if path \"\n  ...\n  149               \"replaced with newprefix.\"));\n  150  \n  151: static cl::opt<std::string> ThinLTOModuleId(\n  152:     \"thinlto-module-id\",\n  153      cl::desc(\"For the module ID for the file to process, useful to \"\n  154               \"match what is in the index.\"));\n  155  \n  156  static cl::opt<std::string>\n  157:     ThinLTOCacheDir(\"thinlto-cache-dir\", cl::desc(\"Enable ThinLTO caching.\"));\n  158  \n  159  static cl::opt<int>\n  160:     ThinLTOCachePruningInterval(\"thinlto-cache-pruning-interval\",\n  161:     cl::init(1200), cl::desc(\"Set ThinLTO cache pruning interval.\"));\n  162  \n  163  static cl::opt<int>\n  164:     ThinLTOCacheMaxSizeBytes(\"thinlto-cache-max-size-bytes\",\n  165:     cl::desc(\"Set ThinLTO cache pruning directory maximum size in bytes.\"));\n  166  \n  167  static cl::opt<int>\n  168:     ThinLTOCacheMaxSizeFiles(\"thinlto-cache-max-size-files\", cl::init(1000000),\n  169:     cl::desc(\"Set ThinLTO cache pruning directory maximum number of files.\"));\n  170  \n  171: static cl::opt<std::string> ThinLTOSaveTempsPrefix(\n  172:     \"thinlto-save-temps\",\n  173:     cl::desc(\"Save ThinLTO temp files using filenames created by adding \"\n  174               \"suffixes to the given file path prefix.\"));\n  175  \n  176: static cl::opt<std::string> ThinLTOGeneratedObjectsDir(\n  177:     \"thinlto-save-objects\",\n  178:     cl::desc(\"Save ThinLTO generated object files using filenames created in \"\n  179               \"the given directory.\"));\n  180  \n  ...\n  374  /// Create a combined index file from the input IR files and write it.\n  375  ///\n  376: /// This is meant to enable testing of ThinLTO combined index generation,\n  377: /// currently available via the gold plugin via -thinlto.\n  378  static void createCombinedModuleSummaryIndex() {\n  379    ModuleSummaryIndex CombinedIndex(/*IsPerformingAnalysis=*/false);\n  ...\n  387    std::error_code EC;\n  388    assert(!OutputFilename.empty());\n  389:   raw_fd_ostream OS(OutputFilename + \".thinlto.bc\", EC,\n  390                      sys::fs::OpenFlags::F_None);\n  391:   error(EC, \"error opening the file '\" + OutputFilename + \".thinlto.bc'\");\n  392    WriteIndexToFile(CombinedIndex, OS);\n  393    OS.close();\n  394  }\n  395  \n  396: /// Parse the thinlto_prefix_replace option into the \\p OldPrefix and\n  397  /// \\p NewPrefix strings, if it was specified.\n  398: static void getThinLTOOldAndNewPrefix(std::string &OldPrefix,\n  399                                        std::string &NewPrefix) {\n  400:   assert(ThinLTOPrefixReplace.empty() ||\n  401:          ThinLTOPrefixReplace.find(\";\") != StringRef::npos);\n  402:   StringRef PrefixReplace = ThinLTOPrefixReplace;\n  403    std::pair<StringRef, StringRef> Split = PrefixReplace.split(\";\");\n  404    OldPrefix = Split.first.str();\n  ...\n  409  /// prefix matching \\p OldPrefix with \\p NewPrefix. Also, create the\n  410  /// resulting directory if it does not yet exist.\n  411: static std::string getThinLTOOutputFile(const std::string &Path,\n  412                                          const std::string &OldPrefix,\n  413                                          const std::string &NewPrefix) {\n  ...\n  425  }\n  426  \n  427: namespace thinlto {\n  428  \n  429  std::vector<std::unique_ptr<MemoryBuffer>>\n  ...\n  442  \n  443  std::unique_ptr<ModuleSummaryIndex> loadCombinedIndex() {\n  444:   if (ThinLTOIndex.empty())\n  445:     report_fatal_error(\"Missing -thinlto-index for ThinLTO promotion stage\");\n  446:   ExitOnError ExitOnErr(\"llvm-lto: error loading file '\" + ThinLTOIndex +\n  447                          \"': \");\n  448:   return ExitOnErr(getModuleSummaryIndexForFile(ThinLTOIndex));\n  449  }\n  450  \n  ...\n  459    maybeVerifyModule(*M);\n  460  \n  461:   if (ThinLTOModuleId.getNumOccurrences()) {\n  462      if (InputFilenames.size() != 1)\n  463        report_fatal_error(\"Can't override the module id for multiple files\");\n  464:     M->setModuleIdentifier(ThinLTOModuleId);\n  465    }\n  466    return M;\n  ...\n  475  }\n  476  \n  477: class ThinLTOProcessing {\n  478  public:\n  479:   ThinLTOCodeGenerator ThinGenerator;\n  480  \n  481:   ThinLTOProcessing(const TargetOptions &Options) {\n  482      ThinGenerator.setCodePICModel(getRelocModel());\n  483      ThinGenerator.setTargetOptions(Options);\n  484:     ThinGenerator.setCacheDir(ThinLTOCacheDir);\n  485:     ThinGenerator.setCachePruningInterval(ThinLTOCachePruningInterval);\n  486:     ThinGenerator.setCacheMaxSizeFiles(ThinLTOCacheMaxSizeFiles);\n  487:     ThinGenerator.setCacheMaxSizeBytes(ThinLTOCacheMaxSizeBytes);\n  488      ThinGenerator.setFreestanding(EnableFreestanding);\n  489  \n  ...\n  494  \n  495    void run() {\n  496:     switch (ThinLTOMode) {\n  497      case THINLINK:\n  498        return thinLink();\n  ...\n  545  \n  546    /// Load the combined index from disk, then compute and generate\n  547:   /// individual index files suitable for ThinLTO distributed backend builds\n  548    /// on the files mentioned on the command line (these must match the index\n  549    /// content).\n  ...\n  556  \n  557      std::string OldPrefix, NewPrefix;\n  558:     getThinLTOOldAndNewPrefix(OldPrefix, NewPrefix);\n  559  \n  560      auto Index = loadCombinedIndex();\n  ...\n  563        // be written to its index.\n  564        std::map<std::string, GVSummaryMapTy> ModuleToSummariesForIndex;\n  565:       ThinLTOCodeGenerator::gatherImportedSummariesForModule(\n  566            Filename, *Index, ModuleToSummariesForIndex);\n  567  \n  568        std::string OutputName = OutputFilename;\n  569        if (OutputName.empty()) {\n  570:         OutputName = Filename + \".thinlto.bc\";\n  571        }\n  572:       OutputName = getThinLTOOutputFile(OutputName, OldPrefix, NewPrefix);\n  573        std::error_code EC;\n  574        raw_fd_ostream OS(OutputName, EC, sys::fs::OpenFlags::F_None);\n  ...\n  588  \n  589      std::string OldPrefix, NewPrefix;\n  590:     getThinLTOOldAndNewPrefix(OldPrefix, NewPrefix);\n  591  \n  592      auto Index = loadCombinedIndex();\n  ...\n  596          OutputName = Filename + \".imports\";\n  597        }\n  598:       OutputName = getThinLTOOutputFile(OutputName, OldPrefix, NewPrefix);\n  599:       ThinLTOCodeGenerator::emitImports(Filename, OutputName, *Index);\n  600      }\n  601    }\n  ...\n  621        std::string OutputName = OutputFilename;\n  622        if (OutputName.empty()) {\n  623:         OutputName = Filename + \".thinlto.promoted.bc\";\n  624        }\n  625        writeModuleToFile(*TheModule, OutputName);\n  ...\n  652        std::string OutputName = OutputFilename;\n  653        if (OutputName.empty()) {\n  654:         OutputName = Filename + \".thinlto.imported.bc\";\n  655        }\n  656        writeModuleToFile(*TheModule, OutputName);\n  ...\n  683        std::string OutputName = OutputFilename;\n  684        if (OutputName.empty()) {\n  685:         OutputName = Filename + \".thinlto.internalized.bc\";\n  686        }\n  687        writeModuleToFile(*TheModule, OutputName);\n  ...\n  695                           \"the output files will be suffixed from the input \"\n  696                           \"ones.\");\n  697:     if (!ThinLTOIndex.empty())\n  698:       errs() << \"Warning: -thinlto-index ignored for optimize stage\";\n  699  \n  700      for (auto &Filename : InputFilenames) {\n  ...\n  706        std::string OutputName = OutputFilename;\n  707        if (OutputName.empty()) {\n  708:         OutputName = Filename + \".thinlto.imported.bc\";\n  709        }\n  710        writeModuleToFile(*TheModule, OutputName);\n  ...\n  718                           \"the output files will be suffixed from the input \"\n  719                           \"ones.\");\n  720:     if (!ThinLTOIndex.empty())\n  721:       errs() << \"Warning: -thinlto-index ignored for codegen stage\";\n  722  \n  723      std::vector<std::unique_ptr<MemoryBuffer>> InputBuffers;\n  ...\n  735        std::string OutputName = OutputFilename;\n  736        if (OutputName.empty())\n  737:         OutputName = std::get<1>(BinName) + \".thinlto.o\";\n  738        else if (OutputName == \"-\") {\n  739          outs() << std::get<0>(BinName)->getBuffer();\n  ...\n  748    }\n  749  \n  750:   /// Full ThinLTO process\n  751    void runAll() {\n  752      if (!OutputFilename.empty())\n  753:       report_fatal_error(\"Do not provide an output filename for ThinLTO \"\n  754                           \" processing, the output files will be suffixed from \"\n  755                           \"the input ones.\");\n  756  \n  757:     if (!ThinLTOIndex.empty())\n  758:       errs() << \"Warning: -thinlto-index ignored for full ThinLTO process\";\n  759  \n  760      LLVMContext Ctx;\n  ...\n  769      }\n  770  \n  771:     if (!ThinLTOSaveTempsPrefix.empty())\n  772:       ThinGenerator.setSaveTempsDir(ThinLTOSaveTempsPrefix);\n  773  \n  774:     if (!ThinLTOGeneratedObjectsDir.empty()) {\n  775:       ThinGenerator.setGeneratedObjectsDirectory(ThinLTOGeneratedObjectsDir);\n  776        ThinGenerator.run();\n  777        return;\n  ...\n  786  \n  787      for (unsigned BufID = 0; BufID < Binaries.size(); ++BufID) {\n  788:       auto OutputName = InputFilenames[BufID] + \".thinlto.o\";\n  789        std::error_code EC;\n  790        raw_fd_ostream OS(OutputName, EC, sys::fs::OpenFlags::F_None);\n  ...\n  797  };\n  798  \n  799: } // end namespace thinlto\n  800  \n  801  int main(int argc, char **argv) {\n  ...\n  844    }\n  845  \n  846:   if (ThinLTOMode.getNumOccurrences()) {\n  847:     if (ThinLTOMode.getNumOccurrences() > 1)\n  848:       report_fatal_error(\"You can't specify more than one -thinlto-action\");\n  849:     thinlto::ThinLTOProcessing ThinLTOProcessor(Options);\n  850:     ThinLTOProcessor.run();\n  851      return 0;\n  852    }\n  853  \n  854:   if (ThinLTO) {\n  855      createCombinedModuleSummaryIndex();\n  856      return 0;\n\n/home/mw/llvm/tools/llvm-lto2/llvm-lto2.cpp:\n   61  \n   62  static cl::opt<bool>\n   63:     ThinLTODistributedIndexes(\"thinlto-distributed-indexes\", cl::init(false),\n   64                                cl::desc(\"Write out individual index and \"\n   65                                         \"import files for the \"\n   66                                         \"distributed backend case\"));\n   67  \n   68: static cl::opt<int> Threads(\"thinlto-threads\",\n   69                              cl::init(llvm::heavyweight_hardware_concurrency()));\n   70  \n   ..\n  243  \n  244    ThinBackend Backend;\n  245:   if (ThinLTODistributedIndexes)\n  246      Backend = createWriteIndexesThinBackend(/* OldPrefix */ \"\",\n  247                                              /* NewPrefix */ \"\",\n\n/home/mw/llvm/tools/lto/lto.cpp:\n   22  #include \"llvm/LTO/legacy/LTOCodeGenerator.h\"\n   23  #include \"llvm/LTO/legacy/LTOModule.h\"\n   24: #include \"llvm/LTO/legacy/ThinLTOCodeGenerator.h\"\n   25  #include \"llvm/Support/MemoryBuffer.h\"\n   26  #include \"llvm/Support/Signals.h\"\n   ..\n  148  \n  149  DEFINE_SIMPLE_CONVERSION_FUNCTIONS(LibLTOCodeGenerator, lto_code_gen_t)\n  150: DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ThinLTOCodeGenerator, thinlto_code_gen_t)\n  151  DEFINE_SIMPLE_CONVERSION_FUNCTIONS(LTOModule, lto_module_t)\n  152  \n  ...\n  469  }\n  470  \n  471: // ThinLTO API below\n  472  \n  473: thinlto_code_gen_t thinlto_create_codegen(void) {\n  474    lto_initialize();\n  475:   ThinLTOCodeGenerator *CodeGen = new ThinLTOCodeGenerator();\n  476    CodeGen->setTargetOptions(InitTargetOptionsFromCodeGenFlags());\n  477    CodeGen->setFreestanding(EnableFreestanding);\n  ...\n  499  }\n  500  \n  501: void thinlto_codegen_dispose(thinlto_code_gen_t cg) { delete unwrap(cg); }\n  502  \n  503: void thinlto_codegen_add_module(thinlto_code_gen_t cg, const char *Identifier,\n  504                                  const char *Data, int Length) {\n  505    unwrap(cg)->addModule(Identifier, StringRef(Data, Length));\n  506  }\n  507  \n  508: void thinlto_codegen_process(thinlto_code_gen_t cg) { unwrap(cg)->run(); }\n  509  \n  510: unsigned int thinlto_module_get_num_objects(thinlto_code_gen_t cg) {\n  511    return unwrap(cg)->getProducedBinaries().size();\n  512  }\n  513: LTOObjectBuffer thinlto_module_get_object(thinlto_code_gen_t cg,\n  514                                            unsigned int index) {\n  515    assert(index < unwrap(cg)->getProducedBinaries().size() && \"Index overflow\");\n  ...\n  519  }\n  520  \n  521: unsigned int thinlto_module_get_num_object_files(thinlto_code_gen_t cg) {\n  522    return unwrap(cg)->getProducedBinaryFiles().size();\n  523  }\n  524: const char *thinlto_module_get_object_file(thinlto_code_gen_t cg,\n  525                                             unsigned int index) {\n  526    assert(index < unwrap(cg)->getProducedBinaryFiles().size() &&\n  ...\n  529  }\n  530  \n  531: void thinlto_codegen_disable_codegen(thinlto_code_gen_t cg,\n  532                                       lto_bool_t disable) {\n  533    unwrap(cg)->disableCodeGen(disable);\n  534  }\n  535  \n  536: void thinlto_codegen_set_codegen_only(thinlto_code_gen_t cg,\n  537                                        lto_bool_t CodeGenOnly) {\n  538    unwrap(cg)->setCodeGenOnly(CodeGenOnly);\n  539  }\n  540  \n  541: void thinlto_debug_options(const char *const *options, int number) {\n  542    // if options were requested, set them\n  543    if (number && options) {\n  ...\n  549  }\n  550  \n  551: lto_bool_t lto_module_is_thinlto(lto_module_t mod) {\n  552:   return unwrap(mod)->isThinLTO();\n  553  }\n  554  \n  555: void thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg,\n  556                                                const char *Name, int Length) {\n  557    unwrap(cg)->preserveSymbol(StringRef(Name, Length));\n  558  }\n  559  \n  560: void thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg,\n  561                                                   const char *Name, int Length) {\n  562    unwrap(cg)->crossReferenceSymbol(StringRef(Name, Length));\n  563  }\n  564  \n  565: void thinlto_codegen_set_cpu(thinlto_code_gen_t cg, const char *cpu) {\n  566    return unwrap(cg)->setCpu(cpu);\n  567  }\n  568  \n  569: void thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg,\n  570                                     const char *cache_dir) {\n  571    return unwrap(cg)->setCacheDir(cache_dir);\n  572  }\n  573  \n  574: void thinlto_codegen_set_cache_pruning_interval(thinlto_code_gen_t cg,\n  575                                                  int interval) {\n  576    return unwrap(cg)->setCachePruningInterval(interval);\n  577  }\n  578  \n  579: void thinlto_codegen_set_cache_entry_expiration(thinlto_code_gen_t cg,\n  580                                                  unsigned expiration) {\n  581    return unwrap(cg)->setCacheEntryExpiration(expiration);\n  582  }\n  583  \n  584: void thinlto_codegen_set_final_cache_size_relative_to_available_space(\n  585:     thinlto_code_gen_t cg, unsigned Percentage) {\n  586    return unwrap(cg)->setMaxCacheSizeRelativeToAvailableSpace(Percentage);\n  587  }\n  588  \n  589: void thinlto_codegen_set_cache_size_bytes(\n  590:     thinlto_code_gen_t cg, unsigned MaxSizeBytes) {\n  591    return unwrap(cg)->setCacheMaxSizeBytes(MaxSizeBytes);\n  592  }\n  593  \n  594: void thinlto_codegen_set_cache_size_files(\n  595:     thinlto_code_gen_t cg, unsigned MaxSizeFiles) {\n  596    return unwrap(cg)->setCacheMaxSizeFiles(MaxSizeFiles);\n  597  }\n  598  \n  599: void thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg,\n  600                                         const char *save_temps_dir) {\n  601    return unwrap(cg)->setSaveTempsDir(save_temps_dir);\n  602  }\n  603  \n  604: void thinlto_set_generated_objects_dir(thinlto_code_gen_t cg,\n  605                                         const char *save_temps_dir) {\n  606    unwrap(cg)->setGeneratedObjectsDirectory(save_temps_dir);\n  607  }\n  608  \n  609: lto_bool_t thinlto_codegen_set_pic_model(thinlto_code_gen_t cg,\n  610                                           lto_codegen_model model) {\n  611    switch (model) {\n\n/home/mw/llvm/tools/lto/lto.exports:\n   47  LLVMDisasmInstruction\n   48  LLVMSetDisasmOptions\n   49: thinlto_create_codegen\n   50: thinlto_codegen_dispose\n   51: thinlto_codegen_add_module\n   52: thinlto_codegen_process\n   53: thinlto_module_get_num_objects\n   54: thinlto_module_get_object\n   55: thinlto_codegen_set_pic_model\n   56: thinlto_codegen_set_cache_dir\n   57: thinlto_codegen_set_cache_pruning_interval\n   58: thinlto_codegen_set_cache_entry_expiration\n   59: thinlto_codegen_set_final_cache_size_relative_to_available_space\n   60: thinlto_codegen_set_cache_size_bytes\n   61: thinlto_codegen_set_cache_size_files\n   62: thinlto_codegen_set_savetemps_dir\n   63: thinlto_codegen_set_cpu\n   64: thinlto_debug_options\n   65: lto_module_is_thinlto\n   66: thinlto_codegen_add_must_preserve_symbol\n   67: thinlto_codegen_add_cross_referenced_symbol\n   68: thinlto_codegen_set_codegen_only\n   69: thinlto_codegen_disable_codegen\n   70: thinlto_module_get_num_object_files\n   71: thinlto_module_get_object_file\n   72: thinlto_set_generated_objects_dir\n   73  \n\n/home/mw/llvm/tools/opt/NewPMDriver.cpp:\n   33  #include \"llvm/Support/ToolOutputFile.h\"\n   34  #include \"llvm/Target/TargetMachine.h\"\n   35: #include \"llvm/Transforms/IPO/ThinLTOBitcodeWriter.h\"\n   36  #include \"llvm/Transforms/Scalar/LoopPassManager.h\"\n   37  \n   ..\n  186  \n  187  bool llvm::runPassPipeline(StringRef Arg0, Module &M, TargetMachine *TM,\n  188:                            ToolOutputFile *Out, ToolOutputFile *ThinLTOLinkOut,\n  189                             ToolOutputFile *OptRemarkFile,\n  190                             StringRef PassPipeline, OutputKind OK,\n  ...\n  297                                    EmitSummaryIndex, EmitModuleHash));\n  298      break;\n  299:   case OK_OutputThinLTOBitcode:\n  300:     MPM.addPass(ThinLTOBitcodeWriterPass(\n  301:         Out->os(), ThinLTOLinkOut ? &ThinLTOLinkOut->os() : nullptr));\n  302      break;\n  303    }\n  ...\n  312    if (OK != OK_NoOutput) {\n  313      Out->keep();\n  314:     if (OK == OK_OutputThinLTOBitcode && ThinLTOLinkOut)\n  315:       ThinLTOLinkOut->keep();\n  316    }\n  317  \n\n/home/mw/llvm/tools/opt/NewPMDriver.h:\n   34    OK_OutputAssembly,\n   35    OK_OutputBitcode,\n   36:   OK_OutputThinLTOBitcode,\n   37  };\n   38  enum VerifierKind {\n   ..\n   50  /// when the transition finishes.\n   51  ///\n   52: /// ThinLTOLinkOut is only used when OK is OK_OutputThinLTOBitcode, and can be\n   53  /// nullptr.\n   54  bool runPassPipeline(StringRef Arg0, Module &M, TargetMachine *TM,\n\n/home/mw/llvm/tools/opt/opt.cpp:\n  101  \n  102  static cl::opt<bool>\n  103:     OutputThinLTOBC(\"thinlto-bc\",\n  104:                     cl::desc(\"Write output as ThinLTO-ready bitcode\"));\n  105  \n  106  static cl::opt<std::string> ThinLinkBitcodeFile(\n  ...\n  538        OK = OutputAssembly\n  539                 ? OK_OutputAssembly\n  540:                : (OutputThinLTOBC ? OK_OutputThinLTOBitcode : OK_OutputBitcode);\n  541  \n  542      VerifierKind VK = VK_VerifyInAndOut;\n  ...\n  749          report_fatal_error(\"Text output is incompatible with -module-hash\");\n  750        Passes.add(createPrintModulePass(*OS, \"\", PreserveAssemblyUseListOrder));\n  751:     } else if (OutputThinLTOBC)\n  752:       Passes.add(createWriteThinLTOBitcodePass(\n  753            *OS, ThinLinkOut ? &ThinLinkOut->os() : nullptr));\n  754      else\n\n1589 matches across 241 files\n\n\nSearching 55647 files for \"ThinShared\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_llvm-4b8cacd6b6b8cbfa.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/librustc_llvm.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/src/librustc_trans/back/lto.rs:\n  433          // into the arc as well. After this we'll create a thin module\n  434          // translation per module in this data.\n  435:         let shared = Arc::new(ThinShared {\n  436              data,\n  437              thin_buffers,\n  ...\n  549  \n  550  pub struct ThinModule {\n  551:     shared: Arc<ThinShared>,\n  552      idx: usize,\n  553  }\n  554  \n  555: struct ThinShared {\n  556      data: ThinData,\n  557      thin_buffers: Vec<ThinBuffer>,\n\n3 matches in 1 file\n\n\nSearching 55647 files for \"ThinModule\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_llvm-4b8cacd6b6b8cbfa.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/librustc_llvm.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/src/librustc_trans/back/lto.rs:\n   49      },\n   50  \n   51:     Thin(ThinModule),\n   52  }\n   53  \n   ..\n  440          });\n  441          Ok((0..shared.module_names.len()).map(|i| {\n  442:             LtoModuleTranslation::Thin(ThinModule {\n  443                  shared: shared.clone(),\n  444                  idx: i,\n  ...\n  548  }\n  549  \n  550: pub struct ThinModule {\n  551      shared: Arc<ThinShared>,\n  552      idx: usize,\n  ...\n  603  }\n  604  \n  605: impl ThinModule {\n  606      fn name(&self) -> &str {\n  607          self.shared.module_names[self.idx].to_str().unwrap()\n\n4 matches in 1 file\n\n\nSearching 55647 files for \"LLVMRustPrepareThinLTOImport\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_llvm-4b8cacd6b6b8cbfa.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/librustc_llvm.rlib:\n    File too large, skipping\n\n/home/mw/0-rust/src/librustc_llvm/ffi.rs:\n 1774          Module: ModuleRef,\n 1775      ) -> bool;\n 1776:     pub fn LLVMRustPrepareThinLTOImport(\n 1777          Data: *const ThinLTOData,\n 1778          Module: ModuleRef,\n\n/home/mw/0-rust/src/librustc_trans/back/lto.rs:\n  704          cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-internalize\");\n  705          timeline.record(\"internalize\");\n  706:         if !llvm::LLVMRustPrepareThinLTOImport(self.shared.data.0, llmod) {\n  707              let msg = format!(\"failed to prepare thin LTO module\");\n  708              return Err(write::llvm_err(&diag_handler, msg))\n\n/home/mw/0-rust/src/rustllvm/PassWrapper.cpp:\n 1075  \n 1076  extern \"C\" bool\n 1077: LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n 1078    Module &Mod = *unwrap(M);\n 1079    const auto &ImportList = Data->ImportLists.lookup(Mod.getModuleIdentifier());\n ....\n 1269  \n 1270  extern \"C\" bool\n 1271: LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n 1272    report_fatal_error(\"ThinLTO not available\");\n 1273  }\n\n4 matches across 3 files\n\n\nSearching 55287 files for \"createWriteThinLTOBitcodePass\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:\n  478                      \"Write ThinLTO Bitcode\", false, true)\n  479  \n  480: ModulePass *llvm::createWriteThinLTOBitcodePass(raw_ostream &Str,\n  481                                                  raw_ostream *ThinLinkOS) {\n  482    return new WriteThinLTOBitcode(Str, ThinLinkOS);\n\n/home/mw/0-rust/src/llvm/tools/opt/opt.cpp:\n  740        Passes.add(createPrintModulePass(*OS, \"\", PreserveAssemblyUseListOrder));\n  741      } else if (OutputThinLTOBC)\n  742:       Passes.add(createWriteThinLTOBitcodePass(\n  743            *OS, ThinLinkOut ? &ThinLinkOut->os() : nullptr));\n  744      else\n\n/home/mw/0-rust/src/rustllvm/PassWrapper.cpp:\n  832      return false;\n  833    }\n  834:   PM->add(createWriteThinLTOBitcodePass(bc));\n  835    PM->run(*unwrap(M));\n  836    delete PM;\n  ...\n 1111      {\n 1112        legacy::PassManager PM;\n 1113:       PM.add(createWriteThinLTOBitcodePass(OS));\n 1114        PM.run(*unwrap(M));\n 1115      }\n\n/home/mw/llvm/include/llvm/Transforms/IPO.h:\n  264  \n  265  /// Write ThinLTO-ready bitcode to Str.\n  266: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  267                                            raw_ostream *ThinLinkOS = nullptr);\n  268  \n\n11 matches across 8 files\n\n\nSearching 55287 files for \"WriteThinLTOBitcode\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/InitializePasses.h:\n  381  void initializeWinEHPreparePass(PassRegistry&);\n  382  void initializeWriteBitcodePassPass(PassRegistry&);\n  383: void initializeWriteThinLTOBitcodePass(PassRegistry&);\n  384  void initializeXRayInstrumentationPass(PassRegistry&);\n  385  void initializeMIRCanonicalizerPass(PassRegistry &);\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/include/llvm/InitializePasses.h:\n  381  void initializeWinEHPreparePass(PassRegistry&);\n  382  void initializeWriteBitcodePassPass(PassRegistry&);\n  383: void initializeWriteThinLTOBitcodePass(PassRegistry&);\n  384  void initializeXRayInstrumentationPass(PassRegistry&);\n  385  void initializeMIRCanonicalizerPass(PassRegistry &);\n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:\n  224  // a multi-module bitcode file with the two parts to OS. Otherwise, write only a\n  225  // regular LTO bitcode file to OS.\n  226: void splitAndWriteThinLTOBitcode(\n  227      raw_ostream &OS, raw_ostream *ThinLinkOS,\n  228      function_ref<AAResults &(Function &)> AARGetter, Module &M) {\n  ...\n  413  }\n  414  \n  415: void writeThinLTOBitcode(raw_ostream &OS, raw_ostream *ThinLinkOS,\n  416                           function_ref<AAResults &(Function &)> AARGetter,\n  417                           Module &M, const ModuleSummaryIndex *Index) {\n  418    // See if this module has any type metadata. If so, we need to split it.\n  419    if (requiresSplit(M))\n  420:     return splitAndWriteThinLTOBitcode(OS, ThinLinkOS, AARGetter, M);\n  421  \n  422    // Otherwise we can just write it out as a regular module.\n  ...\n  435  }\n  436  \n  437: class WriteThinLTOBitcode : public ModulePass {\n  438    raw_ostream &OS; // raw_ostream to print on\n  439    // The output stream on which to emit a minimized module for use\n  ...\n  443  public:\n  444    static char ID; // Pass identification, replacement for typeid\n  445:   WriteThinLTOBitcode() : ModulePass(ID), OS(dbgs()), ThinLinkOS(nullptr) {\n  446:     initializeWriteThinLTOBitcodePass(*PassRegistry::getPassRegistry());\n  447    }\n  448  \n  449:   explicit WriteThinLTOBitcode(raw_ostream &o, raw_ostream *ThinLinkOS)\n  450        : ModulePass(ID), OS(o), ThinLinkOS(ThinLinkOS) {\n  451:     initializeWriteThinLTOBitcodePass(*PassRegistry::getPassRegistry());\n  452    }\n  453  \n  ...\n  457      const ModuleSummaryIndex *Index =\n  458          &(getAnalysis<ModuleSummaryIndexWrapperPass>().getIndex());\n  459:     writeThinLTOBitcode(OS, ThinLinkOS, LegacyAARGetter(*this), M, Index);\n  460      return true;\n  461    }\n  ...\n  469  } // anonymous namespace\n  470  \n  471: char WriteThinLTOBitcode::ID = 0;\n  472: INITIALIZE_PASS_BEGIN(WriteThinLTOBitcode, \"write-thinlto-bitcode\",\n  473                        \"Write ThinLTO Bitcode\", false, true)\n  474  INITIALIZE_PASS_DEPENDENCY(AssumptionCacheTracker)\n  475  INITIALIZE_PASS_DEPENDENCY(ModuleSummaryIndexWrapperPass)\n  476  INITIALIZE_PASS_DEPENDENCY(TargetLibraryInfoWrapperPass)\n  477: INITIALIZE_PASS_END(WriteThinLTOBitcode, \"write-thinlto-bitcode\",\n  478                      \"Write ThinLTO Bitcode\", false, true)\n  479  \n  480: ModulePass *llvm::createWriteThinLTOBitcodePass(raw_ostream &Str,\n  481                                                  raw_ostream *ThinLinkOS) {\n  482:   return new WriteThinLTOBitcode(Str, ThinLinkOS);\n  483  }\n  484  \n  ...\n  487    FunctionAnalysisManager &FAM =\n  488        AM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();\n  489:   writeThinLTOBitcode(OS, ThinLinkOS,\n  490                        [&FAM](Function &F) -> AAResults & {\n  491                          return FAM.getResult<AAManager>(F);\n\n/home/mw/0-rust/src/llvm/tools/opt/opt.cpp:\n  740        Passes.add(createPrintModulePass(*OS, \"\", PreserveAssemblyUseListOrder));\n  741      } else if (OutputThinLTOBC)\n  742:       Passes.add(createWriteThinLTOBitcodePass(\n  743            *OS, ThinLinkOut ? &ThinLinkOut->os() : nullptr));\n  744      else\n\n/home/mw/0-rust/src/rustllvm/PassWrapper.cpp:\n  832      return false;\n  833    }\n  834:   PM->add(createWriteThinLTOBitcodePass(bc));\n  835    PM->run(*unwrap(M));\n  836    delete PM;\n  ...\n 1111      {\n 1112        legacy::PassManager PM;\n 1113:       PM.add(createWriteThinLTOBitcodePass(OS));\n 1114        PM.run(*unwrap(M));\n 1115      }\n\n/home/mw/llvm/include/llvm/InitializePasses.h:\n  387  void initializeWinEHPreparePass(PassRegistry&);\n  388  void initializeWriteBitcodePassPass(PassRegistry&);\n  389: void initializeWriteThinLTOBitcodePass(PassRegistry&);\n  390  void initializeXRayInstrumentationPass(PassRegistry&);\n  391  void initializeMIRCanonicalizerPass(PassRegistry &);\n\n/home/mw/llvm/include/llvm/Transforms/IPO.h:\n  264  \n  265  /// Write ThinLTO-ready bitcode to Str.\n  266: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  267                                            raw_ostream *ThinLinkOS = nullptr);\n  268  \n\n28 matches across 11 files\n\n\nSearching 55287 files for \"-flto=thin\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/lib/cmake/llvm/HandleLLVMOptions.cmake:\n  795  endif()\n  796  if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/lib/cmake/llvm/HandleLLVMOptions.cmake:\n  795  endif()\n  796  if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/cfi/create-derivers.test:\n    1  REQUIRES: asserts\n    2  \n    3: %% Explicit -flto to override possible -flto=thin in %clangxx_cfi\n    4  RUN: %clangxx_cfi -flto -c -o %t1.o %S/simple-fail.cpp\n    5  RUN: opt -lowertypetests -debug-only=lowertypetests -o /dev/null %t1.o 2>&1 | FileCheck --check-prefix=B0 %s\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/cfi/icall/wrong-signature-mixed-lto.c:\n    2  // calling module has an incorrect declaration. Test a mix of lto types.\n    3  //\n    4: // -flto below overrides -flto=thin in %clang_cfi\n    5  // RUN: %clang_cfi %s -DMODULE_A -c -o %t1_a.o\n    6  // RUN: %clang_cfi %s -DMODULE_B -c -o %t1_b.o -flto\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/lit.common.cfg:\n  263    if config.use_thinlto:\n  264      config.available_features.add('thinlto')\n  265:     config.lto_flags += [\"-flto=thin\"]\n  266    else:\n  267      config.lto_flags += [\"-flto\"]\n\n/home/mw/0-rust/src/llvm/cmake/modules/HandleLLVMOptions.cmake:\n  795  endif()\n  796  if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n9 matches across 6 files\n\n\nSearching 55287 files for \"class RegisterPass\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n\n/home/mw/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n\n3 matches across 3 files\n\n\nSearching 55287 files for \"RegisterPass\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/bugpoint:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/bugpoint:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm-c/Transforms/Scalar.h:\n   99  void LLVMAddLowerSwitchPass(LLVMPassManagerRef PM);\n  100  \n  101: /** See llvm::createPromoteMemoryToRegisterPass function. */\n  102: void LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n  103  \n  104  /** See llvm::createReassociatePass function. */\n  ...\n  127  void LLVMAddConstantPropagationPass(LLVMPassManagerRef PM);\n  128  \n  129: /** See llvm::demotePromoteMemoryToRegisterPass function. */\n  130: void LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n  131  \n  132  /** See llvm::createVerifierPass function. */\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n   11  // function pass registry (MachinePassRegistry) is auto filled by the static\n   12  // constructors of MachinePassRegistryNode.  Further there is a command line\n   13: // parser (RegisterPassParser) which listens to each registry for additions\n   14  // and deletions, so that the appropriate command option is updated.\n   15  //\n   ..\n  103  //===----------------------------------------------------------------------===//\n  104  ///\n  105: /// RegisterPassParser class - Handle the addition of new machine passes.\n  106  ///\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n  112:   RegisterPassParser(cl::Option &O)\n  113        : cl::parser<typename RegistryClass::FunctionPassCtor>(O) {}\n  114:   ~RegisterPassParser() override { RegistryClass::setListener(nullptr); }\n  115  \n  116    void initialize() {\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  137    using ScheduleDAGCtor = ScheduleDAGInstrs *(*)(MachineSchedContext *);\n  138  \n  139:   // RegisterPassParser requires a (misnamed) FunctionPassCtor type.\n  140    using FunctionPassCtor = ScheduleDAGCtor;\n  141  \n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/IR/PassManager.h:\n  737    /// hashtable.)\n  738    template <typename PassBuilderT>\n  739:   bool registerPass(PassBuilderT &&PassBuilder) {\n  740      using PassT = decltype(PassBuilder());\n  741      using PassModelT =\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/LinkAllPasses.h:\n  140        (void) llvm::createObjCARCOptPass();\n  141        (void) llvm::createPAEvalPass();\n  142:       (void) llvm::createPromoteMemoryToRegisterPass();\n  143        (void) llvm::createDemoteRegisterToMemoryPass();\n  144        (void) llvm::createPruneEHPass();\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/PassInfo.h:\n   26  /// PassInfo class - An instance of this class exists for every pass known by\n   27  /// the system, and can be obtained from a live Pass by calling its\n   28: /// getPassInfo() method.  These objects are set up by the RegisterPass<>\n   29  /// template.\n   30  ///\n   ..\n   45  public:\n   46    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   47:   /// through RegisterPass.\n   48    PassInfo(StringRef name, StringRef arg, const void *pi, NormalCtor_t normal,\n   49             bool isCFGOnly, bool is_analysis)\n   ..\n   52  \n   53    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   54:   /// through RegisterPass. This version is for use by analysis groups; it\n   55    /// does not auto-register the pass.\n   56    PassInfo(StringRef name, const void *pi)\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/PassRegistry.h:\n   67    const PassInfo *getPassInfo(StringRef Arg) const;\n   68  \n   69:   /// registerPass - Register a pass (by means of its PassInfo) with the\n   70    /// registry.  Required in order to use the pass with a PassManager.\n   71:   void registerPass(const PassInfo &PI, bool ShouldFree = false);\n   72  \n   73    /// registerAnalysisGroup - Register an analysis group (or a pass implementing\n   74:   // an analysis group) with the registry.  Like registerPass, this is required\n   75    // in order for a PassManager to be able to use this group/pass.\n   76    void registerAnalysisGroup(const void *InterfaceID, const void *PassID,\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/PassSupport.h:\n   37          name, arg, &passName::ID,                                              \\\n   38          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n   39:     Registry.registerPass(*PI, true);                                          \\\n   40      return PI;                                                                 \\\n   41    }                                                                            \\\n   ..\n   57        name, arg, &passName::ID,                                                \\\n   58        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n   59:   Registry.registerPass(*PI, true);                                            \\\n   60    return PI;                                                                   \\\n   61    }                                                                            \\\n   ..\n   78  \n   79  //===---------------------------------------------------------------------------\n   80: /// RegisterPass<t> template - This template class is used to notify the system\n   81  /// that a Pass is available for use, and registers it into the internal\n   82  /// database maintained by the PassManager.  Unless this template is used, opt,\n   ..\n   85  /// your .cpp file):\n   86  ///\n   87: /// static RegisterPass<YourPassClassName> tmp(\"passopt\", \"My Pass Name\");\n   88  ///\n   89  /// This statement will cause your pass to be created by calling the default\n   90  /// constructor exposed by the pass.\n   91: template <typename passName> struct RegisterPass : public PassInfo {\n   92    // Register Pass using default constructor...\n   93:   RegisterPass(StringRef PassArg, StringRef Name, bool CFGOnly = false,\n   94                 bool is_analysis = false)\n   95        : PassInfo(Name, PassArg, &passName::ID,\n   96                   PassInfo::NormalCtor_t(callDefaultCtor<passName>), CFGOnly,\n   97                   is_analysis) {\n   98:     PassRegistry::getPassRegistry()->registerPass(*this);\n   99    }\n  100  };\n  ...\n  155          name, arg, &passName::ID,                                              \\\n  156          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n  157:     Registry.registerPass(*PI, true);                                          \\\n  158                                                                                 \\\n  159      PassInfo *AI = new PassInfo(name, &agName::ID);                            \\\n  ...\n  177        n, arg, &passName::ID,                                                   \\\n  178        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n  179:   Registry.registerPass(*PI, true);                                            \\\n  180                                                                                 \\\n  181    PassInfo *AI = new PassInfo(n, &agName::ID);                                 \\\n  ...\n  192  /// PassRegistrationListener class - This class is meant to be derived from by\n  193  /// clients that are interested in which passes get registered and unregistered\n  194: /// at runtime (which can be because of the RegisterPass constructors being run\n  195  /// as the program starts up, or may be because a shared object just got\n  196  /// loaded).\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/Scalar.h:\n  233  //   ret i32 %Y\n  234  //\n  235: FunctionPass *createPromoteMemoryToRegisterPass();\n  236  \n  237  //===----------------------------------------------------------------------===//\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/lld:\n    <binary>\n\n/home/mw/0-rust/src/llvm/bindings/go/llvm/executionengine_test.go:\n   84  \tpass.AddConstantPropagationPass()\n   85  \tpass.AddInstructionCombiningPass()\n   86: \tpass.AddPromoteMemoryToRegisterPass()\n   87  \tpass.AddGVNPass()\n   88  \tpass.AddCFGSimplificationPass()\n\n/home/mw/0-rust/src/llvm/bindings/go/llvm/transforms_scalar.go:\n   32  func (pm PassManager) AddLoopUnswitchPass()            { C.LLVMAddLoopUnswitchPass(pm.C) }\n   33  func (pm PassManager) AddMemCpyOptPass()               { C.LLVMAddMemCpyOptPass(pm.C) }\n   34: func (pm PassManager) AddPromoteMemoryToRegisterPass() { C.LLVMAddPromoteMemoryToRegisterPass(pm.C) }\n   35  func (pm PassManager) AddReassociatePass()             { C.LLVMAddReassociatePass(pm.C) }\n   36  func (pm PassManager) AddSCCPPass()                    { C.LLVMAddSCCPPass(pm.C) }\n   ..\n   42  func (pm PassManager) AddTailCallEliminationPass()    { C.LLVMAddTailCallEliminationPass(pm.C) }\n   43  func (pm PassManager) AddConstantPropagationPass()    { C.LLVMAddConstantPropagationPass(pm.C) }\n   44: func (pm PassManager) AddDemoteMemoryToRegisterPass() { C.LLVMAddDemoteMemoryToRegisterPass(pm.C) }\n   45  func (pm PassManager) AddVerifierPass()               { C.LLVMAddVerifierPass(pm.C) }\n   46  \n\n/home/mw/0-rust/src/llvm/bindings/ocaml/transforms/scalar_opts/llvm_scalar_opts.mli:\n  113    = \"llvm_add_lower_switch\"\n  114  \n  115: (** See the [llvm::createPromoteMemoryToRegisterPass] function. *)\n  116  external add_memory_to_register_promotion\n  117    : [< Llvm.PassManager.any ] Llvm.PassManager.t -> unit\n  ...\n  158    = \"llvm_add_constant_propagation\"\n  159  \n  160: (** See the [llvm::createDemoteMemoryToRegisterPass] function. *)\n  161  external add_memory_to_register_demotion\n  162    : [< Llvm.PassManager.any ] Llvm.PassManager.t -> unit\n\n/home/mw/0-rust/src/llvm/bindings/ocaml/transforms/scalar_opts/scalar_opts_ocaml.c:\n  142  /* [<Llvm.PassManager.any] Llvm.PassManager.t -> unit */\n  143  CAMLprim value llvm_add_promote_memory_to_register(LLVMPassManagerRef PM) {\n  144:   LLVMAddPromoteMemoryToRegisterPass(PM);\n  145    return Val_unit;\n  146  }\n  ...\n  197  /* [<Llvm.PassManager.any] Llvm.PassManager.t -> unit */\n  198  CAMLprim value llvm_add_demote_memory_to_register(LLVMPassManagerRef PM) {\n  199:   LLVMAddDemoteMemoryToRegisterPass(PM);\n  200    return Val_unit;\n  201  }\n\n/home/mw/0-rust/src/llvm/docs/WritingAnLLVMPass.rst:\n  166  .. code-block:: c++\n  167  \n  168:   static RegisterPass<Hello> X(\"hello\", \"Hello World Pass\",\n  169                                 false /* Only looks at CFG */,\n  170                                 false /* Analysis Pass */);\n  ...\n  201    \n  202    char Hello::ID = 0;\n  203:   static RegisterPass<Hello> X(\"hello\", \"Hello World Pass\",\n  204                                 false /* Only looks at CFG */,\n  205                                 false /* Analysis Pass */);\n  ...\n  217  Now that you have a brand new shiny shared object file, we can use the\n  218  :program:`opt` command to run an LLVM program through your pass.  Because you\n  219: registered your pass with ``RegisterPass``, you will be able to use the\n  220  :program:`opt` tool to access it, once loaded.\n  221  \n  ...\n  744  registered.\n  745  \n  746: As we saw above, passes are registered with the ``RegisterPass`` template.  The\n  747  template parameter is the name of the pass that is to be used on the command\n  748  line to specify that the pass should be added to a program (for example, with\n  ...\n 1324  \n 1325    cl::opt<RegisterMyPasses::FunctionPassCtor, false,\n 1326:           RegisterPassParser<RegisterMyPasses> >\n 1327    MyPassOpt(\"mypass\",\n 1328              cl::init(&createDefaultMyPass),\n\n/home/mw/0-rust/src/llvm/docs/tutorial/LangImpl07.rst:\n  440  \n  441          // Promote allocas to registers.\n  442:         TheFPM->add(createPromoteMemoryToRegisterPass());\n  443          // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n  444          TheFPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/docs/tutorial/LangImpl09.rst:\n  133       OurFPM.add(createBasicAliasAnalysisPass());\n  134       // Promote allocas to registers.\n  135:      OurFPM.add(createPromoteMemoryToRegisterPass());\n  136    @@ -1218,7 +1210,7 @@ int main() {\n  137       OurFPM.add(createGVNPass());\n\n/home/mw/0-rust/src/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:\n 1933  \n 1934      // Promote allocas to registers.\n 1935:     fpm.add(llvm::createPromoteMemoryToRegisterPass());\n 1936  \n 1937      // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/Chapter7/toy.cpp:\n 1117  \n 1118    // Promote allocas to registers.\n 1119:   TheFPM->add(createPromoteMemoryToRegisterPass());\n 1120    // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n 1121    TheFPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:\n 1171    OurFPM.add(createBasicAliasAnalysisPass());\n 1172    // Promote allocas to registers.\n 1173:   OurFPM.add(createPromoteMemoryToRegisterPass());\n 1174    // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n 1175    OurFPM.add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:\n  922      FPM->add(createBasicAliasAnalysisPass());\n  923      // Promote allocas to registers.\n  924:     FPM->add(createPromoteMemoryToRegisterPass());\n  925      // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n  926      FPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:\n  965      FPM->add(createBasicAliasAnalysisPass());\n  966      // Promote allocas to registers.\n  967:     FPM->add(createPromoteMemoryToRegisterPass());\n  968      // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n  969      FPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/initial/toy.cpp:\n  795      FPM->add(createBasicAliasAnalysisPass());\n  796      // Promote allocas to registers.\n  797:     FPM->add(createPromoteMemoryToRegisterPass());\n  798      // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n  799      FPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/lazy/toy-jit.cpp:\n 1133    OurFPM.add(createBasicAliasAnalysisPass());\n 1134    // Promote allocas to registers.\n 1135:   OurFPM.add(createPromoteMemoryToRegisterPass());\n 1136    // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n 1137    OurFPM.add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/lazy/toy.cpp:\n  825    FPM->add(createBasicAliasAnalysisPass());\n  826    // Promote allocas to registers.\n  827:   FPM->add(createPromoteMemoryToRegisterPass());\n  828    // Do simple \"peephole\" optimizations and bit-twiddling optzns.\n  829    FPM->add(createInstructionCombiningPass());\n\n/home/mw/0-rust/src/llvm/include/llvm-c/Transforms/Scalar.h:\n   99  void LLVMAddLowerSwitchPass(LLVMPassManagerRef PM);\n  100  \n  101: /** See llvm::createPromoteMemoryToRegisterPass function. */\n  102: void LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n  103  \n  104  /** See llvm::createReassociatePass function. */\n  ...\n  127  void LLVMAddConstantPropagationPass(LLVMPassManagerRef PM);\n  128  \n  129: /** See llvm::demotePromoteMemoryToRegisterPass function. */\n  130: void LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n  131  \n  132  /** See llvm::createVerifierPass function. */\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n   11  // function pass registry (MachinePassRegistry) is auto filled by the static\n   12  // constructors of MachinePassRegistryNode.  Further there is a command line\n   13: // parser (RegisterPassParser) which listens to each registry for additions\n   14  // and deletions, so that the appropriate command option is updated.\n   15  //\n   ..\n  103  //===----------------------------------------------------------------------===//\n  104  ///\n  105: /// RegisterPassParser class - Handle the addition of new machine passes.\n  106  ///\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n  112:   RegisterPassParser(cl::Option &O)\n  113        : cl::parser<typename RegistryClass::FunctionPassCtor>(O) {}\n  114:   ~RegisterPassParser() override { RegistryClass::setListener(nullptr); }\n  115  \n  116    void initialize() {\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  137    using ScheduleDAGCtor = ScheduleDAGInstrs *(*)(MachineSchedContext *);\n  138  \n  139:   // RegisterPassParser requires a (misnamed) FunctionPassCtor type.\n  140    using FunctionPassCtor = ScheduleDAGCtor;\n  141  \n\n/home/mw/0-rust/src/llvm/include/llvm/IR/PassManager.h:\n  737    /// hashtable.)\n  738    template <typename PassBuilderT>\n  739:   bool registerPass(PassBuilderT &&PassBuilder) {\n  740      using PassT = decltype(PassBuilder());\n  741      using PassModelT =\n\n/home/mw/0-rust/src/llvm/include/llvm/LinkAllPasses.h:\n  140        (void) llvm::createObjCARCOptPass();\n  141        (void) llvm::createPAEvalPass();\n  142:       (void) llvm::createPromoteMemoryToRegisterPass();\n  143        (void) llvm::createDemoteRegisterToMemoryPass();\n  144        (void) llvm::createPruneEHPass();\n\n/home/mw/0-rust/src/llvm/include/llvm/PassInfo.h:\n   26  /// PassInfo class - An instance of this class exists for every pass known by\n   27  /// the system, and can be obtained from a live Pass by calling its\n   28: /// getPassInfo() method.  These objects are set up by the RegisterPass<>\n   29  /// template.\n   30  ///\n   ..\n   45  public:\n   46    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   47:   /// through RegisterPass.\n   48    PassInfo(StringRef name, StringRef arg, const void *pi, NormalCtor_t normal,\n   49             bool isCFGOnly, bool is_analysis)\n   ..\n   52  \n   53    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   54:   /// through RegisterPass. This version is for use by analysis groups; it\n   55    /// does not auto-register the pass.\n   56    PassInfo(StringRef name, const void *pi)\n\n/home/mw/0-rust/src/llvm/include/llvm/PassRegistry.h:\n   67    const PassInfo *getPassInfo(StringRef Arg) const;\n   68  \n   69:   /// registerPass - Register a pass (by means of its PassInfo) with the\n   70    /// registry.  Required in order to use the pass with a PassManager.\n   71:   void registerPass(const PassInfo &PI, bool ShouldFree = false);\n   72  \n   73    /// registerAnalysisGroup - Register an analysis group (or a pass implementing\n   74:   // an analysis group) with the registry.  Like registerPass, this is required\n   75    // in order for a PassManager to be able to use this group/pass.\n   76    void registerAnalysisGroup(const void *InterfaceID, const void *PassID,\n\n/home/mw/0-rust/src/llvm/include/llvm/PassSupport.h:\n   37          name, arg, &passName::ID,                                              \\\n   38          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n   39:     Registry.registerPass(*PI, true);                                          \\\n   40      return PI;                                                                 \\\n   41    }                                                                            \\\n   ..\n   57        name, arg, &passName::ID,                                                \\\n   58        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n   59:   Registry.registerPass(*PI, true);                                            \\\n   60    return PI;                                                                   \\\n   61    }                                                                            \\\n   ..\n   78  \n   79  //===---------------------------------------------------------------------------\n   80: /// RegisterPass<t> template - This template class is used to notify the system\n   81  /// that a Pass is available for use, and registers it into the internal\n   82  /// database maintained by the PassManager.  Unless this template is used, opt,\n   ..\n   85  /// your .cpp file):\n   86  ///\n   87: /// static RegisterPass<YourPassClassName> tmp(\"passopt\", \"My Pass Name\");\n   88  ///\n   89  /// This statement will cause your pass to be created by calling the default\n   90  /// constructor exposed by the pass.\n   91: template <typename passName> struct RegisterPass : public PassInfo {\n   92    // Register Pass using default constructor...\n   93:   RegisterPass(StringRef PassArg, StringRef Name, bool CFGOnly = false,\n   94                 bool is_analysis = false)\n   95        : PassInfo(Name, PassArg, &passName::ID,\n   96                   PassInfo::NormalCtor_t(callDefaultCtor<passName>), CFGOnly,\n   97                   is_analysis) {\n   98:     PassRegistry::getPassRegistry()->registerPass(*this);\n   99    }\n  100  };\n  ...\n  155          name, arg, &passName::ID,                                              \\\n  156          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n  157:     Registry.registerPass(*PI, true);                                          \\\n  158                                                                                 \\\n  159      PassInfo *AI = new PassInfo(name, &agName::ID);                            \\\n  ...\n  177        n, arg, &passName::ID,                                                   \\\n  178        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n  179:   Registry.registerPass(*PI, true);                                            \\\n  180                                                                                 \\\n  181    PassInfo *AI = new PassInfo(n, &agName::ID);                                 \\\n  ...\n  192  /// PassRegistrationListener class - This class is meant to be derived from by\n  193  /// clients that are interested in which passes get registered and unregistered\n  194: /// at runtime (which can be because of the RegisterPass constructors being run\n  195  /// as the program starts up, or may be because a shared object just got\n  196  /// loaded).\n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/Scalar.h:\n  233  //   ret i32 %Y\n  234  //\n  235: FunctionPass *createPromoteMemoryToRegisterPass();\n  236  \n  237  //===----------------------------------------------------------------------===//\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineScheduler.cpp:\n  247  /// MachineSchedOpt allows command line selection of the scheduler.\n  248  static cl::opt<MachineSchedRegistry::ScheduleDAGCtor, false,\n  249:                RegisterPassParser<MachineSchedRegistry>>\n  250  MachineSchedOpt(\"misched\",\n  251                  cl::init(&useDefaultMachineSched), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:\n  184  //===---------------------------------------------------------------------===//\n  185  static cl::opt<RegisterScheduler::FunctionPassCtor, false,\n  186:                RegisterPassParser<RegisterScheduler>>\n  187  ISHeuristic(\"pre-RA-sched\",\n  188              cl::init(&createDefaultScheduler), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TargetPassConfig.cpp:\n  772  static FunctionPass *useDefaultRegisterAllocator() { return nullptr; }\n  773  static cl::opt<RegisterRegAlloc::FunctionPassCtor, false,\n  774:                RegisterPassParser<RegisterRegAlloc>>\n  775      RegAlloc(\"regalloc\", cl::Hidden, cl::init(&useDefaultRegisterAllocator),\n  776               cl::desc(\"Register allocator to use\"));\n\n/home/mw/0-rust/src/llvm/lib/FuzzMutate/IRMutator.cpp:\n   73    FPM.addPass(DCEPass());\n   74    FunctionAnalysisManager FAM;\n   75:   FAM.registerPass([&] { return TargetLibraryAnalysis(); });\n   76    FPM.run(F, FAM);\n   77  }\n\n/home/mw/0-rust/src/llvm/lib/IR/PassRegistry.cpp:\n   56  //\n   57  \n   58: void PassRegistry::registerPass(const PassInfo &PI, bool ShouldFree) {\n   59    sys::SmartScopedWriter<true> Guard(Lock);\n   60    bool Inserted =\n   ..\n   86    if (!InterfaceInfo) {\n   87      // First reference to Interface, register it now.\n   88:     registerPass(Registeree);\n   89      InterfaceInfo = &Registeree;\n   90    }\n\n/home/mw/0-rust/src/llvm/lib/LTO/LTOBackend.cpp:\n  151  \n  152    // Register the AA manager first so that our version is the one used.\n  153:   FAM.registerPass([&] { return std::move(AA); });\n  154  \n  155    // Register all the basic analyses with the managers.\n  ...\n  210  \n  211    // Register the AA manager first so that our version is the one used.\n  212:   FAM.registerPass([&] { return std::move(AA); });\n  213  \n  214    // Register all the basic analyses with the managers.\n\n/home/mw/0-rust/src/llvm/lib/Passes/PassBuilder.cpp:\n  294  void PassBuilder::registerModuleAnalyses(ModuleAnalysisManager &MAM) {\n  295  #define MODULE_ANALYSIS(NAME, CREATE_PASS)                                     \\\n  296:   MAM.registerPass([&] { return CREATE_PASS; });\n  297  #include \"PassRegistry.def\"\n  298  \n  ...\n  303  void PassBuilder::registerCGSCCAnalyses(CGSCCAnalysisManager &CGAM) {\n  304  #define CGSCC_ANALYSIS(NAME, CREATE_PASS)                                      \\\n  305:   CGAM.registerPass([&] { return CREATE_PASS; });\n  306  #include \"PassRegistry.def\"\n  307  \n  ...\n  312  void PassBuilder::registerFunctionAnalyses(FunctionAnalysisManager &FAM) {\n  313  #define FUNCTION_ANALYSIS(NAME, CREATE_PASS)                                   \\\n  314:   FAM.registerPass([&] { return CREATE_PASS; });\n  315  #include \"PassRegistry.def\"\n  316  \n  ...\n  321  void PassBuilder::registerLoopAnalyses(LoopAnalysisManager &LAM) {\n  322  #define LOOP_ANALYSIS(NAME, CREATE_PASS)                                       \\\n  323:   LAM.registerPass([&] { return CREATE_PASS; });\n  324  #include \"PassRegistry.def\"\n  325  \n  ...\n 1705                                         CGSCCAnalysisManager &CGAM,\n 1706                                         ModuleAnalysisManager &MAM) {\n 1707:   MAM.registerPass([&] { return FunctionAnalysisManagerModuleProxy(FAM); });\n 1708:   MAM.registerPass([&] { return CGSCCAnalysisManagerModuleProxy(CGAM); });\n 1709:   CGAM.registerPass([&] { return ModuleAnalysisManagerCGSCCProxy(MAM); });\n 1710:   FAM.registerPass([&] { return CGSCCAnalysisManagerFunctionProxy(CGAM); });\n 1711:   FAM.registerPass([&] { return ModuleAnalysisManagerFunctionProxy(MAM); });\n 1712:   FAM.registerPass([&] { return LoopAnalysisManagerFunctionProxy(LAM); });\n 1713:   LAM.registerPass([&] { return FunctionAnalysisManagerLoopProxy(FAM); });\n 1714  }\n 1715  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Hello/Hello.cpp:\n   39  \n   40  char Hello::ID = 0;\n   41: static RegisterPass<Hello> X(\"hello\", \"Hello World Pass\");\n   42  \n   43  namespace {\n   ..\n   62  \n   63  char Hello2::ID = 0;\n   64: static RegisterPass<Hello2>\n   65  Y(\"hello2\", \"Hello World Pass (with getAnalysisUsage implemented)\");\n   66  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/GlobalDCE.cpp:\n   55        FunctionAnalysisManager DummyFAM;\n   56        ModuleAnalysisManager DummyMAM;\n   57:       DummyMAM.registerPass(\n   58            [&] { return FunctionAnalysisManagerModuleProxy(DummyFAM); });\n   59  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp:\n  474    MPM.add(createGlobalOptimizerPass()); // Optimize out global vars\n  475    // Promote any localized global vars.\n  476:   MPM.add(createPromoteMemoryToRegisterPass());\n  477  \n  478    MPM.add(createDeadArgEliminationPass()); // Dead argument elimination\n  ...\n  753    PM.add(createGlobalOptimizerPass());\n  754    // Promote any localized global vars.\n  755:   PM.add(createPromoteMemoryToRegisterPass());\n  756  \n  757    // Linking modules together can lead to duplicated global constants, only\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/Scalar.cpp:\n  205  }\n  206  \n  207: void LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef PM) {\n  208:   unwrap(PM)->add(createPromoteMemoryToRegisterPass());\n  209  }\n  210  \n  ...\n  242  }\n  243  \n  244: void LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef PM) {\n  245    unwrap(PM)->add(createDemoteRegisterToMemoryPass());\n  246  }\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/Mem2Reg.cpp:\n  112  \n  113  // createPromoteMemoryToRegister - Provide an entry point to create this pass.\n  114: FunctionPass *llvm::createPromoteMemoryToRegisterPass() {\n  115    return new PromoteLegacyPass();\n  116  }\n\n/home/mw/0-rust/src/llvm/tools/bugpoint-passes/TestPasses.cpp:\n   45  \n   46  char CrashOnCalls::ID = 0;\n   47: static RegisterPass<CrashOnCalls>\n   48    X(\"bugpoint-crashcalls\",\n   49      \"BugPoint Test Pass - Intentionally crash on CallInsts\");\n   ..\n   71  \n   72  char DeleteCalls::ID = 0;\n   73: static RegisterPass<DeleteCalls>\n   74    Y(\"bugpoint-deletecalls\",\n   75      \"BugPoint Test Pass - Intentionally 'misoptimize' CallInsts\");\n   ..\n   96  \n   97  char CrashOnDeclFunc::ID = 0;\n   98: static RegisterPass<CrashOnDeclFunc>\n   99    Z(\"bugpoint-crash-decl-funcs\",\n  100      \"BugPoint Test Pass - Intentionally crash on declared functions\");\n  ...\n  121  \n  122  char CrashOnTooManyCUs::ID = 0;\n  123: static RegisterPass<CrashOnTooManyCUs>\n  124      A(\"bugpoint-crash-too-many-cus\",\n  125        \"BugPoint Test Pass - Intentionally crash on too many CUs\");\n\n/home/mw/0-rust/src/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:\n  112    ModuleAnalysisManager MAM;\n  113  \n  114:   FAM.registerPass([&] { return PB.buildDefaultAAPipeline(); });\n  115    PB.registerModuleAnalyses(MAM);\n  116    PB.registerCGSCCAnalyses(CGAM);\n\n/home/mw/0-rust/src/llvm/tools/opt/AnalysisWrappers.cpp:\n   69  \n   70  char ExternalFunctionsPassedConstants::ID = 0;\n   71: static RegisterPass<ExternalFunctionsPassedConstants>\n   72    P1(\"print-externalfnconstants\",\n   73       \"Print external fn callsites passed constants\");\n\n/home/mw/0-rust/src/llvm/tools/opt/Debugify.cpp:\n  205  \n  206  char DebugifyPass::ID = 0;\n  207: static RegisterPass<DebugifyPass> X(\"debugify\",\n  208                                      \"Attach debug info to everything\");\n  209  \n  210  char CheckDebugifyPass::ID = 0;\n  211: static RegisterPass<CheckDebugifyPass> Y(\"check-debugify\",\n  212                                           \"Check debug info from -debugify\");\n  213  \n\n/home/mw/0-rust/src/llvm/tools/opt/GraphPrinters.cpp:\n   43  \n   44  char DomInfoPrinter::ID = 0;\n   45: static RegisterPass<DomInfoPrinter>\n   46  DIP(\"print-dom-info\", \"Dominator Info Printer\", true, true);\n   47  \n\n/home/mw/0-rust/src/llvm/tools/opt/NewPMDriver.cpp:\n  216  \n  217    // Register the AA manager first so that our version is the one used.\n  218:   FAM.registerPass([&] { return std::move(AA); });\n  219  \n  220    // Register all the basic analyses with the managers.\n\n/home/mw/0-rust/src/llvm/tools/opt/PrintSCC.cpp:\n   65  \n   66  char CFGSCC::ID = 0;\n   67: static RegisterPass<CFGSCC>\n   68  Y(\"print-cfg-sccs\", \"Print SCCs of each function CFG\");\n   69  \n   70  char CallGraphSCC::ID = 0;\n   71: static RegisterPass<CallGraphSCC>\n   72  Z(\"print-callgraph-sccs\", \"Print SCCs of the Call Graph\");\n   73  \n\n/home/mw/0-rust/src/llvm/unittests/Analysis/CFGTest.cpp:\n   72          PassInfo *PI = new PassInfo(\"isPotentiallyReachable testing pass\",\n   73                                      \"\", &ID, nullptr, true, true);\n   74:         PassRegistry::getPassRegistry()->registerPass(*PI, false);\n   75          initializeLoopInfoWrapperPassPass(*PassRegistry::getPassRegistry());\n   76          initializeDominatorTreeWrapperPassPass(\n\n/home/mw/0-rust/src/llvm/unittests/Analysis/CGSCCPassManagerTest.cpp:\n  229              \"  ret void\\n\"\n  230              \"}\\n\")) {\n  231:     MAM.registerPass([&] { return TargetLibraryAnalysis(); });\n  232:     MAM.registerPass([&] { return LazyCallGraphAnalysis(); });\n  233:     MAM.registerPass([&] { return FunctionAnalysisManagerModuleProxy(FAM); });\n  234:     MAM.registerPass([&] { return CGSCCAnalysisManagerModuleProxy(CGAM); });\n  235:     CGAM.registerPass([&] { return FunctionAnalysisManagerCGSCCProxy(); });\n  236:     CGAM.registerPass([&] { return ModuleAnalysisManagerCGSCCProxy(MAM); });\n  237:     FAM.registerPass([&] { return CGSCCAnalysisManagerFunctionProxy(CGAM); });\n  238:     FAM.registerPass([&] { return ModuleAnalysisManagerFunctionProxy(MAM); });\n  239    }\n  240  };\n  ...\n  242  TEST_F(CGSCCPassManagerTest, Basic) {\n  243    int FunctionAnalysisRuns = 0;\n  244:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  245    int ImmutableFunctionAnalysisRuns = 0;\n  246:   FAM.registerPass([&] {\n  247      return TestImmutableFunctionAnalysis(ImmutableFunctionAnalysisRuns);\n  248    });\n  249  \n  250    int SCCAnalysisRuns = 0;\n  251:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n  252  \n  253    int ModuleAnalysisRuns = 0;\n  254:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  255  \n  256    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  337  TEST_F(CGSCCPassManagerTest, TestSCCPassInvalidatesModuleAnalysis) {\n  338    int ModuleAnalysisRuns = 0;\n  339:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  340  \n  341    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  415  TEST_F(CGSCCPassManagerTest, TestFunctionPassInsideCGSCCInvalidatesModuleAnalysis) {\n  416    int ModuleAnalysisRuns = 0;\n  417:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  418  \n  419    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  499  TEST_F(CGSCCPassManagerTest, TestModulePassInvalidatesSCCAnalysis) {\n  500    int SCCAnalysisRuns = 0;\n  501:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n  502  \n  503    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  537  TEST_F(CGSCCPassManagerTest, TestModulePassCanPreserveSCCAnalysis) {\n  538    int SCCAnalysisRuns = 0;\n  539:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n  540  \n  541    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  576  TEST_F(CGSCCPassManagerTest, TestModulePassInvalidatesSCCAnalysisOnCGChange) {\n  577    int SCCAnalysisRuns = 0;\n  578:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n  579  \n  580    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  611  TEST_F(CGSCCPassManagerTest, TestSCCPassInvalidatesFunctionAnalysis) {\n  612    int FunctionAnalysisRuns = 0;\n  613:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  614  \n  615    // Create a very simple module with a single function and SCC to make testing\n  ...\n  656  TEST_F(CGSCCPassManagerTest, TestSCCPassCanPreserveFunctionAnalysis) {\n  657    int FunctionAnalysisRuns = 0;\n  658:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  659  \n  660    // Create a very simple module with a single function and SCC to make testing\n  ...\n  709  TEST_F(CGSCCPassManagerTest,\n  710         TestModulePassInvalidatesFunctionAnalysisNestedInCGSCC) {\n  711:   MAM.registerPass([&] { return LazyCallGraphAnalysis(); });\n  712  \n  713    int FunctionAnalysisRuns = 0;\n  714:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  715  \n  716    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  751  TEST_F(CGSCCPassManagerTest,\n  752         TestModulePassCanPreserveFunctionAnalysisNestedInCGSCC) {\n  753:   MAM.registerPass([&] { return LazyCallGraphAnalysis(); });\n  754  \n  755    int FunctionAnalysisRuns = 0;\n  756:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  757  \n  758    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  794  TEST_F(CGSCCPassManagerTest,\n  795         TestModulePassInvalidatesFunctionAnalysisNestedInCGSCCOnCGChange) {\n  796:   MAM.registerPass([&] { return LazyCallGraphAnalysis(); });\n  797  \n  798    int FunctionAnalysisRuns = 0;\n  799:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  800  \n  801    ModulePassManager MPM(/*DebugLogging*/ true);\n  ...\n  989  TEST_F(CGSCCPassManagerTest, TestIndirectAnalysisInvalidation) {\n  990    int ModuleAnalysisRuns = 0;\n  991:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  992  \n  993    int SCCAnalysisRuns = 0, IndirectSCCAnalysisRuns = 0,\n  994        DoublyIndirectSCCAnalysisRuns = 0;\n  995:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n  996:   CGAM.registerPass(\n  997        [&] { return TestIndirectSCCAnalysis(IndirectSCCAnalysisRuns); });\n  998:   CGAM.registerPass([&] {\n  999      return TestDoublyIndirectSCCAnalysis(DoublyIndirectSCCAnalysisRuns);\n 1000    });\n 1001  \n 1002    int FunctionAnalysisRuns = 0, IndirectFunctionAnalysisRuns = 0;\n 1003:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n 1004:   FAM.registerPass([&] {\n 1005      return TestIndirectFunctionAnalysis(IndirectFunctionAnalysisRuns);\n 1006    });\n ....\n 1107  TEST_F(CGSCCPassManagerTest, TestAnalysisInvalidationCGSCCUpdate) {\n 1108    int ModuleAnalysisRuns = 0;\n 1109:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n 1110  \n 1111    int SCCAnalysisRuns = 0, IndirectSCCAnalysisRuns = 0,\n 1112        DoublyIndirectSCCAnalysisRuns = 0;\n 1113:   CGAM.registerPass([&] { return TestSCCAnalysis(SCCAnalysisRuns); });\n 1114:   CGAM.registerPass(\n 1115        [&] { return TestIndirectSCCAnalysis(IndirectSCCAnalysisRuns); });\n 1116:   CGAM.registerPass([&] {\n 1117      return TestDoublyIndirectSCCAnalysis(DoublyIndirectSCCAnalysisRuns);\n 1118    });\n 1119  \n 1120    int FunctionAnalysisRuns = 0, IndirectFunctionAnalysisRuns = 0;\n 1121:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n 1122:   FAM.registerPass([&] {\n 1123      return TestIndirectFunctionAnalysis(IndirectFunctionAnalysisRuns);\n 1124    });\n\n/home/mw/0-rust/src/llvm/unittests/IR/PassBuilderCallbacksTest.cpp:\n  322      PB.registerAnalysisRegistrationCallback([this](AnalysisManagerT &AM) {\n  323        // Register our mock analysis\n  324:       AM.registerPass([this] { return AnalysisHandle.getAnalysis(); });\n  325      });\n  326  \n\n/home/mw/0-rust/src/llvm/unittests/IR/PassManagerTest.cpp:\n  399    FunctionAnalysisManager FAM(/*DebugLogging*/ true);\n  400    int FunctionAnalysisRuns = 0;\n  401:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  402  \n  403    ModuleAnalysisManager MAM(/*DebugLogging*/ true);\n  404    int ModuleAnalysisRuns = 0;\n  405:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  406:   MAM.registerPass([&] { return FunctionAnalysisManagerModuleProxy(FAM); });\n  407:   FAM.registerPass([&] { return ModuleAnalysisManagerFunctionProxy(MAM); });\n  408  \n  409    ModulePassManager MPM;\n  ...\n  556  TEST_F(PassManagerTest, CustomizedPassManagerArgs) {\n  557    CustomizedAnalysisManager AM;\n  558:   AM.registerPass([&] { return CustomizedAnalysis(); });\n  559  \n  560    CustomizedPassManager PM;\n  ...\n  677    int FunctionAnalysisRuns = 0, ModuleAnalysisRuns = 0,\n  678        IndirectAnalysisRuns = 0, DoublyIndirectAnalysisRuns = 0;\n  679:   FAM.registerPass([&] { return TestFunctionAnalysis(FunctionAnalysisRuns); });\n  680:   FAM.registerPass(\n  681        [&] { return TestIndirectFunctionAnalysis(IndirectAnalysisRuns); });\n  682:   FAM.registerPass([&] {\n  683      return TestDoublyIndirectFunctionAnalysis(DoublyIndirectAnalysisRuns);\n  684    });\n  685  \n  686    ModuleAnalysisManager MAM(/*DebugLogging*/ true);\n  687:   MAM.registerPass([&] { return TestModuleAnalysis(ModuleAnalysisRuns); });\n  688:   MAM.registerPass([&] { return FunctionAnalysisManagerModuleProxy(FAM); });\n  689:   FAM.registerPass([&] { return ModuleAnalysisManagerFunctionProxy(MAM); });\n  690  \n  691    int InstrCount = 0, FunctionCount = 0;\n\n/home/mw/0-rust/src/llvm/unittests/Transforms/Scalar/LoopPassManagerTest.cpp:\n  296          LAM(true), FAM(true), MAM(true) {\n  297      // Register our mock analysis.\n  298:     LAM.registerPass([&] { return MLAHandle.getAnalysis(); });\n  299  \n  300      // We need DominatorTreeAnalysis for LoopAnalysis.\n  301:     FAM.registerPass([&] { return DominatorTreeAnalysis(); });\n  302:     FAM.registerPass([&] { return LoopAnalysis(); });\n  303      // We also allow loop passes to assume a set of other analyses and so need\n  304      // those.\n  305:     FAM.registerPass([&] { return AAManager(); });\n  306:     FAM.registerPass([&] { return AssumptionAnalysis(); });\n  307:     FAM.registerPass([&] { return ScalarEvolutionAnalysis(); });\n  308:     FAM.registerPass([&] { return TargetLibraryAnalysis(); });\n  309:     FAM.registerPass([&] { return TargetIRAnalysis(); });\n  310  \n  311      // Cross-register proxies.\n  312:     LAM.registerPass([&] { return FunctionAnalysisManagerLoopProxy(FAM); });\n  313:     FAM.registerPass([&] { return LoopAnalysisManagerFunctionProxy(LAM); });\n  314:     FAM.registerPass([&] { return ModuleAnalysisManagerFunctionProxy(MAM); });\n  315:     MAM.registerPass([&] { return FunctionAnalysisManagerModuleProxy(FAM); });\n  316    }\n  317  };\n  ...\n  672    MockLoopAnalysisHandleTemplate<A> MLAHandleA;\n  673    MockLoopAnalysisHandleTemplate<B> MLAHandleB;\n  674:   LAM.registerPass([&] { return MLAHandleA.getAnalysis(); });\n  675:   LAM.registerPass([&] { return MLAHandleB.getAnalysis(); });\n  676    typedef decltype(MLAHandleA)::Analysis AnalysisA;\n  677    typedef decltype(MLAHandleB)::Analysis AnalysisB;\n  ...\n  773  \n  774    MockFunctionAnalysisHandle MFAHandle;\n  775:   FAM.registerPass([&] { return MFAHandle.getAnalysis(); });\n  776    typedef decltype(MFAHandle)::Analysis FunctionAnalysis;\n  777  \n\n/home/mw/0-rust/src/llvm/utils/valgrind/i386-pc-linux-gnu.supp:\n    1  {\n    2:    False leak under RegisterPass\n    3     Memcheck:Leak\n    4     ...\n    5:    fun:_ZN83_GLOBAL_*PassRegistrar12RegisterPassERKN4llvm8PassInfoE\n    6:    fun:_ZN4llvm8PassInfo12registerPassEv\n    7  }\n    8  \n\n/home/mw/0-rust/src/llvm/utils/valgrind/x86_64-pc-linux-gnu.supp:\n    1  {\n    2:    False leak under RegisterPass\n    3     Memcheck:Leak\n    4     ...\n    5:    fun:_ZN4llvm12PassRegistry12registerPassERKNS_8PassInfoE\n    6  }\n    7  \n\n/home/mw/0-rust/src/test/run-make-fulldeps/llvm-pass/llvm-function-pass.so.cc:\n   58  char TestLLVMPass::ID = 0;\n   59  \n   60: static RegisterPass<TestLLVMPass> RegisterAFLPass(\n   61    \"some-llvm-function-pass\", \"Some LLVM pass\");\n   62  \n\n/home/mw/0-rust/src/test/run-make-fulldeps/llvm-pass/llvm-module-pass.so.cc:\n   57  char TestLLVMPass::ID = 0;\n   58  \n   59: static RegisterPass<TestLLVMPass> RegisterAFLPass(\n   60    \"some-llvm-module-pass\", \"Some LLVM pass\");\n   61  \n\n/home/mw/llvm/include/llvm-c/Transforms/Scalar.h:\n  121  void LLVMAddConstantPropagationPass(LLVMPassManagerRef PM);\n  122  \n  123: /** See llvm::demotePromoteMemoryToRegisterPass function. */\n  124: void LLVMAddDemoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n  125  \n  126  /** See llvm::createVerifierPass function. */\n\n/home/mw/llvm/include/llvm-c/Transforms/Utils.h:\n   36  void LLVMAddLowerSwitchPass(LLVMPassManagerRef PM);\n   37  \n   38: /** See llvm::createPromoteMemoryToRegisterPass function. */\n   39: void LLVMAddPromoteMemoryToRegisterPass(LLVMPassManagerRef PM);\n   40  \n   41  /**\n\n/home/mw/llvm/include/llvm/CodeGen/MachinePassRegistry.h:\n   11  // function pass registry (MachinePassRegistry) is auto filled by the static\n   12  // constructors of MachinePassRegistryNode.  Further there is a command line\n   13: // parser (RegisterPassParser) which listens to each registry for additions\n   14  // and deletions, so that the appropriate command option is updated.\n   15  //\n   ..\n  103  //===----------------------------------------------------------------------===//\n  104  ///\n  105: /// RegisterPassParser class - Handle the addition of new machine passes.\n  106  ///\n  107  //===----------------------------------------------------------------------===//\n  108  template<class RegistryClass>\n  109: class RegisterPassParser : public MachinePassRegistryListener,\n  110                     public cl::parser<typename RegistryClass::FunctionPassCtor> {\n  111  public:\n  112:   RegisterPassParser(cl::Option &O)\n  113        : cl::parser<typename RegistryClass::FunctionPassCtor>(O) {}\n  114:   ~RegisterPassParser() override { RegistryClass::setListener(nullptr); }\n  115  \n  116    void initialize() {\n\n/home/mw/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  137    using ScheduleDAGCtor = ScheduleDAGInstrs *(*)(MachineSchedContext *);\n  138  \n  139:   // RegisterPassParser requires a (misnamed) FunctionPassCtor type.\n  140    using FunctionPassCtor = ScheduleDAGCtor;\n  141  \n\n/home/mw/llvm/include/llvm/IR/PassManager.h:\n  737    /// hashtable.)\n  738    template <typename PassBuilderT>\n  739:   bool registerPass(PassBuilderT &&PassBuilder) {\n  740      using PassT = decltype(PassBuilder());\n  741      using PassModelT =\n\n/home/mw/llvm/include/llvm/LinkAllPasses.h:\n  141        (void) llvm::createObjCARCOptPass();\n  142        (void) llvm::createPAEvalPass();\n  143:       (void) llvm::createPromoteMemoryToRegisterPass();\n  144        (void) llvm::createDemoteRegisterToMemoryPass();\n  145        (void) llvm::createPruneEHPass();\n\n/home/mw/llvm/include/llvm/PassInfo.h:\n   26  /// PassInfo class - An instance of this class exists for every pass known by\n   27  /// the system, and can be obtained from a live Pass by calling its\n   28: /// getPassInfo() method.  These objects are set up by the RegisterPass<>\n   29  /// template.\n   30  ///\n   ..\n   45  public:\n   46    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   47:   /// through RegisterPass.\n   48    PassInfo(StringRef name, StringRef arg, const void *pi, NormalCtor_t normal,\n   49             bool isCFGOnly, bool is_analysis)\n   ..\n   52  \n   53    /// PassInfo ctor - Do not call this directly, this should only be invoked\n   54:   /// through RegisterPass. This version is for use by analysis groups; it\n   55    /// does not auto-register the pass.\n   56    PassInfo(StringRef name, const void *pi)\n\n/home/mw/llvm/include/llvm/PassRegistry.h:\n   67    const PassInfo *getPassInfo(StringRef Arg) const;\n   68  \n   69:   /// registerPass - Register a pass (by means of its PassInfo) with the\n   70    /// registry.  Required in order to use the pass with a PassManager.\n   71:   void registerPass(const PassInfo &PI, bool ShouldFree = false);\n   72  \n   73    /// registerAnalysisGroup - Register an analysis group (or a pass implementing\n   74:   // an analysis group) with the registry.  Like registerPass, this is required\n   75    // in order for a PassManager to be able to use this group/pass.\n   76    void registerAnalysisGroup(const void *InterfaceID, const void *PassID,\n\n/home/mw/llvm/include/llvm/PassSupport.h:\n   37          name, arg, &passName::ID,                                              \\\n   38          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n   39:     Registry.registerPass(*PI, true);                                          \\\n   40      return PI;                                                                 \\\n   41    }                                                                            \\\n   ..\n   57        name, arg, &passName::ID,                                                \\\n   58        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n   59:   Registry.registerPass(*PI, true);                                            \\\n   60    return PI;                                                                   \\\n   61    }                                                                            \\\n   ..\n   78  \n   79  //===---------------------------------------------------------------------------\n   80: /// RegisterPass<t> template - This template class is used to notify the system\n   81  /// that a Pass is available for use, and registers it into the internal\n   82  /// database maintained by the PassManager.  Unless this template is used, opt,\n   ..\n   85  /// your .cpp file):\n   86  ///\n   87: /// static RegisterPass<YourPassClassName> tmp(\"passopt\", \"My Pass Name\");\n   88  ///\n   89  /// This statement will cause your pass to be created by calling the default\n   90  /// constructor exposed by the pass.\n   91: template <typename passName> struct RegisterPass : public PassInfo {\n   92    // Register Pass using default constructor...\n   93:   RegisterPass(StringRef PassArg, StringRef Name, bool CFGOnly = false,\n   94                 bool is_analysis = false)\n   95        : PassInfo(Name, PassArg, &passName::ID,\n   96                   PassInfo::NormalCtor_t(callDefaultCtor<passName>), CFGOnly,\n   97                   is_analysis) {\n   98:     PassRegistry::getPassRegistry()->registerPass(*this);\n   99    }\n  100  };\n  ...\n  155          name, arg, &passName::ID,                                              \\\n  156          PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);     \\\n  157:     Registry.registerPass(*PI, true);                                          \\\n  158                                                                                 \\\n  159      PassInfo *AI = new PassInfo(name, &agName::ID);                            \\\n  ...\n  177        n, arg, &passName::ID,                                                   \\\n  178        PassInfo::NormalCtor_t(callDefaultCtor<passName>), cfg, analysis);       \\\n  179:   Registry.registerPass(*PI, true);                                            \\\n  180                                                                                 \\\n  181    PassInfo *AI = new PassInfo(n, &agName::ID);                                 \\\n  ...\n  192  /// PassRegistrationListener class - This class is meant to be derived from by\n  193  /// clients that are interested in which passes get registered and unregistered\n  194: /// at runtime (which can be because of the RegisterPass constructors being run\n  195  /// as the program starts up, or may be because a shared object just got\n  196  /// loaded).\n\n/home/mw/llvm/include/llvm/Passes/PassPlugin.h:\n   51    /// The callback for registering plugin passes with a \\c PassBuilder\n   52    /// instance\n   53:   void (*RegisterPassBuilderCallbacks)(PassBuilder &);\n   54  };\n   55  }\n   ..\n   81  \n   82    /// Invoke the PassBuilder callback registration\n   83:   void registerPassBuilderCallbacks(PassBuilder &PB) const {\n   84:     Info.RegisterPassBuilderCallbacks(PB);\n   85    }\n   86  \n\n/home/mw/llvm/include/llvm/Transforms/Utils.h:\n   98  //   ret i32 %Y\n   99  //\n  100: FunctionPass *createPromoteMemoryToRegisterPass();\n  101  \n  102  //===----------------------------------------------------------------------===//\n\n324 matches across 77 files\n\n\nSearching 55287 files for \"createWriteThinLTOBitcodePass\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO.h:\n  269  \n  270  /// Write ThinLTO-ready bitcode to Str.\n  271: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  272                                            raw_ostream *ThinLinkOS = nullptr);\n  273  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:\n  478                      \"Write ThinLTO Bitcode\", false, true)\n  479  \n  480: ModulePass *llvm::createWriteThinLTOBitcodePass(raw_ostream &Str,\n  481                                                  raw_ostream *ThinLinkOS) {\n  482    return new WriteThinLTOBitcode(Str, ThinLinkOS);\n\n/home/mw/0-rust/src/llvm/tools/opt/opt.cpp:\n  740        Passes.add(createPrintModulePass(*OS, \"\", PreserveAssemblyUseListOrder));\n  741      } else if (OutputThinLTOBC)\n  742:       Passes.add(createWriteThinLTOBitcodePass(\n  743            *OS, ThinLinkOut ? &ThinLinkOut->os() : nullptr));\n  744      else\n\n/home/mw/0-rust/src/rustllvm/PassWrapper.cpp:\n  832      return false;\n  833    }\n  834:   PM->add(createWriteThinLTOBitcodePass(bc));\n  835    PM->run(*unwrap(M));\n  836    delete PM;\n  ...\n 1111      {\n 1112        legacy::PassManager PM;\n 1113:       PM.add(createWriteThinLTOBitcodePass(OS));\n 1114        PM.run(*unwrap(M));\n 1115      }\n\n/home/mw/llvm/include/llvm/Transforms/IPO.h:\n  264  \n  265  /// Write ThinLTO-ready bitcode to Str.\n  266: ModulePass *createWriteThinLTOBitcodePass(raw_ostream &Str,\n  267                                            raw_ostream *ThinLinkOS = nullptr);\n  268  \n\n11 matches across 8 files\n\n\nSearching 55287 files for \"cl::opt<\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Analysis/Loads.h:\n   64  /// The default number of maximum instructions to scan in the block, used by\n   65  /// FindAvailableLoadedValue().\n   66: extern cl::opt<unsigned> DefMaxInstsToScan;\n   67  \n   68  /// Scan backwards to see if we have the value of the given load available\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Analysis/LoopAnalysisManager.h:\n   64  \n   65  /// Enables memory ssa as a dependency for loop passes.\n   66: extern cl::opt<bool> EnableMSSALoopDependency;\n   67  \n   68  /// Extern template declaration for the analysis set for this IR unit.\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/BasicTTIImpl.h:\n   64  class TargetMachine;\n   65  \n   66: extern cl::opt<unsigned> PartialUnrollingThreshold;\n   67  \n   68  /// \\brief Base class which can be used to help build a TTI implementation.\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/CommandFlags.def:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<std::string>\n   31      MArch(\"march\",\n   32            cl::desc(\"Architecture to generate code for (see --version)\"));\n   33  \n   34: static cl::opt<std::string>\n   35      MCPU(\"mcpu\",\n   36           cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   42             cl::value_desc(\"a1,+a2,-a3,...\"));\n   43  \n   44: static cl::opt<Reloc::Model> RelocModel(\n   45      \"relocation-model\", cl::desc(\"Choose relocation model\"),\n   46      cl::values(\n   ..\n   66  }\n   67  \n   68: static cl::opt<ThreadModel::Model> TMModel(\n   69      \"thread-model\", cl::desc(\"Choose threading model\"),\n   70      cl::init(ThreadModel::POSIX),\n   ..\n   73                            \"Single thread model\")));\n   74  \n   75: static cl::opt<llvm::CodeModel::Model> CMModel(\n   76      \"code-model\", cl::desc(\"Choose code model\"),\n   77      cl::values(clEnumValN(CodeModel::Small, \"small\", \"Small code model\"),\n   ..\n   88  }\n   89  \n   90: static cl::opt<llvm::ExceptionHandling> ExceptionModel(\n   91      \"exception-model\", cl::desc(\"exception model\"),\n   92      cl::init(ExceptionHandling::None),\n   ..\n  101                     \"Windows exception model\")));\n  102  \n  103: static cl::opt<TargetMachine::CodeGenFileType> FileType(\n  104      \"filetype\", cl::init(TargetMachine::CGFT_AssemblyFile),\n  105      cl::desc(\n  ...\n  112                            \"Emit nothing, for performance testing\")));\n  113  \n  114: static cl::opt<bool>\n  115      DisableFPElim(\"disable-fp-elim\",\n  116                    cl::desc(\"Disable frame pointer elimination optimization\"),\n  117                    cl::init(false));\n  118  \n  119: static cl::opt<bool> EnableUnsafeFPMath(\n  120      \"enable-unsafe-fp-math\",\n  121      cl::desc(\"Enable optimizations that may decrease FP precision\"),\n  122      cl::init(false));\n  123  \n  124: static cl::opt<bool> EnableNoInfsFPMath(\n  125      \"enable-no-infs-fp-math\",\n  126      cl::desc(\"Enable FP math optimizations that assume no +-Infs\"),\n  127      cl::init(false));\n  128  \n  129: static cl::opt<bool> EnableNoNaNsFPMath(\n  130      \"enable-no-nans-fp-math\",\n  131      cl::desc(\"Enable FP math optimizations that assume no NaNs\"),\n  132      cl::init(false));\n  133  \n  134: static cl::opt<bool> EnableNoSignedZerosFPMath(\n  135      \"enable-no-signed-zeros-fp-math\",\n  136      cl::desc(\"Enable FP math optimizations that assume \"\n  ...\n  138      cl::init(false));\n  139  \n  140: static cl::opt<bool>\n  141      EnableNoTrappingFPMath(\"enable-no-trapping-fp-math\",\n  142                             cl::desc(\"Enable setting the FP exceptions build \"\n  ...\n  144                             cl::init(false));\n  145  \n  146: static cl::opt<llvm::FPDenormal::DenormalMode> DenormalMode(\n  147      \"denormal-fp-math\",\n  148      cl::desc(\"Select which denormal numbers the code is permitted to require\"),\n  ...\n  156                            \"denormals are flushed to positive zero\")));\n  157  \n  158: static cl::opt<bool> EnableHonorSignDependentRoundingFPMath(\n  159      \"enable-sign-dependent-rounding-fp-math\", cl::Hidden,\n  160      cl::desc(\"Force codegen to assume rounding mode can change dynamically\"),\n  161      cl::init(false));\n  162  \n  163: static cl::opt<llvm::FloatABI::ABIType> FloatABIForCalls(\n  164      \"float-abi\", cl::desc(\"Choose float ABI type\"), cl::init(FloatABI::Default),\n  165      cl::values(clEnumValN(FloatABI::Default, \"default\",\n  ...\n  170                            \"Hard float ABI (uses FP registers)\")));\n  171  \n  172: static cl::opt<llvm::FPOpFusion::FPOpFusionMode> FuseFPOps(\n  173      \"fp-contract\", cl::desc(\"Enable aggressive formation of fused FP ops\"),\n  174      cl::init(FPOpFusion::Standard),\n  ...\n  179                     \"Only fuse FP ops when the result won't be affected.\")));\n  180  \n  181: static cl::opt<bool> DontPlaceZerosInBSS(\n  182      \"nozero-initialized-in-bss\",\n  183      cl::desc(\"Don't place zero-initialized symbols into bss section\"),\n  184      cl::init(false));\n  185  \n  186: static cl::opt<bool> EnableGuaranteedTailCallOpt(\n  187      \"tailcallopt\",\n  188      cl::desc(\n  ...\n  190      cl::init(false));\n  191  \n  192: static cl::opt<bool> DisableTailCalls(\"disable-tail-calls\",\n  193                                        cl::desc(\"Never emit tail calls\"),\n  194                                        cl::init(false));\n  195  \n  196: static cl::opt<bool> StackSymbolOrdering(\"stack-symbol-ordering\",\n  197                                           cl::desc(\"Order local stack symbols.\"),\n  198                                           cl::init(true));\n  199  \n  200: static cl::opt<unsigned>\n  201      OverrideStackAlignment(\"stack-alignment\",\n  202                             cl::desc(\"Override default stack alignment\"),\n  203                             cl::init(0));\n  204  \n  205: static cl::opt<bool>\n  206      StackRealign(\"stackrealign\",\n  207                   cl::desc(\"Force align the stack to the minimum alignment\"),\n  208                   cl::init(false));\n  209  \n  210: static cl::opt<std::string> TrapFuncName(\n  211      \"trap-func\", cl::Hidden,\n  212      cl::desc(\"Emit a call to trap function rather than a trap instruction\"),\n  213      cl::init(\"\"));\n  214  \n  215: static cl::opt<bool> UseCtors(\"use-ctors\",\n  216                                cl::desc(\"Use .ctors instead of .init_array.\"),\n  217                                cl::init(false));\n  218  \n  219: static cl::opt<bool> RelaxELFRelocations(\n  220      \"relax-elf-relocations\",\n  221      cl::desc(\"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF\"),\n  222      cl::init(false));\n  223  \n  224: static cl::opt<bool> DataSections(\"data-sections\",\n  225                                    cl::desc(\"Emit data into separate sections\"),\n  226                                    cl::init(false));\n  227  \n  228: static cl::opt<bool>\n  229      FunctionSections(\"function-sections\",\n  230                       cl::desc(\"Emit functions into separate sections\"),\n  231                       cl::init(false));\n  232  \n  233: static cl::opt<bool> EmulatedTLS(\"emulated-tls\",\n  234                                   cl::desc(\"Use emulated TLS model\"),\n  235                                   cl::init(false));\n  236  \n  237: static cl::opt<bool>\n  238      UniqueSectionNames(\"unique-section-names\",\n  239                         cl::desc(\"Give unique names to every section\"),\n  240                         cl::init(true));\n  241  \n  242: static cl::opt<llvm::EABI>\n  243      EABIVersion(\"meabi\", cl::desc(\"Set EABI type (default depends on triple):\"),\n  244                  cl::init(EABI::Default),\n  ...\n  249                             clEnumValN(EABI::GNU, \"gnu\", \"EABI GNU\")));\n  250  \n  251: static cl::opt<DebuggerKind> DebuggerTuningOpt(\n  252      \"debugger-tune\", cl::desc(\"Tune debug info for a particular debugger\"),\n  253      cl::init(DebuggerKind::Default),\n  ...\n  256                 clEnumValN(DebuggerKind::SCE, \"sce\", \"SCE targets (e.g. PS4)\")));\n  257  \n  258: static cl::opt<bool> EnableStackSizeSection(\n  259      \"stack-size-section\",\n  260      cl::desc(\"Emit a section containing stack size metadata\"), cl::init(false));\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/LiveIntervals.h:\n   40  namespace llvm {\n   41  \n   42: extern cl::opt<bool> UseSegmentSetForPhysRegs;\n   43  \n   44  class BitVector;\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  100  namespace llvm {\n  101  \n  102: extern cl::opt<bool> ForceTopDown;\n  103: extern cl::opt<bool> ForceBottomUp;\n  104  \n  105  class LiveIntervals;\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.def:\n   20  using namespace llvm;\n   21  \n   22: static cl::opt<MCTargetOptions::AsmInstrumentation> AsmInstrumentation(\n   23      \"asm-instrumentation\", cl::desc(\"Instrumentation of inline assembly and \"\n   24                                      \"assembly source files\"),\n   ..\n   29                            \"instrument instructions with memory arguments\")));\n   30  \n   31: static cl::opt<bool> RelaxAll(\"mc-relax-all\",\n   32                         cl::desc(\"When used with filetype=obj, \"\n   33                                  \"relax all fixups in the emitted object file\"));\n   34  \n   35: static cl::opt<bool> IncrementalLinkerCompatible(\n   36      \"incremental-linker-compatible\",\n   37      cl::desc(\n   ..\n   39          \"emit an object file which can be used with an incremental linker\"));\n   40  \n   41: static cl::opt<bool> PIECopyRelocations(\"pie-copy-relocations\", cl::desc(\"PIE Copy Relocations\"));\n   42  \n   43: static cl::opt<int> DwarfVersion(\"dwarf-version\", cl::desc(\"Dwarf version\"),\n   44                            cl::init(0));\n   45  \n   46: static cl::opt<bool> ShowMCInst(\"asm-show-inst\",\n   47                           cl::desc(\"Emit internal instruction representation to \"\n   48                                    \"assembly file\"));\n   49  \n   50: static cl::opt<bool> FatalWarnings(\"fatal-warnings\",\n   51                              cl::desc(\"Treat warnings as errors\"));\n   52  \n   53: static cl::opt<bool> NoWarn(\"no-warn\", cl::desc(\"Suppress all warnings\"));\n   54  static cl::alias NoWarnW(\"W\", cl::desc(\"Alias for --no-warn\"), cl::aliasopt(NoWarn));\n   55  \n   56: static cl::opt<bool> NoDeprecatedWarn(\"no-deprecated-warn\",\n   57                                 cl::desc(\"Suppress all deprecated warnings\"));\n   58  \n   59: static cl::opt<std::string>\n   60  ABIName(\"target-abi\", cl::Hidden,\n   61          cl::desc(\"The name of the ABI to be targeted from the backend.\"),\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Support/Options.h:\n   96    static void registerOption(StringRef ArgStr, StringRef Desc,\n   97                               const ValT &InitValue) {\n   98:     cl::opt<ValT> *Option = new cl::opt<ValT>(ArgStr, cl::desc(Desc),\n   99                                                cl::Hidden, cl::init(InitValue));\n  100      instance().addOption(&detail::OptionKey<ValT, Base, Mem>::ID, Option);\n  ...\n  112      auto It = Options.find(&detail::OptionKey<ValT, Base, Mem>::ID);\n  113      assert(It != Options.end() && \"Option not in OptionRegistry\");\n  114:     return *(cl::opt<ValT> *)It->second;\n  115    }\n  116  };\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Support/PluginLoader.h:\n   29  #ifndef DONT_GET_PLUGIN_LOADER_OPTION\n   30    // This causes operator= above to be invoked for every -load option.\n   31:   static cl::opt<PluginLoader, false, cl::parser<std::string> >\n   32      LoadOpt(\"load\", cl::ZeroOrMore, cl::value_desc(\"pluginfilename\"),\n   33              cl::desc(\"Load the specified plugin\"));\n\n/home/mw/0-rust/src/llvm/docs/CommandLine.rst:\n  112  .. code-block:: c++\n  113  \n  114:   cl::opt<string> OutputFilename(\"o\", cl::desc(\"Specify output filename\"), cl::value_desc(\"filename\"));\n  115  \n  116  This declares a global variable \"``OutputFilename``\" that is used to capture the\n  ...\n  161  \n  162  \n  163:   cl::opt<string> InputFilename(cl::Positional, cl::desc(\"<input file>\"), cl::init(\"-\"));\n  164  \n  165  This declaration indicates that the first positional argument should be treated\n  ...\n  174  .. code-block:: c++\n  175  \n  176:   cl::opt<string> InputFilename(cl::Positional, cl::desc(\"<input file>\"), cl::Required);\n  177  \n  178  Again, the CommandLine library does not require the options to be specified in\n  ...\n  181  .. code-block:: c++\n  182  \n  183:   cl::opt<string> InputFilename(cl::Positional, cl::Required, cl::desc(\"<input file>\"));\n  184  \n  185  By simply adding the `cl::Required`_ flag, the CommandLine library will\n  ...\n  211  .. code-block:: c++\n  212  \n  213:   cl::opt<bool> Force (\"f\", cl::desc(\"Enable binary output on terminals\"));\n  214:   cl::opt<bool> Quiet (\"quiet\", cl::desc(\"Don't print informational messages\"));\n  215:   cl::opt<bool> Quiet2(\"q\", cl::desc(\"Don't print informational messages\"), cl::Hidden);\n  216  \n  217  This does what you would expect: it declares three boolean variables\n  ...\n  292  .. code-block:: c++\n  293  \n  294:   cl::opt<bool> Force (\"f\", cl::desc(\"Overwrite output files\"));\n  295:   cl::opt<bool> Quiet (\"quiet\", cl::desc(\"Don't print informational messages\"));\n  296    cl::alias     QuietA(\"q\", cl::desc(\"Alias for -quiet\"), cl::aliasopt(Quiet));\n  297  \n  ...\n  351    };\n  352  \n  353:   cl::opt<OptLevel> OptimizationLevel(cl::desc(\"Choose optimization level:\"),\n  354      cl::values(\n  355        clEnumVal(g , \"No optimizations, enable debugging\"),\n  ...\n  395    };\n  396  \n  397:   cl::opt<OptLevel> OptimizationLevel(cl::desc(\"Choose optimization level:\"),\n  398      cl::values(\n  399       clEnumValN(Debug, \"g\", \"No optimizations, enable debugging\"),\n  ...\n  430  \n  431    // Enable Debug Options to be specified on the command line\n  432:   cl::opt<DebugLev> DebugLevel(\"debug_level\", cl::desc(\"Set the debugging level:\"),\n  433      cl::values(\n  434        clEnumValN(nodebuginfo, \"none\", \"disable debug information\"),\n  ...\n  629                                         \"These control which stages are run.\");\n  630  \n  631:   cl::opt<bool> Preprocessor(\"E\",cl::desc(\"Run preprocessor stage.\"),\n  632                               cl::cat(StageSelectionCat));\n  633  \n  634:   cl::opt<bool> NoLink(\"c\",cl::desc(\"Run all stages except linking.\"),\n  635                         cl::cat(StageSelectionCat));\n  636  \n  ...\n  690  .. code-block:: c++\n  691  \n  692:   cl::opt<string> Regex   (cl::Positional, cl::desc(\"<regular expression>\"), cl::Required);\n  693:   cl::opt<string> Filename(cl::Positional, cl::desc(\"<input file>\"), cl::init(\"-\"));\n  694  \n  695  Given these two option declarations, the ``-help`` output for our grep\n  ...\n  824  .. code-block:: c++\n  825  \n  826:   cl::opt<string> Script(cl::Positional, cl::desc(\"<input script>\"), cl::init(\"-\"));\n  827    cl::list<string>  Argv(cl::ConsumeAfter, cl::desc(\"<program arguments>...\"));\n  828:   cl::opt<bool>    Trace(\"x\", cl::desc(\"Enable trace output\"));\n  829  \n  830  which automatically provides the help output:\n  ...\n  901  \n  902    bool DebugFlag;                  // the actual value\n  903:   static cl::opt<bool, true>       // The parser\n  904    Debug(\"debug\", cl::desc(\"Enable debug output\"), cl::Hidden, cl::location(DebugFlag));\n  905  \n  ...\n  920    .. code-block:: c++\n  921  \n  922:     cl::opt<bool> Quiet(\"quiet\");\n  923  \n  924  .. _cl::desc(...):\n  ...\n 1676  .. code-block:: c++\n 1677  \n 1678:   static cl::opt<unsigned, false, FileSizeParser>\n 1679    MFS(\"max-file-size\", cl::desc(\"Maximum file size to accept\"),\n 1680        cl::value_desc(\"size\"));\n\n/home/mw/0-rust/src/llvm/docs/WritingAnLLVMPass.rst:\n 1323  .. code-block:: c++\n 1324  \n 1325:   cl::opt<RegisterMyPasses::FunctionPassCtor, false,\n 1326            RegisterPassParser<RegisterMyPasses> >\n 1327    MyPassOpt(\"mypass\",\n\n/home/mw/0-rust/src/llvm/examples/BrainF/BrainFDriver.cpp:\n   59  //Command line options\n   60  \n   61: static cl::opt<std::string>\n   62  InputFilename(cl::Positional, cl::desc(\"<input brainf>\"));\n   63  \n   64: static cl::opt<std::string>\n   65  OutputFilename(\"o\", cl::desc(\"Output filename\"), cl::value_desc(\"filename\"));\n   66  \n   67: static cl::opt<bool>\n   68  ArrayBoundsChecking(\"abc\", cl::desc(\"Enable array bounds checking\"));\n   69  \n   70: static cl::opt<bool>\n   71  JIT(\"jit\", cl::desc(\"Run program Just-In-Time\"));\n   72  \n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/server.cpp:\n   19  \n   20  // Command line argument for TCP port.\n   21: cl::opt<uint32_t> Port(\"port\",\n   22                         cl::desc(\"TCP port to listen on\"),\n   23                         cl::init(20000));\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/toy.cpp:\n   39  \n   40  // Command line argument for TCP hostname.\n   41: cl::opt<std::string> HostName(\"hostname\",\n   42                                cl::desc(\"TCP hostname to connect to\"),\n   43                                cl::init(\"localhost\"));\n   44  \n   45  // Command line argument for TCP port.\n   46: cl::opt<uint32_t> Port(\"port\",\n   47                         cl::desc(\"TCP port to connect to\"),\n   48                         cl::init(20000));\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/cached/toy-jit.cpp:\n   29  \n   30  namespace {\n   31:   cl::opt<std::string>\n   32    InputIR(\"input-IR\",\n   33                cl::desc(\"Specify the name of an IR file to load for function definitions\"),\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/cached/toy.cpp:\n   32  //===----------------------------------------------------------------------===//\n   33  \n   34: cl::opt<std::string>\n   35  InputIR(\"input-IR\",\n   36          cl::desc(\"Specify the name of an IR file to load for function definitions\"),\n   37          cl::value_desc(\"input IR file name\"));\n   38  \n   39: cl::opt<bool>\n   40  UseObjectCache(\"use-object-cache\",\n   41                 cl::desc(\"Enable use of the MCJIT object caching\"),\n\n/home/mw/0-rust/src/llvm/examples/Kaleidoscope/MCJIT/complete/toy.cpp:\n   32  \n   33  namespace {\n   34:   cl::opt<std::string>\n   35    InputIR(\"input-IR\",\n   36                cl::desc(\"Specify the name of an IR file to load for function definitions\"),\n   37                cl::value_desc(\"input IR file name\"));\n   38  \n   39:   cl::opt<bool>\n   40    VerboseOutput(\"verbose\",\n   41                  cl::desc(\"Enable verbose output (results, IR, etc.) to stderr\"),\n   42                  cl::init(false));\n   43  \n   44:   cl::opt<bool>\n   45    SuppressPrompts(\"suppress-prompts\",\n   46                    cl::desc(\"Disable printing the 'ready' prompt\"),\n   47                    cl::init(false));\n   48  \n   49:   cl::opt<bool>\n   50    DumpModulesOnExit(\"dump-modules\",\n   51                    cl::desc(\"Dump IR from modules to stderr on shutdown\"),\n   52                    cl::init(false));\n   53  \n   54:   cl::opt<bool> EnableLazyCompilation(\n   55      \"enable-lazy-compilation\", cl::desc(\"Enable lazy compilation when using the MCJIT engine\"),\n   56      cl::init(true));\n   57  \n   58:   cl::opt<bool> UseObjectCache(\n   59      \"use-object-cache\", cl::desc(\"Enable use of the MCJIT object caching\"),\n   60      cl::init(false));\n\n/home/mw/0-rust/src/llvm/include/llvm/Analysis/Loads.h:\n   64  /// The default number of maximum instructions to scan in the block, used by\n   65  /// FindAvailableLoadedValue().\n   66: extern cl::opt<unsigned> DefMaxInstsToScan;\n   67  \n   68  /// Scan backwards to see if we have the value of the given load available\n\n/home/mw/0-rust/src/llvm/include/llvm/Analysis/LoopAnalysisManager.h:\n   64  \n   65  /// Enables memory ssa as a dependency for loop passes.\n   66: extern cl::opt<bool> EnableMSSALoopDependency;\n   67  \n   68  /// Extern template declaration for the analysis set for this IR unit.\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/BasicTTIImpl.h:\n   64  class TargetMachine;\n   65  \n   66: extern cl::opt<unsigned> PartialUnrollingThreshold;\n   67  \n   68  /// \\brief Base class which can be used to help build a TTI implementation.\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/CommandFlags.def:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<std::string>\n   31      MArch(\"march\",\n   32            cl::desc(\"Architecture to generate code for (see --version)\"));\n   33  \n   34: static cl::opt<std::string>\n   35      MCPU(\"mcpu\",\n   36           cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   42             cl::value_desc(\"a1,+a2,-a3,...\"));\n   43  \n   44: static cl::opt<Reloc::Model> RelocModel(\n   45      \"relocation-model\", cl::desc(\"Choose relocation model\"),\n   46      cl::values(\n   ..\n   66  }\n   67  \n   68: static cl::opt<ThreadModel::Model> TMModel(\n   69      \"thread-model\", cl::desc(\"Choose threading model\"),\n   70      cl::init(ThreadModel::POSIX),\n   ..\n   73                            \"Single thread model\")));\n   74  \n   75: static cl::opt<llvm::CodeModel::Model> CMModel(\n   76      \"code-model\", cl::desc(\"Choose code model\"),\n   77      cl::values(clEnumValN(CodeModel::Small, \"small\", \"Small code model\"),\n   ..\n   88  }\n   89  \n   90: static cl::opt<llvm::ExceptionHandling> ExceptionModel(\n   91      \"exception-model\", cl::desc(\"exception model\"),\n   92      cl::init(ExceptionHandling::None),\n   ..\n  101                     \"Windows exception model\")));\n  102  \n  103: static cl::opt<TargetMachine::CodeGenFileType> FileType(\n  104      \"filetype\", cl::init(TargetMachine::CGFT_AssemblyFile),\n  105      cl::desc(\n  ...\n  112                            \"Emit nothing, for performance testing\")));\n  113  \n  114: static cl::opt<bool>\n  115      DisableFPElim(\"disable-fp-elim\",\n  116                    cl::desc(\"Disable frame pointer elimination optimization\"),\n  117                    cl::init(false));\n  118  \n  119: static cl::opt<bool> EnableUnsafeFPMath(\n  120      \"enable-unsafe-fp-math\",\n  121      cl::desc(\"Enable optimizations that may decrease FP precision\"),\n  122      cl::init(false));\n  123  \n  124: static cl::opt<bool> EnableNoInfsFPMath(\n  125      \"enable-no-infs-fp-math\",\n  126      cl::desc(\"Enable FP math optimizations that assume no +-Infs\"),\n  127      cl::init(false));\n  128  \n  129: static cl::opt<bool> EnableNoNaNsFPMath(\n  130      \"enable-no-nans-fp-math\",\n  131      cl::desc(\"Enable FP math optimizations that assume no NaNs\"),\n  132      cl::init(false));\n  133  \n  134: static cl::opt<bool> EnableNoSignedZerosFPMath(\n  135      \"enable-no-signed-zeros-fp-math\",\n  136      cl::desc(\"Enable FP math optimizations that assume \"\n  ...\n  138      cl::init(false));\n  139  \n  140: static cl::opt<bool>\n  141      EnableNoTrappingFPMath(\"enable-no-trapping-fp-math\",\n  142                             cl::desc(\"Enable setting the FP exceptions build \"\n  ...\n  144                             cl::init(false));\n  145  \n  146: static cl::opt<llvm::FPDenormal::DenormalMode> DenormalMode(\n  147      \"denormal-fp-math\",\n  148      cl::desc(\"Select which denormal numbers the code is permitted to require\"),\n  ...\n  156                            \"denormals are flushed to positive zero\")));\n  157  \n  158: static cl::opt<bool> EnableHonorSignDependentRoundingFPMath(\n  159      \"enable-sign-dependent-rounding-fp-math\", cl::Hidden,\n  160      cl::desc(\"Force codegen to assume rounding mode can change dynamically\"),\n  161      cl::init(false));\n  162  \n  163: static cl::opt<llvm::FloatABI::ABIType> FloatABIForCalls(\n  164      \"float-abi\", cl::desc(\"Choose float ABI type\"), cl::init(FloatABI::Default),\n  165      cl::values(clEnumValN(FloatABI::Default, \"default\",\n  ...\n  170                            \"Hard float ABI (uses FP registers)\")));\n  171  \n  172: static cl::opt<llvm::FPOpFusion::FPOpFusionMode> FuseFPOps(\n  173      \"fp-contract\", cl::desc(\"Enable aggressive formation of fused FP ops\"),\n  174      cl::init(FPOpFusion::Standard),\n  ...\n  179                     \"Only fuse FP ops when the result won't be affected.\")));\n  180  \n  181: static cl::opt<bool> DontPlaceZerosInBSS(\n  182      \"nozero-initialized-in-bss\",\n  183      cl::desc(\"Don't place zero-initialized symbols into bss section\"),\n  184      cl::init(false));\n  185  \n  186: static cl::opt<bool> EnableGuaranteedTailCallOpt(\n  187      \"tailcallopt\",\n  188      cl::desc(\n  ...\n  190      cl::init(false));\n  191  \n  192: static cl::opt<bool> DisableTailCalls(\"disable-tail-calls\",\n  193                                        cl::desc(\"Never emit tail calls\"),\n  194                                        cl::init(false));\n  195  \n  196: static cl::opt<bool> StackSymbolOrdering(\"stack-symbol-ordering\",\n  197                                           cl::desc(\"Order local stack symbols.\"),\n  198                                           cl::init(true));\n  199  \n  200: static cl::opt<unsigned>\n  201      OverrideStackAlignment(\"stack-alignment\",\n  202                             cl::desc(\"Override default stack alignment\"),\n  203                             cl::init(0));\n  204  \n  205: static cl::opt<bool>\n  206      StackRealign(\"stackrealign\",\n  207                   cl::desc(\"Force align the stack to the minimum alignment\"),\n  208                   cl::init(false));\n  209  \n  210: static cl::opt<std::string> TrapFuncName(\n  211      \"trap-func\", cl::Hidden,\n  212      cl::desc(\"Emit a call to trap function rather than a trap instruction\"),\n  213      cl::init(\"\"));\n  214  \n  215: static cl::opt<bool> UseCtors(\"use-ctors\",\n  216                                cl::desc(\"Use .ctors instead of .init_array.\"),\n  217                                cl::init(false));\n  218  \n  219: static cl::opt<bool> RelaxELFRelocations(\n  220      \"relax-elf-relocations\",\n  221      cl::desc(\"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF\"),\n  222      cl::init(false));\n  223  \n  224: static cl::opt<bool> DataSections(\"data-sections\",\n  225                                    cl::desc(\"Emit data into separate sections\"),\n  226                                    cl::init(false));\n  227  \n  228: static cl::opt<bool>\n  229      FunctionSections(\"function-sections\",\n  230                       cl::desc(\"Emit functions into separate sections\"),\n  231                       cl::init(false));\n  232  \n  233: static cl::opt<bool> EmulatedTLS(\"emulated-tls\",\n  234                                   cl::desc(\"Use emulated TLS model\"),\n  235                                   cl::init(false));\n  236  \n  237: static cl::opt<bool>\n  238      UniqueSectionNames(\"unique-section-names\",\n  239                         cl::desc(\"Give unique names to every section\"),\n  240                         cl::init(true));\n  241  \n  242: static cl::opt<llvm::EABI>\n  243      EABIVersion(\"meabi\", cl::desc(\"Set EABI type (default depends on triple):\"),\n  244                  cl::init(EABI::Default),\n  ...\n  249                             clEnumValN(EABI::GNU, \"gnu\", \"EABI GNU\")));\n  250  \n  251: static cl::opt<DebuggerKind> DebuggerTuningOpt(\n  252      \"debugger-tune\", cl::desc(\"Tune debug info for a particular debugger\"),\n  253      cl::init(DebuggerKind::Default),\n  ...\n  256                 clEnumValN(DebuggerKind::SCE, \"sce\", \"SCE targets (e.g. PS4)\")));\n  257  \n  258: static cl::opt<bool> EnableStackSizeSection(\n  259      \"stack-size-section\",\n  260      cl::desc(\"Emit a section containing stack size metadata\"), cl::init(false));\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/LiveIntervals.h:\n   40  namespace llvm {\n   41  \n   42: extern cl::opt<bool> UseSegmentSetForPhysRegs;\n   43  \n   44  class BitVector;\n\n/home/mw/0-rust/src/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  100  namespace llvm {\n  101  \n  102: extern cl::opt<bool> ForceTopDown;\n  103: extern cl::opt<bool> ForceBottomUp;\n  104  \n  105  class LiveIntervals;\n\n/home/mw/0-rust/src/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.def:\n   20  using namespace llvm;\n   21  \n   22: static cl::opt<MCTargetOptions::AsmInstrumentation> AsmInstrumentation(\n   23      \"asm-instrumentation\", cl::desc(\"Instrumentation of inline assembly and \"\n   24                                      \"assembly source files\"),\n   ..\n   29                            \"instrument instructions with memory arguments\")));\n   30  \n   31: static cl::opt<bool> RelaxAll(\"mc-relax-all\",\n   32                         cl::desc(\"When used with filetype=obj, \"\n   33                                  \"relax all fixups in the emitted object file\"));\n   34  \n   35: static cl::opt<bool> IncrementalLinkerCompatible(\n   36      \"incremental-linker-compatible\",\n   37      cl::desc(\n   ..\n   39          \"emit an object file which can be used with an incremental linker\"));\n   40  \n   41: static cl::opt<bool> PIECopyRelocations(\"pie-copy-relocations\", cl::desc(\"PIE Copy Relocations\"));\n   42  \n   43: static cl::opt<int> DwarfVersion(\"dwarf-version\", cl::desc(\"Dwarf version\"),\n   44                            cl::init(0));\n   45  \n   46: static cl::opt<bool> ShowMCInst(\"asm-show-inst\",\n   47                           cl::desc(\"Emit internal instruction representation to \"\n   48                                    \"assembly file\"));\n   49  \n   50: static cl::opt<bool> FatalWarnings(\"fatal-warnings\",\n   51                              cl::desc(\"Treat warnings as errors\"));\n   52  \n   53: static cl::opt<bool> NoWarn(\"no-warn\", cl::desc(\"Suppress all warnings\"));\n   54  static cl::alias NoWarnW(\"W\", cl::desc(\"Alias for --no-warn\"), cl::aliasopt(NoWarn));\n   55  \n   56: static cl::opt<bool> NoDeprecatedWarn(\"no-deprecated-warn\",\n   57                                 cl::desc(\"Suppress all deprecated warnings\"));\n   58  \n   59: static cl::opt<std::string>\n   60  ABIName(\"target-abi\", cl::Hidden,\n   61          cl::desc(\"The name of the ABI to be targeted from the backend.\"),\n\n/home/mw/0-rust/src/llvm/include/llvm/Support/Options.h:\n   96    static void registerOption(StringRef ArgStr, StringRef Desc,\n   97                               const ValT &InitValue) {\n   98:     cl::opt<ValT> *Option = new cl::opt<ValT>(ArgStr, cl::desc(Desc),\n   99                                                cl::Hidden, cl::init(InitValue));\n  100      instance().addOption(&detail::OptionKey<ValT, Base, Mem>::ID, Option);\n  ...\n  112      auto It = Options.find(&detail::OptionKey<ValT, Base, Mem>::ID);\n  113      assert(It != Options.end() && \"Option not in OptionRegistry\");\n  114:     return *(cl::opt<ValT> *)It->second;\n  115    }\n  116  };\n\n/home/mw/0-rust/src/llvm/include/llvm/Support/PluginLoader.h:\n   29  #ifndef DONT_GET_PLUGIN_LOADER_OPTION\n   30    // This causes operator= above to be invoked for every -load option.\n   31:   static cl::opt<PluginLoader, false, cl::parser<std::string> >\n   32      LoadOpt(\"load\", cl::ZeroOrMore, cl::value_desc(\"pluginfilename\"),\n   33              cl::desc(\"Load the specified plugin\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/AliasAnalysis.cpp:\n   60  /// Allow disabling BasicAA from the AA results. This is particularly useful\n   61  /// when testing to isolate a single AA implementation.\n   62: static cl::opt<bool> DisableBasicAA(\"disable-basicaa\", cl::Hidden,\n   63                                      cl::init(false));\n   64  \n\n/home/mw/0-rust/src/llvm/lib/Analysis/AliasAnalysisEvaluator.cpp:\n   24  using namespace llvm;\n   25  \n   26: static cl::opt<bool> PrintAll(\"print-all-alias-modref-info\", cl::ReallyHidden);\n   27  \n   28: static cl::opt<bool> PrintNoAlias(\"print-no-aliases\", cl::ReallyHidden);\n   29: static cl::opt<bool> PrintMayAlias(\"print-may-aliases\", cl::ReallyHidden);\n   30: static cl::opt<bool> PrintPartialAlias(\"print-partial-aliases\", cl::ReallyHidden);\n   31: static cl::opt<bool> PrintMustAlias(\"print-must-aliases\", cl::ReallyHidden);\n   32  \n   33: static cl::opt<bool> PrintNoModRef(\"print-no-modref\", cl::ReallyHidden);\n   34: static cl::opt<bool> PrintRef(\"print-ref\", cl::ReallyHidden);\n   35: static cl::opt<bool> PrintMod(\"print-mod\", cl::ReallyHidden);\n   36: static cl::opt<bool> PrintModRef(\"print-modref\", cl::ReallyHidden);\n   37: static cl::opt<bool> PrintMust(\"print-must\", cl::ReallyHidden);\n   38: static cl::opt<bool> PrintMustRef(\"print-mustref\", cl::ReallyHidden);\n   39: static cl::opt<bool> PrintMustMod(\"print-mustmod\", cl::ReallyHidden);\n   40: static cl::opt<bool> PrintMustModRef(\"print-mustmodref\", cl::ReallyHidden);\n   41  \n   42: static cl::opt<bool> EvalAAMD(\"evaluate-aa-metadata\", cl::ReallyHidden);\n   43  \n   44  static void PrintResults(const char *Msg, bool P, const Value *V1,\n\n/home/mw/0-rust/src/llvm/lib/Analysis/AliasSetTracker.cpp:\n   39  using namespace llvm;\n   40  \n   41: static cl::opt<unsigned>\n   42      SaturationThreshold(\"alias-set-saturation-threshold\", cl::Hidden,\n   43                          cl::init(250),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/AssumptionCache.cpp:\n   37  using namespace llvm::PatternMatch;\n   38  \n   39: static cl::opt<bool>\n   40      VerifyAssumptionCache(\"verify-assumption-cache\", cl::Hidden,\n   41                            cl::desc(\"Enable verification of assumption cache\"),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/BasicAliasAnalysis.cpp:\n   66  \n   67  /// Enable analysis of recursive PHI nodes.\n   68: static cl::opt<bool> EnableRecPhiAnalysis(\"basicaa-recphi\", cl::Hidden,\n   69                                            cl::init(false));\n   70  /// SearchLimitReached / SearchTimes shows how often the limit of\n\n/home/mw/0-rust/src/llvm/lib/Analysis/BlockFrequencyInfo.cpp:\n   34  #define DEBUG_TYPE \"block-freq\"\n   35  \n   36: static cl::opt<GVDAGType> ViewBlockFreqPropagationDAG(\n   37      \"view-block-freq-propagation-dags\", cl::Hidden,\n   38      cl::desc(\"Pop up a window to show a dag displaying how block \"\n   ..\n   48                                                 \"profile count if available.\")));\n   49  \n   50: cl::opt<std::string>\n   51      ViewBlockFreqFuncName(\"view-bfi-func-name\", cl::Hidden,\n   52                            cl::desc(\"The option to specify \"\n   ..\n   54                                     \"whose CFG will be displayed.\"));\n   55  \n   56: cl::opt<unsigned>\n   57      ViewHotFreqPercent(\"view-hot-freq-percent\", cl::init(10), cl::Hidden,\n   58                         cl::desc(\"An integer in percent used to specify \"\n   ..\n   63  \n   64  // Command line option to turn on CFG dot or text dump after profile annotation.\n   65: cl::opt<PGOViewCountsType> PGOViewCounts(\n   66      \"pgo-view-counts\", cl::Hidden,\n   67      cl::desc(\"A boolean option to show CFG dag or text with \"\n   ..\n   79                 clEnumValN(PGOVCT_Text, \"text\", \"show in text.\")));\n   80  \n   81: static cl::opt<bool> PrintBlockFreq(\n   82      \"print-bfi\", cl::init(false), cl::Hidden,\n   83      cl::desc(\"Print the block frequency info.\"));\n   84  \n   85: cl::opt<std::string> PrintBlockFreqFuncName(\n   86      \"print-bfi-func-name\", cl::Hidden,\n   87      cl::desc(\"The option to specify the name of the function \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/BranchProbabilityInfo.cpp:\n   46  #define DEBUG_TYPE \"branch-prob\"\n   47  \n   48: static cl::opt<bool> PrintBranchProb(\n   49      \"print-bpi\", cl::init(false), cl::Hidden,\n   50      cl::desc(\"Print the branch probability info.\"));\n   51  \n   52: cl::opt<std::string> PrintBranchProbFuncName(\n   53      \"print-bpi-func-name\", cl::Hidden,\n   54      cl::desc(\"The option to specify the name of the function \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/CallGraphSCCPass.cpp:\n   42  #define DEBUG_TYPE \"cgscc-passmgr\"\n   43  \n   44: static cl::opt<unsigned> \n   45  MaxIterations(\"max-cg-scc-iterations\", cl::ReallyHidden, cl::init(4));\n   46  \n\n/home/mw/0-rust/src/llvm/lib/Analysis/CostModel.cpp:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<TargetTransformInfo::TargetCostKind> CostKind(\n   31      \"cost-kind\", cl::desc(\"Target cost kind\"),\n   32      cl::init(TargetTransformInfo::TCK_RecipThroughput),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/DependenceAnalysis.cpp:\n  108  STATISTIC(BanerjeeSuccesses, \"Banerjee successes\");\n  109  \n  110: static cl::opt<bool>\n  111  Delinearize(\"da-delinearize\", cl::init(false), cl::Hidden, cl::ZeroOrMore,\n  112              cl::desc(\"Try to delinearize array references.\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/GlobalsModRef.cpp:\n   51  // sensitivity and no known issues. The option also makes it easy to evaluate\n   52  // the performance impact of these results.\n   53: static cl::opt<bool> EnableUnsafeGlobalsModRefAliasResults(\n   54      \"enable-unsafe-globalsmodref-alias-results\", cl::init(false), cl::Hidden);\n   55  \n\n/home/mw/0-rust/src/llvm/lib/Analysis/IndirectCallPromotionAnalysis.cpp:\n   34  // The percent threshold for the direct-call target (this call site vs the\n   35  // remaining call count) for it to be considered as the promotion target.\n   36: static cl::opt<unsigned> ICPRemainingPercentThreshold(\n   37      \"icp-remaining-percent-threshold\", cl::init(30), cl::Hidden, cl::ZeroOrMore,\n   38      cl::desc(\"The percentage threshold against remaining unpromoted indirect \"\n   ..\n   41  // The percent threshold for the direct-call target (this call site vs the\n   42  // total call count) for it to be considered as the promotion target.\n   43: static cl::opt<unsigned>\n   44      ICPTotalPercentThreshold(\"icp-total-percent-threshold\", cl::init(5),\n   45                               cl::Hidden, cl::ZeroOrMore,\n   ..\n   49  // Set the maximum number of targets to promote for a single indirect-call\n   50  // callsite.\n   51: static cl::opt<unsigned>\n   52      MaxNumPromotions(\"icp-max-prom\", cl::init(3), cl::Hidden, cl::ZeroOrMore,\n   53                       cl::desc(\"Max number of promotions for a single indirect \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/InlineCost.cpp:\n   44  STATISTIC(NumCallsAnalyzed, \"Number of call sites analyzed\");\n   45  \n   46: static cl::opt<int> InlineThreshold(\n   47      \"inline-threshold\", cl::Hidden, cl::init(225), cl::ZeroOrMore,\n   48      cl::desc(\"Control the amount of inlining to perform (default = 225)\"));\n   49  \n   50: static cl::opt<int> HintThreshold(\n   51      \"inlinehint-threshold\", cl::Hidden, cl::init(325),\n   52      cl::desc(\"Threshold for inlining functions with inline hint\"));\n   53  \n   54: static cl::opt<int>\n   55      ColdCallSiteThreshold(\"inline-cold-callsite-threshold\", cl::Hidden,\n   56                            cl::init(45),\n   ..\n   60  // PGO before we actually hook up inliner with analysis passes such as BPI and\n   61  // BFI.\n   62: static cl::opt<int> ColdThreshold(\n   63      \"inlinecold-threshold\", cl::Hidden, cl::init(45),\n   64      cl::desc(\"Threshold for inlining functions with cold attribute\"));\n   65  \n   66: static cl::opt<int>\n   67      HotCallSiteThreshold(\"hot-callsite-threshold\", cl::Hidden, cl::init(3000),\n   68                           cl::ZeroOrMore,\n   69                           cl::desc(\"Threshold for hot callsites \"));\n   70  \n   71: static cl::opt<int> LocallyHotCallSiteThreshold(\n   72      \"locally-hot-callsite-threshold\", cl::Hidden, cl::init(525), cl::ZeroOrMore,\n   73      cl::desc(\"Threshold for locally hot callsites \"));\n   74  \n   75: static cl::opt<int> ColdCallSiteRelFreq(\n   76      \"cold-callsite-rel-freq\", cl::Hidden, cl::init(2), cl::ZeroOrMore,\n   77      cl::desc(\"Maxmimum block frequency, expressed as a percentage of caller's \"\n   ..\n   79               \"profile information.\"));\n   80  \n   81: static cl::opt<int> HotCallSiteRelFreq(\n   82      \"hot-callsite-rel-freq\", cl::Hidden, cl::init(60), cl::ZeroOrMore,\n   83      cl::desc(\"Minimum block frequency, expressed as a multiple of caller's \"\n   ..\n   85               \"profile information.\"));\n   86  \n   87: static cl::opt<bool> OptComputeFullInlineCost(\n   88      \"inline-cost-full\", cl::Hidden, cl::init(false),\n   89      cl::desc(\"Compute the full inline cost of a call site even when the cost \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/Loads.cpp:\n  313  /// At that point, the value of MaxInstsToScan was already set to '6'\n  314  /// without documented explanation.\n  315: cl::opt<unsigned>\n  316  llvm::DefMaxInstsToScan(\"available-load-scan-limit\", cl::init(6), cl::Hidden,\n  317    cl::desc(\"Use this to specify the default maximum number of instructions \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/LoopAccessAnalysis.cpp:\n   72  #define DEBUG_TYPE \"loop-accesses\"\n   73  \n   74: static cl::opt<unsigned, true>\n   75  VectorizationFactor(\"force-vector-width\", cl::Hidden,\n   76                      cl::desc(\"Sets the SIMD width. Zero is autoselect.\"),\n   ..\n   78  unsigned VectorizerParams::VectorizationFactor;\n   79  \n   80: static cl::opt<unsigned, true>\n   81  VectorizationInterleave(\"force-vector-interleave\", cl::Hidden,\n   82                          cl::desc(\"Sets the vectorization interleave count. \"\n   ..\n   86  unsigned VectorizerParams::VectorizationInterleave;\n   87  \n   88: static cl::opt<unsigned, true> RuntimeMemoryCheckThreshold(\n   89      \"runtime-memory-check-threshold\", cl::Hidden,\n   90      cl::desc(\"When performing memory disambiguation checks at runtime do not \"\n   ..\n   94  \n   95  /// \\brief The maximum iterations used to merge memory checks\n   96: static cl::opt<unsigned> MemoryCheckMergeThreshold(\n   97      \"memory-check-merge-threshold\", cl::Hidden,\n   98      cl::desc(\"Maximum number of comparisons done when trying to merge \"\n   ..\n  104  \n  105  /// \\brief We collect dependences up to this threshold.\n  106: static cl::opt<unsigned>\n  107      MaxDependences(\"max-dependences\", cl::Hidden,\n  108                     cl::desc(\"Maximum number of dependences collected by \"\n  ...\n  121  ///    } else\n  122  ///      ...\n  123: static cl::opt<bool> EnableMemAccessVersioning(\n  124      \"enable-mem-access-versioning\", cl::init(true), cl::Hidden,\n  125      cl::desc(\"Enable symbolic stride memory access versioning\"));\n  ...\n  127  /// \\brief Enable store-to-load forwarding conflict detection. This option can\n  128  /// be disabled for correctness testing.\n  129: static cl::opt<bool> EnableForwardingConflictDetection(\n  130      \"store-to-load-forwarding-conflict-detection\", cl::Hidden,\n  131      cl::desc(\"Enable conflict detection in loop-access analysis\"),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/LoopAnalysisManager.cpp:\n   21  namespace llvm {\n   22  /// Enables memory ssa as a dependency for loop passes in legacy pass manager.\n   23: cl::opt<bool> EnableMSSALoopDependency(\n   24      \"enable-mssa-loop-dependency\", cl::Hidden, cl::init(false),\n   25      cl::desc(\"Enable MemorySSA dependency for loop pass manager\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/LoopInfo.cpp:\n   46  bool llvm::VerifyLoopInfo = false;\n   47  #endif\n   48: static cl::opt<bool, true>\n   49      VerifyLoopInfoX(\"verify-loop-info\", cl::location(VerifyLoopInfo),\n   50                      cl::Hidden, cl::desc(\"Verify loop info (time consuming)\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:\n   80  // Limit for the number of instructions to scan in a block.\n   81  \n   82: static cl::opt<unsigned> BlockScanLimit(\n   83      \"memdep-block-scan-limit\", cl::Hidden, cl::init(100),\n   84      cl::desc(\"The number of instructions to scan in a block in memory \"\n   85               \"dependency analysis (default = 100)\"));\n   86  \n   87: static cl::opt<unsigned>\n   88      BlockNumberLimit(\"memdep-block-number-limit\", cl::Hidden, cl::init(1000),\n   89                       cl::desc(\"The number of blocks to scan during memory \"\n\n/home/mw/0-rust/src/llvm/lib/Analysis/MemorySSA.cpp:\n   72                      \"Memory SSA Printer\", false, false)\n   73  \n   74: static cl::opt<unsigned> MaxCheckLimit(\n   75      \"memssa-check-limit\", cl::Hidden, cl::init(100),\n   76      cl::desc(\"The maximum number of stores/phis MemorySSA\"\n   77               \"will consider trying to walk past (default = 100)\"));\n   78  \n   79: static cl::opt<bool>\n   80      VerifyMemorySSA(\"verify-memoryssa\", cl::init(false), cl::Hidden,\n   81                      cl::desc(\"Verify MemorySSA in legacy printer pass.\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/ObjCARCAnalysisUtils.cpp:\n   22  /// \\brief A handy option to enable/disable all ARC Optimizations.\n   23  bool llvm::objcarc::EnableARCOpts;\n   24: static cl::opt<bool, true> EnableARCOptimizations(\n   25      \"enable-objc-arc-opts\", cl::desc(\"enable/disable all ARC Optimizations\"),\n   26      cl::location(EnableARCOpts), cl::init(true), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Analysis/ProfileSummaryInfo.cpp:\n   30  // considered cold).\n   31  \n   32: static cl::opt<int> ProfileSummaryCutoffHot(\n   33      \"profile-summary-cutoff-hot\", cl::Hidden, cl::init(990000), cl::ZeroOrMore,\n   34      cl::desc(\"A count is hot if it exceeds the minimum count to\"\n   35               \" reach this percentile of total counts.\"));\n   36  \n   37: static cl::opt<int> ProfileSummaryCutoffCold(\n   38      \"profile-summary-cutoff-cold\", cl::Hidden, cl::init(999999), cl::ZeroOrMore,\n   39      cl::desc(\"A count is cold if it is below the minimum count\"\n   40               \" to reach this percentile of total counts.\"));\n   41  \n   42: static cl::opt<bool> ProfileSampleAccurate(\n   43      \"profile-sample-accurate\", cl::Hidden, cl::init(false),\n   44      cl::desc(\"If the sample profile is accurate, we will mark all un-sampled \"\n   45               \"callsite as cold. Otherwise, treat un-sampled callsites as if \"\n   46               \"we have no profile.\"));\n   47: static cl::opt<unsigned> ProfileSummaryHugeWorkingSetSizeThreshold(\n   48      \"profile-summary-huge-working-set-size-threshold\", cl::Hidden,\n   49      cl::init(15000), cl::ZeroOrMore,\n\n/home/mw/0-rust/src/llvm/lib/Analysis/RegionInfo.cpp:\n   40  // Always verify if expensive checking is enabled.\n   41  \n   42: static cl::opt<bool,true>\n   43  VerifyRegionInfoX(\n   44    \"verify-region-info\",\n   ..\n   46    cl::desc(\"Verify region info (time consuming)\"));\n   47  \n   48: static cl::opt<Region::PrintStyle, true> printStyleX(\"print-region-style\",\n   49    cl::location(RegionInfo::printStyle),\n   50    cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Analysis/RegionPrinter.cpp:\n   29  //===----------------------------------------------------------------------===//\n   30  /// onlySimpleRegion - Show only the simple regions in the RegionViewer.\n   31: static cl::opt<bool>\n   32  onlySimpleRegions(\"only-simple-regions\",\n   33                    cl::desc(\"Show only simple regions in the graphviz viewer\"),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/ScalarEvolution.cpp:\n  146            \"Number of loops with trip counts computed by force\");\n  147  \n  148: static cl::opt<unsigned>\n  149  MaxBruteForceIterations(\"scalar-evolution-max-iterations\", cl::ReallyHidden,\n  150                          cl::desc(\"Maximum number of iterations SCEV will \"\n  ...\n  154  \n  155  // FIXME: Enable this with EXPENSIVE_CHECKS when the test suite is clean.\n  156: static cl::opt<bool> VerifySCEV(\n  157      \"verify-scev\", cl::Hidden,\n  158      cl::desc(\"Verify ScalarEvolution's backedge taken counts (slow)\"));\n  159: static cl::opt<bool>\n  160      VerifySCEVMap(\"verify-scev-maps\", cl::Hidden,\n  161                    cl::desc(\"Verify no dangling value in ScalarEvolution's \"\n  162                             \"ExprValueMap (slow)\"));\n  163  \n  164: static cl::opt<unsigned> MulOpsInlineThreshold(\n  165      \"scev-mulops-inline-threshold\", cl::Hidden,\n  166      cl::desc(\"Threshold for inlining multiplication operands into a SCEV\"),\n  167      cl::init(32));\n  168  \n  169: static cl::opt<unsigned> AddOpsInlineThreshold(\n  170      \"scev-addops-inline-threshold\", cl::Hidden,\n  171      cl::desc(\"Threshold for inlining addition operands into a SCEV\"),\n  172      cl::init(500));\n  173  \n  174: static cl::opt<unsigned> MaxSCEVCompareDepth(\n  175      \"scalar-evolution-max-scev-compare-depth\", cl::Hidden,\n  176      cl::desc(\"Maximum depth of recursive SCEV complexity comparisons\"),\n  177      cl::init(32));\n  178  \n  179: static cl::opt<unsigned> MaxSCEVOperationsImplicationDepth(\n  180      \"scalar-evolution-max-scev-operations-implication-depth\", cl::Hidden,\n  181      cl::desc(\"Maximum depth of recursive SCEV operations implication analysis\"),\n  182      cl::init(2));\n  183  \n  184: static cl::opt<unsigned> MaxValueCompareDepth(\n  185      \"scalar-evolution-max-value-compare-depth\", cl::Hidden,\n  186      cl::desc(\"Maximum depth of recursive value complexity comparisons\"),\n  187      cl::init(2));\n  188  \n  189: static cl::opt<unsigned>\n  190      MaxArithDepth(\"scalar-evolution-max-arith-depth\", cl::Hidden,\n  191                    cl::desc(\"Maximum depth of recursive arithmetics\"),\n  192                    cl::init(32));\n  193  \n  194: static cl::opt<unsigned> MaxConstantEvolvingDepth(\n  195      \"scalar-evolution-max-constant-evolving-depth\", cl::Hidden,\n  196      cl::desc(\"Maximum depth of recursive constant evolving\"), cl::init(32));\n  197  \n  198: static cl::opt<unsigned>\n  199      MaxExtDepth(\"scalar-evolution-max-ext-depth\", cl::Hidden,\n  200                  cl::desc(\"Maximum depth of recursive SExt/ZExt\"),\n  201                  cl::init(8));\n  202  \n  203: static cl::opt<unsigned>\n  204      MaxAddRecSize(\"scalar-evolution-max-add-rec-size\", cl::Hidden,\n  205                    cl::desc(\"Max coefficients in AddRec during evolving\"),\n  206                    cl::init(16));\n  207  \n  208: static cl::opt<bool> VersionUnknown(\n  209      \"scev-version-unknown\", cl::Hidden,\n  210      cl::desc(\"Use predicated scalar evolution to version SCEVUnknowns\"),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/ScopedNoAliasAA.cpp:\n   48  // can also be achieved by stripping the associated metadata tags from IR, but\n   49  // this option is sometimes more convenient.\n   50: static cl::opt<bool> EnableScopedNoAlias(\"enable-scoped-noalias\",\n   51                                           cl::init(true), cl::Hidden);\n   52  \n\n/home/mw/0-rust/src/llvm/lib/Analysis/TargetLibraryInfo.cpp:\n   18  using namespace llvm;\n   19  \n   20: static cl::opt<TargetLibraryInfoImpl::VectorLibrary> ClVectorLibrary(\n   21      \"vector-library\", cl::Hidden, cl::desc(\"Vector functions library\"),\n   22      cl::init(TargetLibraryInfoImpl::NoLibrary),\n\n/home/mw/0-rust/src/llvm/lib/Analysis/TargetTransformInfo.cpp:\n   27  #define DEBUG_TYPE \"tti\"\n   28  \n   29: static cl::opt<bool> EnableReduxCost(\"costmodel-reduxcost\", cl::init(false),\n   30                                       cl::Hidden,\n   31                                       cl::desc(\"Recognize reduction patterns.\"));\n\n/home/mw/0-rust/src/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:\n  143  // achieved by stripping the !tbaa tags from IR, but this option is sometimes\n  144  // more convenient.\n  145: static cl::opt<bool> EnableTBAA(\"enable-tbaa\", cl::init(true), cl::Hidden);\n  146  \n  147  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Analysis/ValueTracking.cpp:\n   81  // Controls the number of uses of the value searched for possible\n   82  // dominating comparisons.\n   83: static cl::opt<unsigned> DomConditionsMaxUses(\"dom-conditions-max-uses\",\n   84                                                cl::Hidden, cl::init(20));\n   85  \n\n/home/mw/0-rust/src/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:\n   88  using namespace llvm;\n   89  \n   90: static cl::opt<bool> PrintSummaryGUIDs(\n   91      \"print-summary-global-ids\", cl::init(false), cl::Hidden,\n   92      cl::desc(\n\n/home/mw/0-rust/src/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:\n   94  /// Flag whether we need to import full type definitions for ThinLTO.\n   95  /// Currently needed for Darwin and LLDB.\n   96: static cl::opt<bool> ImportFullTypeDefinitions(\n   97      \"import-full-type-definitions\", cl::init(false), cl::Hidden,\n   98      cl::desc(\"Import full type definitions for ThinLTO.\"));\n   99  \n  100: static cl::opt<bool> DisableLazyLoading(\n  101      \"disable-ondemand-mds-loading\", cl::init(false), cl::Hidden,\n  102      cl::desc(\"Force disable the lazy-loading on-demand of metadata when \"\n\n/home/mw/0-rust/src/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:\n   82  using namespace llvm;\n   83  \n   84: static cl::opt<unsigned>\n   85      IndexThreshold(\"bitcode-mdindex-threshold\", cl::Hidden, cl::init(25),\n   86                     cl::desc(\"Number of metadatas above which we emit an index \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/AggressiveAntiDepBreaker.cpp:\n   48  \n   49  // If DebugDiv > 0 then only break antidep with (ID % DebugDiv) == DebugMod\n   50: static cl::opt<int>\n   51  DebugDiv(\"agg-antidep-debugdiv\",\n   52           cl::desc(\"Debug control for aggressive anti-dep breaker\"),\n   53           cl::init(0), cl::Hidden);\n   54  \n   55: static cl::opt<int>\n   56  DebugMod(\"agg-antidep-debugmod\",\n   57           cl::desc(\"Debug control for aggressive anti-dep breaker\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:\n  137  STATISTIC(EmittedInsts, \"Number of machine instrs printed\");\n  138  \n  139: static cl::opt<bool>\n  140      PrintSchedule(\"print-schedule\", cl::Hidden, cl::init(false),\n  141                    cl::desc(\"Print 'sched: [latency:throughput]' in .s output\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:\n   91  using namespace llvm::codeview;\n   92  \n   93: static cl::opt<bool> EmitDebugGlobalHashes(\"emit-codeview-ghash-section\",\n   94                                             cl::ReallyHidden, cl::init(false));\n   95  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:\n   82  #define DEBUG_TYPE \"dwarfdebug\"\n   83  \n   84: static cl::opt<bool>\n   85  DisableDebugInfoPrinting(\"disable-debug-info-print\", cl::Hidden,\n   86                           cl::desc(\"Disable debug info printing\"));\n   87  \n   88: static cl::opt<bool> UseDwarfRangesBaseAddressSpecifier(\n   89      \"use-dwarf-ranges-base-address-specifier\", cl::Hidden,\n   90      cl::desc(\"Use base address specifiers in debug_ranges\"), cl::init(false));\n   91  \n   92: static cl::opt<bool> GenerateARangeSection(\"generate-arange-section\",\n   93                                             cl::Hidden,\n   94                                             cl::desc(\"Generate dwarf aranges\"),\n   95                                             cl::init(false));\n   96  \n   97: static cl::opt<bool> SplitDwarfCrossCuReferences(\n   98      \"split-dwarf-cross-cu-references\", cl::Hidden,\n   99      cl::desc(\"Enable cross-cu references in DWO files\"), cl::init(false));\n  ...\n  101  enum DefaultOnOff { Default, Enable, Disable };\n  102  \n  103: static cl::opt<DefaultOnOff> UnknownLocations(\n  104      \"use-unknown-locations\", cl::Hidden,\n  105      cl::desc(\"Make an absence of debug location information explicit.\"),\n  ...\n  108      cl::init(Default));\n  109  \n  110: static cl::opt<DefaultOnOff>\n  111  DwarfAccelTables(\"dwarf-accel-tables\", cl::Hidden,\n  112                   cl::desc(\"Output prototype dwarf accelerator tables.\"),\n  ...\n  122  };\n  123  \n  124: static cl::opt<LinkageNameOption>\n  125      DwarfLinkageNames(\"dwarf-linkage-names\", cl::Hidden,\n  126                        cl::desc(\"Which DWARF linkage-name attributes to emit.\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp:\n   46  #define DEBUG_TYPE \"dwarfdebug\"\n   47  \n   48: static cl::opt<bool>\n   49  GenerateDwarfTypeUnits(\"generate-type-units\", cl::Hidden,\n   50                         cl::desc(\"Generate DWARF4 type units.\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/BasicTargetTransformInfo.cpp:\n   26  // This flag is used by the template base class for BasicTTIImpl, and here to\n   27  // provide a definition.\n   28: cl::opt<unsigned>\n   29  llvm::PartialUnrollingThreshold(\"partial-unrolling-threshold\", cl::init(0),\n   30                                  cl::desc(\"Threshold for partial unrolling\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/BranchFolding.cpp:\n   74  STATISTIC(NumTailCalls,  \"Number of tail calls optimized\");\n   75  \n   76: static cl::opt<cl::boolOrDefault> FlagEnableTailMerge(\"enable-tail-merge\",\n   77                                cl::init(cl::BOU_UNSET), cl::Hidden);\n   78  \n   79  // Throttle for huge numbers of predecessors (compile speed problems)\n   80: static cl::opt<unsigned>\n   81  TailMergeThreshold(\"tail-merge-threshold\",\n   82            cl::desc(\"Max number of predecessors to consider tail merging\"),\n   ..\n   85  // Heuristic for tail merging (and, inversely, tail duplication).\n   86  // TODO: This should be replaced with a target query.\n   87: static cl::opt<unsigned>\n   88  TailMergeSize(\"tail-merge-size\",\n   89                cl::desc(\"Min number of instructions to consider tail merging\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/CodeGenPrepare.cpp:\n  127  STATISTIC(NumStoreExtractExposed, \"Number of store(extractelement) exposed\");\n  128  \n  129: static cl::opt<bool> DisableBranchOpts(\n  130    \"disable-cgp-branch-opts\", cl::Hidden, cl::init(false),\n  131    cl::desc(\"Disable branch optimizations in CodeGenPrepare\"));\n  132  \n  133: static cl::opt<bool>\n  134      DisableGCOpts(\"disable-cgp-gc-opts\", cl::Hidden, cl::init(false),\n  135                    cl::desc(\"Disable GC optimizations in CodeGenPrepare\"));\n  136  \n  137: static cl::opt<bool> DisableSelectToBranch(\n  138    \"disable-cgp-select2branch\", cl::Hidden, cl::init(false),\n  139    cl::desc(\"Disable select to branch conversion.\"));\n  140  \n  141: static cl::opt<bool> AddrSinkUsingGEPs(\n  142    \"addr-sink-using-gep\", cl::Hidden, cl::init(true),\n  143    cl::desc(\"Address sinking in CGP using GEPs.\"));\n  144  \n  145: static cl::opt<bool> EnableAndCmpSinking(\n  146     \"enable-andcmp-sinking\", cl::Hidden, cl::init(true),\n  147     cl::desc(\"Enable sinkinig and/cmp into branches.\"));\n  148  \n  149: static cl::opt<bool> DisableStoreExtract(\n  150      \"disable-cgp-store-extract\", cl::Hidden, cl::init(false),\n  151      cl::desc(\"Disable store(extract) optimizations in CodeGenPrepare\"));\n  152  \n  153: static cl::opt<bool> StressStoreExtract(\n  154      \"stress-cgp-store-extract\", cl::Hidden, cl::init(false),\n  155      cl::desc(\"Stress test store(extract) optimizations in CodeGenPrepare\"));\n  156  \n  157: static cl::opt<bool> DisableExtLdPromotion(\n  158      \"disable-cgp-ext-ld-promotion\", cl::Hidden, cl::init(false),\n  159      cl::desc(\"Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in \"\n  160               \"CodeGenPrepare\"));\n  161  \n  162: static cl::opt<bool> StressExtLdPromotion(\n  163      \"stress-cgp-ext-ld-promotion\", cl::Hidden, cl::init(false),\n  164      cl::desc(\"Stress test ext(promotable(ld)) -> promoted(ext(ld)) \"\n  165               \"optimization in CodeGenPrepare\"));\n  166  \n  167: static cl::opt<bool> DisablePreheaderProtect(\n  168      \"disable-preheader-prot\", cl::Hidden, cl::init(false),\n  169      cl::desc(\"Disable protection against removing loop preheaders\"));\n  170  \n  171: static cl::opt<bool> ProfileGuidedSectionPrefix(\n  172      \"profile-guided-section-prefix\", cl::Hidden, cl::init(true), cl::ZeroOrMore,\n  173      cl::desc(\"Use profile info to add section prefix for hot/cold functions\"));\n  174  \n  175: static cl::opt<unsigned> FreqRatioToSkipMerge(\n  176      \"cgp-freq-ratio-to-skip-merge\", cl::Hidden, cl::init(2),\n  177      cl::desc(\"Skip merging empty blocks if (frequency of empty block) / \"\n  178               \"(frequency of destination block) is greater than this ratio\"));\n  179  \n  180: static cl::opt<bool> ForceSplitStore(\n  181      \"force-split-store\", cl::Hidden, cl::init(false),\n  182      cl::desc(\"Force store splitting no matter what the target query says.\"));\n  183  \n  184: static cl::opt<bool>\n  185  EnableTypePromotionMerge(\"cgp-type-promotion-merge\", cl::Hidden,\n  186      cl::desc(\"Enable merging of redundant sexts when one is dominating\"\n  187      \" the other.\"), cl::init(true));\n  188  \n  189: static cl::opt<bool> DisableComplexAddrModes(\n  190      \"disable-complex-addr-modes\", cl::Hidden, cl::init(false),\n  191      cl::desc(\"Disables combining addressing modes with different parts \"\n  192               \"in optimizeMemoryInst.\"));\n  193  \n  194: static cl::opt<bool>\n  195  AddrSinkNewPhis(\"addr-sink-new-phis\", cl::Hidden, cl::init(false),\n  196                  cl::desc(\"Allow creation of Phis in Address sinking.\"));\n  197  \n  198: static cl::opt<bool>\n  199  AddrSinkNewSelects(\"addr-sink-new-select\", cl::Hidden, cl::init(false),\n  200                     cl::desc(\"Allow creation of selects in Address sinking.\"));\n  201  \n  202: static cl::opt<bool> AddrSinkCombineBaseReg(\n  203      \"addr-sink-combine-base-reg\", cl::Hidden, cl::init(true),\n  204      cl::desc(\"Allow combining of BaseReg field in Address sinking.\"));\n  205  \n  206: static cl::opt<bool> AddrSinkCombineBaseGV(\n  207      \"addr-sink-combine-base-gv\", cl::Hidden, cl::init(true),\n  208      cl::desc(\"Allow combining of BaseGV field in Address sinking.\"));\n  209  \n  210: static cl::opt<bool> AddrSinkCombineBaseOffs(\n  211      \"addr-sink-combine-base-offs\", cl::Hidden, cl::init(true),\n  212      cl::desc(\"Allow combining of BaseOffs field in Address sinking.\"));\n  213  \n  214: static cl::opt<bool> AddrSinkCombineScaledReg(\n  215      \"addr-sink-combine-scaled-reg\", cl::Hidden, cl::init(true),\n  216      cl::desc(\"Allow combining of ScaledReg field in Address sinking.\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/DFAPacketizer.cpp:\n   47  #define DEBUG_TYPE \"packets\"\n   48  \n   49: static cl::opt<unsigned> InstrLimit(\"dfa-instr-limit\", cl::Hidden,\n   50    cl::init(0), cl::desc(\"If present, stops packetizing after N instructions\"));\n   51  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/EarlyIfConversion.cpp:\n   44  // Absolute maximum number of instructions allowed per speculated block.\n   45  // This bypasses all other heuristics, so it should be set fairly high.\n   46: static cl::opt<unsigned>\n   47  BlockInstrLimit(\"early-ifcvt-limit\", cl::init(30), cl::Hidden,\n   48    cl::desc(\"Maximum number of instructions per speculated block.\"));\n   49  \n   50  // Stress testing mode - disable heuristics.\n   51: static cl::opt<bool> Stress(\"stress-early-ifcvt\", cl::Hidden,\n   52    cl::desc(\"Turn all knobs to 11\"));\n   53  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/EdgeBundles.cpp:\n   22  using namespace llvm;\n   23  \n   24: static cl::opt<bool>\n   25  ViewEdgeBundles(\"view-edge-bundles\", cl::Hidden,\n   26                  cl::desc(\"Pop up a window to show edge bundle graphs\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/ExpandMemCmp.cpp:\n   33  STATISTIC(NumMemCmpInlined, \"Number of inlined memcmp calls\");\n   34  \n   35: static cl::opt<unsigned> MemCmpNumLoadsPerBlock(\n   36      \"memcmp-num-loads-per-block\", cl::Hidden, cl::init(1),\n   37      cl::desc(\"The number of loads per basic block for inline expansion of \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp:\n   35  \n   36  #ifdef LLVM_GISEL_COV_PREFIX\n   37: static cl::opt<std::string>\n   38      CoveragePrefix(\"gisel-coverage-prefix\", cl::init(LLVM_GISEL_COV_PREFIX),\n   39                     cl::desc(\"Record GlobalISel rule coverage files of this \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:\n   51  using namespace llvm;\n   52  \n   53: static cl::opt<RegBankSelect::Mode> RegBankSelectMode(\n   54      cl::desc(\"Mode of the RegBankSelect pass\"), cl::Hidden, cl::Optional,\n   55      cl::values(clEnumValN(RegBankSelect::Mode::Fast, \"regbankselect-fast\",\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/GlobalMerge.cpp:\n  103  \n  104  // FIXME: This is only useful as a last-resort way to disable the pass.\n  105: static cl::opt<bool>\n  106  EnableGlobalMerge(\"enable-global-merge\", cl::Hidden,\n  107                    cl::desc(\"Enable the global merge pass\"),\n  108                    cl::init(true));\n  109  \n  110: static cl::opt<unsigned>\n  111  GlobalMergeMaxOffset(\"global-merge-max-offset\", cl::Hidden,\n  112                       cl::desc(\"Set maximum offset for global merge pass\"),\n  113                       cl::init(0));\n  114  \n  115: static cl::opt<bool> GlobalMergeGroupByUse(\n  116      \"global-merge-group-by-use\", cl::Hidden,\n  117      cl::desc(\"Improve global merge pass to look at uses\"), cl::init(true));\n  118  \n  119: static cl::opt<bool> GlobalMergeIgnoreSingleUse(\n  120      \"global-merge-ignore-single-use\", cl::Hidden,\n  121      cl::desc(\"Improve global merge pass to ignore globals only used alone\"),\n  122      cl::init(true));\n  123  \n  124: static cl::opt<bool>\n  125  EnableGlobalMergeOnConst(\"global-merge-on-const\", cl::Hidden,\n  126                           cl::desc(\"Enable global merge pass on constants\"),\n  ...\n  129  // FIXME: this could be a transitional option, and we probably need to remove\n  130  // it if only we are sure this optimization could always benefit all targets.\n  131: static cl::opt<cl::boolOrDefault>\n  132  EnableGlobalMergeOnExternal(\"global-merge-on-external\", cl::Hidden,\n  133       cl::desc(\"Enable global merge pass on external linkage\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/IfConversion.cpp:\n   58  \n   59  // Hidden options for help debugging.\n   60: static cl::opt<int> IfCvtFnStart(\"ifcvt-fn-start\", cl::init(-1), cl::Hidden);\n   61: static cl::opt<int> IfCvtFnStop(\"ifcvt-fn-stop\", cl::init(-1), cl::Hidden);\n   62: static cl::opt<int> IfCvtLimit(\"ifcvt-limit\", cl::init(-1), cl::Hidden);\n   63: static cl::opt<bool> DisableSimple(\"disable-ifcvt-simple\",\n   64                                     cl::init(false), cl::Hidden);\n   65: static cl::opt<bool> DisableSimpleF(\"disable-ifcvt-simple-false\",\n   66                                      cl::init(false), cl::Hidden);\n   67: static cl::opt<bool> DisableTriangle(\"disable-ifcvt-triangle\",\n   68                                       cl::init(false), cl::Hidden);\n   69: static cl::opt<bool> DisableTriangleR(\"disable-ifcvt-triangle-rev\",\n   70                                        cl::init(false), cl::Hidden);\n   71: static cl::opt<bool> DisableTriangleF(\"disable-ifcvt-triangle-false\",\n   72                                        cl::init(false), cl::Hidden);\n   73: static cl::opt<bool> DisableTriangleFR(\"disable-ifcvt-triangle-false-rev\",\n   74                                         cl::init(false), cl::Hidden);\n   75: static cl::opt<bool> DisableDiamond(\"disable-ifcvt-diamond\",\n   76                                      cl::init(false), cl::Hidden);\n   77: static cl::opt<bool> DisableForkedDiamond(\"disable-ifcvt-forked-diamond\",\n   78                                          cl::init(false), cl::Hidden);\n   79: static cl::opt<bool> IfCvtBranchFold(\"ifcvt-branch-fold\",\n   80                                       cl::init(true), cl::Hidden);\n   81  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/ImplicitNullChecks.cpp:\n   62  using namespace llvm;\n   63  \n   64: static cl::opt<int> PageSize(\"imp-null-check-page-size\",\n   65                               cl::desc(\"The page size of the target in bytes\"),\n   66                               cl::init(4096), cl::Hidden);\n   67  \n   68: static cl::opt<unsigned> MaxInstsToConsider(\n   69      \"imp-null-max-insts-to-consider\",\n   70      cl::desc(\"The max number of instructions to consider hoisting loads over \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/InlineSpiller.cpp:\n   74  STATISTIC(NumRemats,          \"Number of rematerialized defs for spilling\");\n   75  \n   76: static cl::opt<bool> DisableHoisting(\"disable-spill-hoist\", cl::Hidden,\n   77                                       cl::desc(\"Disable inline spill hoisting\"));\n   78  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/InterleavedAccessPass.cpp:\n   74  #define DEBUG_TYPE \"interleaved-access\"\n   75  \n   76: static cl::opt<bool> LowerInterleavedAccesses(\n   77      \"lower-interleaved-accesses\",\n   78      cl::desc(\"Enable lowering interleaved accesses to intrinsics\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/LiveDebugVariables.cpp:\n   66  #define DEBUG_TYPE \"livedebugvars\"\n   67  \n   68: static cl::opt<bool>\n   69  EnableLDV(\"live-debug-variables\", cl::init(true),\n   70            cl::desc(\"Enable the live debug variables pass\"), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/LiveIntervals.cpp:\n   69  \n   70  #ifndef NDEBUG\n   71: static cl::opt<bool> EnablePrecomputePhysRegs(\n   72    \"precompute-phys-liveness\", cl::Hidden,\n   73    cl::desc(\"Eagerly compute live intervals for all physreg units.\"));\n   ..\n   78  namespace llvm {\n   79  \n   80: cl::opt<bool> UseSegmentSetForPhysRegs(\n   81      \"use-segment-set-for-physregs\", cl::Hidden, cl::init(true),\n   82      cl::desc(\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MIRCanonicalizerPass.cpp:\n   43  #define DEBUG_TYPE \"mir-canonicalizer\"\n   44  \n   45: static cl::opt<unsigned>\n   46  CanonicalizeFunctionNumber(\"canon-nth-function\", cl::Hidden, cl::init(~0u),\n   47                             cl::value_desc(\"N\"),\n   48                             cl::desc(\"Function number to canonicalize.\"));\n   49  \n   50: static cl::opt<unsigned>\n   51  CanonicalizeBasicBlockNumber(\"canon-nth-basicblock\", cl::Hidden, cl::init(~0u),\n   52                               cl::value_desc(\"N\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MIRPrinter.cpp:\n   76  using namespace llvm;\n   77  \n   78: static cl::opt<bool> SimplifyMIR(\n   79      \"simplify-mir\", cl::Hidden,\n   80      cl::desc(\"Leave out unnecessary information when printing MIR\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineBlockFrequencyInfo.cpp:\n   30  #define DEBUG_TYPE \"machine-block-freq\"\n   31  \n   32: static cl::opt<GVDAGType> ViewMachineBlockFreqPropagationDAG(\n   33      \"view-machine-block-freq-propagation-dags\", cl::Hidden,\n   34      cl::desc(\"Pop up a window to show a dag displaying how machine block \"\n   ..\n   45  \n   46  // Similar option above, but used to control BFI display only after MBP pass\n   47: cl::opt<GVDAGType> ViewBlockLayoutWithBFI(\n   48      \"view-block-layout-with-bfi\", cl::Hidden,\n   49      cl::desc(\n   ..\n   63  // Command line option to specify the name of the function for CFG dump\n   64  // Defined in Analysis/BlockFrequencyInfo.cpp:  -view-bfi-func-name=\n   65: extern cl::opt<std::string> ViewBlockFreqFuncName;\n   66  \n   67  // Command line option to specify hot frequency threshold.\n   68  // Defined in Analysis/BlockFrequencyInfo.cpp:  -view-hot-freq-perc=\n   69: extern cl::opt<unsigned> ViewHotFreqPercent;\n   70  \n   71: static cl::opt<bool> PrintMachineBlockFreq(\n   72      \"print-machine-bfi\", cl::init(false), cl::Hidden,\n   73      cl::desc(\"Print the machine block frequency info.\"));\n   ..\n   75  // Command line option to specify the name of the function for block frequency\n   76  // dump. Defined in Analysis/BlockFrequencyInfo.cpp.\n   77: extern cl::opt<std::string> PrintBlockFreqFuncName;\n   78  \n   79  static GVDAGType getGVDT() {\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineBlockPlacement.cpp:\n   81            \"Potential frequency of taking unconditional branches\");\n   82  \n   83: static cl::opt<unsigned> AlignAllBlock(\"align-all-blocks\",\n   84                                         cl::desc(\"Force the alignment of all \"\n   85                                                  \"blocks in the function.\"),\n   86                                         cl::init(0), cl::Hidden);\n   87  \n   88: static cl::opt<unsigned> AlignAllNonFallThruBlocks(\n   89      \"align-all-nofallthru-blocks\",\n   90      cl::desc(\"Force the alignment of all \"\n   ..\n   94  \n   95  // FIXME: Find a good default for this flag and remove the flag.\n   96: static cl::opt<unsigned> ExitBlockBias(\n   97      \"block-placement-exit-block-bias\",\n   98      cl::desc(\"Block frequency percentage a loop exit block needs \"\n   ..\n  103  // - Outlining: placement of a basic block outside the chain or hot path.\n  104  \n  105: static cl::opt<unsigned> LoopToColdBlockRatio(\n  106      \"loop-to-cold-block-ratio\",\n  107      cl::desc(\"Outline loop blocks from loop chain if (frequency of loop) / \"\n  ...\n  109      cl::init(5), cl::Hidden);\n  110  \n  111: static cl::opt<bool> ForceLoopColdBlock(\n  112      \"force-loop-cold-block\",\n  113      cl::desc(\"Force outlining cold blocks from loops.\"),\n  114      cl::init(false), cl::Hidden);\n  115  \n  116: static cl::opt<bool>\n  117      PreciseRotationCost(\"precise-rotation-cost\",\n  118                          cl::desc(\"Model the cost of loop rotation more \"\n  ...\n  120                          cl::init(false), cl::Hidden);\n  121  \n  122: static cl::opt<bool>\n  123      ForcePreciseRotationCost(\"force-precise-rotation-cost\",\n  124                               cl::desc(\"Force the use of precise cost \"\n  ...\n  126                               cl::init(false), cl::Hidden);\n  127  \n  128: static cl::opt<unsigned> MisfetchCost(\n  129      \"misfetch-cost\",\n  130      cl::desc(\"Cost that models the probabilistic risk of an instruction \"\n  ...\n  133      cl::init(1), cl::Hidden);\n  134  \n  135: static cl::opt<unsigned> JumpInstCost(\"jump-inst-cost\",\n  136                                        cl::desc(\"Cost of jump instructions.\"),\n  137                                        cl::init(1), cl::Hidden);\n  138: static cl::opt<bool>\n  139  TailDupPlacement(\"tail-dup-placement\",\n  140                cl::desc(\"Perform tail duplication during placement. \"\n  ...\n  143                cl::init(true), cl::Hidden);\n  144  \n  145: static cl::opt<bool>\n  146  BranchFoldPlacement(\"branch-fold-placement\",\n  147                cl::desc(\"Perform branch folding during placement. \"\n  ...\n  150  \n  151  // Heuristic for tail duplication.\n  152: static cl::opt<unsigned> TailDupPlacementThreshold(\n  153      \"tail-dup-placement-threshold\",\n  154      cl::desc(\"Instruction cutoff for tail duplication during layout. \"\n  ...\n  158  \n  159  // Heuristic for aggressive tail duplication.\n  160: static cl::opt<unsigned> TailDupPlacementAggressiveThreshold(\n  161      \"tail-dup-placement-aggressive-threshold\",\n  162      cl::desc(\"Instruction cutoff for aggressive tail duplication during \"\n  ...\n  166  \n  167  // Heuristic for tail duplication.\n  168: static cl::opt<unsigned> TailDupPlacementPenalty(\n  169      \"tail-dup-placement-penalty\",\n  170      cl::desc(\"Cost penalty for blocks that can avoid breaking CFG by copying. \"\n  ...\n  176  \n  177  // Heuristic for triangle chains.\n  178: static cl::opt<unsigned> TriangleChainCount(\n  179      \"triangle-chain-count\",\n  180      cl::desc(\"Number of triangle-shaped-CFG's that need to be in a row for the \"\n  ...\n  183      cl::Hidden);\n  184  \n  185: extern cl::opt<unsigned> StaticLikelyProb;\n  186: extern cl::opt<unsigned> ProfileLikelyProb;\n  187  \n  188  // Internal option used to control BFI display only after MBP pass.\n  189  // Defined in CodeGen/MachineBlockFrequencyInfo.cpp:\n  190  // -view-block-layout-with-bfi=\n  191: extern cl::opt<GVDAGType> ViewBlockLayoutWithBFI;\n  192  \n  193  // Command line option to specify the name of the function for CFG dump\n  194  // Defined in Analysis/BlockFrequencyInfo.cpp:  -view-bfi-func-name=\n  195: extern cl::opt<std::string> ViewBlockFreqFuncName;\n  196  \n  197  namespace {\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineBranchProbabilityInfo.cpp:\n   25                      \"Machine Branch Probability Analysis\", false, true)\n   26  \n   27: cl::opt<unsigned>\n   28      StaticLikelyProb(\"static-likely-prob\",\n   29                       cl::desc(\"branch probability threshold in percentage\"\n   ..\n   31                       cl::init(80), cl::Hidden);\n   32  \n   33: cl::opt<unsigned> ProfileLikelyProb(\n   34      \"profile-likely-prob\",\n   35      cl::desc(\"branch probability threshold in percentage to be considered\"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineCombiner.cpp:\n   35  STATISTIC(NumInstCombined, \"Number of machineinst combined\");\n   36  \n   37: static cl::opt<unsigned>\n   38  inc_threshold(\"machine-combiner-inc-threshold\", cl::Hidden,\n   39                cl::desc(\"Incremental depth computation will be used for basic \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineDominators.cpp:\n   26  static bool VerifyMachineDomInfo = false;\n   27  #endif\n   28: static cl::opt<bool, true> VerifyMachineDomInfoX(\n   29      \"verify-machine-dom-info\", cl::location(VerifyMachineDomInfo), cl::Hidden,\n   30      cl::desc(\"Verify machine dominator info (time consuming)\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineFunction.cpp:\n   77  #define DEBUG_TYPE \"codegen\"\n   78  \n   79: static cl::opt<unsigned>\n   80  AlignAllFunctions(\"align-all-functions\",\n   81                    cl::desc(\"Force the alignment of all functions.\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineLICM.cpp:\n   57  #define DEBUG_TYPE \"machinelicm\"\n   58  \n   59: static cl::opt<bool>\n   60  AvoidSpeculation(\"avoid-speculation\",\n   61                   cl::desc(\"MachineLICM should avoid speculation\"),\n   62                   cl::init(true), cl::Hidden);\n   63  \n   64: static cl::opt<bool>\n   65  HoistCheapInsts(\"hoist-cheap-insts\",\n   66                  cl::desc(\"MachineLICM should hoist even cheap instructions\"),\n   67                  cl::init(false), cl::Hidden);\n   68  \n   69: static cl::opt<bool>\n   70  SinkInstsToAvoidSpills(\"sink-insts-to-avoid-spills\",\n   71                         cl::desc(\"MachineLICM should sink instructions into \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineOperand.cpp:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<int>\n   31      PrintRegMaskNumRegs(\"print-regmask-num-regs\",\n   32                          cl::desc(\"Number of registers to limit to when \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachinePipeliner.cpp:\n  128  \n  129  /// A command line option to turn software pipelining on or off.\n  130: static cl::opt<bool> EnableSWP(\"enable-pipeliner\", cl::Hidden, cl::init(true),\n  131                                 cl::ZeroOrMore,\n  132                                 cl::desc(\"Enable Software Pipelining\"));\n  133  \n  134  /// A command line option to enable SWP at -Os.\n  135: static cl::opt<bool> EnableSWPOptSize(\"enable-pipeliner-opt-size\",\n  136                                        cl::desc(\"Enable SWP at Os.\"), cl::Hidden,\n  137                                        cl::init(false));\n  138  \n  139  /// A command line argument to limit minimum initial interval for pipelining.\n  140: static cl::opt<int> SwpMaxMii(\"pipeliner-max-mii\",\n  141                                cl::desc(\"Size limit for the the MII.\"),\n  142                                cl::Hidden, cl::init(27));\n  143  \n  144  /// A command line argument to limit the number of stages in the pipeline.\n  145: static cl::opt<int>\n  146      SwpMaxStages(\"pipeliner-max-stages\",\n  147                   cl::desc(\"Maximum stages allowed in the generated scheduled.\"),\n  ...\n  150  /// A command line option to disable the pruning of chain dependences due to\n  151  /// an unrelated Phi.\n  152: static cl::opt<bool>\n  153      SwpPruneDeps(\"pipeliner-prune-deps\",\n  154                   cl::desc(\"Prune dependences between unrelated Phi nodes.\"),\n  ...\n  157  /// A command line option to disable the pruning of loop carried order\n  158  /// dependences.\n  159: static cl::opt<bool>\n  160      SwpPruneLoopCarried(\"pipeliner-prune-loop-carried\",\n  161                          cl::desc(\"Prune loop carried order dependences.\"),\n  ...\n  163  \n  164  #ifndef NDEBUG\n  165: static cl::opt<int> SwpLoopLimit(\"pipeliner-max\", cl::Hidden, cl::init(-1));\n  166  #endif\n  167  \n  168: static cl::opt<bool> SwpIgnoreRecMII(\"pipeliner-ignore-recmii\",\n  169                                       cl::ReallyHidden, cl::init(false),\n  170                                       cl::ZeroOrMore, cl::desc(\"Ignore RecMII\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineRegisterInfo.cpp:\n   36  using namespace llvm;\n   37  \n   38: static cl::opt<bool> EnableSubRegLiveness(\"enable-subreg-liveness\", cl::Hidden,\n   39    cl::init(true), cl::desc(\"Enable subregister liveness tracking.\"));\n   40  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineScheduler.cpp:\n   74  namespace llvm {\n   75  \n   76: cl::opt<bool> ForceTopDown(\"misched-topdown\", cl::Hidden,\n   77                             cl::desc(\"Force top-down list scheduling\"));\n   78: cl::opt<bool> ForceBottomUp(\"misched-bottomup\", cl::Hidden,\n   79                              cl::desc(\"Force bottom-up list scheduling\"));\n   80: cl::opt<bool>\n   81  DumpCriticalPathLength(\"misched-dcpl\", cl::Hidden,\n   82                         cl::desc(\"Print critical path length to stdout\"));\n   ..\n   85  \n   86  #ifndef NDEBUG\n   87: static cl::opt<bool> ViewMISchedDAGs(\"view-misched-dags\", cl::Hidden,\n   88    cl::desc(\"Pop up a window to show MISched dags after they are processed\"));\n   89  \n   90  /// In some situations a few uninteresting nodes depend on nearly all other\n   91  /// nodes in the graph, provide a cutoff to hide them.\n   92: static cl::opt<unsigned> ViewMISchedCutoff(\"view-misched-cutoff\", cl::Hidden,\n   93    cl::desc(\"Hide nodes with more predecessor/successor than cutoff\"));\n   94  \n   95: static cl::opt<unsigned> MISchedCutoff(\"misched-cutoff\", cl::Hidden,\n   96    cl::desc(\"Stop scheduling after N instructions\"), cl::init(~0U));\n   97  \n   98: static cl::opt<std::string> SchedOnlyFunc(\"misched-only-func\", cl::Hidden,\n   99    cl::desc(\"Only schedule this function\"));\n  100: static cl::opt<unsigned> SchedOnlyBlock(\"misched-only-block\", cl::Hidden,\n  101                                          cl::desc(\"Only schedule this MBB#\"));\n  102  #else\n  ...\n  106  /// Avoid quadratic complexity in unusually large basic blocks by limiting the\n  107  /// size of the ready lists.\n  108: static cl::opt<unsigned> ReadyListLimit(\"misched-limit\", cl::Hidden,\n  109    cl::desc(\"Limit ready list to N instructions\"), cl::init(256));\n  110  \n  111: static cl::opt<bool> EnableRegPressure(\"misched-regpressure\", cl::Hidden,\n  112    cl::desc(\"Enable register pressure scheduling.\"), cl::init(true));\n  113  \n  114: static cl::opt<bool> EnableCyclicPath(\"misched-cyclicpath\", cl::Hidden,\n  115    cl::desc(\"Enable cyclic critical path analysis.\"), cl::init(true));\n  116  \n  117: static cl::opt<bool> EnableMemOpCluster(\"misched-cluster\", cl::Hidden,\n  118                                          cl::desc(\"Enable memop clustering.\"),\n  119                                          cl::init(true));\n  120  \n  121: static cl::opt<bool> VerifyScheduling(\"verify-misched\", cl::Hidden,\n  122    cl::desc(\"Verify machine instrs before and after machine scheduling\"));\n  123  \n  ...\n  246  \n  247  /// MachineSchedOpt allows command line selection of the scheduler.\n  248: static cl::opt<MachineSchedRegistry::ScheduleDAGCtor, false,\n  249                 RegisterPassParser<MachineSchedRegistry>>\n  250  MachineSchedOpt(\"misched\",\n  ...\n  256                       useDefaultMachineSched);\n  257  \n  258: static cl::opt<bool> EnableMachineSched(\n  259      \"enable-misched\",\n  260      cl::desc(\"Enable the machine instruction scheduling pass.\"), cl::init(true),\n  261      cl::Hidden);\n  262  \n  263: static cl::opt<bool> EnablePostRAMachineSched(\n  264      \"enable-post-misched\",\n  265      cl::desc(\"Enable the post-ra machine instruction scheduling pass.\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MachineSink.cpp:\n   56  #define DEBUG_TYPE \"machine-sink\"\n   57  \n   58: static cl::opt<bool>\n   59  SplitEdges(\"machine-sink-split\",\n   60             cl::desc(\"Split critical edges during machine sinking\"),\n   61             cl::init(true), cl::Hidden);\n   62  \n   63: static cl::opt<bool>\n   64  UseBlockFreqInfo(\"machine-sink-bfi\",\n   65             cl::desc(\"Use block frequency info to find successors to sink\"),\n   66             cl::init(true), cl::Hidden);\n   67  \n   68: static cl::opt<unsigned> SplitEdgeProbabilityThreshold(\n   69      \"machine-sink-split-probability-threshold\",\n   70      cl::desc(\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/MacroFusion.cpp:\n   31  using namespace llvm;\n   32  \n   33: static cl::opt<bool> EnableMacroFusion(\"misched-fusion\", cl::Hidden,\n   34    cl::desc(\"Enable scheduling for macro fusion.\"), cl::init(true));\n   35  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/PHIElimination.cpp:\n   48  #define DEBUG_TYPE \"phi-node-elimination\"\n   49  \n   50: static cl::opt<bool>\n   51  DisableEdgeSplitting(\"disable-phi-elim-edge-splitting\", cl::init(false),\n   52                       cl::Hidden, cl::desc(\"Disable critical edge splitting \"\n   53                                            \"during PHI elimination\"));\n   54  \n   55: static cl::opt<bool>\n   56  SplitAllCriticalEdges(\"phi-elim-split-all-critical-edges\", cl::init(false),\n   57                        cl::Hidden, cl::desc(\"Split all critical edges during \"\n   58                                             \"PHI elimination\"));\n   59  \n   60: static cl::opt<bool> NoPhiElimLiveOutEarlyExit(\n   61      \"no-phi-elim-live-out-early-exit\", cl::init(false), cl::Hidden,\n   62      cl::desc(\"Do not use an early exit if isLiveOutPastPHIs returns true.\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/PeepholeOptimizer.cpp:\n  103  \n  104  // Optimize Extensions\n  105: static cl::opt<bool>\n  106  Aggressive(\"aggressive-ext-opt\", cl::Hidden,\n  107             cl::desc(\"Aggressive extension optimization\"));\n  108  \n  109: static cl::opt<bool>\n  110  DisablePeephole(\"disable-peephole\", cl::Hidden, cl::init(false),\n  111                  cl::desc(\"Disable the peephole optimizer\"));\n  112  \n  113: static cl::opt<bool>\n  114  DisableAdvCopyOpt(\"disable-adv-copy-opt\", cl::Hidden, cl::init(false),\n  115                    cl::desc(\"Disable advanced copy optimization\"));\n  116  \n  117: static cl::opt<bool> DisableNAPhysCopyOpt(\n  118      \"disable-non-allocatable-phys-copy-opt\", cl::Hidden, cl::init(false),\n  119      cl::desc(\"Disable non-allocatable physical register copy optimization\"));\n  ...\n  121  // Limit the number of PHI instructions to process\n  122  // in PeepholeOptimizer::getNextSource.\n  123: static cl::opt<unsigned> RewritePHILimit(\n  124      \"rewrite-phi-limit\", cl::Hidden, cl::init(10),\n  125      cl::desc(\"Limit the length of PHI chains to lookup\"));\n  ...\n  127  // Limit the length of recurrence chain when evaluating the benefit of\n  128  // commuting operands.\n  129: static cl::opt<unsigned> MaxRecurrenceChain(\n  130      \"recurrence-chain-limit\", cl::Hidden, cl::init(3),\n  131      cl::desc(\"Maximum length of recurrence chain when evaluating the benefit \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/PostRASchedulerList.cpp:\n   54  // TargetSubtargetInfo.enablePostRAScheduler(). This flag can be used to\n   55  // override the target.\n   56: static cl::opt<bool>\n   57  EnablePostRAScheduler(\"post-RA-scheduler\",\n   58                         cl::desc(\"Enable scheduling after register allocation\"),\n   59                         cl::init(false), cl::Hidden);\n   60: static cl::opt<std::string>\n   61  EnableAntiDepBreaking(\"break-anti-dependencies\",\n   62                        cl::desc(\"Break post-RA scheduling anti-dependencies: \"\n   ..\n   65  \n   66  // If DebugDiv > 0 then only schedule MBB with (ID % DebugDiv) == DebugMod\n   67: static cl::opt<int>\n   68  DebugDiv(\"postra-sched-debugdiv\",\n   69                        cl::desc(\"Debug control MBBs that are scheduled\"),\n   70                        cl::init(0), cl::Hidden);\n   71: static cl::opt<int>\n   72  DebugMod(\"postra-sched-debugmod\",\n   73                        cl::desc(\"Debug control MBBs that are scheduled\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/PrologEpilogInserter.cpp:\n  135  char &llvm::PrologEpilogCodeInserterID = PEI::ID;\n  136  \n  137: static cl::opt<unsigned>\n  138  WarnStackSize(\"warn-stack-size\", cl::Hidden, cl::init((unsigned)-1),\n  139                cl::desc(\"Warn for stack size bigger than the given\"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegAllocBase.cpp:\n   40  // Temporary verification option until we can put verification inside\n   41  // MachineVerifier.\n   42: static cl::opt<bool, true>\n   43      VerifyRegAlloc(\"verify-regalloc\", cl::location(RegAllocBase::VerifyEnabled),\n   44                     cl::Hidden, cl::desc(\"Verify during register allocation\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegAllocGreedy.cpp:\n   87  STATISTIC(NumEvicted,      \"Number of interferences evicted\");\n   88  \n   89: static cl::opt<SplitEditor::ComplementSpillMode> SplitSpillMode(\n   90      \"split-spill-mode\", cl::Hidden,\n   91      cl::desc(\"Spill mode for splitting live ranges\"),\n   ..\n   95      cl::init(SplitEditor::SM_Speed));\n   96  \n   97: static cl::opt<unsigned>\n   98  LastChanceRecoloringMaxDepth(\"lcr-max-depth\", cl::Hidden,\n   99                               cl::desc(\"Last chance recoloring max depth\"),\n  100                               cl::init(5));\n  101  \n  102: static cl::opt<unsigned> LastChanceRecoloringMaxInterference(\n  103      \"lcr-max-interf\", cl::Hidden,\n  104      cl::desc(\"Last chance recoloring maximum number of considered\"\n  ...\n  106      cl::init(8));\n  107  \n  108: static cl::opt<bool> ExhaustiveSearch(\n  109      \"exhaustive-register-search\", cl::NotHidden,\n  110      cl::desc(\"Exhaustive Search for registers bypassing the depth \"\n  ...\n  112      cl::Hidden);\n  113  \n  114: static cl::opt<bool> EnableLocalReassignment(\n  115      \"enable-local-reassign\", cl::Hidden,\n  116      cl::desc(\"Local reassignment can yield better allocation decisions, but \"\n  ...\n  118      cl::init(false));\n  119  \n  120: static cl::opt<bool> EnableDeferredSpilling(\n  121      \"enable-deferred-spilling\", cl::Hidden,\n  122      cl::desc(\"Instead of spilling a variable right away, defer the actual \"\n  ...\n  127  \n  128  // FIXME: Find a good default for this flag and remove the flag.\n  129: static cl::opt<unsigned>\n  130  CSRFirstTimeCost(\"regalloc-csr-first-time-cost\",\n  131                cl::desc(\"Cost for first time use of callee-saved register.\"),\n  132                cl::init(0), cl::Hidden);\n  133  \n  134: static cl::opt<bool> ConsiderLocalIntervalCost(\n  135      \"condsider-local-interval-cost\", cl::Hidden,\n  136      cl::desc(\"Consider the cost of local intervals created by a split \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegAllocPBQP.cpp:\n   96                         createDefaultPBQPRegisterAllocator);\n   97  \n   98: static cl::opt<bool>\n   99  PBQPCoalescing(\"pbqp-coalescing\",\n  100                  cl::desc(\"Attempt coalescing during PBQP register allocation.\"),\n  ...\n  102  \n  103  #ifndef NDEBUG\n  104: static cl::opt<bool>\n  105  PBQPDumpGraphs(\"pbqp-dump-graphs\",\n  106                 cl::desc(\"Dump graphs for each function/round in the compilation unit.\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegisterClassInfo.cpp:\n   36  #define DEBUG_TYPE \"regalloc\"\n   37  \n   38: static cl::opt<unsigned>\n   39  StressRA(\"stress-regalloc\", cl::Hidden, cl::init(0), cl::value_desc(\"N\"),\n   40           cl::desc(\"Limit all regclasses to N registers\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegisterCoalescer.cpp:\n   71  STATISTIC(NumLaneResolves,  \"Number of dead lane conflicts resolved\");\n   72  \n   73: static cl::opt<bool> EnableJoining(\"join-liveintervals\",\n   74                                     cl::desc(\"Coalesce copies (default=true)\"),\n   75                                     cl::init(true), cl::Hidden);\n   76  \n   77: static cl::opt<bool> UseTerminalRule(\"terminal-rule\",\n   78                                       cl::desc(\"Apply the terminal rule\"),\n   79                                       cl::init(false), cl::Hidden);\n   80  \n   81  /// Temporary flag to test critical edge unsplitting.\n   82: static cl::opt<bool>\n   83  EnableJoinSplits(\"join-splitedges\",\n   84    cl::desc(\"Coalesce copies on split edges (default=subtarget)\"), cl::Hidden);\n   85  \n   86  /// Temporary flag to test global copy optimization.\n   87: static cl::opt<cl::boolOrDefault>\n   88  EnableGlobalCopies(\"join-globalcopies\",\n   89    cl::desc(\"Coalesce copies that span blocks (default=subtarget)\"),\n   90    cl::init(cl::BOU_UNSET), cl::Hidden);\n   91  \n   92: static cl::opt<bool>\n   93  VerifyCoalescing(\"verify-coalescing\",\n   94           cl::desc(\"Verify machine instrs before and after register coalescing\"),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/RegisterUsageInfo.cpp:\n   34  #define DEBUG_TYPE \"ip-regalloc\"\n   35  \n   36: static cl::opt<bool> DumpRegUsage(\n   37      \"print-regusage\", cl::init(false), cl::Hidden,\n   38      cl::desc(\"print register usage details collected for analysis.\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SafeStackColoring.cpp:\n   35  \n   36  // Disabled by default due to PR32143.\n   37: static cl::opt<bool> ClColoring(\"safe-stack-coloring\",\n   38                                  cl::desc(\"enable safe stack coloring\"),\n   39                                  cl::Hidden, cl::init(false));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SafeStackLayout.cpp:\n   24  #define DEBUG_TYPE \"safestacklayout\"\n   25  \n   26: static cl::opt<bool> ClLayout(\"safe-stack-layout\",\n   27                                cl::desc(\"enable safe stack layout\"), cl::Hidden,\n   28                                cl::init(true));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/ScheduleDAG.cpp:\n   39  \n   40  #ifndef NDEBUG\n   41: static cl::opt<bool> StressSchedOpt(\n   42    \"stress-sched\", cl::Hidden, cl::init(false),\n   43    cl::desc(\"Stress test instruction scheduling\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:\n   66  #define DEBUG_TYPE \"machine-scheduler\"\n   67  \n   68: static cl::opt<bool> EnableAASchedMI(\"enable-aa-sched-mi\", cl::Hidden,\n   69      cl::ZeroOrMore, cl::init(false),\n   70      cl::desc(\"Enable use of AA during MI DAG construction\"));\n   71  \n   72: static cl::opt<bool> UseTBAA(\"use-tbaa-in-sched-mi\", cl::Hidden,\n   73      cl::init(true), cl::desc(\"Enable use of TBAA during MI DAG construction\"));\n   74  \n   ..\n   79  // When Stores and Loads maps (or NonAliasStores and NonAliasLoads)\n   80  // together hold this many SUs, a reduction of maps will be done.\n   81: static cl::opt<unsigned> HugeRegion(\"dag-maps-huge-region\", cl::Hidden,\n   82      cl::init(1000), cl::desc(\"The limit to use while constructing the DAG \"\n   83                               \"prior to scheduling, at which point a trade-off \"\n   84                               \"is made to avoid excessive compile time.\"));\n   85  \n   86: static cl::opt<unsigned> ReductionSize(\n   87      \"dag-maps-reduction-size\", cl::Hidden,\n   88      cl::desc(\"A huge scheduling region will have maps reduced by this many \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:\n   86  STATISTIC(SlicedLoads, \"Number of load sliced\");\n   87  \n   88: static cl::opt<bool>\n   89  CombinerGlobalAA(\"combiner-global-alias-analysis\", cl::Hidden,\n   90                   cl::desc(\"Enable DAG combiner's use of IR alias analysis\"));\n   91  \n   92: static cl::opt<bool>\n   93  UseTBAA(\"combiner-use-tbaa\", cl::Hidden, cl::init(true),\n   94          cl::desc(\"Enable DAG combiner's use of TBAA\"));\n   95  \n   96  #ifndef NDEBUG\n   97: static cl::opt<std::string>\n   98  CombinerAAOnlyFunc(\"combiner-aa-only-func\", cl::Hidden,\n   99                     cl::desc(\"Only use DAG-combiner alias analysis in this\"\n  ...\n  103  /// Hidden option to stress test load slicing, i.e., when this option\n  104  /// is enabled, load slicing bypasses most of its profitability guards.\n  105: static cl::opt<bool>\n  106  StressLoadSlicing(\"combiner-stress-load-slicing\", cl::Hidden,\n  107                    cl::desc(\"Bypass the profitability model of load slicing\"),\n  108                    cl::init(false));\n  109  \n  110: static cl::opt<bool>\n  111    MaySplitLoadIndex(\"combiner-split-load-index\", cl::Hidden, cl::init(true),\n  112                      cl::desc(\"DAG combiner may split indexing from loads\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:\n   27  #define DEBUG_TYPE \"legalize-types\"\n   28  \n   29: static cl::opt<bool>\n   30  EnableExpensiveChecks(\"enable-legalize-types-checking\", cl::Hidden);\n   31  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:\n   34  #define DEBUG_TYPE \"scheduler\"\n   35  \n   36: static cl::opt<bool> DisableDFASched(\"disable-dfa-sched\", cl::Hidden,\n   37    cl::ZeroOrMore, cl::init(false),\n   38    cl::desc(\"Disable use of DFA during scheduling\"));\n   39  \n   40: static cl::opt<int> RegPressureThreshold(\n   41    \"dfa-sched-reg-pressure-threshold\", cl::Hidden, cl::ZeroOrMore, cl::init(5),\n   42    cl::desc(\"Track reg pressure and switch priority to in-depth\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:\n   90                        createILPListDAGScheduler);\n   91  \n   92: static cl::opt<bool> DisableSchedCycles(\n   93    \"disable-sched-cycles\", cl::Hidden, cl::init(false),\n   94    cl::desc(\"Disable cycle-level precision during preRA scheduling\"));\n   ..\n   96  // Temporary sched=list-ilp flags until the heuristics are robust.\n   97  // Some options are also available under sched=list-hybrid.\n   98: static cl::opt<bool> DisableSchedRegPressure(\n   99    \"disable-sched-reg-pressure\", cl::Hidden, cl::init(false),\n  100    cl::desc(\"Disable regpressure priority in sched=list-ilp\"));\n  101: static cl::opt<bool> DisableSchedLiveUses(\n  102    \"disable-sched-live-uses\", cl::Hidden, cl::init(true),\n  103    cl::desc(\"Disable live use priority in sched=list-ilp\"));\n  104: static cl::opt<bool> DisableSchedVRegCycle(\n  105    \"disable-sched-vrcycle\", cl::Hidden, cl::init(false),\n  106    cl::desc(\"Disable virtual register cycle interference checks\"));\n  107: static cl::opt<bool> DisableSchedPhysRegJoin(\n  108    \"disable-sched-physreg-join\", cl::Hidden, cl::init(false),\n  109    cl::desc(\"Disable physreg def-use affinity\"));\n  110: static cl::opt<bool> DisableSchedStalls(\n  111    \"disable-sched-stalls\", cl::Hidden, cl::init(true),\n  112    cl::desc(\"Disable no-stall priority in sched=list-ilp\"));\n  113: static cl::opt<bool> DisableSchedCriticalPath(\n  114    \"disable-sched-critical-path\", cl::Hidden, cl::init(false),\n  115    cl::desc(\"Disable critical path priority in sched=list-ilp\"));\n  116: static cl::opt<bool> DisableSchedHeight(\n  117    \"disable-sched-height\", cl::Hidden, cl::init(false),\n  118    cl::desc(\"Disable scheduled-height priority in sched=list-ilp\"));\n  119: static cl::opt<bool> Disable2AddrHack(\n  120    \"disable-2addr-hack\", cl::Hidden, cl::init(true),\n  121    cl::desc(\"Disable scheduler's two-address hack\"));\n  122  \n  123: static cl::opt<int> MaxReorderWindow(\n  124    \"max-sched-reorder\", cl::Hidden, cl::init(6),\n  125    cl::desc(\"Number of instructions to allow ahead of the critical path \"\n  126             \"in sched=list-ilp\"));\n  127  \n  128: static cl::opt<unsigned> AvgIPC(\n  129    \"sched-avg-ipc\", cl::Hidden, cl::init(1),\n  130    cl::desc(\"Average inst/cycle whan no target itinerary exists.\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:\n   41  // without a target itinerary. The choice of number here has more to do with\n   42  // balancing scheduler heuristics than with the actual machine latency.\n   43: static cl::opt<int> HighLatencyCycles(\n   44    \"sched-high-latency-cycles\", cl::Hidden, cl::init(10),\n   45    cl::desc(\"Roughly estimate the number of cycles that 'long latency'\"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:\n  128  static unsigned LimitFloatPrecision;\n  129  \n  130: static cl::opt<unsigned, true>\n  131      LimitFPPrecision(\"limit-float-precision\",\n  132                       cl::desc(\"Generate low-precision inline sequences \"\n  ...\n  135                       cl::init(0));\n  136  \n  137: static cl::opt<unsigned> SwitchPeelThreshold(\n  138      \"switch-peel-threshold\", cl::Hidden, cl::init(66),\n  139      cl::desc(\"Set the case probability threshold for peeling the case from a \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp:\n   50  using namespace llvm;\n   51  \n   52: static cl::opt<bool>\n   53  VerboseDAGDumping(\"dag-dump-verbose\", cl::Hidden,\n   54                    cl::desc(\"Display more information when dumping selection \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:\n  112            \"Number of entry blocks where fast isel failed to lower arguments\");\n  113  \n  114: static cl::opt<int> EnableFastISelAbort(\n  115      \"fast-isel-abort\", cl::Hidden,\n  116      cl::desc(\"Enable abort calls when \\\"fast\\\" instruction selection \"\n  ...\n  120               \"to SelectionDAG.\"));\n  121  \n  122: static cl::opt<bool> EnableFastISelFallbackReport(\n  123      \"fast-isel-report-on-fallback\", cl::Hidden,\n  124      cl::desc(\"Emit a diagnostic when \\\"fast\\\" instruction selection \"\n  125               \"falls back to SelectionDAG.\"));\n  126  \n  127: static cl::opt<bool>\n  128  UseMBPI(\"use-mbpi\",\n  129          cl::desc(\"use Machine Branch Probability Info\"),\n  ...\n  131  \n  132  #ifndef NDEBUG\n  133: static cl::opt<std::string>\n  134  FilterDAGBasicBlockName(\"filter-view-dags\", cl::Hidden,\n  135                          cl::desc(\"Only display the basic block whose name \"\n  136                                   \"matches this for all view-*-dags options\"));\n  137: static cl::opt<bool>\n  138  ViewDAGCombine1(\"view-dag-combine1-dags\", cl::Hidden,\n  139            cl::desc(\"Pop up a window to show dags before the first \"\n  140                     \"dag combine pass\"));\n  141: static cl::opt<bool>\n  142  ViewLegalizeTypesDAGs(\"view-legalize-types-dags\", cl::Hidden,\n  143            cl::desc(\"Pop up a window to show dags before legalize types\"));\n  144: static cl::opt<bool>\n  145  ViewLegalizeDAGs(\"view-legalize-dags\", cl::Hidden,\n  146            cl::desc(\"Pop up a window to show dags before legalize\"));\n  147: static cl::opt<bool>\n  148  ViewDAGCombine2(\"view-dag-combine2-dags\", cl::Hidden,\n  149            cl::desc(\"Pop up a window to show dags before the second \"\n  150                     \"dag combine pass\"));\n  151: static cl::opt<bool>\n  152  ViewDAGCombineLT(\"view-dag-combine-lt-dags\", cl::Hidden,\n  153            cl::desc(\"Pop up a window to show dags before the post legalize types\"\n  154                     \" dag combine pass\"));\n  155: static cl::opt<bool>\n  156  ViewISelDAGs(\"view-isel-dags\", cl::Hidden,\n  157            cl::desc(\"Pop up a window to show isel dags as they are selected\"));\n  158: static cl::opt<bool>\n  159  ViewSchedDAGs(\"view-sched-dags\", cl::Hidden,\n  160            cl::desc(\"Pop up a window to show sched dags as they are processed\"));\n  161: static cl::opt<bool>\n  162  ViewSUnitDAGs(\"view-sunit-dags\", cl::Hidden,\n  163        cl::desc(\"Pop up a window to show SUnit dags after they are processed\"));\n  ...\n  183  ///\n  184  //===---------------------------------------------------------------------===//\n  185: static cl::opt<RegisterScheduler::FunctionPassCtor, false,\n  186                 RegisterPassParser<RegisterScheduler>>\n  187  ISHeuristic(\"pre-RA-sched\",\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/ShrinkWrap.cpp:\n   92            \"Number of shrink-wrapping candidates dropped because of frequency\");\n   93  \n   94: static cl::opt<cl::boolOrDefault>\n   95  EnableShrinkWrapOpt(\"enable-shrink-wrap\", cl::Hidden,\n   96                      cl::desc(\"enable the shrink-wrapping pass\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/StackColoring.cpp:\n   66  #define DEBUG_TYPE \"stack-coloring\"\n   67  \n   68: static cl::opt<bool>\n   69  DisableColoring(\"no-stack-coloring\",\n   70          cl::init(false), cl::Hidden,\n   ..\n   76  /// code. If this flag is enabled, we try to save the user. This option\n   77  /// is treated as overriding LifetimeStartOnFirstUse below.\n   78: static cl::opt<bool>\n   79  ProtectFromEscapedAllocas(\"protect-from-escaped-allocas\",\n   80                            cl::init(false), cl::Hidden,\n   ..\n   86  /// for LIFETIME_START marker). See \"Implementation notes\" below for\n   87  /// more info.\n   88: static cl::opt<bool>\n   89  LifetimeStartOnFirstUse(\"stackcoloring-lifetime-start-on-first-use\",\n   90          cl::init(true), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/StackMapLivenessAnalysis.cpp:\n   29  #define DEBUG_TYPE \"stackmaps\"\n   30  \n   31: static cl::opt<bool> EnablePatchPointLiveness(\n   32      \"enable-patchpoint-liveness\", cl::Hidden, cl::init(true),\n   33      cl::desc(\"Enable PatchPoint Liveness Analysis Pass\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/StackMaps.cpp:\n   41  #define DEBUG_TYPE \"stackmaps\"\n   42  \n   43: static cl::opt<int> StackMapVersion(\n   44      \"stackmap-version\", cl::init(3), cl::Hidden,\n   45      cl::desc(\"Specify the stackmap encoding version (default = 3)\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/StackProtector.cpp:\n   57                          \" taken.\");\n   58  \n   59: static cl::opt<bool> EnableSelectionDAGSP(\"enable-selectiondag-sp\",\n   60                                            cl::init(true), cl::Hidden);\n   61  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/StackSlotColoring.cpp:\n   47  #define DEBUG_TYPE \"stack-slot-coloring\"\n   48  \n   49: static cl::opt<bool>\n   50  DisableSharing(\"no-stack-slot-sharing\",\n   51               cl::init(false), cl::Hidden,\n   52               cl::desc(\"Suppress slot sharing during stack coloring\"));\n   53  \n   54: static cl::opt<int> DCELimit(\"ssc-dce-limit\", cl::init(-1), cl::Hidden);\n   55  \n   56  STATISTIC(NumEliminated, \"Number of stack slots eliminated due to coloring\");\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TailDuplicator.cpp:\n   57  \n   58  // Heuristic for tail duplication.\n   59: static cl::opt<unsigned> TailDuplicateSize(\n   60      \"tail-dup-size\",\n   61      cl::desc(\"Maximum instructions to consider tail duplicating\"), cl::init(2),\n   62      cl::Hidden);\n   63  \n   64: static cl::opt<unsigned> TailDupIndirectBranchSize(\n   65      \"tail-dup-indirect-size\",\n   66      cl::desc(\"Maximum instructions to consider tail duplicating blocks that \"\n   ..\n   68      cl::Hidden);\n   69  \n   70: static cl::opt<bool>\n   71      TailDupVerify(\"tail-dup-verify\",\n   72                    cl::desc(\"Verify sanity of PHI instructions during taildup\"),\n   73                    cl::init(false), cl::Hidden);\n   74  \n   75: static cl::opt<unsigned> TailDupLimit(\"tail-dup-limit\", cl::init(~0U),\n   76                                        cl::Hidden);\n   77  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TargetInstrInfo.cpp:\n   35  using namespace llvm;\n   36  \n   37: static cl::opt<bool> DisableHazardRecognizer(\n   38    \"disable-sched-hazard\", cl::Hidden, cl::init(false),\n   39    cl::desc(\"Disable hazard detection during preRA scheduling\"));\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TargetLoweringBase.cpp:\n   65  using namespace llvm;\n   66  \n   67: static cl::opt<bool> JumpIsExpensiveOverride(\n   68      \"jump-is-expensive\", cl::init(false),\n   69      cl::desc(\"Do not create extra branches to split comparison logic.\"),\n   70      cl::Hidden);\n   71  \n   72: static cl::opt<unsigned> MinimumJumpTableEntries\n   73    (\"min-jump-table-entries\", cl::init(4), cl::Hidden,\n   74     cl::desc(\"Set minimum number of entries to use a jump table.\"));\n   75  \n   76: static cl::opt<unsigned> MaximumJumpTableSize\n   77    (\"max-jump-table-size\", cl::init(0), cl::Hidden,\n   78     cl::desc(\"Set maximum size of jump tables; zero for no limit.\"));\n   79  \n   80  /// Minimum jump table density for normal functions.\n   81: static cl::opt<unsigned>\n   82      JumpTableDensity(\"jump-table-density\", cl::init(10), cl::Hidden,\n   83                       cl::desc(\"Minimum density for building a jump table in \"\n   ..\n   85  \n   86  /// Minimum jump table density for -Os or -Oz functions.\n   87: static cl::opt<unsigned> OptsizeJumpTableDensity(\n   88      \"optsize-jump-table-density\", cl::init(40), cl::Hidden,\n   89      cl::desc(\"Minimum density for building a jump table in \"\n   ..\n  110  // set such that the win from N% correct executions is greater than the loss\n  111  // from (100 - N)% mispredicted executions for the majority of intended targets.\n  112: static cl::opt<int> MinPercentageForPredictableBranch(\n  113      \"min-predictable-branch\", cl::init(99),\n  114      cl::desc(\"Minimum percentage (0-100) that a condition must be either true \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TargetPassConfig.cpp:\n   48  using namespace llvm;\n   49  \n   50: cl::opt<bool> EnableIPRA(\"enable-ipra\", cl::init(false), cl::Hidden,\n   51                           cl::desc(\"Enable interprocedural register allocation \"\n   52                                    \"to reduce load/store at procedure calls.\"));\n   53: static cl::opt<bool> DisablePostRASched(\"disable-post-ra\", cl::Hidden,\n   54      cl::desc(\"Disable Post Regalloc Scheduler\"));\n   55: static cl::opt<bool> DisableBranchFold(\"disable-branch-fold\", cl::Hidden,\n   56      cl::desc(\"Disable branch folding\"));\n   57: static cl::opt<bool> DisableTailDuplicate(\"disable-tail-duplicate\", cl::Hidden,\n   58      cl::desc(\"Disable tail duplication\"));\n   59: static cl::opt<bool> DisableEarlyTailDup(\"disable-early-taildup\", cl::Hidden,\n   60      cl::desc(\"Disable pre-register allocation tail duplication\"));\n   61: static cl::opt<bool> DisableBlockPlacement(\"disable-block-placement\",\n   62      cl::Hidden, cl::desc(\"Disable probability-driven block placement\"));\n   63: static cl::opt<bool> EnableBlockPlacementStats(\"enable-block-placement-stats\",\n   64      cl::Hidden, cl::desc(\"Collect probability-driven block placement stats\"));\n   65: static cl::opt<bool> DisableSSC(\"disable-ssc\", cl::Hidden,\n   66      cl::desc(\"Disable Stack Slot Coloring\"));\n   67: static cl::opt<bool> DisableMachineDCE(\"disable-machine-dce\", cl::Hidden,\n   68      cl::desc(\"Disable Machine Dead Code Elimination\"));\n   69: static cl::opt<bool> DisableEarlyIfConversion(\"disable-early-ifcvt\", cl::Hidden,\n   70      cl::desc(\"Disable Early If-conversion\"));\n   71: static cl::opt<bool> DisableMachineLICM(\"disable-machine-licm\", cl::Hidden,\n   72      cl::desc(\"Disable Machine LICM\"));\n   73: static cl::opt<bool> DisableMachineCSE(\"disable-machine-cse\", cl::Hidden,\n   74      cl::desc(\"Disable Machine Common Subexpression Elimination\"));\n   75: static cl::opt<cl::boolOrDefault> OptimizeRegAlloc(\n   76      \"optimize-regalloc\", cl::Hidden,\n   77      cl::desc(\"Enable optimized register allocation compilation path.\"));\n   78: static cl::opt<bool> DisablePostRAMachineLICM(\"disable-postra-machine-licm\",\n   79      cl::Hidden,\n   80      cl::desc(\"Disable Machine LICM\"));\n   81: static cl::opt<bool> DisableMachineSink(\"disable-machine-sink\", cl::Hidden,\n   82      cl::desc(\"Disable Machine Sinking\"));\n   83: static cl::opt<bool> DisableLSR(\"disable-lsr\", cl::Hidden,\n   84      cl::desc(\"Disable Loop Strength Reduction Pass\"));\n   85: static cl::opt<bool> DisableConstantHoisting(\"disable-constant-hoisting\",\n   86      cl::Hidden, cl::desc(\"Disable ConstantHoisting\"));\n   87: static cl::opt<bool> DisableCGP(\"disable-cgp\", cl::Hidden,\n   88      cl::desc(\"Disable Codegen Prepare\"));\n   89: static cl::opt<bool> DisableCopyProp(\"disable-copyprop\", cl::Hidden,\n   90      cl::desc(\"Disable Copy Propagation pass\"));\n   91: static cl::opt<bool> DisablePartialLibcallInlining(\"disable-partial-libcall-inlining\",\n   92      cl::Hidden, cl::desc(\"Disable Partial Libcall Inlining\"));\n   93: static cl::opt<bool> EnableImplicitNullChecks(\n   94      \"enable-implicit-null-checks\",\n   95      cl::desc(\"Fold null checks into faulting memory operations\"),\n   96      cl::init(false), cl::Hidden);\n   97: static cl::opt<bool>\n   98      EnableMergeICmps(\"enable-mergeicmps\",\n   99                       cl::desc(\"Merge ICmp chains into a single memcmp\"),\n  100                       cl::init(false), cl::Hidden);\n  101: static cl::opt<bool> PrintLSR(\"print-lsr-output\", cl::Hidden,\n  102      cl::desc(\"Print LLVM IR produced by the loop-reduce pass\"));\n  103: static cl::opt<bool> PrintISelInput(\"print-isel-input\", cl::Hidden,\n  104      cl::desc(\"Print LLVM IR input to isel pass\"));\n  105: static cl::opt<bool> PrintGCInfo(\"print-gc\", cl::Hidden,\n  106      cl::desc(\"Dump garbage collector data\"));\n  107: static cl::opt<bool> VerifyMachineCode(\"verify-machineinstrs\", cl::Hidden,\n  108      cl::desc(\"Verify generated machine code\"),\n  109      cl::init(false),\n  110      cl::ZeroOrMore);\n  111: static cl::opt<bool> EnableMachineOutliner(\"enable-machine-outliner\",\n  112      cl::Hidden,\n  113      cl::desc(\"Enable machine outliner\"));\n  114: static cl::opt<bool> EnableLinkOnceODROutlining(\n  115      \"enable-linkonceodr-outlining\",\n  116      cl::Hidden,\n  ...\n  120  // FastISel is enabled by default with -fast, and we wish to be\n  121  // able to enable or disable fast-isel independently from -O0.\n  122: static cl::opt<cl::boolOrDefault>\n  123  EnableFastISelOption(\"fast-isel\", cl::Hidden,\n  124    cl::desc(\"Enable the \\\"fast\\\" instruction selector\"));\n  125  \n  126: static cl::opt<cl::boolOrDefault>\n  127      EnableGlobalISel(\"global-isel\", cl::Hidden,\n  128                       cl::desc(\"Enable the \\\"global\\\" instruction selector\"));\n  129  \n  130: static cl::opt<std::string> PrintMachineInstrs(\n  131      \"print-machineinstrs\", cl::ValueOptional, cl::desc(\"Print machine instrs\"),\n  132      cl::value_desc(\"pass-name\"), cl::init(\"option-unspecified\"), cl::Hidden);\n  133  \n  134: static cl::opt<int> EnableGlobalISelAbort(\n  135      \"global-isel-abort\", cl::Hidden,\n  136      cl::desc(\"Enable abort calls when \\\"global\\\" instruction selection \"\n  ...\n  145  // Targets can return true in targetSchedulesPostRAScheduling() and\n  146  // insert a PostRA scheduling pass wherever it wants.\n  147: cl::opt<bool> MISchedPostRA(\"misched-postra\", cl::Hidden,\n  148    cl::desc(\"Run MachineScheduler post regalloc (independent of preRA sched)\"));\n  149  \n  150  // Experimental option to run live interval analysis early.\n  151: static cl::opt<bool> EarlyLiveIntervals(\"early-live-intervals\", cl::Hidden,\n  152      cl::desc(\"Run live interval analysis earlier in the pipeline\"));\n  153  \n  154  // Experimental option to use CFL-AA in codegen\n  155  enum class CFLAAType { None, Steensgaard, Andersen, Both };\n  156: static cl::opt<CFLAAType> UseCFLAA(\n  157      \"use-cfl-aa-in-codegen\", cl::init(CFLAAType::None), cl::Hidden,\n  158      cl::desc(\"Enable the new, experimental CFL alias analysis in CodeGen\"),\n  ...\n  173  const char *StopBeforeOptName = \"stop-before\";\n  174  \n  175: static cl::opt<std::string>\n  176      StartAfterOpt(StringRef(StartAfterOptName),\n  177                    cl::desc(\"Resume compilation after a specific pass\"),\n  178                    cl::value_desc(\"pass-name\"), cl::init(\"\"), cl::Hidden);\n  179  \n  180: static cl::opt<std::string>\n  181      StartBeforeOpt(StringRef(StartBeforeOptName),\n  182                     cl::desc(\"Resume compilation before a specific pass\"),\n  183                     cl::value_desc(\"pass-name\"), cl::init(\"\"), cl::Hidden);\n  184  \n  185: static cl::opt<std::string>\n  186      StopAfterOpt(StringRef(StopAfterOptName),\n  187                   cl::desc(\"Stop compilation after a specific pass\"),\n  188                   cl::value_desc(\"pass-name\"), cl::init(\"\"), cl::Hidden);\n  189  \n  190: static cl::opt<std::string>\n  191      StopBeforeOpt(StringRef(StopBeforeOptName),\n  192                    cl::desc(\"Stop compilation before a specific pass\"),\n  ...\n  428      return std::string();\n  429    std::string Res;\n  430:   static cl::opt<std::string> *PassNames[] = {&StartAfterOpt, &StartBeforeOpt,\n  431                                                &StopAfterOpt, &StopBeforeOpt};\n  432    static const char *OptNames[] = {StartAfterOptName, StartBeforeOptName,\n  ...\n  771  /// -regalloc=... command line option.\n  772  static FunctionPass *useDefaultRegisterAllocator() { return nullptr; }\n  773: static cl::opt<RegisterRegAlloc::FunctionPassCtor, false,\n  774                 RegisterPassParser<RegisterRegAlloc>>\n  775      RegAlloc(\"regalloc\", cl::Hidden, cl::init(&useDefaultRegisterAllocator),\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TargetSchedule.cpp:\n   32  using namespace llvm;\n   33  \n   34: static cl::opt<bool> EnableSchedModel(\"schedmodel\", cl::Hidden, cl::init(true),\n   35    cl::desc(\"Use TargetSchedModel for latency lookup\"));\n   36  \n   37: static cl::opt<bool> EnableSchedItins(\"scheditins\", cl::Hidden, cl::init(true),\n   38    cl::desc(\"Use InstrItineraryData for latency lookup\"));\n   39  \n\n/home/mw/0-rust/src/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:\n   77  \n   78  // Temporary flag to disable rescheduling.\n   79: static cl::opt<bool>\n   80  EnableRescheduling(\"twoaddr-reschedule\",\n   81                     cl::desc(\"Coalesce copies by rescheduling (default=true)\"),\n   ..\n   84  // Limit the number of dataflow edges to traverse when evaluating the benefit\n   85  // of commuting operands.\n   86: static cl::opt<unsigned> MaxDataFlowEdge(\n   87      \"dataflow-edge-limit\", cl::Hidden, cl::init(3),\n   88      cl::desc(\"Maximum number of dataflow edges to traverse when evaluating \"\n\n/home/mw/0-rust/src/llvm/lib/CodeGen/WinEHPrepare.cpp:\n   39  #define DEBUG_TYPE \"winehprepare\"\n   40  \n   41: static cl::opt<bool> DisableDemotion(\n   42      \"disable-demotion\", cl::Hidden,\n   43      cl::desc(\n   ..\n   45      cl::init(false));\n   46  \n   47: static cl::opt<bool> DisableCleanups(\n   48      \"disable-cleanups\", cl::Hidden,\n   49      cl::desc(\"Do not remove implausible terminators or other similar cleanups\"),\n\n/home/mw/0-rust/src/llvm/lib/DebugInfo/DWARF/SyntaxHighlighting.cpp:\n   16  using namespace syntax;\n   17  \n   18: static cl::opt<cl::boolOrDefault>\n   19      UseColor(\"color\",\n   20               cl::desc(\"use colored syntax highlighting (default=autodetect)\"),\n\n/home/mw/0-rust/src/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp:\n   33  STATISTIC(NumDynamicInsts, \"Number of dynamic instructions executed\");\n   34  \n   35: static cl::opt<bool> PrintVolatile(\"interpreter-print-volatile\", cl::Hidden,\n   36            cl::desc(\"make the interpreter print every volatile load and store\"));\n   37  \n\n/home/mw/0-rust/src/llvm/lib/IR/DIBuilder.cpp:\n   26  using namespace llvm::dwarf;\n   27  \n   28: cl::opt<bool>\n   29      UseDbgAddr(\"use-dbg-addr\",\n   30                 llvm::cl::desc(\"Use llvm.dbg.addr for all local variables\"),\n\n/home/mw/0-rust/src/llvm/lib/IR/DiagnosticHandler.cpp:\n   45  // -pass-remarks\n   46  //    Command line flag to enable emitOptimizationRemark()\n   47: static cl::opt<PassRemarksOpt, true, cl::parser<std::string>> PassRemarks(\n   48      \"pass-remarks\", cl::value_desc(\"pattern\"),\n   49      cl::desc(\"Enable optimization remarks from passes whose name match \"\n   ..\n   54  // -pass-remarks-missed\n   55  //    Command line flag to enable emitOptimizationRemarkMissed()\n   56: static cl::opt<PassRemarksOpt, true, cl::parser<std::string>> PassRemarksMissed(\n   57      \"pass-remarks-missed\", cl::value_desc(\"pattern\"),\n   58      cl::desc(\"Enable missed optimization remarks from passes whose name match \"\n   ..\n   63  // -pass-remarks-analysis\n   64  //    Command line flag to enable emitOptimizationRemarkAnalysis()\n   65: static cl::opt<PassRemarksOpt, true, cl::parser<std::string>>\n   66      PassRemarksAnalysis(\n   67          \"pass-remarks-analysis\", cl::value_desc(\"pattern\"),\n\n/home/mw/0-rust/src/llvm/lib/IR/Dominators.cpp:\n   35  bool llvm::VerifyDomInfo = false;\n   36  #endif\n   37: static cl::opt<bool, true>\n   38      VerifyDomInfoX(\"verify-dom-info\", cl::location(VerifyDomInfo), cl::Hidden,\n   39                     cl::desc(\"Verify dominator info (time consuming)\"));\n\n/home/mw/0-rust/src/llvm/lib/IR/LegacyPassManager.cpp:\n   50  }\n   51  \n   52: static cl::opt<enum PassDebugLevel>\n   53  PassDebugging(\"debug-pass\", cl::Hidden,\n   54                    cl::desc(\"Print PassManager debugging information\"),\n   ..\n   76             cl::Hidden);\n   77  \n   78: static cl::opt<bool> PrintBeforeAll(\"print-before-all\",\n   79                                      llvm::cl::desc(\"Print IR before each pass\"),\n   80                                      cl::init(false), cl::Hidden);\n   81: static cl::opt<bool> PrintAfterAll(\"print-after-all\",\n   82                                     llvm::cl::desc(\"Print IR after each pass\"),\n   83                                     cl::init(false), cl::Hidden);\n   84  \n   85: static cl::opt<bool>\n   86      PrintModuleScope(\"print-module-scope\",\n   87                       cl::desc(\"When printing IR for print-[before|after]{-all} \"\n   ..\n 1736  \n 1737  bool llvm::TimePassesIsEnabled = false;\n 1738: static cl::opt<bool, true> EnableTiming(\n 1739      \"time-passes\", cl::location(TimePassesIsEnabled), cl::Hidden,\n 1740      cl::desc(\"Time each pass, printing elapsed time for each on exit\"));\n\n/home/mw/0-rust/src/llvm/lib/IR/OptBisect.cpp:\n   32  using namespace llvm;\n   33  \n   34: static cl::opt<int> OptBisectLimit(\"opt-bisect-limit\", cl::Hidden,\n   35                                     cl::init(std::numeric_limits<int>::max()),\n   36                                     cl::Optional,\n\n/home/mw/0-rust/src/llvm/lib/IR/SafepointIRVerifier.cpp:\n   57  /// when verification fails, report a message to the console (for FileCheck\n   58  /// usage) and continue execution as if nothing happened.\n   59: static cl::opt<bool> PrintOnly(\"safepoint-ir-verifier-print-only\",\n   60                                 cl::init(false));\n   61  \n\n/home/mw/0-rust/src/llvm/lib/LTO/LTOCodeGenerator.cpp:\n   71  \n   72  namespace llvm {\n   73: cl::opt<bool> LTODiscardValueNames(\n   74      \"lto-discard-value-names\",\n   75      cl::desc(\"Strip names from Value during LTO (other than GlobalValue).\"),\n   ..\n   81      cl::Hidden);\n   82  \n   83: cl::opt<std::string>\n   84      LTORemarksFilename(\"lto-pass-remarks-output\",\n   85                         cl::desc(\"Output filename for pass remarks\"),\n   86                         cl::value_desc(\"filename\"));\n   87  \n   88: cl::opt<bool> LTOPassRemarksWithHotness(\n   89      \"lto-pass-remarks-with-hotness\",\n   90      cl::desc(\"With PGO, include profile count in optimization remarks\"),\n\n/home/mw/0-rust/src/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:\n   61  namespace llvm {\n   62  // Flags -discard-value-names, defined in LTOCodeGenerator.cpp\n   63: extern cl::opt<bool> LTODiscardValueNames;\n   64: extern cl::opt<std::string> LTORemarksFilename;\n   65: extern cl::opt<bool> LTOPassRemarksWithHotness;\n   66  }\n   67  \n   68  namespace {\n   69  \n   70: static cl::opt<int>\n   71      ThreadCount(\"threads\", cl::init(llvm::heavyweight_hardware_concurrency()));\n   72  \n\n/home/mw/0-rust/src/llvm/lib/MC/MCContext.cpp:\n   48  using namespace llvm;\n   49  \n   50: static cl::opt<char*>\n   51  AsSecureLogFileName(\"as-secure-log-file-name\",\n   52          cl::desc(\"As secure log file name (initialized from \"\n\n/home/mw/0-rust/src/llvm/lib/MC/MCParser/AsmParser.cpp:\n   74  MCAsmParserSemaCallback::~MCAsmParserSemaCallback() = default;\n   75  \n   76: static cl::opt<unsigned> AsmMacroMaxNestingDepth(\n   77       \"asm-macro-max-nesting-depth\", cl::init(20), cl::Hidden,\n   78       cl::desc(\"The maximum nesting depth allowed for assembly macros.\"));\n\n/home/mw/0-rust/src/llvm/lib/Object/ArchiveWriter.cpp:\n   42  // the test up we use this flag to pretend like the cutoff happens before\n   43  // 32-bits and instead happens at some much smaller value.\n   44: static cl::opt<int> Sym64Threshold(\"sym64-threshold\", cl::Hidden,\n   45                                     cl::init(32));\n   46  \n\n/home/mw/0-rust/src/llvm/lib/Passes/PassBuilder.cpp:\n  153  using namespace llvm;\n  154  \n  155: static cl::opt<unsigned> MaxDevirtIterations(\"pm-max-devirt-iterations\",\n  156                                               cl::ReallyHidden, cl::init(4));\n  157: static cl::opt<bool>\n  158      RunPartialInlining(\"enable-npm-partial-inlining\", cl::init(false),\n  159                         cl::Hidden, cl::ZeroOrMore,\n  160                         cl::desc(\"Run Partial inlinining pass\"));\n  161  \n  162: static cl::opt<bool>\n  163      RunNewGVN(\"enable-npm-newgvn\", cl::init(false),\n  164                cl::Hidden, cl::ZeroOrMore,\n  165                cl::desc(\"Run NewGVN instead of GVN\"));\n  166  \n  167: static cl::opt<bool> EnableEarlyCSEMemSSA(\n  168      \"enable-npm-earlycse-memssa\", cl::init(true), cl::Hidden,\n  169      cl::desc(\"Enable the EarlyCSE w/ MemorySSA pass for the new PM (default = on)\"));\n  170  \n  171: static cl::opt<bool> EnableGVNHoist(\n  172      \"enable-npm-gvn-hoist\", cl::init(false), cl::Hidden,\n  173      cl::desc(\"Enable the GVN hoisting pass for the new PM (default = off)\"));\n  174  \n  175: static cl::opt<bool> EnableGVNSink(\n  176      \"enable-npm-gvn-sink\", cl::init(false), cl::Hidden,\n  177      cl::desc(\"Enable the GVN hoisting pass for the new PM (default = off)\"));\n\n/home/mw/0-rust/src/llvm/lib/ProfileData/InstrProf.cpp:\n   56  using namespace llvm;\n   57  \n   58: static cl::opt<bool> StaticFuncFullModulePrefix(\n   59      \"static-func-full-module-prefix\", cl::init(true), cl::Hidden,\n   60      cl::desc(\"Use full module build paths in the profile counter names for \"\n   ..\n   69  // the source directory name not being stripped. A non-zero option value here\n   70  // can potentially prevent some inter-module indirect-call-promotions.\n   71: static cl::opt<unsigned> StaticFuncStripDirNamePrefix(\n   72      \"static-func-strip-dirname-prefix\", cl::init(0), cl::Hidden,\n   73      cl::desc(\"Strip specified level of directory name from source path in \"\n\n/home/mw/0-rust/src/llvm/lib/Support/CommandLine.cpp:\n 2013  // -help-list is hidden by default because if Option categories are being used\n 2014  // then -help behaves the same as -help-list.\n 2015: static cl::opt<HelpPrinter, true, parser<bool>> HLOp(\n 2016      \"help-list\",\n 2017      cl::desc(\"Display list of available options (-help-list-hidden for more)\"),\n ....\n 2019      cl::cat(GenericCategory), cl::sub(*AllSubCommands));\n 2020  \n 2021: static cl::opt<HelpPrinter, true, parser<bool>>\n 2022      HLHOp(\"help-list-hidden\", cl::desc(\"Display list of all available options\"),\n 2023            cl::location(UncategorizedHiddenPrinter), cl::Hidden,\n ....\n 2028  // behaviour at runtime depending on whether one or more Option categories have\n 2029  // been declared.\n 2030: static cl::opt<HelpPrinterWrapper, true, parser<bool>>\n 2031      HOp(\"help\", cl::desc(\"Display available options (-help-hidden for more)\"),\n 2032          cl::location(WrappedNormalPrinter), cl::ValueDisallowed,\n 2033          cl::cat(GenericCategory), cl::sub(*AllSubCommands));\n 2034  \n 2035: static cl::opt<HelpPrinterWrapper, true, parser<bool>>\n 2036      HHOp(\"help-hidden\", cl::desc(\"Display all available options\"),\n 2037           cl::location(WrappedHiddenPrinter), cl::Hidden, cl::ValueDisallowed,\n 2038           cl::cat(GenericCategory), cl::sub(*AllSubCommands));\n 2039  \n 2040: static cl::opt<bool> PrintOptions(\n 2041      \"print-options\",\n 2042      cl::desc(\"Print non-default options after command line parsing\"),\n ....\n 2044      cl::sub(*AllSubCommands));\n 2045  \n 2046: static cl::opt<bool> PrintAllOptions(\n 2047      \"print-all-options\",\n 2048      cl::desc(\"Print all option values after command line parsing\"), cl::Hidden,\n ....\n 2148  static VersionPrinter VersionPrinterInstance;\n 2149  \n 2150: static cl::opt<VersionPrinter, true, parser<bool>>\n 2151      VersOp(\"version\", cl::desc(\"Display the version of this program\"),\n 2152             cl::location(VersionPrinterInstance), cl::ValueDisallowed,\n\n/home/mw/0-rust/src/llvm/lib/Support/Debug.cpp:\n   82  // -debug - Command line option to enable the DEBUG statements in the passes.\n   83  // This flag may only be enabled in debug builds.\n   84: static cl::opt<bool, true>\n   85  Debug(\"debug\", cl::desc(\"Enable debug output\"), cl::Hidden,\n   86        cl::location(DebugFlag));\n   ..\n   88  // -debug-buffer-size - Buffer the last N characters of debug output\n   89  //until program termination.\n   90: static cl::opt<unsigned>\n   91  DebugBufferSize(\"debug-buffer-size\",\n   92                  cl::desc(\"Buffer the last N characters of debug output \"\n   ..\n  114  static DebugOnlyOpt DebugOnlyOptLoc;\n  115  \n  116: static cl::opt<DebugOnlyOpt, true, cl::parser<std::string> >\n  117  DebugOnly(\"debug-only\", cl::desc(\"Enable a specific type of debug output (comma separated list of types)\"),\n  118            cl::Hidden, cl::ZeroOrMore, cl::value_desc(\"debug string\"),\n\n/home/mw/0-rust/src/llvm/lib/Support/GraphWriter.cpp:\n   31  using namespace llvm;\n   32  \n   33: static cl::opt<bool> ViewBackground(\"view-background\", cl::Hidden,\n   34    cl::desc(\"Execute graph viewer in the background. Creates tmp file litter.\"));\n   35  \n\n/home/mw/0-rust/src/llvm/lib/Support/RandomNumberGenerator.cpp:\n   31  // http://llvm.org/bugs/show_bug.cgi?id=19665\n   32  //\n   33: // Do not change to cl::opt<uint64_t> since this silently breaks argument parsing.\n   34: static cl::opt<unsigned long long>\n   35      Seed(\"rng-seed\", cl::value_desc(\"seed\"), cl::Hidden,\n   36           cl::desc(\"Seed for the random number generator\"), cl::init(0));\n\n/home/mw/0-rust/src/llvm/lib/Support/Signals.cpp:\n   37  using namespace llvm;\n   38  \n   39: static cl::opt<bool>\n   40      DisableSymbolication(\"disable-symbolication\",\n   41                           cl::desc(\"Disable symbolizing crash backtraces.\"),\n\n/home/mw/0-rust/src/llvm/lib/Support/Statistic.cpp:\n   40  /// what they did.\n   41  ///\n   42: static cl::opt<bool> Stats(\n   43      \"stats\",\n   44      cl::desc(\"Enable statistics output from program (available with Asserts)\"),\n   45      cl::Hidden);\n   46  \n   47: static cl::opt<bool> StatsAsJSON(\"stats-json\",\n   48                                   cl::desc(\"Display statistics as json data\"),\n   49                                   cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Support/Timer.cpp:\n   40  \n   41  namespace {\n   42:   static cl::opt<bool>\n   43    TrackSpace(\"track-memory\", cl::desc(\"Enable -time-passes memory \"\n   44                                        \"tracking (this may be slow)\"),\n   45               cl::Hidden);\n   46  \n   47:   static cl::opt<std::string, true>\n   48    InfoOutputFilename(\"info-output-file\", cl::value_desc(\"filename\"),\n   49                       cl::desc(\"File to append -stats and -timer output to\"),\n\n/home/mw/0-rust/src/llvm/lib/TableGen/Main.cpp:\n   30  using namespace llvm;\n   31  \n   32: static cl::opt<std::string>\n   33  OutputFilename(\"o\", cl::desc(\"Output filename\"), cl::value_desc(\"filename\"),\n   34                 cl::init(\"-\"));\n   35  \n   36: static cl::opt<std::string>\n   37  DependFilename(\"d\",\n   38                 cl::desc(\"Dependency filename\"),\n   ..\n   40                 cl::init(\"\"));\n   41  \n   42: static cl::opt<std::string>\n   43  InputFilename(cl::Positional, cl::desc(\"<input file>\"), cl::init(\"-\"));\n   44  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:\n   50  // Enforce the algorithm to use the scavenged register even when the original\n   51  // destination register is the correct color. Used for testing.\n   52: static cl::opt<bool>\n   53  TransformAll(\"aarch64-a57-fp-load-balancing-force-all\",\n   54               cl::desc(\"Always modify dest registers regardless of color\"),\n   ..\n   57  // Never use the balance information obtained from chains - return a specific\n   58  // color always. Used for testing.\n   59: static cl::opt<unsigned>\n   60  OverrideBalance(\"aarch64-a57-fp-load-balancing-override\",\n   61                cl::desc(\"Ignore balance information, always return \"\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:\n   52  // Allow forcing all i64 operations with equivalent SIMD instructions to use\n   53  // them. For stress-testing the transformation function.\n   54: static cl::opt<bool>\n   55  TransformAll(\"aarch64-simd-scalar-force-all\",\n   56               cl::desc(\"Force use of AdvSIMD scalar instructions everywhere\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:\n   45  // Absolute maximum number of instructions allowed per speculated block.\n   46  // This bypasses all other heuristics, so it should be set fairly high.\n   47: static cl::opt<unsigned> BlockInstrLimit(\n   48      \"aarch64-ccmp-limit\", cl::init(30), cl::Hidden,\n   49      cl::desc(\"Maximum number of instructions per speculated block.\"));\n   50  \n   51  // Stress testing mode - disable heuristics.\n   52: static cl::opt<bool> Stress(\"aarch64-stress-ccmp\", cl::Hidden,\n   53                              cl::desc(\"Turn all knobs to 11\"));\n   54  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:\n  137  #define DEBUG_TYPE \"frame-info\"\n  138  \n  139: static cl::opt<bool> EnableRedZone(\"aarch64-redzone\",\n  140                                     cl::desc(\"enable use of redzone on AArch64\"),\n  141                                     cl::init(false), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:\n   95  STATISTIC(NumOptimizedImms, \"Number of times immediates were optimized\");\n   96  \n   97: static cl::opt<bool>\n   98  EnableAArch64SlrGeneration(\"aarch64-shift-insert-generation\", cl::Hidden,\n   99                             cl::desc(\"Allow AArch64 SLI/SRI formation\"),\n  ...\n  103  // well in the GNU bfd and gold linkers at the moment. Therefore, by\n  104  // default, for now, fall back to GeneralDynamic code generation.\n  105: cl::opt<bool> EnableAArch64ELFLocalDynamicTLSGeneration(\n  106      \"aarch64-elf-ldtls-generation\", cl::Hidden,\n  107      cl::desc(\"Allow AArch64 Local Dynamic TLS code generation\"),\n  108      cl::init(false));\n  109  \n  110: static cl::opt<bool>\n  111  EnableOptimizeLogicalImm(\"aarch64-enable-logical-imm\", cl::Hidden,\n  112                           cl::desc(\"Enable AArch64 logical imm instruction \"\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:\n   55  #include \"AArch64GenInstrInfo.inc\"\n   56  \n   57: static cl::opt<unsigned> TBZDisplacementBits(\n   58      \"aarch64-tbz-offset-bits\", cl::Hidden, cl::init(14),\n   59      cl::desc(\"Restrict range of TB[N]Z instructions (DEBUG)\"));\n   60  \n   61: static cl::opt<unsigned> CBZDisplacementBits(\n   62      \"aarch64-cbz-offset-bits\", cl::Hidden, cl::init(19),\n   63      cl::desc(\"Restrict range of CB[N]Z instructions (DEBUG)\"));\n   64  \n   65: static cl::opt<unsigned>\n   66      BCCDisplacementBits(\"aarch64-bcc-offset-bits\", cl::Hidden, cl::init(19),\n   67                          cl::desc(\"Restrict range of Bcc instructions (DEBUG)\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:\n   54  \n   55  // The LdStLimit limits how far we search for load/store pairs.\n   56: static cl::opt<unsigned> LdStLimit(\"aarch64-load-store-scan-limit\",\n   57                                     cl::init(20), cl::Hidden);\n   58  \n   59  // The UpdateLimit limits how far we search for update instructions when we form\n   60  // pre-/post-index instructions.\n   61: static cl::opt<unsigned> UpdateLimit(\"aarch64-update-scan-limit\", cl::init(100),\n   62                                       cl::Hidden);\n   63  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64MCInstLower.cpp:\n   29  using namespace llvm;\n   30  \n   31: extern cl::opt<bool> EnableAArch64ELFLocalDynamicTLSGeneration;\n   32  \n   33  AArch64MCInstLower::AArch64MCInstLower(MCContext &ctx, AsmPrinter &printer)\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:\n   54  \n   55  // Stress testing mode - disable heuristics.\n   56: static cl::opt<bool> Stress(\"aarch64-stress-promote-const\", cl::Hidden,\n   57                              cl::desc(\"Promote all vector constants\"));\n   58  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64Subtarget.cpp:\n   34  #include \"AArch64GenSubtargetInfo.inc\"\n   35  \n   36: static cl::opt<bool>\n   37  EnableEarlyIfConvert(\"aarch64-early-ifcvt\", cl::desc(\"Enable the early if \"\n   38                       \"converter pass\"), cl::init(true), cl::Hidden);\n   39  \n   40  // If OS supports TBI, use this flag to enable it.\n   41: static cl::opt<bool>\n   42  UseAddressTopByteIgnored(\"aarch64-use-tbi\", cl::desc(\"Assume that top byte of \"\n   43                           \"an address is ignored\"), cl::init(false), cl::Hidden);\n   44  \n   45: static cl::opt<bool>\n   46      UseNonLazyBind(\"aarch64-enable-nonlazybind\",\n   47                     cl::desc(\"Call nonlazybind functions via direct GOT load\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp:\n   44  using namespace llvm;\n   45  \n   46: static cl::opt<bool> EnableCCMP(\"aarch64-enable-ccmp\",\n   47                                  cl::desc(\"Enable the CCMP formation pass\"),\n   48                                  cl::init(true), cl::Hidden);\n   49  \n   50: static cl::opt<bool>\n   51      EnableCondBrTuning(\"aarch64-enable-cond-br-tune\",\n   52                         cl::desc(\"Enable the conditional branch tuning pass\"),\n   53                         cl::init(true), cl::Hidden);\n   54  \n   55: static cl::opt<bool> EnableMCR(\"aarch64-enable-mcr\",\n   56                                 cl::desc(\"Enable the machine combiner pass\"),\n   57                                 cl::init(true), cl::Hidden);\n   58  \n   59: static cl::opt<bool> EnableStPairSuppress(\"aarch64-enable-stp-suppress\",\n   60                                            cl::desc(\"Suppress STP for AArch64\"),\n   61                                            cl::init(true), cl::Hidden);\n   62  \n   63: static cl::opt<bool> EnableAdvSIMDScalar(\n   64      \"aarch64-enable-simd-scalar\",\n   65      cl::desc(\"Enable use of AdvSIMD scalar integer instructions\"),\n   66      cl::init(false), cl::Hidden);\n   67  \n   68: static cl::opt<bool>\n   69      EnablePromoteConstant(\"aarch64-enable-promote-const\",\n   70                            cl::desc(\"Enable the promote constant pass\"),\n   71                            cl::init(true), cl::Hidden);\n   72  \n   73: static cl::opt<bool> EnableCollectLOH(\n   74      \"aarch64-enable-collect-loh\",\n   75      cl::desc(\"Enable the pass that emits the linker optimization hints (LOH)\"),\n   76      cl::init(true), cl::Hidden);\n   77  \n   78: static cl::opt<bool>\n   79      EnableDeadRegisterElimination(\"aarch64-enable-dead-defs\", cl::Hidden,\n   80                                    cl::desc(\"Enable the pass that removes dead\"\n   ..\n   84                                    cl::init(true));\n   85  \n   86: static cl::opt<bool> EnableRedundantCopyElimination(\n   87      \"aarch64-enable-copyelim\",\n   88      cl::desc(\"Enable the redundant copy elimination pass\"), cl::init(true),\n   89      cl::Hidden);\n   90  \n   91: static cl::opt<bool> EnableLoadStoreOpt(\"aarch64-enable-ldst-opt\",\n   92                                          cl::desc(\"Enable the load/store pair\"\n   93                                                   \" optimization pass\"),\n   94                                          cl::init(true), cl::Hidden);\n   95  \n   96: static cl::opt<bool> EnableAtomicTidy(\n   97      \"aarch64-enable-atomic-cfg-tidy\", cl::Hidden,\n   98      cl::desc(\"Run SimplifyCFG after expanding atomic operations\"\n   ..\n  100      cl::init(true));\n  101  \n  102: static cl::opt<bool>\n  103  EnableEarlyIfConversion(\"aarch64-enable-early-ifcvt\", cl::Hidden,\n  104                          cl::desc(\"Run early if-conversion\"),\n  105                          cl::init(true));\n  106  \n  107: static cl::opt<bool>\n  108      EnableCondOpt(\"aarch64-enable-condopt\",\n  109                    cl::desc(\"Enable the condition optimizer pass\"),\n  110                    cl::init(true), cl::Hidden);\n  111  \n  112: static cl::opt<bool>\n  113  EnableA53Fix835769(\"aarch64-fix-cortex-a53-835769\", cl::Hidden,\n  114                  cl::desc(\"Work around Cortex-A53 erratum 835769\"),\n  115                  cl::init(false));\n  116  \n  117: static cl::opt<bool>\n  118      EnableGEPOpt(\"aarch64-enable-gep-opt\", cl::Hidden,\n  119                   cl::desc(\"Enable optimizations on complex GEPs\"),\n  120                   cl::init(false));\n  121  \n  122: static cl::opt<bool>\n  123      BranchRelaxation(\"aarch64-enable-branch-relax\", cl::Hidden, cl::init(true),\n  124                       cl::desc(\"Relax out of range conditional branches\"));\n  125  \n  126  // FIXME: Unify control over GlobalMerge.\n  127: static cl::opt<cl::boolOrDefault>\n  128      EnableGlobalMerge(\"aarch64-enable-global-merge\", cl::Hidden,\n  129                        cl::desc(\"Enable the global merge pass\"));\n  130  \n  131: static cl::opt<bool>\n  132      EnableLoopDataPrefetch(\"aarch64-enable-loop-data-prefetch\", cl::Hidden,\n  133                             cl::desc(\"Enable the loop data prefetch pass\"),\n  134                             cl::init(true));\n  135  \n  136: static cl::opt<int> EnableGlobalISelAtO(\n  137      \"aarch64-enable-global-isel-at-O\", cl::Hidden,\n  138      cl::desc(\"Enable GlobalISel at or below an opt level (-1 to disable)\"),\n  139      cl::init(0));\n  140  \n  141: static cl::opt<bool> EnableFalkorHWPFFix(\"aarch64-enable-falkor-hwpf-fix\",\n  142                                           cl::init(true), cl::Hidden);\n  143  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:\n   22  #define DEBUG_TYPE \"aarch64tti\"\n   23  \n   24: static cl::opt<bool> EnableFalkorHWPFUnrollFix(\"enable-falkor-hwpf-unroll-fix\",\n   25                                                 cl::init(true), cl::Hidden);\n   26  \n\n/home/mw/0-rust/src/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCAsmInfo.cpp:\n   26  };\n   27  \n   28: static cl::opt<AsmWriterVariantTy> AsmWriterVariant(\n   29      \"aarch64-neon-syntax\", cl::init(Default),\n   30      cl::desc(\"Choose style of NEON code to emit from AArch64 backend:\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPUAlwaysInlinePass.cpp:\n   22  namespace {\n   23  \n   24: static cl::opt<bool> StressCalls(\n   25    \"amdgpu-stress-function-calls\",\n   26    cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPUInline.cpp:\n   40  #define DEBUG_TYPE \"inline\"\n   41  \n   42: static cl::opt<int>\n   43  ArgAllocaCost(\"amdgpu-inline-arg-alloca-cost\", cl::Hidden, cl::init(2200),\n   44                cl::desc(\"Cost of alloca argument\"));\n   ..\n   47  // it into registers we gain nothing by agressively inlining functions for that\n   48  // heuristic.\n   49: static cl::opt<unsigned>\n   50  ArgAllocaCutoff(\"amdgpu-inline-arg-alloca-cutoff\", cl::Hidden, cl::init(256),\n   51                  cl::desc(\"Maximum alloca size to use for inline cost\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp:\n   37  using namespace llvm;\n   38  \n   39: static cl::opt<bool> EnablePreLink(\"amdgpu-prelink\",\n   40    cl::desc(\"Enable pre-link mode optimizations\"),\n   41    cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:\n   78  using namespace llvm;\n   79  \n   80: static cl::opt<bool> AnyAddressSpace(\n   81    \"amdgpu-any-address-space-out-arguments\",\n   82    cl::desc(\"Replace pointer out arguments with \"\n   ..\n   85    cl::init(false));\n   86  \n   87: static cl::opt<unsigned> MaxNumRetRegs(\n   88    \"amdgpu-max-return-arg-num-regs\",\n   89    cl::desc(\"Approximately limit number of return registers for replacing out arguments\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:\n   51  using namespace llvm;\n   52  \n   53: static cl::opt<bool> EnableR600StructurizeCFG(\n   54    \"r600-ir-structurize\",\n   55    cl::desc(\"Use StructurizeCFG IR pass\"),\n   56    cl::init(true));\n   57  \n   58: static cl::opt<bool> EnableSROA(\n   59    \"amdgpu-sroa\",\n   60    cl::desc(\"Run SROA after promote alloca pass\"),\n   ..\n   62    cl::init(true));\n   63  \n   64: static cl::opt<bool>\n   65  EnableEarlyIfConversion(\"amdgpu-early-ifcvt\", cl::Hidden,\n   66                          cl::desc(\"Run early if-conversion\"),\n   67                          cl::init(false));\n   68  \n   69: static cl::opt<bool> EnableR600IfConvert(\n   70    \"r600-if-convert\",\n   71    cl::desc(\"Use if conversion pass\"),\n   ..\n   74  \n   75  // Option to disable vectorizer for tests.\n   76: static cl::opt<bool> EnableLoadStoreVectorizer(\n   77    \"amdgpu-load-store-vectorizer\",\n   78    cl::desc(\"Enable load store vectorizer\"),\n   ..\n   81  \n   82  // Option to to control global loads scalarization\n   83: static cl::opt<bool> ScalarizeGlobal(\n   84    \"amdgpu-scalarize-global-loads\",\n   85    cl::desc(\"Enable global load scalarization\"),\n   ..\n   88  \n   89  // Option to run internalize pass.\n   90: static cl::opt<bool> InternalizeSymbols(\n   91    \"amdgpu-internalize-symbols\",\n   92    cl::desc(\"Enable elimination of non-kernel functions and unused globals\"),\n   ..\n   95  \n   96  // Option to inline all early.\n   97: static cl::opt<bool> EarlyInlineAll(\n   98    \"amdgpu-early-inline-all\",\n   99    cl::desc(\"Inline all functions early\"),\n  ...\n  101    cl::Hidden);\n  102  \n  103: static cl::opt<bool> EnableSDWAPeephole(\n  104    \"amdgpu-sdwa-peephole\",\n  105    cl::desc(\"Enable SDWA peepholer\"),\n  ...\n  107  \n  108  // Enable address space based alias analysis\n  109: static cl::opt<bool> EnableAMDGPUAliasAnalysis(\"enable-amdgpu-aa\", cl::Hidden,\n  110    cl::desc(\"Enable AMDGPU Alias Analysis\"),\n  111    cl::init(true));\n  112  \n  113  // Option to enable new waitcnt insertion pass.\n  114: static cl::opt<bool> EnableSIInsertWaitcntsPass(\n  115    \"enable-si-insert-waitcnts\",\n  116    cl::desc(\"Use new waitcnt insertion pass\"),\n  ...\n  118  \n  119  // Option to run late CFG structurizer\n  120: static cl::opt<bool, true> LateCFGStructurize(\n  121    \"amdgpu-late-structurize\",\n  122    cl::desc(\"Enable late CFG structurization\"),\n  ...\n  124    cl::Hidden);\n  125  \n  126: static cl::opt<bool> EnableAMDGPUFunctionCalls(\n  127    \"amdgpu-function-calls\",\n  128    cl::Hidden,\n  ...\n  131  \n  132  // Enable lib calls simplifications\n  133: static cl::opt<bool> EnableLibCallSimplify(\n  134    \"amdgpu-simplify-libcall\",\n  135    cl::desc(\"Enable mdgpu library simplifications\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp:\n   55  #define DEBUG_TYPE \"AMDGPUtti\"\n   56  \n   57: static cl::opt<unsigned> UnrollThresholdPrivate(\n   58    \"amdgpu-unroll-threshold-private\",\n   59    cl::desc(\"Unroll threshold for AMDGPU if private memory used in a loop\"),\n   60    cl::init(2500), cl::Hidden);\n   61  \n   62: static cl::opt<unsigned> UnrollThresholdLocal(\n   63    \"amdgpu-unroll-threshold-local\",\n   64    cl::desc(\"Unroll threshold for AMDGPU if local memory used in a loop\"),\n   65    cl::init(1000), cl::Hidden);\n   66  \n   67: static cl::opt<unsigned> UnrollThresholdIf(\n   68    \"amdgpu-unroll-threshold-if\",\n   69    cl::desc(\"Unroll threshold increment for AMDGPU for each if statement inside loop\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUHSAMetadataStreamer.cpp:\n   23  namespace llvm {\n   24  \n   25: static cl::opt<bool> DumpHSAMetadata(\n   26      \"amdgpu-dump-hsa-metadata\",\n   27      cl::desc(\"Dump AMDGPU HSA Metadata\"));\n   28: static cl::opt<bool> VerifyHSAMetadata(\n   29      \"amdgpu-verify-hsa-metadata\",\n   30      cl::desc(\"Verify AMDGPU HSA Metadata\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/SIFixSGPRCopies.cpp:\n  102  #define DEBUG_TYPE \"si-fix-sgpr-copies\"\n  103  \n  104: static cl::opt<bool> EnableM0Merge(\n  105    \"amdgpu-enable-merge-m0\",\n  106    cl::desc(\"Merge and hoist M0 initializations\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:\n   90  STATISTIC(NumTailCalls, \"Number of tail calls\");\n   91  \n   92: static cl::opt<bool> EnableVGPRIndexMode(\n   93    \"amdgpu-vgpr-index-mode\",\n   94    cl::desc(\"Use GPR indexing mode instead of movrel for vector indexing\"),\n   95    cl::init(false));\n   96  \n   97: static cl::opt<unsigned> AssumeFrameIndexHighZeroBits(\n   98    \"amdgpu-frame-index-zero-bits\",\n   99    cl::desc(\"High bits of frame index assumed to be zero\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/SIInsertSkips.cpp:\n   41  #define DEBUG_TYPE \"si-insert-skips\"\n   42  \n   43: static cl::opt<unsigned> SkipThresholdFlag(\n   44    \"amdgpu-skip-threshold\",\n   45    cl::desc(\"Number of instructions before jumping over divergent control flow\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:\n   66  // code. This is only for making it possible to write reasonably small tests for\n   67  // long branches.\n   68: static cl::opt<unsigned>\n   69  BranchOffsetBits(\"amdgpu-s-branch-bits\", cl::ReallyHidden, cl::init(16),\n   70                   cl::desc(\"Restrict range of branch instructions (DEBUG)\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:\n   44  }\n   45  \n   46: static cl::opt<bool> EnableSpillSGPRToSMEM(\n   47    \"amdgpu-spill-sgpr-to-smem\",\n   48    cl::desc(\"Use scalar stores to spill SGPRs if supported by subtarget\"),\n   49    cl::init(false));\n   50  \n   51: static cl::opt<bool> EnableSpillSGPRToVGPR(\n   52    \"amdgpu-spill-sgpr-to-vgpr\",\n   53    cl::desc(\"Enable spilling VGPRs to SGPRs\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp:\n   97  namespace llvm {\n   98  \n   99: static cl::opt<bool> EnablePackedInlinableLiterals(\n  100      \"enable-packed-inlinable-literals\",\n  101      cl::desc(\"Enable packed inlinable literals (v2f16, v2i16)\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/ARC/ARCFrameLowering.cpp:\n   26  using namespace llvm;\n   27  \n   28: static cl::opt<bool>\n   29      UseSaveRestoreFunclet(\"arc-save-restore-funclet\", cl::Hidden,\n   30                            cl::desc(\"Use arc callee save/restore functions\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp:\n   72  #include \"ARMGenInstrInfo.inc\"\n   73  \n   74: static cl::opt<bool>\n   75  EnableARM3Addr(\"enable-arm-3-addr-conv\", cl::Hidden,\n   76                 cl::desc(\"Enable ARM 2-addr to 3-addr conv\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:\n   71  STATISTIC(NumJTInserted, \"Number of jump table intermediate blocks inserted\");\n   72  \n   73: static cl::opt<bool>\n   74  AdjustJumpTableBlocks(\"arm-adjust-jump-tables\", cl::Hidden, cl::init(true),\n   75            cl::desc(\"Adjust basic block layout to better use TB[BH]\"));\n   76  \n   77: static cl::opt<unsigned>\n   78  CPMaxIteration(\"arm-constant-island-max-iteration\", cl::Hidden, cl::init(30),\n   79            cl::desc(\"The max number of iteration for converge\"));\n   80  \n   81: static cl::opt<bool> SynthesizeThumb1TBB(\n   82      \"arm-synthesize-thumb-1-tbb\", cl::Hidden, cl::init(true),\n   83      cl::desc(\"Use compressed jump tables in Thumb-1 by synthesizing an \"\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:\n   30  #define DEBUG_TYPE \"arm-pseudo\"\n   31  \n   32: static cl::opt<bool>\n   33  VerifyARMPseudo(\"verify-arm-pseudo-expand\", cl::Hidden,\n   34                  cl::desc(\"Verify machine code after expanding ARM pseudos\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMFrameLowering.cpp:\n   68  using namespace llvm;\n   69  \n   70: static cl::opt<bool>\n   71  SpillAlignedNEONRegs(\"align-neon-spills\", cl::Hidden, cl::init(true),\n   72                       cl::desc(\"Align ARM NEON spills in prolog and epilog\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:\n   40  #define DEBUG_TYPE \"arm-isel\"\n   41  \n   42: static cl::opt<bool>\n   43  DisableShifterOp(\"disable-shifter-op\", cl::Hidden,\n   44    cl::desc(\"Disable isel of shifter-op\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMISelLowering.cpp:\n  123    \"Number of constants with their storage promoted into constant pools\");\n  124  \n  125: static cl::opt<bool>\n  126  ARMInterworking(\"arm-interworking\", cl::Hidden,\n  127    cl::desc(\"Enable / disable ARM interworking (for debugging only)\"),\n  128    cl::init(true));\n  129  \n  130: static cl::opt<bool> EnableConstpoolPromotion(\n  131      \"arm-promote-constant\", cl::Hidden,\n  132      cl::desc(\"Enable / disable promotion of unnamed_addr constants into \"\n  133               \"constant pools\"),\n  134      cl::init(false)); // FIXME: set to true by default once PR32780 is fixed\n  135: static cl::opt<unsigned> ConstpoolPromotionMaxSize(\n  136      \"arm-promote-constant-max-size\", cl::Hidden,\n  137      cl::desc(\"Maximum size of constant to promote into a constant pool\"),\n  138      cl::init(64));\n  139: static cl::opt<unsigned> ConstpoolPromotionMaxTotal(\n  140      \"arm-promote-constant-max-total\", cl::Hidden,\n  141      cl::desc(\"Maximum size of ALL constants to promote into a constant pool\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMLoadStoreOptimizer.cpp:\n   88  /// users provoke undefined behaviour by supplying misaligned pointers.\n   89  /// \\see mayCombineMisaligned()\n   90: static cl::opt<bool>\n   91  AssumeMisalignedLoadStores(\"arm-assume-misaligned-load-store\", cl::Hidden,\n   92      cl::init(false), cl::desc(\"Be more conservative in ARM load/store opt\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMSubtarget.cpp:\n   48  #include \"ARMGenSubtargetInfo.inc\"\n   49  \n   50: static cl::opt<bool>\n   51  UseFusedMulOps(\"arm-use-mulops\",\n   52                 cl::init(true), cl::Hidden);\n   ..\n   58  };\n   59  \n   60: static cl::opt<ITMode>\n   61  IT(cl::desc(\"IT block support\"), cl::Hidden, cl::init(DefaultIT),\n   62     cl::ZeroOrMore,\n   ..\n   70  /// ForceFastISel - Use the fast-isel, even for subtargets where it is not\n   71  /// currently supported (for testing only).\n   72: static cl::opt<bool>\n   73  ForceFastISel(\"arm-force-fast-isel\",\n   74                 cl::init(false), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ARMTargetMachine.cpp:\n   54  using namespace llvm;\n   55  \n   56: static cl::opt<bool>\n   57  DisableA15SDOptimization(\"disable-a15-sd-optimization\", cl::Hidden,\n   58                     cl::desc(\"Inhibit optimization of S->D register accesses on A15\"),\n   59                     cl::init(false));\n   60  \n   61: static cl::opt<bool>\n   62  EnableAtomicTidy(\"arm-atomic-cfg-tidy\", cl::Hidden,\n   63                   cl::desc(\"Run SimplifyCFG after expanding atomic operations\"\n   ..\n   65                   cl::init(true));\n   66  \n   67: static cl::opt<bool>\n   68  EnableARMLoadStoreOpt(\"arm-load-store-opt\", cl::Hidden,\n   69                        cl::desc(\"Enable ARM load/store optimization pass\"),\n   ..\n   71  \n   72  // FIXME: Unify control over GlobalMerge.\n   73: static cl::opt<cl::boolOrDefault>\n   74  EnableGlobalMerge(\"arm-global-merge\", cl::Hidden,\n   75                    cl::desc(\"Enable the global merge pass\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:\n   73  enum class ImplicitItModeTy { Always, Never, ARMOnly, ThumbOnly };\n   74  \n   75: static cl::opt<ImplicitItModeTy> ImplicitItMode(\n   76      \"arm-implicit-it\", cl::init(ImplicitItModeTy::ARMOnly),\n   77      cl::desc(\"Allow conditional instructions outdside of an IT block\"),\n   ..\n   85                            \"Warn in ARM, emit implicit ITs in Thumb\")));\n   86  \n   87: static cl::opt<bool> AddBuildAttributes(\"arm-add-build-attributes\",\n   88                                          cl::init(false));\n   89  \n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/MLxExpansionPass.cpp:\n   30  #define DEBUG_TYPE \"mlx-expansion\"\n   31  \n   32: static cl::opt<bool>\n   33  ForceExapnd(\"expand-all-fp-mlx\", cl::init(false), cl::Hidden);\n   34: static cl::opt<unsigned>\n   35  ExpandLimit(\"expand-limit\", cl::init(~0U), cl::Hidden);\n   36  \n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp:\n   35  using namespace llvm;\n   36  \n   37: static cl::opt<bool>\n   38  OldT2IfCvt(\"old-thumb2-ifcvt\", cl::Hidden,\n   39             cl::desc(\"Use old-style Thumb2 if-conversion heuristics\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp:\n   52  STATISTIC(NumLdSts,    \"Number of 32-bit load / store reduced to 16-bit ones\");\n   53  \n   54: static cl::opt<int> ReduceLimit(\"t2-reduce-limit\",\n   55                                  cl::init(-1), cl::Hidden);\n   56: static cl::opt<int> ReduceLimit2Addr(\"t2-reduce-limit2\",\n   57                                       cl::init(-1), cl::Hidden);\n   58: static cl::opt<int> ReduceLimitLdSt(\"t2-reduce-limit3\",\n   59                                       cl::init(-1), cl::Hidden);\n   60  \n\n/home/mw/0-rust/src/llvm/lib/Target/ARM/ThumbRegisterInfo.cpp:\n   34  \n   35  namespace llvm {\n   36: extern cl::opt<bool> ReuseFrameIndexVals;\n   37  }\n   38  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/AsmParser/HexagonAsmParser.cpp:\n   62  using namespace llvm;\n   63  \n   64: static cl::opt<bool> WarnMissingParenthesis(\n   65      \"mwarn-missing-parenthesis\",\n   66      cl::desc(\"Warn for missing parenthesis around predicate registers\"),\n   67      cl::init(true));\n   68: static cl::opt<bool> ErrorMissingParenthesis(\n   69      \"merror-missing-parenthesis\",\n   70      cl::desc(\"Error for missing parenthesis around predicate registers\"),\n   71      cl::init(false));\n   72: static cl::opt<bool> WarnSignedMismatch(\n   73      \"mwarn-sign-mismatch\",\n   74      cl::desc(\"Warn for mismatching a signed and unsigned value\"),\n   75      cl::init(true));\n   76: static cl::opt<bool> WarnNoncontigiousRegister(\n   77      \"mwarn-noncontigious-register\",\n   78      cl::desc(\"Warn for register names that arent contigious\"), cl::init(true));\n   79: static cl::opt<bool> ErrorNoncontigiousRegister(\n   80      \"merror-noncontigious-register\",\n   81      cl::desc(\"Error for register names that aren't contigious\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonAsmPrinter.cpp:\n   63  #define DEBUG_TYPE \"asm-printer\"\n   64  \n   65: static cl::opt<bool> AlignCalls(\n   66           \"hexagon-align-calls\", cl::Hidden, cl::init(true),\n   67            cl::desc(\"Insert falign after call instruction for Hexagon target\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:\n   49  using namespace llvm;\n   50  \n   51: static cl::opt<bool> PreserveTiedOps(\"hexbit-keep-tied\", cl::Hidden,\n   52    cl::init(true), cl::desc(\"Preserve subregisters in tied operands\"));\n   53: static cl::opt<bool> GenExtract(\"hexbit-extract\", cl::Hidden,\n   54    cl::init(true), cl::desc(\"Generate extract instructions\"));\n   55: static cl::opt<bool> GenBitSplit(\"hexbit-bitsplit\", cl::Hidden,\n   56    cl::init(true), cl::desc(\"Generate bitsplit instructions\"));\n   57  \n   58: static cl::opt<unsigned> MaxExtract(\"hexbit-max-extract\", cl::Hidden,\n   59    cl::init(std::numeric_limits<unsigned>::max()));\n   60  static unsigned CountExtract = 0;\n   61: static cl::opt<unsigned> MaxBitSplit(\"hexbit-max-bitsplit\", cl::Hidden,\n   62    cl::init(std::numeric_limits<unsigned>::max()));\n   63  static unsigned CountBitSplit = 0;\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonBranchRelaxation.cpp:\n   35  // Since we have no exact knowledge of code layout, allow some safety buffer\n   36  // for jump target. This is measured in bytes.\n   37: static cl::opt<uint32_t> BranchRelaxSafetyBuffer(\"branch-relax-safety-buffer\",\n   38    cl::init(200), cl::Hidden, cl::ZeroOrMore, cl::desc(\"safety buffer size\"));\n   39  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonCommonGEP.cpp:\n   50  using namespace llvm;\n   51  \n   52: static cl::opt<bool> OptSpeculate(\"commgep-speculate\", cl::init(true),\n   53    cl::Hidden, cl::ZeroOrMore);\n   54  \n   55: static cl::opt<bool> OptEnableInv(\"commgep-inv\", cl::init(true), cl::Hidden,\n   56    cl::ZeroOrMore);\n   57  \n   58: static cl::opt<bool> OptEnableConst(\"commgep-const\", cl::init(true),\n   59    cl::Hidden, cl::ZeroOrMore);\n   60  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<unsigned> CountThreshold(\"hexagon-cext-threshold\",\n   31    cl::init(3), cl::Hidden, cl::ZeroOrMore,\n   32    cl::desc(\"Minimum number of extenders to trigger replacement\"));\n   33  \n   34: static cl::opt<unsigned> ReplaceLimit(\"hexagon-cext-limit\", cl::init(0),\n   35    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Maximum number of replacements\"));\n   36  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:\n   34  \n   35  static\n   36: cl::opt<bool> IsCombinesDisabled(\"disable-merge-into-combines\",\n   37                                   cl::Hidden, cl::ZeroOrMore,\n   38                                   cl::init(false),\n   39                                   cl::desc(\"Disable merging into combines\"));\n   40  static\n   41: cl::opt<bool> IsConst64Disabled(\"disable-const64\",\n   42                                   cl::Hidden, cl::ZeroOrMore,\n   43                                   cl::init(false),\n   44                                   cl::desc(\"Disable generation of const64\"));\n   45  static\n   46: cl::opt<unsigned>\n   47  MaxNumOfInstsBetweenNewValueStoreAndTFR(\"max-num-inst-between-tfr-and-nv-store\",\n   48                     cl::Hidden, cl::init(4),\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cpp:\n  100  } // end namespace llvm\n  101  \n  102: static cl::opt<bool> EnableHexagonBP(\"enable-hexagon-br-prob\", cl::Hidden,\n  103    cl::init(false), cl::desc(\"Enable branch probability info\"));\n  104: static cl::opt<unsigned> SizeLimit(\"eif-limit\", cl::init(6), cl::Hidden,\n  105    cl::desc(\"Size limit in Hexagon early if-conversion\"));\n  106: static cl::opt<bool> SkipExitBranches(\"eif-no-loop-exit\", cl::init(false),\n  107    cl::Hidden, cl::desc(\"Do not convert branches that may exit the loop\"));\n  108  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonExpandCondsets.cpp:\n  123  using namespace llvm;\n  124  \n  125: static cl::opt<unsigned> OptTfrLimit(\"expand-condsets-tfr-limit\",\n  126    cl::init(~0U), cl::Hidden, cl::desc(\"Max number of mux expansions\"));\n  127: static cl::opt<unsigned> OptCoaLimit(\"expand-condsets-coa-limit\",\n  128    cl::init(~0U), cl::Hidden, cl::desc(\"Max number of segment coalescings\"));\n  129  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp:\n   25  using namespace llvm;\n   26  \n   27: static cl::opt<unsigned> MaxLoopRange(\n   28      \"hexagon-loop-range\", cl::Hidden, cl::init(200),\n   29      cl::desc(\"Restrict range of loopN instructions (testing only)\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonFrameLowering.cpp:\n  150  using namespace llvm;\n  151  \n  152: static cl::opt<bool> DisableDeallocRet(\"disable-hexagon-dealloc-ret\",\n  153      cl::Hidden, cl::desc(\"Disable Dealloc Return for Hexagon target\"));\n  154  \n  155: static cl::opt<unsigned> NumberScavengerSlots(\"number-scavenger-slots\",\n  156      cl::Hidden, cl::desc(\"Set the number of scavenger slots\"), cl::init(2),\n  157      cl::ZeroOrMore);\n  158  \n  159: static cl::opt<int> SpillFuncThreshold(\"spill-func-threshold\",\n  160      cl::Hidden, cl::desc(\"Specify O2(not Os) spill func threshold\"),\n  161      cl::init(6), cl::ZeroOrMore);\n  162  \n  163: static cl::opt<int> SpillFuncThresholdOs(\"spill-func-threshold-Os\",\n  164      cl::Hidden, cl::desc(\"Specify Os spill func threshold\"),\n  165      cl::init(1), cl::ZeroOrMore);\n  166  \n  167: static cl::opt<bool> EnableStackOVFSanitizer(\"enable-stackovf-sanitizer\",\n  168      cl::Hidden, cl::desc(\"Enable runtime checks for stack overflow.\"),\n  169      cl::init(false), cl::ZeroOrMore);\n  170  \n  171: static cl::opt<bool> EnableShrinkWrapping(\"hexagon-shrink-frame\",\n  172      cl::init(true), cl::Hidden, cl::ZeroOrMore,\n  173      cl::desc(\"Enable stack frame shrink wrapping\"));\n  174  \n  175: static cl::opt<unsigned> ShrinkLimit(\"shrink-frame-limit\",\n  176      cl::init(std::numeric_limits<unsigned>::max()), cl::Hidden, cl::ZeroOrMore,\n  177      cl::desc(\"Max count of stack frame shrink-wraps\"));\n  178  \n  179: static cl::opt<bool> EnableSaveRestoreLong(\"enable-save-restore-long\",\n  180      cl::Hidden, cl::desc(\"Enable long calls for save-restore stubs.\"),\n  181      cl::init(false), cl::ZeroOrMore);\n  182  \n  183: static cl::opt<bool> EliminateFramePointer(\"hexagon-fp-elim\", cl::init(true),\n  184      cl::Hidden, cl::desc(\"Refrain from using FP whenever possible\"));\n  185  \n  186: static cl::opt<bool> OptimizeSpillSlots(\"hexagon-opt-spill\", cl::Hidden,\n  187      cl::init(true), cl::desc(\"Optimize spill slots\"));\n  188  \n  189  #ifndef NDEBUG\n  190: static cl::opt<unsigned> SpillOptMax(\"spill-opt-max\", cl::Hidden,\n  191      cl::init(std::numeric_limits<unsigned>::max()));\n  192  static unsigned SpillOptCount = 0;\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonGatherPacketize.cpp:\n   19  using namespace llvm;\n   20  \n   21: cl::opt<bool> EnableGatherPacketize(\n   22      \"hexagon-enable-gather-packetize\", cl::Hidden, cl::init(true),\n   23      cl::desc(\"Generate gather packets before packetization\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonGenExtract.cpp:\n   30  using namespace llvm;\n   31  \n   32: static cl::opt<unsigned> ExtractCutoff(\"extract-cutoff\", cl::init(~0U),\n   33    cl::Hidden, cl::desc(\"Cutoff for generating \\\"extract\\\"\"\n   34    \" instructions\"));\n   ..\n   40  // rate \"extract\", since logical bit operations can be merged into compound\n   41  // instructions (as opposed to \"extract\").\n   42: static cl::opt<bool> NoSR0(\"extract-nosr0\", cl::init(true), cl::Hidden,\n   43    cl::desc(\"No extract instruction with offset 0\"));\n   44  \n   45: static cl::opt<bool> NeedAnd(\"extract-needand\", cl::init(true), cl::Hidden,\n   46    cl::desc(\"Require & in extract patterns\"));\n   47  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:\n   48  using namespace llvm;\n   49  \n   50: static cl::opt<unsigned> VRegIndexCutoff(\"insert-vreg-cutoff\", cl::init(~0U),\n   51    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Vreg# cutoff for insert generation.\"));\n   52  // The distance cutoff is selected based on the precheckin-perf results:\n   53  // cutoffs 20, 25, 35, and 40 are worse than 30.\n   54: static cl::opt<unsigned> VRegDistCutoff(\"insert-dist-cutoff\", cl::init(30U),\n   55    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Vreg distance cutoff for insert \"\n   56    \"generation.\"));\n   57  \n   58: static cl::opt<bool> OptTiming(\"insert-timing\", cl::init(false), cl::Hidden,\n   59    cl::ZeroOrMore, cl::desc(\"Enable timing of insert generation\"));\n   60: static cl::opt<bool> OptTimingDetail(\"insert-timing-detail\", cl::init(false),\n   61    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Enable detailed timing of insert \"\n   62    \"generation\"));\n   63  \n   64: static cl::opt<bool> OptSelectAll0(\"insert-all0\", cl::init(false), cl::Hidden,\n   65    cl::ZeroOrMore);\n   66: static cl::opt<bool> OptSelectHas0(\"insert-has0\", cl::init(false), cl::Hidden,\n   67    cl::ZeroOrMore);\n   68  // Whether to construct constant values via \"insert\". Could eliminate constant\n   69  // extenders, but often not practical.\n   70: static cl::opt<bool> OptConst(\"insert-const\", cl::init(false), cl::Hidden,\n   71    cl::ZeroOrMore);\n   72  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:\n   67  \n   68  #ifndef NDEBUG\n   69: static cl::opt<int> HWLoopLimit(\"hexagon-max-hwloop\", cl::Hidden, cl::init(-1));\n   70  \n   71  // Option to create preheader only for a specific function.\n   72: static cl::opt<std::string> PHFn(\"hexagon-hwloop-phfn\", cl::Hidden,\n   73                                   cl::init(\"\"));\n   74  #endif\n   75  \n   76  // Option to create a preheader if one doesn't exist.\n   77: static cl::opt<bool> HWCreatePreheader(\"hexagon-hwloop-preheader\",\n   78      cl::Hidden, cl::init(true),\n   79      cl::desc(\"Add a preheader to a hardware loop if one doesn't exist\"));\n   ..\n   82  // software pipeliner may be unable to find a block suitable to serve as\n   83  // a preheader. In that case SWP will not run.\n   84: static cl::opt<bool> SpecPreheader(\"hwloop-spec-preheader\", cl::init(false),\n   85    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Allow speculation of preheader \"\n   86    \"instructions\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:\n   28  \n   29  static\n   30: cl::opt<bool>\n   31  EnableAddressRebalancing(\"isel-rebalance-addr\", cl::Hidden, cl::init(true),\n   32    cl::desc(\"Rebalance address calculation trees to improve \"\n   ..\n   36  // factoring out a shift.\n   37  static\n   38: cl::opt<bool>\n   39  RebalanceOnlyForOptimizations(\"rebalance-only-opt\", cl::Hidden, cl::init(false),\n   40    cl::desc(\"Rebalance address tree only if this allows optimizations\"));\n   41  \n   42  static\n   43: cl::opt<bool>\n   44  RebalanceOnlyImbalancedTrees(\"rebalance-only-imbal\", cl::Hidden,\n   45    cl::init(false), cl::desc(\"Rebalance address tree only if it is imbalanced\"));\n   46  \n   47: static cl::opt<bool> CheckSingleUse(\"hexagon-isel-su\", cl::Hidden,\n   48    cl::init(true), cl::desc(\"Enable checking of SDNode's single-use status\"));\n   49  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:\n   64  #define DEBUG_TYPE \"hexagon-lowering\"\n   65  \n   66: static cl::opt<bool> EmitJumpTables(\"hexagon-emit-jump-tables\",\n   67    cl::init(true), cl::Hidden,\n   68    cl::desc(\"Control jump table emission on Hexagon target\"));\n   69  \n   70: static cl::opt<bool> EnableHexSDNodeSched(\"enable-hexagon-sdnode-sched\",\n   71    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   72    cl::desc(\"Enable Hexagon SDNode scheduling\"));\n   73  \n   74: static cl::opt<bool> EnableFastMath(\"ffast-math\",\n   75    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   76    cl::desc(\"Enable Fast Math processing\"));\n   77  \n   78: static cl::opt<int> MinimumJumpTables(\"minimum-jump-tables\",\n   79    cl::Hidden, cl::ZeroOrMore, cl::init(5),\n   80    cl::desc(\"Set minimum jump tables\"));\n   81  \n   82: static cl::opt<int> MaxStoresPerMemcpyCL(\"max-store-memcpy\",\n   83    cl::Hidden, cl::ZeroOrMore, cl::init(6),\n   84    cl::desc(\"Max #stores to inline memcpy\"));\n   85  \n   86: static cl::opt<int> MaxStoresPerMemcpyOptSizeCL(\"max-store-memcpy-Os\",\n   87    cl::Hidden, cl::ZeroOrMore, cl::init(4),\n   88    cl::desc(\"Max #stores to inline memcpy\"));\n   89  \n   90: static cl::opt<int> MaxStoresPerMemmoveCL(\"max-store-memmove\",\n   91    cl::Hidden, cl::ZeroOrMore, cl::init(6),\n   92    cl::desc(\"Max #stores to inline memmove\"));\n   93  \n   94: static cl::opt<int> MaxStoresPerMemmoveOptSizeCL(\"max-store-memmove-Os\",\n   95    cl::Hidden, cl::ZeroOrMore, cl::init(4),\n   96    cl::desc(\"Max #stores to inline memmove\"));\n   97  \n   98: static cl::opt<int> MaxStoresPerMemsetCL(\"max-store-memset\",\n   99    cl::Hidden, cl::ZeroOrMore, cl::init(8),\n  100    cl::desc(\"Max #stores to inline memset\"));\n  101  \n  102: static cl::opt<int> MaxStoresPerMemsetOptSizeCL(\"max-store-memset-Os\",\n  103    cl::Hidden, cl::ZeroOrMore, cl::init(4),\n  104    cl::desc(\"Max #stores to inline memset\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:\n   71  #include \"HexagonGenInstrInfo.inc\"\n   72  \n   73: cl::opt<bool> ScheduleInlineAsm(\"hexagon-sched-inline-asm\", cl::Hidden,\n   74    cl::init(false), cl::desc(\"Do not consider inline-asm a scheduling/\"\n   75                              \"packetization boundary.\"));\n   76  \n   77: static cl::opt<bool> EnableBranchPrediction(\"hexagon-enable-branch-prediction\",\n   78    cl::Hidden, cl::init(true), cl::desc(\"Enable branch prediction\"));\n   79  \n   80: static cl::opt<bool> DisableNVSchedule(\"disable-hexagon-nv-schedule\",\n   81    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   82    cl::desc(\"Disable schedule adjustment for new value stores.\"));\n   83  \n   84: static cl::opt<bool> EnableTimingClassLatency(\n   85    \"enable-timing-class-latency\", cl::Hidden, cl::init(false),\n   86    cl::desc(\"Enable timing class latency\"));\n   87  \n   88: static cl::opt<bool> EnableALUForwarding(\n   89    \"enable-alu-forwarding\", cl::Hidden, cl::init(true),\n   90    cl::desc(\"Enable vec alu forwarding\"));\n   91  \n   92: static cl::opt<bool> EnableACCForwarding(\n   93    \"enable-acc-forwarding\", cl::Hidden, cl::init(true),\n   94    cl::desc(\"Enable vec acc forwarding\"));\n   95  \n   96: static cl::opt<bool> BranchRelaxAsmLarge(\"branch-relax-asm-large\",\n   97    cl::init(true), cl::Hidden, cl::ZeroOrMore, cl::desc(\"branch relax asm\"));\n   98  \n   99: static cl::opt<bool> UseDFAHazardRec(\"dfa-hazard-rec\",\n  100    cl::init(true), cl::Hidden, cl::ZeroOrMore,\n  101    cl::desc(\"Use the DFA based hazard recognizer.\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:\n   73  using namespace llvm;\n   74  \n   75: static cl::opt<bool> DisableMemcpyIdiom(\"disable-memcpy-idiom\",\n   76    cl::Hidden, cl::init(false),\n   77    cl::desc(\"Disable generation of memcpy in loop idiom recognition\"));\n   78  \n   79: static cl::opt<bool> DisableMemmoveIdiom(\"disable-memmove-idiom\",\n   80    cl::Hidden, cl::init(false),\n   81    cl::desc(\"Disable generation of memmove in loop idiom recognition\"));\n   82  \n   83: static cl::opt<unsigned> RuntimeMemSizeThreshold(\"runtime-mem-idiom-threshold\",\n   84    cl::Hidden, cl::init(0), cl::desc(\"Threshold (in bytes) for the runtime \"\n   85    \"check guarding the memmove.\"));\n   86  \n   87: static cl::opt<unsigned> CompileTimeMemSizeThreshold(\n   88    \"compile-time-mem-idiom-threshold\", cl::Hidden, cl::init(64),\n   89    cl::desc(\"Threshold (in bytes) to perform the transformation, if the \"\n   90      \"runtime loop count (mem transfer size) is known at compile-time.\"));\n   91  \n   92: static cl::opt<bool> OnlyNonNestedMemmove(\"only-nonnested-memmove-idiom\",\n   93    cl::Hidden, cl::init(true),\n   94    cl::desc(\"Only enable generating memmove in non-nested loops\"));\n   95  \n   96: cl::opt<bool> HexagonVolatileMemcpy(\"disable-hexagon-volatile-memcpy\",\n   97    cl::Hidden, cl::init(false),\n   98    cl::desc(\"Enable Hexagon-specific memcpy for volatile destination.\"));\n   99  \n  100: static cl::opt<unsigned> SimplifyLimit(\"hlir-simplify-limit\", cl::init(10000),\n  101    cl::Hidden, cl::desc(\"Maximum number of simplification steps in HLIR\"));\n  102  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonMachineScheduler.cpp:\n   45  #define DEBUG_TYPE \"machine-scheduler\"\n   46  \n   47: static cl::opt<bool> IgnoreBBRegPressure(\"ignore-bb-reg-pressure\",\n   48      cl::Hidden, cl::ZeroOrMore, cl::init(false));\n   49  \n   50: static cl::opt<unsigned> SchedDebugVerboseLevel(\"misched-verbose-level\",\n   51      cl::Hidden, cl::ZeroOrMore, cl::init(1));\n   52  \n   53: static cl::opt<bool> TopUseShorterTie(\"top-use-shorter-tie\",\n   54      cl::Hidden, cl::ZeroOrMore, cl::init(false));\n   55  \n   56: static cl::opt<bool> BotUseShorterTie(\"bot-use-shorter-tie\",\n   57      cl::Hidden, cl::ZeroOrMore, cl::init(false));\n   58  \n   59: static cl::opt<bool> DisableTCTie(\"disable-tc-tie\",\n   60      cl::Hidden, cl::ZeroOrMore, cl::init(false));\n   61  \n   62  // Check if the scheduler should penalize instructions that are available to\n   63  // early due to a zero-latency dependence.\n   64: static cl::opt<bool> CheckEarlyAvail(\"check-early-avail\", cl::Hidden,\n   65      cl::ZeroOrMore, cl::init(true));\n   66  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonNewValueJump.cpp:\n   56  STATISTIC(NumNVJGenerated, \"Number of New Value Jump Instructions created\");\n   57  \n   58: static cl::opt<int> DbgNVJCount(\"nvj-count\", cl::init(-1), cl::Hidden,\n   59      cl::desc(\"Maximum number of predicated jumps to be converted to \"\n   60      \"New Value Jump\"));\n   61  \n   62: static cl::opt<bool> DisableNewValueJumps(\"disable-nvjump\", cl::Hidden,\n   63      cl::ZeroOrMore, cl::init(false),\n   64      cl::desc(\"Disable New Value Jumps\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp:\n   43  using namespace rdf;\n   44  \n   45: static cl::opt<int> CodeGrowthLimit(\"hexagon-amode-growth-limit\",\n   46    cl::Hidden, cl::init(0), cl::desc(\"Code growth limit for address mode \"\n   47    \"optimization\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonPeephole.cpp:\n   58  #define DEBUG_TYPE \"hexagon-peephole\"\n   59  \n   60: static cl::opt<bool> DisableHexagonPeephole(\"disable-hexagon-peephole\",\n   61      cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   62      cl::desc(\"Disable Peephole Optimization\"));\n   63  \n   64: static cl::opt<bool> DisablePNotP(\"disable-hexagon-pnotp\",\n   65      cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   66      cl::desc(\"Disable Optimization of PNotP\"));\n   67  \n   68: static cl::opt<bool> DisableOptSZExt(\"disable-hexagon-optszext\",\n   69      cl::Hidden, cl::ZeroOrMore, cl::init(true),\n   70      cl::desc(\"Disable Optimization of Sign/Zero Extends\"));\n   71  \n   72: static cl::opt<bool> DisableOptExtTo64(\"disable-hexagon-opt-ext-to-64\",\n   73      cl::Hidden, cl::ZeroOrMore, cl::init(true),\n   74      cl::desc(\"Disable Optimization of extensions to i64.\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonRDFOpt.cpp:\n   48  static unsigned RDFCount = 0;\n   49  \n   50: static cl::opt<unsigned> RDFLimit(\"rdf-limit\",\n   51      cl::init(std::numeric_limits<unsigned>::max()));\n   52: static cl::opt<bool> RDFDump(\"rdf-dump\", cl::init(false));\n   53  \n   54  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonSplitDouble.cpp:\n   52  } // end namespace llvm\n   53  \n   54: static cl::opt<int> MaxHSDR(\"max-hsdr\", cl::Hidden, cl::init(-1),\n   55      cl::desc(\"Maximum number of split partitions\"));\n   56: static cl::opt<bool> MemRefsFixed(\"hsdr-no-mem\", cl::Hidden, cl::init(true),\n   57      cl::desc(\"Do not split loads or stores\"));\n   58  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp:\n   39  #include \"HexagonGenSubtargetInfo.inc\"\n   40  \n   41: static cl::opt<bool> EnableMemOps(\"enable-hexagon-memops\",\n   42    cl::Hidden, cl::ZeroOrMore, cl::ValueDisallowed, cl::init(true),\n   43    cl::desc(\"Generate V4 MEMOP in code generation for Hexagon target\"));\n   44  \n   45: static cl::opt<bool> DisableMemOps(\"disable-hexagon-memops\",\n   46    cl::Hidden, cl::ZeroOrMore, cl::ValueDisallowed, cl::init(false),\n   47    cl::desc(\"Do not generate V4 MEMOP in code generation for Hexagon target\"));\n   48  \n   49: static cl::opt<bool> EnableIEEERndNear(\"enable-hexagon-ieee-rnd-near\",\n   50    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   51    cl::desc(\"Generate non-chopped conversion from fp to int.\"));\n   52  \n   53: static cl::opt<bool> EnableBSBSched(\"enable-bsb-sched\",\n   54    cl::Hidden, cl::ZeroOrMore, cl::init(true));\n   55  \n   56: static cl::opt<bool> EnableTCLatencySched(\"enable-tc-latency-sched\",\n   57    cl::Hidden, cl::ZeroOrMore, cl::init(false));\n   58  \n   59: static cl::opt<bool> EnableDotCurSched(\"enable-cur-sched\",\n   60    cl::Hidden, cl::ZeroOrMore, cl::init(true),\n   61    cl::desc(\"Enable the scheduler to generate .cur\"));\n   62  \n   63: static cl::opt<bool> EnableVecFrwdSched(\"enable-evec-frwd-sched\",\n   64    cl::Hidden, cl::ZeroOrMore, cl::init(true));\n   65  \n   66: static cl::opt<bool> DisableHexagonMISched(\"disable-hexagon-misched\",\n   67    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   68    cl::desc(\"Disable Hexagon MI Scheduling\"));\n   69  \n   70: static cl::opt<bool> EnableSubregLiveness(\"hexagon-subreg-liveness\",\n   71    cl::Hidden, cl::ZeroOrMore, cl::init(true),\n   72    cl::desc(\"Enable subregister liveness tracking for Hexagon\"));\n   73  \n   74: static cl::opt<bool> OverrideLongCalls(\"hexagon-long-calls\",\n   75    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   76    cl::desc(\"If present, forces/disables the use of long calls\"));\n   77  \n   78: static cl::opt<bool> EnablePredicatedCalls(\"hexagon-pred-calls\",\n   79    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   80    cl::desc(\"Consider calls to be predicable\"));\n   81  \n   82: static cl::opt<bool> SchedPredsCloser(\"sched-preds-closer\",\n   83    cl::Hidden, cl::ZeroOrMore, cl::init(true));\n   84  \n   85: static cl::opt<bool> SchedRetvalOptimization(\"sched-retval-optimization\",\n   86    cl::Hidden, cl::ZeroOrMore, cl::init(true));\n   87  \n   88: static cl::opt<bool> EnableCheckBankConflict(\"hexagon-check-bank-conflict\",\n   89    cl::Hidden, cl::ZeroOrMore, cl::init(true),\n   90    cl::desc(\"Enable checking for cache bank conflicts\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp:\n   29  using namespace llvm;\n   30  \n   31: static cl::opt<bool> EnableCExtOpt(\"hexagon-cext\", cl::Hidden, cl::ZeroOrMore,\n   32    cl::init(true), cl::desc(\"Enable Hexagon constant-extender optimization\"));\n   33  \n   34: static cl::opt<bool> EnableRDFOpt(\"rdf-opt\", cl::Hidden, cl::ZeroOrMore,\n   35    cl::init(true), cl::desc(\"Enable RDF-based optimizations\"));\n   36  \n   37: static cl::opt<bool> DisableHardwareLoops(\"disable-hexagon-hwloops\",\n   38    cl::Hidden, cl::desc(\"Disable Hardware Loops for Hexagon target\"));\n   39  \n   40: static cl::opt<bool> DisableAModeOpt(\"disable-hexagon-amodeopt\",\n   41    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   42    cl::desc(\"Disable Hexagon Addressing Mode Optimization\"));\n   43  \n   44: static cl::opt<bool> DisableHexagonCFGOpt(\"disable-hexagon-cfgopt\",\n   45    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   46    cl::desc(\"Disable Hexagon CFG Optimization\"));\n   47  \n   48: static cl::opt<bool> DisableHCP(\"disable-hcp\", cl::init(false), cl::Hidden,\n   49    cl::ZeroOrMore, cl::desc(\"Disable Hexagon constant propagation\"));\n   50  \n   51: static cl::opt<bool> DisableStoreWidening(\"disable-store-widen\",\n   52    cl::Hidden, cl::init(false), cl::desc(\"Disable store widening\"));\n   53  \n   54: static cl::opt<bool> EnableExpandCondsets(\"hexagon-expand-condsets\",\n   55    cl::init(true), cl::Hidden, cl::ZeroOrMore,\n   56    cl::desc(\"Early expansion of MUX\"));\n   57  \n   58: static cl::opt<bool> EnableEarlyIf(\"hexagon-eif\", cl::init(true), cl::Hidden,\n   59    cl::ZeroOrMore, cl::desc(\"Enable early if-conversion\"));\n   60  \n   61: static cl::opt<bool> EnableGenInsert(\"hexagon-insert\", cl::init(true),\n   62    cl::Hidden, cl::desc(\"Generate \\\"insert\\\" instructions\"));\n   63  \n   64: static cl::opt<bool> EnableCommGEP(\"hexagon-commgep\", cl::init(true),\n   65    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Enable commoning of GEP instructions\"));\n   66  \n   67: static cl::opt<bool> EnableGenExtract(\"hexagon-extract\", cl::init(true),\n   68    cl::Hidden, cl::desc(\"Generate \\\"extract\\\" instructions\"));\n   69  \n   70: static cl::opt<bool> EnableGenMux(\"hexagon-mux\", cl::init(true), cl::Hidden,\n   71    cl::desc(\"Enable converting conditional transfers into MUX instructions\"));\n   72  \n   73: static cl::opt<bool> EnableGenPred(\"hexagon-gen-pred\", cl::init(true),\n   74    cl::Hidden, cl::desc(\"Enable conversion of arithmetic operations to \"\n   75    \"predicate instructions\"));\n   76  \n   77: static cl::opt<bool> EnableLoopPrefetch(\"hexagon-loop-prefetch\",\n   78    cl::init(false), cl::Hidden, cl::ZeroOrMore,\n   79    cl::desc(\"Enable loop data prefetch on Hexagon\"));\n   80  \n   81: static cl::opt<bool> DisableHSDR(\"disable-hsdr\", cl::init(false), cl::Hidden,\n   82    cl::desc(\"Disable splitting double registers\"));\n   83  \n   84: static cl::opt<bool> EnableBitSimplify(\"hexagon-bit\", cl::init(true),\n   85    cl::Hidden, cl::desc(\"Bit simplification\"));\n   86  \n   87: static cl::opt<bool> EnableLoopResched(\"hexagon-loop-resched\", cl::init(true),\n   88    cl::Hidden, cl::desc(\"Loop rescheduling\"));\n   89  \n   90: static cl::opt<bool> HexagonNoOpt(\"hexagon-noopt\", cl::init(false),\n   91    cl::Hidden, cl::desc(\"Disable backend optimizations\"));\n   92  \n   93: static cl::opt<bool> EnableVectorPrint(\"enable-hexagon-vector-print\",\n   94    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   95    cl::desc(\"Enable Hexagon Vector print instr pass\"));\n   96  \n   97: static cl::opt<bool> EnableTrapUnreachable(\"hexagon-trap-unreachable\",\n   98    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   99    cl::desc(\"Enable generating trap for unreachable\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:\n   35  using namespace llvm;\n   36  \n   37: static cl::opt<unsigned> SmallDataThreshold(\"hexagon-small-data-threshold\",\n   38    cl::init(8), cl::Hidden,\n   39    cl::desc(\"The maximum size of an object in the sdata section\"));\n   40  \n   41: static cl::opt<bool> NoSmallDataSorting(\"mno-sort-sda\", cl::init(false),\n   42    cl::Hidden, cl::desc(\"Disable small data sections sorting\"));\n   43  \n   44: static cl::opt<bool> StaticsInSData(\"hexagon-statics-in-small-data\",\n   45    cl::init(false), cl::Hidden, cl::ZeroOrMore,\n   46    cl::desc(\"Allow static variables in .sdata\"));\n   47  \n   48: static cl::opt<bool> TraceGVPlacement(\"trace-gv-placement\",\n   49    cl::Hidden, cl::init(false),\n   50    cl::desc(\"Trace global value placement\"));\n   51  \n   52: static cl::opt<bool>\n   53      EmitJtInText(\"hexagon-emit-jt-text\", cl::Hidden, cl::init(false),\n   54                   cl::desc(\"Emit hexagon jump tables in function section\"));\n   55  \n   56: static cl::opt<bool>\n   57      EmitLutInText(\"hexagon-emit-lut-text\", cl::Hidden, cl::init(false),\n   58                   cl::desc(\"Emit hexagon lookup tables in function section\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonTargetTransformInfo.cpp:\n   27  #define DEBUG_TYPE \"hexagontti\"\n   28  \n   29: static cl::opt<bool> EmitLookupTables(\"hexagon-emit-lookup-tables\",\n   30    cl::init(true), cl::Hidden,\n   31    cl::desc(\"Control lookup table emission on Hexagon target\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:\n   55  #define DEBUG_TYPE \"packets\"\n   56  \n   57: static cl::opt<bool> DisablePacketizer(\"disable-packetizer\", cl::Hidden,\n   58    cl::ZeroOrMore, cl::init(false),\n   59    cl::desc(\"Disable Hexagon packetizer pass\"));\n   60  \n   61: cl::opt<bool> Slot1Store(\"slot1-store-slot0-load\", cl::Hidden,\n   62    cl::ZeroOrMore, cl::init(true),\n   63    cl::desc(\"Allow slot1 store and slot0 load\"));\n   64  \n   65: static cl::opt<bool> PacketizeVolatiles(\"hexagon-packetize-volatiles\",\n   66    cl::ZeroOrMore, cl::Hidden, cl::init(true),\n   67    cl::desc(\"Allow non-solo packetization of volatile memory references\"));\n   68  \n   69: static cl::opt<bool> EnableGenAllInsnClass(\"enable-gen-insn\", cl::init(false),\n   70    cl::Hidden, cl::ZeroOrMore, cl::desc(\"Generate all instruction with TC\"));\n   71  \n   72: static cl::opt<bool> DisableVecDblNVStores(\"disable-vecdbl-nv-stores\",\n   73    cl::init(false), cl::Hidden, cl::ZeroOrMore,\n   74    cl::desc(\"Disable vector double new-value-stores\"));\n   75  \n   76: extern cl::opt<bool> ScheduleInlineAsm;\n   77  \n   78  namespace llvm {\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonVectorLoopCarriedReuse.cpp:\n  153            \"Number of values that were reused from a previous iteration.\");\n  154  \n  155: static cl::opt<int> HexagonVLCRIterationLim(\"hexagon-vlcr-iteration-lim\",\n  156      cl::Hidden,\n  157      cl::desc(\"Maximum distance of loop carried dependences that are handled\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/HexagonVectorPrint.cpp:\n   38  #define DEBUG_TYPE \"hexagon-vector-print\"\n   39  \n   40: static cl::opt<bool> TraceHexVectorStoresOnly(\"trace-hex-vector-stores-only\",\n   41    cl::Hidden, cl::ZeroOrMore, cl::init(false),\n   42    cl::desc(\"Enables tracing of vector stores\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:\n   34  #define DEBUG_TYPE \"hexagon-asm-backend\"\n   35  \n   36: static cl::opt<bool> DisableFixup\n   37    (\"mno-fixup\", cl::desc(\"Disable fixing up resolved relocations for Hexagon\"));\n   38  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp:\n   30  using namespace llvm;\n   31  \n   32: static cl::opt<bool>\n   33      RelaxNVChecks(\"relax-nv-checks\", cl::init(false), cl::ZeroOrMore,\n   34                    cl::Hidden, cl::desc(\"Relax checks of new-value validity\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCELFStreamer.cpp:\n   40  using namespace llvm;\n   41  \n   42: static cl::opt<unsigned> GPSize\n   43    (\"gpsize\", cl::NotHidden,\n   44     cl::desc(\"Global Pointer Addressing Size.  The default size is 8.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCShuffler.cpp:\n   29  using namespace llvm;\n   30  \n   31: static cl::opt<bool>\n   32      DisableShuffle(\"disable-hexagon-shuffle\", cl::Hidden, cl::init(false),\n   33                     cl::desc(\"Disable Hexagon instruction shuffling\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp:\n   52  #include \"HexagonGenRegisterInfo.inc\"\n   53  \n   54: cl::opt<bool> llvm::HexagonDisableCompound\n   55    (\"mno-compound\",\n   56     cl::desc(\"Disable looking for compound instructions for Hexagon\"));\n   57  \n   58: cl::opt<bool> llvm::HexagonDisableDuplex\n   59    (\"mno-pairing\",\n   60     cl::desc(\"Disable looking for duplex instructions for Hexagon\"));\n   61  \n   62  namespace { // These flags are to be deprecated\n   63: cl::opt<bool> MV4(\"mv4\", cl::Hidden, cl::desc(\"Build for Hexagon V4\"),\n   64                    cl::init(false));\n   65: cl::opt<bool> MV5(\"mv5\", cl::Hidden, cl::desc(\"Build for Hexagon V5\"),\n   66                    cl::init(false));\n   67: cl::opt<bool> MV55(\"mv55\", cl::Hidden, cl::desc(\"Build for Hexagon V55\"),\n   68                     cl::init(false));\n   69: cl::opt<bool> MV60(\"mv60\", cl::Hidden, cl::desc(\"Build for Hexagon V60\"),\n   70                     cl::init(false));\n   71: cl::opt<bool> MV62(\"mv62\", cl::Hidden, cl::desc(\"Build for Hexagon V62\"),\n   72                     cl::init(false));\n   73: cl::opt<bool> MV65(\"mv65\", cl::Hidden, cl::desc(\"Build for Hexagon V65\"),\n   74                     cl::init(false));\n   75  } // namespace\n   76  \n   77: cl::opt<Hexagon::ArchEnum>\n   78      EnableHVX(\"mhvx\",\n   79        cl::desc(\"Enable Hexagon Vector eXtensions\"),\n   ..\n   86        // Sentinal for flag not present\n   87        cl::init(Hexagon::ArchEnum::V4), cl::ValueOptional);\n   88: static cl::opt<bool>\n   89    DisableHVX(\"mno-hvx\", cl::Hidden, cl::desc(\"Disable Hexagon Vector eXtensions\"));\n   90  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.h:\n   39  \n   40  Target &getTheHexagonTarget();\n   41: extern cl::opt<bool> HexagonDisableCompound;\n   42: extern cl::opt<bool> HexagonDisableDuplex;\n   43  extern const InstrStage HexagonStages[];\n   44  \n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/RDFCopy.cpp:\n   34  \n   35  #ifndef NDEBUG\n   36: static cl::opt<unsigned> CpLimit(\"rdf-cp-limit\", cl::init(0), cl::Hidden);\n   37  static unsigned CpCount = 0;\n   38  #endif\n\n/home/mw/0-rust/src/llvm/lib/Target/Hexagon/RDFLiveness.cpp:\n   53  using namespace rdf;\n   54  \n   55: static cl::opt<unsigned> MaxRecNest(\"rdf-liveness-max-rec\", cl::init(25),\n   56    cl::Hidden, cl::desc(\"Maximum recursion level\"));\n   57  \n\n/home/mw/0-rust/src/llvm/lib/Target/Lanai/LanaiDelaySlotFiller.cpp:\n   27  STATISTIC(FilledSlots, \"Number of delay slots filled\");\n   28  \n   29: static cl::opt<bool>\n   30      NopDelaySlotFiller(\"lanai-nop-delay-filler\", cl::init(false),\n   31                         cl::desc(\"Fill Lanai delay slots with NOPs.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Lanai/LanaiISelLowering.cpp:\n   66  // at call site). Until we can inline mulsi3, generating at most 14 instructions\n   67  // will be faster than invoking mulsi3.\n   68: static cl::opt<int> LanaiLowerConstantMulThreshold(\n   69      \"lanai-constant-mul-threshold\", cl::Hidden,\n   70      cl::desc(\"Maximum number of instruction to generate when lowering constant \"\n\n/home/mw/0-rust/src/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:\n   42  STATISTIC(NumLdStAluCombined, \"Number of memory and ALU instructions combined\");\n   43  \n   44: static llvm::cl::opt<bool> DisableMemAluCombiner(\n   45      \"disable-lanai-mem-alu-combiner\", llvm::cl::init(false),\n   46      llvm::cl::desc(\"Do not combine ALU and memory operators\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp:\n   22  using namespace llvm;\n   23  \n   24: static cl::opt<unsigned> SSThreshold(\n   25      \"lanai-ssection-threshold\", cl::Hidden,\n   26      cl::desc(\"Small data and bss section threshold size (default=0)\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/MSP430/MSP430BranchSelector.cpp:\n   28  #define DEBUG_TYPE \"msp430-branch-select\"\n   29  \n   30: static cl::opt<bool>\n   31      BranchSelectEnabled(\"msp430-branch-select\", cl::Hidden, cl::init(true),\n   32                          cl::desc(\"Expand out of range branches\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/MSP430/MSP430Subtarget.cpp:\n   20  #define DEBUG_TYPE \"msp430-subtarget\"\n   21  \n   22: static cl::opt<MSP430Subtarget::HWMultEnum>\n   23  HWMultModeOption(\"mhwmult\", cl::Hidden,\n   24             cl::desc(\"Hardware multiplier use mode for MSP430\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MCTargetDesc/MipsTargetStreamer.cpp:\n   31  \n   32  namespace {\n   33: static cl::opt<bool> RoundSectionSizes(\n   34      \"mips-round-section-sizes\", cl::init(false),\n   35      cl::desc(\"Round section sizes up to the section alignment\"), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/Mips16ISelLowering.cpp:\n   25  #define DEBUG_TYPE \"mips-lower\"\n   26  \n   27: static cl::opt<bool> DontExpandCondPseudos16(\n   28    \"mips16-dont-expand-cond-pseudo\",\n   29    cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:\n   66  \n   67  // FIXME: This option should be removed once it has received sufficient testing.\n   68: static cl::opt<bool>\n   69  AlignConstantIslands(\"mips-align-constant-islands\", cl::Hidden, cl::init(true),\n   70            cl::desc(\"Align constant islands in code\"));\n   ..\n   72  // Rather than do make check tests with huge amounts of code, we force\n   73  // the test to use this amount.\n   74: static cl::opt<int> ConstantIslandsSmallOffset(\n   75    \"mips-constant-islands-small-offset\",\n   76    cl::init(0),\n   ..\n   80  // For testing purposes we tell it to not use relaxed load forms so that it\n   81  // will split blocks.\n   82: static cl::opt<bool> NoLoadRelaxation(\n   83    \"mips-constant-islands-no-load-relaxation\",\n   84    cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp:\n   58                         \" are not NOP.\");\n   59  \n   60: static cl::opt<bool> DisableDelaySlotFiller(\n   61    \"disable-mips-delay-filler\",\n   62    cl::init(false),\n   ..\n   64    cl::Hidden);\n   65  \n   66: static cl::opt<bool> DisableForwardSearch(\n   67    \"disable-mips-df-forward-search\",\n   68    cl::init(true),\n   ..\n   70    cl::Hidden);\n   71  \n   72: static cl::opt<bool> DisableSuccBBSearch(\n   73    \"disable-mips-df-succbb-search\",\n   74    cl::init(true),\n   ..\n   76    cl::Hidden);\n   77  \n   78: static cl::opt<bool> DisableBackwardSearch(\n   79    \"disable-mips-df-backward-search\",\n   80    cl::init(false),\n   ..\n   92  };\n   93  \n   94: static cl::opt<CompactBranchPolicy> MipsCompactBranchPolicy(\n   95    \"mips-compact-branches\",cl::Optional,\n   96    cl::init(CB_Optimal),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsISelLowering.cpp:\n   83  STATISTIC(NumTailCalls, \"Number of tail calls\");\n   84  \n   85: static cl::opt<bool>\n   86  LargeGOT(\"mxgot\", cl::Hidden,\n   87           cl::desc(\"MIPS: Enable GOT larger than 64k.\"), cl::init(false));\n   88  \n   89: static cl::opt<bool>\n   90  NoZeroDivCheck(\"mno-check-zero-division\", cl::Hidden,\n   91                 cl::desc(\"MIPS: Don't trap on integer division by zero.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsLongBranch.cpp:\n   48  STATISTIC(LongBranches, \"Number of long branches.\");\n   49  \n   50: static cl::opt<bool> SkipLongBranch(\n   51    \"skip-mips-long-branch\",\n   52    cl::init(false),\n   ..\n   54    cl::Hidden);\n   55  \n   56: static cl::opt<bool> ForceLongBranch(\n   57    \"force-mips-long-branch\",\n   58    cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsMachineFunction.cpp:\n   20  using namespace llvm;\n   21  \n   22: static cl::opt<bool>\n   23  FixGlobalBaseReg(\"mips-fix-global-base-reg\", cl::Hidden, cl::init(true),\n   24                   cl::desc(\"Always use $gp as the global base register.\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp:\n   45  #define DEBUG_TYPE \"optimize-mips-pic-call\"\n   46  \n   47: static cl::opt<bool> LoadTargetFromGOT(\"mips-load-target-from-got\",\n   48                                         cl::init(true),\n   49                                         cl::desc(\"Load target address from GOT\"),\n   50                                         cl::Hidden);\n   51  \n   52: static cl::opt<bool> EraseGPOpnd(\"mips-erase-gp-opnd\",\n   53                                   cl::init(true), cl::desc(\"Erase GP Operand\"),\n   54                                   cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsOs16.cpp:\n   23  #define DEBUG_TYPE \"mips-os16\"\n   24  \n   25: static cl::opt<std::string> Mips32FunctionMask(\n   26    \"mips32-function-mask\",\n   27    cl::init(\"\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:\n   53  #define DEBUG_TYPE \"mips-isel\"\n   54  \n   55: static cl::opt<bool>\n   56  UseMipsTailCalls(\"mips-tail-calls\", cl::Hidden,\n   57                      cl::desc(\"MIPS: permit tail calls.\"), cl::init(false));\n   58  \n   59: static cl::opt<bool> NoDPLoadStore(\"mno-ldc1-sdc1\", cl::init(false),\n   60                                     cl::desc(\"Expand double precision loads and \"\n   61                                              \"stores to their single precision \"\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsSubtarget.cpp:\n   34  // FIXME: Maybe this should be on by default when Mips16 is specified\n   35  //\n   36: static cl::opt<bool>\n   37      Mixed16_32(\"mips-mixed-16-32\", cl::init(false),\n   38                 cl::desc(\"Allow for a mixture of Mips16 \"\n   ..\n   40                 cl::Hidden);\n   41  \n   42: static cl::opt<bool> Mips_Os16(\"mips-os16\", cl::init(false),\n   43                                 cl::desc(\"Compile all functions that don't use \"\n   44                                          \"floating point as Mips 16\"),\n   45                                 cl::Hidden);\n   46  \n   47: static cl::opt<bool> Mips16HardFloat(\"mips16-hard-float\", cl::NotHidden,\n   48                                       cl::desc(\"Enable mips16 hard float.\"),\n   49                                       cl::init(false));\n   50  \n   51: static cl::opt<bool>\n   52      Mips16ConstantIslands(\"mips16-constant-islands\", cl::NotHidden,\n   53                            cl::desc(\"Enable mips16 constant islands.\"),\n   54                            cl::init(true));\n   55  \n   56: static cl::opt<bool>\n   57      GPOpt(\"mgpopt\", cl::Hidden,\n   58            cl::desc(\"Enable gp-relative addressing of mips small data items\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/Mips/MipsTargetObjectFile.cpp:\n   21  using namespace llvm;\n   22  \n   23: static cl::opt<unsigned>\n   24  SSThreshold(\"mips-ssection-threshold\", cl::Hidden,\n   25              cl::desc(\"Small data and bss section threshold size (default=8)\"),\n   26              cl::init(8));\n   27  \n   28: static cl::opt<bool>\n   29  LocalSData(\"mlocal-sdata\", cl::Hidden,\n   30             cl::desc(\"MIPS: Use gp_rel for object-local data.\"),\n   31             cl::init(true));\n   32  \n   33: static cl::opt<bool>\n   34  ExternSData(\"mextern-sdata\", cl::Hidden,\n   35              cl::desc(\"MIPS: Use gp_rel for data that is not defined by the \"\n   ..\n   37              cl::init(true));\n   38  \n   39: static cl::opt<bool>\n   40  EmbeddedData(\"membedded-data\", cl::Hidden,\n   41               cl::desc(\"MIPS: Try to allocate variables in the following\"\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCAsmInfo.cpp:\n   20  // -debug-compile - Command line option to inform opt and llc passes to\n   21  // compile for debugging\n   22: static cl::opt<bool> CompileForDebugging(\"debug-compile\",\n   23                                           cl::desc(\"Compile for debugging\"),\n   24                                           cl::Hidden, cl::init(false));\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:\n   94  #define DEPOTNAME \"__local_depot\"\n   95  \n   96: static cl::opt<bool>\n   97  EmitLineNumbers(\"nvptx-emit-line-numbers\", cl::Hidden,\n   98                  cl::desc(\"NVPTX Specific: Emit Line numbers even without -G\"),\n   99                  cl::init(true));\n  100  \n  101: static cl::opt<bool>\n  102  InterleaveSrc(\"nvptx-emit-src\", cl::ZeroOrMore, cl::Hidden,\n  103                cl::desc(\"NVPTX Specific: Emit source line in ptx file\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:\n   69  static unsigned int uniqueCallSite = 0;\n   70  \n   71: static cl::opt<bool> sched4reg(\n   72      \"nvptx-sched4reg\",\n   73      cl::desc(\"NVPTX Specific: schedule for register pressue\"), cl::init(false));\n   74  \n   75: static cl::opt<unsigned>\n   76  FMAContractLevelOpt(\"nvptx-fma-level\", cl::ZeroOrMore, cl::Hidden,\n   77                      cl::desc(\"NVPTX Specific: FMA contraction (0: don't do it\"\n   ..\n   79                      cl::init(2));\n   80  \n   81: static cl::opt<int> UsePrecDivF32(\n   82      \"nvptx-prec-divf32\", cl::ZeroOrMore, cl::Hidden,\n   83      cl::desc(\"NVPTX Specifies: 0 use div.approx, 1 use div.full, 2 use\"\n   ..\n   85      cl::init(2));\n   86  \n   87: static cl::opt<bool> UsePrecSqrtF32(\n   88      \"nvptx-prec-sqrtf32\", cl::Hidden,\n   89      cl::desc(\"NVPTX Specific: 0 use sqrt.approx, 1 use sqrt.rn.\"),\n   90      cl::init(true));\n   91  \n   92: static cl::opt<bool> FtzEnabled(\n   93      \"nvptx-f32ftz\", cl::ZeroOrMore, cl::Hidden,\n   94      cl::desc(\"NVPTX Specific: Flush f32 subnormals to sign-preserving zero.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVPTXSubtarget.cpp:\n   24  #include \"NVPTXGenSubtargetInfo.inc\"\n   25  \n   26: static cl::opt<bool>\n   27      NoF16Math(\"nvptx-no-f16-math\", cl::ZeroOrMore, cl::Hidden,\n   28                cl::desc(\"NVPTX Specific: Disable generation of f16 math ops.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVPTXTargetMachine.cpp:\n   40  // LSV is still relatively new; this switch lets us turn it off in case we\n   41  // encounter (or suspect) a bug.\n   42: static cl::opt<bool>\n   43      DisableLoadStoreVectorizer(\"disable-nvptx-load-store-vectorizer\",\n   44                                 cl::desc(\"Disable load/store vectorizer\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVVMIntrRange.cpp:\n   26  \n   27  // Add !range metadata based on limits of given SM variant.\n   28: static cl::opt<unsigned> NVVMIntrRangeSM(\"nvvm-intr-range-sm\", cl::init(20),\n   29                                           cl::Hidden, cl::desc(\"SM variant\"));\n   30  \n\n/home/mw/0-rust/src/llvm/lib/Target/NVPTX/NVVMReflect.cpp:\n   61  FunctionPass *llvm::createNVVMReflectPass() { return new NVVMReflect(); }\n   62  \n   63: static cl::opt<bool>\n   64  NVVMReflectEnabled(\"nvvm-reflect-enable\", cl::init(true), cl::Hidden,\n   65                     cl::desc(\"NVVM reflection, enabled by default\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/InstPrinter/PPCInstPrinter.cpp:\n   31  // FIXME: Once the integrated assembler supports full register names, tie this\n   32  // to the verbose-asm setting.\n   33: static cl::opt<bool>\n   34  FullRegNames(\"ppc-asm-full-reg-names\", cl::Hidden, cl::init(false),\n   35               cl::desc(\"Use full register names when printing assembly\"));\n   36  \n   37  // Useful for testing purposes. Prints vs{31-63} as v{0-31} respectively.\n   38: static cl::opt<bool>\n   39  ShowVSRNumsAsVR(\"ppc-vsr-nums-as-vr\", cl::Hidden, cl::init(false),\n   40               cl::desc(\"Prints full register names with vs{31-63} as v{0-31}\"));\n   41  \n   42  // Prints full register names with percent symbol.\n   43: static cl::opt<bool>\n   44  FullRegNamesWithPercent(\"ppc-reg-with-percent-prefix\", cl::Hidden,\n   45                          cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCCTRLoops.cpp:\n   67  \n   68  #ifndef NDEBUG\n   69: static cl::opt<int> CTRLoopLimit(\"ppc-max-ctrloop\", cl::Hidden, cl::init(-1));\n   70  #endif\n   71  \n   72  // The latency of mtctr is only justified if there are more than 4\n   73  // comparisons that will be removed as a result.\n   74: static cl::opt<unsigned>\n   75  SmallCTRLoopThreshold(\"min-ctr-loop-threshold\", cl::init(4), cl::Hidden,\n   76                        cl::desc(\"Loops with a constant trip count smaller than \"\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCExpandISEL.cpp:\n   38  // -misel or the platform supports ISEL by default, still generate the\n   39  // ISEL instruction, else expand it.\n   40: static cl::opt<bool>\n   41      GenerateISEL(\"ppc-gen-isel\",\n   42                   cl::desc(\"Enable generating the ISEL instruction.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:\n   84  \n   85  // FIXME: Remove this once the bug has been fixed!\n   86: cl::opt<bool> ANDIGlueBug(\"expose-ppc-andi-glue-bug\",\n   87  cl::desc(\"expose the ANDI glue bug on PPC\"), cl::Hidden);\n   88  \n   89: static cl::opt<bool>\n   90      UseBitPermRewriter(\"ppc-use-bit-perm-rewriter\", cl::init(true),\n   91                         cl::desc(\"use aggressive ppc isel for bit permutations\"),\n   92                         cl::Hidden);\n   93: static cl::opt<bool> BPermRewriterNoMasking(\n   94      \"ppc-bit-perm-rewriter-stress-rotates\",\n   95      cl::desc(\"stress rotate selection in aggressive ppc isel for \"\n   ..\n   97      cl::Hidden);\n   98  \n   99: static cl::opt<bool> EnableBranchHint(\n  100    \"ppc-use-branch-hint\", cl::init(true),\n  101      cl::desc(\"Enable static hinting of branches on ppc\"),\n  ...\n  106    ICGPR_SextI32, ICGPR_ZextI64, ICGPR_SextI64 };\n  107  \n  108: static cl::opt<ICmpInGPRType> CmpInGPR(\n  109    \"ppc-gpr-icmps\", cl::Hidden, cl::init(ICGPR_All),\n  110    cl::desc(\"Specify the types of comparisons to emit GPR-only code for.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:\n  100  #define DEBUG_TYPE \"ppc-lowering\"\n  101  \n  102: static cl::opt<bool> DisablePPCPreinc(\"disable-ppc-preinc\",\n  103  cl::desc(\"disable preincrement load/store generation on PPC\"), cl::Hidden);\n  104  \n  105: static cl::opt<bool> DisableILPPref(\"disable-ppc-ilp-pref\",\n  106  cl::desc(\"disable setting the node scheduling preference to ILP on PPC\"), cl::Hidden);\n  107  \n  108: static cl::opt<bool> DisablePPCUnaligned(\"disable-ppc-unaligned\",\n  109  cl::desc(\"disable unaligned load/store generation on PPC\"), cl::Hidden);\n  110  \n  111: static cl::opt<bool> DisableSCO(\"disable-ppc-sco\",\n  112  cl::desc(\"disable sibling call optimization on ppc\"), cl::Hidden);\n  113  \n  ...\n  118  \n  119  // FIXME: Remove this once the bug has been fixed!\n  120: extern cl::opt<bool> ANDIGlueBug;\n  121  \n  122  PPCTargetLowering::PPCTargetLowering(const PPCTargetMachine &TM,\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:\n   61              cl::desc(\"Disable analysis for CTR loops\"));\n   62  \n   63: static cl::opt<bool> DisableCmpOpt(\"disable-ppc-cmp-opt\",\n   64  cl::desc(\"Disable compare instruction optimization\"), cl::Hidden);\n   65  \n   66: static cl::opt<bool> VSXSelfCopyCrash(\"crash-on-ppc-vsx-self-copy\",\n   67  cl::desc(\"Causes the backend to crash instead of generating a nop VSX copy\"),\n   68  cl::Hidden);\n   69  \n   70: static cl::opt<bool>\n   71  UseOldLatencyCalc(\"ppc-old-latency-calc\", cl::Hidden,\n   72    cl::desc(\"Use the old (incorrect) instruction latency calculation\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCLoopPreIncPrep.cpp:\n   59  // By default, we limit this to creating 16 PHIs (which is a little over half\n   60  // of the allocatable register set).\n   61: static cl::opt<unsigned> MaxVars(\"ppc-preinc-prep-max-vars\",\n   62                                   cl::Hidden, cl::init(16),\n   63    cl::desc(\"Potential PHI threshold for PPC preinc loop prep\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:\n   50            \"to reg-imm ones\");\n   51  \n   52: static cl::opt<bool>\n   53  FixedPointRegToImm(\"ppc-reg-to-imm-fixed-point\", cl::Hidden, cl::init(true),\n   54                     cl::desc(\"Iterate to a fixed point when attempting to \"\n   55                              \"convert reg-reg instructions to reg-imm\"));\n   56  \n   57: static cl::opt<bool>\n   58  ConvertRegReg(\"ppc-convert-rr-to-ri\", cl::Hidden, cl::init(true),\n   59                cl::desc(\"Convert eligible reg+reg instructions to reg+imm\"));\n   60  \n   61: static cl::opt<bool>\n   62      EnableSExtElimination(\"ppc-eliminate-signext\",\n   63                            cl::desc(\"enable elimination of sign-extensions\"),\n   64                            cl::init(false), cl::Hidden);\n   65  \n   66: static cl::opt<bool>\n   67      EnableZExtElimination(\"ppc-eliminate-zeroext\",\n   68                            cl::desc(\"enable elimination of zero-extensions\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp:\n   35            \"Number of instructions deleted in pre-emit peephole\");\n   36  \n   37: static cl::opt<bool>\n   38  RunPreEmitPeephole(\"ppc-late-peephole\", cl::Hidden, cl::init(true),\n   39                     cl::desc(\"Run pre-emit peephole optimizations.\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp:\n   54  STATISTIC(InflateGP8RC, \"Number of g8rc inputs for getLargestLegalClass\");\n   55  \n   56: static cl::opt<bool>\n   57  EnableBasePointer(\"ppc-use-base-pointer\", cl::Hidden, cl::init(true),\n   58           cl::desc(\"Enable use of a base pointer for complex stack frames\"));\n   59  \n   60: static cl::opt<bool>\n   61  AlwaysBasePointer(\"ppc-always-use-base-pointer\", cl::Hidden, cl::init(false),\n   62           cl::desc(\"Force the use of a base pointer in every function\"));\n   63  \n   64: static cl::opt<bool>\n   65  EnableGPRToVecSpills(\"ppc-enable-gpr-to-vsr-spills\", cl::Hidden, cl::init(false),\n   66           cl::desc(\"Enable spills from gpr to vsr rather than stack\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCSubtarget.cpp:\n   34  #include \"PPCGenSubtargetInfo.inc\"\n   35  \n   36: static cl::opt<bool> UseSubRegLiveness(\"ppc-track-subreg-liveness\",\n   37  cl::desc(\"Enable subregister liveness tracking for PPC\"), cl::Hidden);\n   38  \n   39: static cl::opt<bool> QPXStackUnaligned(\"qpx-stack-unaligned\",\n   40    cl::desc(\"Even when QPX is enabled the stack is not 32-byte aligned\"),\n   41    cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp:\n   42  \n   43  \n   44: static cl::opt<bool>\n   45      EnableBranchCoalescing(\"enable-ppc-branch-coalesce\", cl::Hidden,\n   46                             cl::desc(\"enable coalescing of duplicate branches for PPC\"));\n   ..\n   53                              cl::desc(\"Disable PPC loop preinc prep\"));\n   54  \n   55: static cl::opt<bool>\n   56  VSXFMAMutateEarly(\"schedule-ppc-vsx-fma-mutation-early\",\n   57    cl::Hidden, cl::desc(\"Schedule VSX FMA instruction mutation early\"));\n   ..\n   69                              cl::desc(\"Disable machine peepholes for PPC\"));\n   70  \n   71: static cl::opt<bool>\n   72  EnableGEPOpt(\"ppc-gep-opt\", cl::Hidden,\n   73               cl::desc(\"Enable optimizations on complex GEPs\"),\n   74               cl::init(true));\n   75  \n   76: static cl::opt<bool>\n   77  EnablePrefetch(\"enable-ppc-prefetching\",\n   78                    cl::desc(\"disable software prefetching on PPC\"),\n   79                    cl::init(false), cl::Hidden);\n   80  \n   81: static cl::opt<bool>\n   82  EnableExtraTOCRegDeps(\"enable-ppc-extra-toc-reg-deps\",\n   83                        cl::desc(\"Add extra TOC register dependencies\"),\n   84                        cl::init(true), cl::Hidden);\n   85  \n   86: static cl::opt<bool>\n   87  EnableMachineCombinerPass(\"ppc-machine-combiner\",\n   88                            cl::desc(\"Enable the machine combiner pass\"),\n   89                            cl::init(true), cl::Hidden);\n   90  \n   91: static cl::opt<bool>\n   92    ReduceCRLogical(\"ppc-reduce-cr-logicals\",\n   93                    cl::desc(\"Expand eligible cr-logical binary ops to branches\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp:\n   19  #define DEBUG_TYPE \"ppctti\"\n   20  \n   21: static cl::opt<bool> DisablePPCConstHoist(\"disable-ppc-constant-hoisting\",\n   22  cl::desc(\"disable constant hoisting on PPC\"), cl::init(false), cl::Hidden);\n   23  \n   24  // This is currently only used for the data prefetch pass which is only enabled\n   25  // for BG/Q by default.\n   26: static cl::opt<unsigned>\n   27  CacheLineSize(\"ppc-loop-prefetch-cache-line\", cl::Hidden, cl::init(64),\n   28                cl::desc(\"The loop prefetch cache line size\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/PowerPC/PPCVSXFMAMutate.cpp:\n   44  // See: http://lists.llvm.org/pipermail/llvm-dev/2016-February/095669.html\n   45  //      http://reviews.llvm.org/D17087\n   46: static cl::opt<bool> DisableVSXFMAMutate(\n   47      \"disable-ppc-vsx-fma-mutation\",\n   48      cl::desc(\"Disable VSX FMA instruction mutation\"), cl::init(true),\n\n/home/mw/0-rust/src/llvm/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp:\n   30  #include \"RISCVGenAsmWriter.inc\"\n   31  \n   32: static cl::opt<bool>\n   33  NoAliases(\"riscv-no-aliases\",\n   34              cl::desc(\"Disable the emission of assembler pseudo instructions\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/Sparc/DelaySlotFiller.cpp:\n   31  STATISTIC(FilledSlots, \"Number of delay slots filled\");\n   32  \n   33: static cl::opt<bool> DisableDelaySlotFiller(\n   34    \"disable-sparc-delay-filler\",\n   35    cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/Sparc/SparcFrameLowering.cpp:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<bool>\n   31  DisableLeafProc(\"disable-sparc-leaf-proc\",\n   32                  cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Target/Sparc/SparcRegisterInfo.cpp:\n   31  #include \"SparcGenRegisterInfo.inc\"\n   32  \n   33: static cl::opt<bool>\n   34  ReserveAppRegisters(\"sparc-reserve-app-registers\", cl::Hidden, cl::init(false),\n   35                      cl::desc(\"Reserve application registers (%g2-%g4)\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.cpp:\n   39  // scheduler should try to look for other instructions (not using the\n   40  // critical resource).\n   41: static cl::opt<int> ProcResCostLim(\"procres-cost-lim\", cl::Hidden,\n   42                                     cl::desc(\"The OOO window for processor \"\n   43                                              \"resources during scheduling.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp:\n   35  // which is not valid WebAssembly, though it may be more convenient for writing\n   36  // LLVM unit tests with.\n   37: static cl::opt<bool> DisableWebAssemblyExplicitLocals(\n   38      \"disable-wasm-explicit-locals\", cl::ReallyHidden,\n   39      cl::desc(\"WebAssembly: Disable emission of get_local/set_local.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp:\n   37  #define DEBUG_TYPE \"wasm-fix-function-bitcasts\"\n   38  \n   39: static cl::opt<bool> TemporaryWorkarounds(\n   40    \"wasm-temporary-workarounds\",\n   41    cl::desc(\"Apply certain temporary workarounds\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/WebAssembly/WebAssemblyPeephole.cpp:\n   25  #define DEBUG_TYPE \"wasm-peephole\"\n   26  \n   27: static cl::opt<bool> DisableWebAssemblyFallthroughReturnOpt(\n   28      \"disable-wasm-fallthrough-return-opt\", cl::Hidden,\n   29      cl::desc(\"WebAssembly: Disable fallthrough-return optimizations.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/WebAssembly/WebAssemblyTargetMachine.cpp:\n   31  \n   32  // Emscripten's asm.js-style exception handling\n   33: static cl::opt<bool> EnableEmException(\n   34      \"enable-emscripten-cxx-exceptions\",\n   35      cl::desc(\"WebAssembly Emscripten-style exception handling\"),\n   ..\n   37  \n   38  // Emscripten's asm.js-style setjmp/longjmp handling\n   39: static cl::opt<bool> EnableEmSjLj(\n   40      \"enable-emscripten-sjlj\",\n   41      cl::desc(\"WebAssembly Emscripten-style setjmp/longjmp handling\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/AsmParser/X86AsmInstrumentation.cpp:\n  101  using namespace llvm;\n  102  \n  103: static cl::opt<bool> ClAsanInstrumentAssembly(\n  104      \"asan-instrument-assembly\",\n  105      cl::desc(\"instrument assembly with AddressSanitizer checks\"), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp:\n   25  };\n   26  \n   27: static cl::opt<AsmWriterFlavorTy> AsmWriterFlavor(\n   28      \"x86-asm-syntax\", cl::init(ATT), cl::Hidden,\n   29      cl::desc(\"Choose style of code to emit from X86 backend:\"),\n   ..\n   31                 clEnumValN(Intel, \"intel\", \"Emit Intel-style assembly\")));\n   32  \n   33: static cl::opt<bool>\n   34  MarkedJTDataRegions(\"mark-data-regions\", cl::init(true),\n   35    cl::desc(\"Mark code section jump table data regions.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86CallFrameOptimization.cpp:\n   52  #define DEBUG_TYPE \"x86-cf-opt\"\n   53  \n   54: static cl::opt<bool>\n   55      NoX86CFOpt(\"no-x86-call-frame-opt\",\n   56                 cl::desc(\"Avoid optimizing x86 call frames for size\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86CmovConversion.cpp:\n   89  \n   90  // This internal switch can be used to turn off the cmov/branch optimization.\n   91: static cl::opt<bool>\n   92      EnableCmovConverter(\"x86-cmov-converter\",\n   93                          cl::desc(\"Enable the X86 cmov-to-branch optimization.\"),\n   94                          cl::init(true), cl::Hidden);\n   95  \n   96: static cl::opt<unsigned>\n   97      GainCycleThreshold(\"x86-cmov-converter-threshold\",\n   98                         cl::desc(\"Minimum gain per loop (in cycles) threshold.\"),\n   99                         cl::init(4), cl::Hidden);\n  100  \n  101: static cl::opt<bool> ForceMemOperand(\n  102      \"x86-cmov-converter-force-mem-operand\",\n  103      cl::desc(\"Convert cmovs to branches whenever they have memory operands.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86DomainReassignment.cpp:\n   39  STATISTIC(NumClosuresConverted, \"Number of closures converted by the pass\");\n   40  \n   41: static cl::opt<bool> DisableX86DomainReassignment(\n   42      \"disable-x86-domain-reassignment\", cl::Hidden,\n   43      cl::desc(\"X86: Disable Virtual Register Reassignment.\"), cl::init(false));\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86FixupBWInsts.cpp:\n   67  \n   68  // Option to allow this optimization pass to have fine-grained control.\n   69: static cl::opt<bool>\n   70      FixupBWInsts(\"fixup-byte-word-insts\",\n   71                   cl::desc(\"Change byte and word instructions to larger sizes\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86ISelLowering.cpp:\n   68  STATISTIC(NumTailCalls, \"Number of tail calls\");\n   69  \n   70: static cl::opt<bool> ExperimentalVectorWideningLegalization(\n   71      \"x86-experimental-vector-widening-legalization\", cl::init(false),\n   72      cl::desc(\"Enable an experimental vector type legalization through widening \"\n   ..\n   74      cl::Hidden);\n   75  \n   76: static cl::opt<int> ExperimentalPrefLoopAlignment(\n   77      \"x86-experimental-pref-loop-alignment\", cl::init(4),\n   78      cl::desc(\"Sets the preferable loop alignment for experiments \"\n   ..\n   81      cl::Hidden);\n   82  \n   83: static cl::opt<bool> MulConstantOptimization(\n   84      \"mul-constant-optimization\", cl::init(true),\n   85      cl::desc(\"Replace 'mul x, Const' with more effective instructions like \"\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86InstrInfo.cpp:\n   47  #include \"X86GenInstrInfo.inc\"\n   48  \n   49: static cl::opt<bool>\n   50      NoFusing(\"disable-spill-fusing\",\n   51               cl::desc(\"Disable fusing of spill code into instructions\"),\n   52               cl::Hidden);\n   53: static cl::opt<bool>\n   54  PrintFailedFusing(\"print-failed-fuse-candidates\",\n   55                    cl::desc(\"Print instructions that the allocator wants to\"\n   56                             \" fuse, but the X86 backend currently can't\"),\n   57                    cl::Hidden);\n   58: static cl::opt<bool>\n   59  ReMatPICStubLoad(\"remat-pic-stub-load\",\n   60                   cl::desc(\"Re-materialize load from stub in PIC mode\"),\n   61                   cl::init(false), cl::Hidden);\n   62: static cl::opt<unsigned>\n   63  PartialRegUpdateClearance(\"partial-reg-update-clearance\",\n   64                            cl::desc(\"Clearance between two register writes \"\n   ..\n   66                                     \"register update\"),\n   67                            cl::init(64), cl::Hidden);\n   68: static cl::opt<unsigned>\n   69  UndefRegClearance(\"undef-reg-clearance\",\n   70                    cl::desc(\"How many idle instructions we would like before \"\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86OptimizeLEAs.cpp:\n   53  #define DEBUG_TYPE \"x86-optimize-LEAs\"\n   54  \n   55: static cl::opt<bool>\n   56      DisableX86LEAOpt(\"disable-x86-lea-opt\", cl::Hidden,\n   57                       cl::desc(\"X86: Disable LEA optimizations.\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86RegisterInfo.cpp:\n   39  #include \"X86GenRegisterInfo.inc\"\n   40  \n   41: static cl::opt<bool>\n   42  EnableBasePointer(\"x86-use-base-pointer\", cl::Hidden, cl::init(true),\n   43            cl::desc(\"Enable use of a base pointer for complex stack frames\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86Subtarget.cpp:\n   49  // Temporary option to control early if-conversion for x86 while adding machine\n   50  // models.\n   51: static cl::opt<bool>\n   52  X86EarlyIfConv(\"x86-early-ifcvt\", cl::Hidden,\n   53                 cl::desc(\"Enable early if-conversion on X86\"));\n\n/home/mw/0-rust/src/llvm/lib/Target/X86/X86TargetMachine.cpp:\n   51  using namespace llvm;\n   52  \n   53: static cl::opt<bool> EnableMachineCombinerPass(\"x86-machine-combiner\",\n   54                                 cl::desc(\"Enable the machine combiner pass\"),\n   55                                 cl::init(true), cl::Hidden);\n   ..\n  273  // Command line options for x86\n  274  //===----------------------------------------------------------------------===//\n  275: static cl::opt<bool>\n  276  UseVZeroUpper(\"x86-use-vzeroupper\", cl::Hidden,\n  277    cl::desc(\"Minimize AVX to SSE transition penalty\"),\n\n/home/mw/0-rust/src/llvm/lib/Target/XCore/XCoreLowerThreadLocal.cpp:\n   31  using namespace llvm;\n   32  \n   33: static cl::opt<unsigned> MaxThreads(\n   34    \"xcore-max-threads\", cl::Optional,\n   35    cl::desc(\"Maximum number of threads (for emulation thread-local storage)\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:\n   35  /// likely can't do anything useful for call sites with a large number of\n   36  /// possible targets, anyway.\n   37: static cl::opt<unsigned> MaxFunctionsPerValue(\n   38      \"cvp-max-functions-per-value\", cl::Hidden, cl::init(4),\n   39      cl::desc(\"The maximum number of functions to track per lattice value\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:\n   79  // in C/C++ code compiled by clang:\n   80  // http://lists.llvm.org/pipermail/cfe-dev/2017-January/052066.html\n   81: static cl::opt<bool> EnableNonnullArgPropagation(\n   82      \"enable-nonnull-arg-prop\", cl::Hidden,\n   83      cl::desc(\"Try to propagate nonnull argument attributes from callsites to \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/FunctionImport.cpp:\n   67  \n   68  /// Limit on instruction count of imported functions.\n   69: static cl::opt<unsigned> ImportInstrLimit(\n   70      \"import-instr-limit\", cl::init(100), cl::Hidden, cl::value_desc(\"N\"),\n   71      cl::desc(\"Only import functions with less than N instructions\"));\n   72  \n   73: static cl::opt<float>\n   74      ImportInstrFactor(\"import-instr-evolution-factor\", cl::init(0.7),\n   75                        cl::Hidden, cl::value_desc(\"x\"),\n   ..\n   78                                 \"before processing newly imported functions\"));\n   79  \n   80: static cl::opt<float> ImportHotInstrFactor(\n   81      \"import-hot-evolution-factor\", cl::init(1.0), cl::Hidden,\n   82      cl::value_desc(\"x\"),\n   ..\n   85               \"before processing newly imported functions\"));\n   86  \n   87: static cl::opt<float> ImportHotMultiplier(\n   88      \"import-hot-multiplier\", cl::init(10.0), cl::Hidden, cl::value_desc(\"x\"),\n   89      cl::desc(\"Multiply the `import-instr-limit` threshold for hot callsites\"));\n   90  \n   91: static cl::opt<float> ImportCriticalMultiplier(\n   92      \"import-critical-multiplier\", cl::init(100.0), cl::Hidden,\n   93      cl::value_desc(\"x\"),\n   ..\n   96  \n   97  // FIXME: This multiplier was not really tuned up.\n   98: static cl::opt<float> ImportColdMultiplier(\n   99      \"import-cold-multiplier\", cl::init(0), cl::Hidden, cl::value_desc(\"N\"),\n  100      cl::desc(\"Multiply the `import-instr-limit` threshold for cold callsites\"));\n  101  \n  102: static cl::opt<bool> PrintImports(\"print-imports\", cl::init(false), cl::Hidden,\n  103                                    cl::desc(\"Print imported functions\"));\n  104  \n  105: static cl::opt<bool> ComputeDead(\"compute-dead\", cl::init(true), cl::Hidden,\n  106                                   cl::desc(\"Compute dead symbols\"));\n  107  \n  108: static cl::opt<bool> EnableImportMetadata(\n  109      \"enable-import-metadata\", cl::init(\n  110  #if !defined(NDEBUG)\n  ...\n  118  /// Summary file to use for function importing when using -function-import from\n  119  /// the command line.\n  120: static cl::opt<std::string>\n  121      SummaryFile(\"summary-file\",\n  122                  cl::desc(\"The summary file to use for function importing.\"));\n  ...\n  124  /// Used when testing importing from distributed indexes via opt\n  125  // -function-import.\n  126: static cl::opt<bool>\n  127      ImportAllIndex(\"import-all-index\",\n  128                     cl::desc(\"Import all external functions in index.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/Inliner.cpp:\n   90  /// with disabling it and relying fully on lifetime marker based stack\n   91  /// coloring, you can pass this flag to LLVM.\n   92: static cl::opt<bool>\n   93      DisableInlinedAllocaMerging(\"disable-inlined-alloca-merging\",\n   94                                  cl::init(false), cl::Hidden);\n   ..\n  104  } // end anonymous namespace\n  105  \n  106: static cl::opt<InlinerFunctionImportStatsOpts> InlinerFunctionImportStats(\n  107      \"inliner-function-import-stats\",\n  108      cl::init(InlinerFunctionImportStatsOpts::No),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/Internalize.cpp:\n   44  // APIFile - A file which contains a list of symbols that should not be marked\n   45  // external.\n   46: static cl::opt<std::string>\n   47      APIFile(\"internalize-public-api-file\", cl::value_desc(\"filename\"),\n   48              cl::desc(\"A file containing list of symbol names to preserve\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/LoopExtractor.cpp:\n  163  // BlockFile - A file which contains a list of blocks that should not be\n  164  // extracted.\n  165: static cl::opt<std::string>\n  166  BlockFile(\"extract-blocks-file\", cl::value_desc(\"filename\"),\n  167            cl::desc(\"A file containing list of basic blocks to not extract\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:\n   90  STATISTIC(NumTypeIdDisjointSets, \"Number of disjoint sets of type identifiers\");\n   91  \n   92: static cl::opt<bool> AvoidReuse(\n   93      \"lowertypetests-avoid-reuse\",\n   94      cl::desc(\"Try to avoid reuse of byte array addresses using aliases\"),\n   95      cl::Hidden, cl::init(true));\n   96  \n   97: static cl::opt<PassSummaryAction> ClSummaryAction(\n   98      \"lowertypetests-summary-action\",\n   99      cl::desc(\"What to do with the summary when running this pass\"),\n  ...\n  105      cl::Hidden);\n  106  \n  107: static cl::opt<std::string> ClReadSummary(\n  108      \"lowertypetests-read-summary\",\n  109      cl::desc(\"Read summary from given YAML file before running pass\"),\n  110      cl::Hidden);\n  111  \n  112: static cl::opt<std::string> ClWriteSummary(\n  113      \"lowertypetests-write-summary\",\n  114      cl::desc(\"Write summary to given YAML file after running pass\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/MergeFunctions.cpp:\n  139  STATISTIC(NumDoubleWeak, \"Number of new functions created\");\n  140  \n  141: static cl::opt<unsigned> NumFunctionsForSanityCheck(\n  142      \"mergefunc-sanity\",\n  143      cl::desc(\"How many functions in module could be used for \"\n  ...\n  160  //   modifies the thunk's call site to point to the shared implementation\n  161  //   when both occur within the same translation unit.\n  162: static cl::opt<bool>\n  163      MergeFunctionsPDI(\"mergefunc-preserve-debug-info\", cl::Hidden,\n  164                        cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/PartialInlining.cpp:\n   78  \n   79  // Command line option to disable partial-inlining. The default is false:\n   80: static cl::opt<bool>\n   81      DisablePartialInlining(\"disable-partial-inlining\", cl::init(false),\n   82                             cl::Hidden, cl::desc(\"Disable partial inlining\"));\n   83  // Command line option to disable multi-region partial-inlining. The default is\n   84  // false:\n   85: static cl::opt<bool> DisableMultiRegionPartialInline(\n   86      \"disable-mr-partial-inlining\", cl::init(false), cl::Hidden,\n   87      cl::desc(\"Disable multi-region partial inlining\"));\n   ..\n   89  // Command line option to force outlining in regions with live exit variables.\n   90  // The default is false:\n   91: static cl::opt<bool>\n   92      ForceLiveExit(\"pi-force-live-exit-outline\", cl::init(false), cl::Hidden,\n   93                 cl::desc(\"Force outline regions with live exits\"));\n   ..\n   95  // Command line option to enable marking outline functions with Cold Calling\n   96  // Convention. The default is false:\n   97: static cl::opt<bool>\n   98      MarkOutlinedColdCC(\"pi-mark-coldcc\", cl::init(false), cl::Hidden,\n   99                         cl::desc(\"Mark outline function calls with ColdCC\"));\n  ...\n  101  #ifndef NDEBUG\n  102  // Command line option to debug partial-inlining. The default is none:\n  103: static cl::opt<bool> TracePartialInlining(\"trace-partial-inlining\",\n  104                                            cl::init(false), cl::Hidden,\n  105                                            cl::desc(\"Trace partial inlining.\"));\n  ...\n  107  \n  108  // This is an option used by testing:\n  109: static cl::opt<bool> SkipCostAnalysis(\"skip-partial-inlining-cost-analysis\",\n  110                                        cl::init(false), cl::ZeroOrMore,\n  111                                        cl::ReallyHidden,\n  ...\n  115  // ie. if the cold region reduces the inlining cost of the original function by\n  116  // at least 10%.\n  117: static cl::opt<float> MinRegionSizeRatio(\n  118      \"min-region-size-ratio\", cl::init(0.1), cl::Hidden,\n  119      cl::desc(\"Minimum ratio comparing relative sizes of each \"\n  ...\n  121  // Used to tune the minimum number of execution counts needed in the predecessor\n  122  // block to the cold edge. ie. confidence interval.\n  123: static cl::opt<unsigned>\n  124      MinBlockCounterExecution(\"min-block-execution\", cl::init(100), cl::Hidden,\n  125                               cl::desc(\"Minimum block executions to consider \"\n  ...\n  127  // Used to determine when an edge is considered cold. Default is set to 10%. ie.\n  128  // if the branch probability is 10% or less, then it is deemed as 'cold'.\n  129: static cl::opt<float> ColdBranchRatio(\n  130      \"cold-branch-ratio\", cl::init(0.1), cl::Hidden,\n  131      cl::desc(\"Minimum BranchProbability to consider a region cold.\"));\n  132  \n  133: static cl::opt<unsigned> MaxNumInlineBlocks(\n  134      \"max-num-inline-blocks\", cl::init(5), cl::Hidden,\n  135      cl::desc(\"Max number of blocks to be partially inlined\"));\n  ...\n  137  // Command line option to set the maximum number of partial inlining allowed\n  138  // for the module. The default value of -1 means no limit.\n  139: static cl::opt<int> MaxNumPartialInlining(\n  140      \"max-partial-inlining\", cl::init(-1), cl::Hidden, cl::ZeroOrMore,\n  141      cl::desc(\"Max number of partial inlining. The default is unlimited\"));\n  ...\n  144  // the least value that is used to weigh the outline region. If BFI\n  145  // produces larger value, the BFI value will be used.\n  146: static cl::opt<int>\n  147      OutlineRegionFreqPercent(\"outline-region-freq-percent\", cl::init(75),\n  148                               cl::Hidden, cl::ZeroOrMore,\n  ...\n  150                                        \"the entry block\"));\n  151  \n  152: static cl::opt<unsigned> ExtraOutliningPenalty(\n  153      \"partial-inlining-extra-penalty\", cl::init(0), cl::Hidden,\n  154      cl::desc(\"A debug option to add additional penalty to the computed one.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/PassManagerBuilder.cpp:\n   42  using namespace llvm;\n   43  \n   44: static cl::opt<bool>\n   45      RunPartialInlining(\"enable-partial-inlining\", cl::init(false), cl::Hidden,\n   46                         cl::ZeroOrMore, cl::desc(\"Run Partial inlinining pass\"));\n   47  \n   48: static cl::opt<bool>\n   49      RunLoopVectorization(\"vectorize-loops\", cl::Hidden,\n   50                           cl::desc(\"Run the Loop vectorization passes\"));\n   51  \n   52: static cl::opt<bool>\n   53  RunSLPVectorization(\"vectorize-slp\", cl::Hidden,\n   54                      cl::desc(\"Run the SLP vectorization passes\"));\n   55  \n   56: static cl::opt<bool>\n   57  UseGVNAfterVectorization(\"use-gvn-after-vectorization\",\n   58    cl::init(false), cl::Hidden,\n   59    cl::desc(\"Run GVN instead of Early CSE after vectorization passes\"));\n   60  \n   61: static cl::opt<bool> ExtraVectorizerPasses(\n   62      \"extra-vectorizer-passes\", cl::init(false), cl::Hidden,\n   63      cl::desc(\"Run cleanup optimization passes after vectorization.\"));\n   64  \n   65: static cl::opt<bool>\n   66  RunLoopRerolling(\"reroll-loops\", cl::Hidden,\n   67                   cl::desc(\"Run the loop rerolling pass\"));\n   68  \n   69: static cl::opt<bool> RunNewGVN(\"enable-newgvn\", cl::init(false), cl::Hidden,\n   70                                 cl::desc(\"Run the NewGVN pass\"));\n   71  \n   72: static cl::opt<bool>\n   73  RunSLPAfterLoopVectorization(\"run-slp-after-loop-vectorization\",\n   74    cl::init(true), cl::Hidden,\n   ..\n   78  // Experimental option to use CFL-AA\n   79  enum class CFLAAType { None, Steensgaard, Andersen, Both };\n   80: static cl::opt<CFLAAType>\n   81      UseCFLAA(\"use-cfl-aa\", cl::init(CFLAAType::None), cl::Hidden,\n   82               cl::desc(\"Enable the new, experimental CFL alias analysis\"),\n   ..\n   89                                     \"Enable both variants of CFL-AA\")));\n   90  \n   91: static cl::opt<bool> EnableLoopInterchange(\n   92      \"enable-loopinterchange\", cl::init(false), cl::Hidden,\n   93      cl::desc(\"Enable the new, experimental LoopInterchange Pass\"));\n   94  \n   95: static cl::opt<bool>\n   96      EnablePrepareForThinLTO(\"prepare-for-thinlto\", cl::init(false), cl::Hidden,\n   97                              cl::desc(\"Enable preparation for ThinLTO.\"));\n   98  \n   99: static cl::opt<bool> RunPGOInstrGen(\n  100      \"profile-generate\", cl::init(false), cl::Hidden,\n  101      cl::desc(\"Enable PGO instrumentation.\"));\n  102  \n  103: static cl::opt<std::string>\n  104      PGOOutputFile(\"profile-generate-file\", cl::init(\"\"), cl::Hidden,\n  105                        cl::desc(\"Specify the path of profile data file.\"));\n  106  \n  107: static cl::opt<std::string> RunPGOInstrUse(\n  108      \"profile-use\", cl::init(\"\"), cl::Hidden, cl::value_desc(\"filename\"),\n  109      cl::desc(\"Enable use phase of PGO instrumentation and specify the path \"\n  110               \"of profile data file\"));\n  111  \n  112: static cl::opt<bool> UseLoopVersioningLICM(\n  113      \"enable-loop-versioning-licm\", cl::init(false), cl::Hidden,\n  114      cl::desc(\"Enable the experimental Loop Versioning LICM pass\"));\n  115  \n  116: static cl::opt<bool>\n  117      DisablePreInliner(\"disable-preinline\", cl::init(false), cl::Hidden,\n  118                        cl::desc(\"Disable pre-instrumentation inliner\"));\n  119  \n  120: static cl::opt<int> PreInlineThreshold(\n  121      \"preinline-threshold\", cl::Hidden, cl::init(75), cl::ZeroOrMore,\n  122      cl::desc(\"Control the amount of inlining in pre-instrumentation inliner \"\n  123               \"(default = 75)\"));\n  124  \n  125: static cl::opt<bool> EnableEarlyCSEMemSSA(\n  126      \"enable-earlycse-memssa\", cl::init(true), cl::Hidden,\n  127      cl::desc(\"Enable the EarlyCSE w/ MemorySSA pass (default = on)\"));\n  128  \n  129: static cl::opt<bool> EnableGVNHoist(\n  130      \"enable-gvn-hoist\", cl::init(false), cl::Hidden,\n  131      cl::desc(\"Enable the GVN hoisting pass (default = off)\"));\n  132  \n  133: static cl::opt<bool>\n  134      DisableLibCallsShrinkWrap(\"disable-libcalls-shrinkwrap\", cl::init(false),\n  135                                cl::Hidden,\n  136                                cl::desc(\"Disable shrink-wrap library calls\"));\n  137  \n  138: static cl::opt<bool>\n  139      EnableSimpleLoopUnswitch(\"enable-simple-loop-unswitch\", cl::init(false),\n  140                               cl::Hidden,\n  141                               cl::desc(\"Enable the simple loop unswitch pass.\"));\n  142  \n  143: static cl::opt<bool> EnableGVNSink(\n  144      \"enable-gvn-sink\", cl::init(false), cl::Hidden,\n  145      cl::desc(\"Enable the GVN sinking pass (default = off)\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/SampleProfile.cpp:\n   91  // Command line option to specify the file to read samples from. This is\n   92  // mainly used for debugging.\n   93: static cl::opt<std::string> SampleProfileFile(\n   94      \"sample-profile-file\", cl::init(\"\"), cl::value_desc(\"filename\"),\n   95      cl::desc(\"Profile file loaded by -sample-profile\"), cl::Hidden);\n   96  \n   97: static cl::opt<unsigned> SampleProfileMaxPropagateIterations(\n   98      \"sample-profile-max-propagate-iterations\", cl::init(100),\n   99      cl::desc(\"Maximum number of iterations to go through when propagating \"\n  100               \"sample block/edge weights through the CFG.\"));\n  101  \n  102: static cl::opt<unsigned> SampleProfileRecordCoverage(\n  103      \"sample-profile-check-record-coverage\", cl::init(0), cl::value_desc(\"N\"),\n  104      cl::desc(\"Emit a warning if less than N% of records in the input profile \"\n  105               \"are matched to the IR.\"));\n  106  \n  107: static cl::opt<unsigned> SampleProfileSampleCoverage(\n  108      \"sample-profile-check-sample-coverage\", cl::init(0), cl::value_desc(\"N\"),\n  109      cl::desc(\"Emit a warning if less than N% of samples in the input profile \"\n  110               \"are matched to the IR.\"));\n  111  \n  112: static cl::opt<double> SampleProfileHotThreshold(\n  113      \"sample-profile-inline-hot-threshold\", cl::init(0.1), cl::value_desc(\"N\"),\n  114      cl::desc(\"Inlined functions that account for more than N% of all samples \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:\n   92  #define DEBUG_TYPE \"wholeprogramdevirt\"\n   93  \n   94: static cl::opt<PassSummaryAction> ClSummaryAction(\n   95      \"wholeprogramdevirt-summary-action\",\n   96      cl::desc(\"What to do with the summary when running this pass\"),\n   ..\n  102      cl::Hidden);\n  103  \n  104: static cl::opt<std::string> ClReadSummary(\n  105      \"wholeprogramdevirt-read-summary\",\n  106      cl::desc(\"Read summary from given YAML file before running pass\"),\n  107      cl::Hidden);\n  108  \n  109: static cl::opt<std::string> ClWriteSummary(\n  110      \"wholeprogramdevirt-write-summary\",\n  111      cl::desc(\"Write summary to given YAML file after running pass\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:\n   74  STATISTIC(NumSimplified, \"Number of library calls simplified\");\n   75  \n   76: static cl::opt<unsigned> UnfoldElementAtomicMemcpyMaxElements(\n   77      \"unfold-element-atomic-memcpy-max-elements\",\n   78      cl::init(16),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:\n  118                \"Controls which instructions are visited\");\n  119  \n  120: static cl::opt<bool>\n  121  EnableExpensiveCombines(\"expensive-combines\",\n  122                          cl::desc(\"Enable expensive instruction combines\"));\n  123  \n  124: static cl::opt<unsigned>\n  125  MaxArraySize(\"instcombine-maxarray-size\", cl::init(1024),\n  126               cl::desc(\"Maximum array size considered when doing a combine\"));\n  ...\n  133  // delete stores to the alloca, leading to misleading and inaccurate debug\n  134  // information. This flag can be removed when those passes are fixed.\n  135: static cl::opt<unsigned> ShouldLowerDbgDeclare(\"instcombine-lower-dbg-declare\",\n  136                                                 cl::Hidden, cl::init(true));\n  137  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:\n  176  // Command-line flags.\n  177  \n  178: static cl::opt<bool> ClEnableKasan(\n  179      \"asan-kernel\", cl::desc(\"Enable KernelAddressSanitizer instrumentation\"),\n  180      cl::Hidden, cl::init(false));\n  181  \n  182: static cl::opt<bool> ClRecover(\n  183      \"asan-recover\",\n  184      cl::desc(\"Enable recovery mode (continue-after-error).\"),\n  ...\n  186  \n  187  // This flag may need to be replaced with -f[no-]asan-reads.\n  188: static cl::opt<bool> ClInstrumentReads(\"asan-instrument-reads\",\n  189                                         cl::desc(\"instrument read instructions\"),\n  190                                         cl::Hidden, cl::init(true));\n  191  \n  192: static cl::opt<bool> ClInstrumentWrites(\n  193      \"asan-instrument-writes\", cl::desc(\"instrument write instructions\"),\n  194      cl::Hidden, cl::init(true));\n  195  \n  196: static cl::opt<bool> ClInstrumentAtomics(\n  197      \"asan-instrument-atomics\",\n  198      cl::desc(\"instrument atomic instructions (rmw, cmpxchg)\"), cl::Hidden,\n  199      cl::init(true));\n  200  \n  201: static cl::opt<bool> ClAlwaysSlowPath(\n  202      \"asan-always-slow-path\",\n  203      cl::desc(\"use instrumentation with slow path for all accesses\"), cl::Hidden,\n  204      cl::init(false));\n  205  \n  206: static cl::opt<bool> ClForceDynamicShadow(\n  207      \"asan-force-dynamic-shadow\",\n  208      cl::desc(\"Load shadow address into a local variable for each function\"),\n  209      cl::Hidden, cl::init(false));\n  210  \n  211: static cl::opt<bool>\n  212      ClWithIfunc(\"asan-with-ifunc\",\n  213                  cl::desc(\"Access dynamic shadow through an ifunc global on \"\n  ...\n  215                  cl::Hidden, cl::init(true));\n  216  \n  217: static cl::opt<bool> ClWithIfuncSuppressRemat(\n  218      \"asan-with-ifunc-suppress-remat\",\n  219      cl::desc(\"Suppress rematerialization of dynamic shadow address by passing \"\n  ...\n  225  // but due to http://llvm.org/bugs/show_bug.cgi?id=12652 we temporary\n  226  // set it to 10000.\n  227: static cl::opt<int> ClMaxInsnsToInstrumentPerBB(\n  228      \"asan-max-ins-per-bb\", cl::init(10000),\n  229      cl::desc(\"maximal number of instructions to instrument in any given BB\"),\n  ...\n  231  \n  232  // This flag may need to be replaced with -f[no]asan-stack.\n  233: static cl::opt<bool> ClStack(\"asan-stack\", cl::desc(\"Handle stack memory\"),\n  234                               cl::Hidden, cl::init(true));\n  235: static cl::opt<uint32_t> ClMaxInlinePoisoningSize(\n  236      \"asan-max-inline-poisoning-size\",\n  237      cl::desc(\n  ...\n  239      cl::Hidden, cl::init(64));\n  240  \n  241: static cl::opt<bool> ClUseAfterReturn(\"asan-use-after-return\",\n  242                                        cl::desc(\"Check stack-use-after-return\"),\n  243                                        cl::Hidden, cl::init(true));\n  244  \n  245: static cl::opt<bool> ClRedzoneByvalArgs(\"asan-redzone-byval-args\",\n  246                                          cl::desc(\"Create redzones for byval \"\n  247                                                   \"arguments (extra copy \"\n  ...\n  249                                          cl::init(true));\n  250  \n  251: static cl::opt<bool> ClUseAfterScope(\"asan-use-after-scope\",\n  252                                       cl::desc(\"Check stack-use-after-scope\"),\n  253                                       cl::Hidden, cl::init(false));\n  254  \n  255  // This flag may need to be replaced with -f[no]asan-globals.\n  256: static cl::opt<bool> ClGlobals(\"asan-globals\",\n  257                                 cl::desc(\"Handle global objects\"), cl::Hidden,\n  258                                 cl::init(true));\n  259  \n  260: static cl::opt<bool> ClInitializers(\"asan-initialization-order\",\n  261                                      cl::desc(\"Handle C++ initializer order\"),\n  262                                      cl::Hidden, cl::init(true));\n  263  \n  264: static cl::opt<bool> ClInvalidPointerPairs(\n  265      \"asan-detect-invalid-pointer-pair\",\n  266      cl::desc(\"Instrument <, <=, >, >=, - with pointer operands\"), cl::Hidden,\n  267      cl::init(false));\n  268  \n  269: static cl::opt<unsigned> ClRealignStack(\n  270      \"asan-realign-stack\",\n  271      cl::desc(\"Realign stack to the value of this flag (power of two)\"),\n  272      cl::Hidden, cl::init(32));\n  273  \n  274: static cl::opt<int> ClInstrumentationWithCallsThreshold(\n  275      \"asan-instrumentation-with-call-threshold\",\n  276      cl::desc(\n  ...\n  280      cl::Hidden, cl::init(7000));\n  281  \n  282: static cl::opt<std::string> ClMemoryAccessCallbackPrefix(\n  283      \"asan-memory-access-callback-prefix\",\n  284      cl::desc(\"Prefix for memory access callbacks\"), cl::Hidden,\n  285      cl::init(\"__asan_\"));\n  286  \n  287: static cl::opt<bool>\n  288      ClInstrumentDynamicAllocas(\"asan-instrument-dynamic-allocas\",\n  289                                 cl::desc(\"instrument dynamic allocas\"),\n  290                                 cl::Hidden, cl::init(true));\n  291  \n  292: static cl::opt<bool> ClSkipPromotableAllocas(\n  293      \"asan-skip-promotable-allocas\",\n  294      cl::desc(\"Do not instrument promotable allocas\"), cl::Hidden,\n  ...\n  299  //    Shadow = (Mem >> scale) + offset\n  300  \n  301: static cl::opt<int> ClMappingScale(\"asan-mapping-scale\",\n  302                                     cl::desc(\"scale of asan shadow mapping\"),\n  303                                     cl::Hidden, cl::init(0));\n  304  \n  305: static cl::opt<unsigned long long> ClMappingOffset(\n  306      \"asan-mapping-offset\",\n  307      cl::desc(\"offset of asan shadow mapping [EXPERIMENTAL]\"), cl::Hidden,\n  ...\n  311  // and benchmarking the tool.\n  312  \n  313: static cl::opt<bool> ClOpt(\"asan-opt\", cl::desc(\"Optimize instrumentation\"),\n  314                             cl::Hidden, cl::init(true));\n  315  \n  316: static cl::opt<bool> ClOptSameTemp(\n  317      \"asan-opt-same-temp\", cl::desc(\"Instrument the same temp just once\"),\n  318      cl::Hidden, cl::init(true));\n  319  \n  320: static cl::opt<bool> ClOptGlobals(\"asan-opt-globals\",\n  321                                    cl::desc(\"Don't instrument scalar globals\"),\n  322                                    cl::Hidden, cl::init(true));\n  323  \n  324: static cl::opt<bool> ClOptStack(\n  325      \"asan-opt-stack\", cl::desc(\"Don't instrument scalar stack variables\"),\n  326      cl::Hidden, cl::init(false));\n  327  \n  328: static cl::opt<bool> ClDynamicAllocaStack(\n  329      \"asan-stack-dynamic-alloca\",\n  330      cl::desc(\"Use dynamic alloca to represent stack variables\"), cl::Hidden,\n  331      cl::init(true));\n  332  \n  333: static cl::opt<uint32_t> ClForceExperiment(\n  334      \"asan-force-experiment\",\n  335      cl::desc(\"Force optimization experiment (for testing)\"), cl::Hidden,\n  336      cl::init(0));\n  337  \n  338: static cl::opt<bool>\n  339      ClUsePrivateAliasForGlobals(\"asan-use-private-alias\",\n  340                                  cl::desc(\"Use private aliases for global\"\n  ...\n  342                                  cl::Hidden, cl::init(false));\n  343  \n  344: static cl::opt<bool>\n  345      ClUseGlobalsGC(\"asan-globals-live-support\",\n  346                     cl::desc(\"Use linker features to support dead \"\n  ...\n  350  // This is on by default even though there is a bug in gold:\n  351  // https://sourceware.org/bugzilla/show_bug.cgi?id=19002\n  352: static cl::opt<bool>\n  353      ClWithComdat(\"asan-with-comdat\",\n  354                   cl::desc(\"Place ASan constructors in comdat sections\"),\n  ...\n  357  // Debug flags.\n  358  \n  359: static cl::opt<int> ClDebug(\"asan-debug\", cl::desc(\"debug\"), cl::Hidden,\n  360                              cl::init(0));\n  361  \n  362: static cl::opt<int> ClDebugStack(\"asan-debug-stack\", cl::desc(\"debug stack\"),\n  363                                   cl::Hidden, cl::init(0));\n  364  \n  365: static cl::opt<std::string> ClDebugFunc(\"asan-debug-func\", cl::Hidden,\n  366                                          cl::desc(\"Debug func\"));\n  367  \n  368: static cl::opt<int> ClDebugMin(\"asan-debug-min\", cl::desc(\"Debug min inst\"),\n  369                                 cl::Hidden, cl::init(-1));\n  370  \n  371: static cl::opt<int> ClDebugMax(\"asan-debug-max\", cl::desc(\"Debug max inst\"),\n  372                                 cl::Hidden, cl::init(-1));\n  373  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/BoundsChecking.cpp:\n   38  #define DEBUG_TYPE \"bounds-checking\"\n   39  \n   40: static cl::opt<bool> SingleTrapBB(\"bounds-checking-single-trap\",\n   41                                    cl::desc(\"Use one trap block per function\"));\n   42  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:\n  116  // we have unfortunately encountered too much code (including Clang itself;\n  117  // see PR14291) which performs misaligned access.\n  118: static cl::opt<bool> ClPreserveAlignment(\n  119      \"dfsan-preserve-alignment\",\n  120      cl::desc(\"respect alignment requirements provided by input IR\"), cl::Hidden,\n  ...\n  135  // Controls whether the pass uses IA_Args or IA_TLS as the ABI for instrumented\n  136  // functions (see DataFlowSanitizer::InstrumentedABI below).\n  137: static cl::opt<bool> ClArgsABI(\n  138      \"dfsan-args-abi\",\n  139      cl::desc(\"Use the argument ABI rather than the TLS ABI\"),\n  ...\n  142  // Controls whether the pass includes or ignores the labels of pointers in load\n  143  // instructions.\n  144: static cl::opt<bool> ClCombinePointerLabelsOnLoad(\n  145      \"dfsan-combine-pointer-labels-on-load\",\n  146      cl::desc(\"Combine the label of the pointer with the label of the data when \"\n  ...\n  150  // Controls whether the pass includes or ignores the labels of pointers in\n  151  // stores instructions.\n  152: static cl::opt<bool> ClCombinePointerLabelsOnStore(\n  153      \"dfsan-combine-pointer-labels-on-store\",\n  154      cl::desc(\"Combine the label of the pointer with the label of the data when \"\n  ...\n  156      cl::Hidden, cl::init(false));\n  157  \n  158: static cl::opt<bool> ClDebugNonzeroLabels(\n  159      \"dfsan-debug-nonzero-labels\",\n  160      cl::desc(\"Insert calls to __dfsan_nonzero_label on observing a parameter, \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/EfficiencySanitizer.cpp:\n   43  // The tool type must be just one of these ClTool* options, as the tools\n   44  // cannot be combined due to shadow memory constraints.\n   45: static cl::opt<bool>\n   46      ClToolCacheFrag(\"esan-cache-frag\", cl::init(false),\n   47                      cl::desc(\"Detect data cache fragmentation\"), cl::Hidden);\n   48: static cl::opt<bool>\n   49      ClToolWorkingSet(\"esan-working-set\", cl::init(false),\n   50                      cl::desc(\"Measure the working set size\"), cl::Hidden);\n   ..\n   53  // in the code.\n   54  \n   55: static cl::opt<bool> ClInstrumentLoadsAndStores(\n   56      \"esan-instrument-loads-and-stores\", cl::init(true),\n   57      cl::desc(\"Instrument loads and stores\"), cl::Hidden);\n   58: static cl::opt<bool> ClInstrumentMemIntrinsics(\n   59      \"esan-instrument-memintrinsics\", cl::init(true),\n   60      cl::desc(\"Instrument memintrinsics (memset/memcpy/memmove)\"), cl::Hidden);\n   61: static cl::opt<bool> ClInstrumentFastpath(\n   62      \"esan-instrument-fastpath\", cl::init(true),\n   63      cl::desc(\"Instrument fastpath\"), cl::Hidden);\n   64: static cl::opt<bool> ClAuxFieldInfo(\n   65      \"esan-aux-field-info\", cl::init(true),\n   66      cl::desc(\"Generate binary with auxiliary struct field information\"),\n   ..\n   69  // Experiments show that the performance difference can be 2x or more,\n   70  // and accuracy loss is typically negligible, so we turn this on by default.\n   71: static cl::opt<bool> ClAssumeIntraCacheLine(\n   72      \"esan-assume-intra-cache-line\", cl::init(true),\n   73      cl::desc(\"Assume each memory access touches just one cache line, for \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp:\n   47  #define DEBUG_TYPE \"insert-gcov-profiling\"\n   48  \n   49: static cl::opt<std::string>\n   50  DefaultGCOVVersion(\"default-gcov-version\", cl::init(\"402*\"), cl::Hidden,\n   51                     cl::ValueRequired);\n   52: static cl::opt<bool> DefaultExitBlockBeforeBody(\"gcov-exit-block-before-body\",\n   53                                                  cl::init(false), cl::Hidden);\n   54  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:\n   58  static const unsigned kPointerTagShift = 56;\n   59  \n   60: static cl::opt<std::string> ClMemoryAccessCallbackPrefix(\n   61      \"hwasan-memory-access-callback-prefix\",\n   62      cl::desc(\"Prefix for memory access callbacks\"), cl::Hidden,\n   63      cl::init(\"__hwasan_\"));\n   64  \n   65: static cl::opt<bool>\n   66      ClInstrumentWithCalls(\"hwasan-instrument-with-calls\",\n   67                  cl::desc(\"instrument reads and writes with callbacks\"),\n   68                  cl::Hidden, cl::init(false));\n   69  \n   70: static cl::opt<bool> ClInstrumentReads(\"hwasan-instrument-reads\",\n   71                                         cl::desc(\"instrument read instructions\"),\n   72                                         cl::Hidden, cl::init(true));\n   73  \n   74: static cl::opt<bool> ClInstrumentWrites(\n   75      \"hwasan-instrument-writes\", cl::desc(\"instrument write instructions\"),\n   76      cl::Hidden, cl::init(true));\n   77  \n   78: static cl::opt<bool> ClInstrumentAtomics(\n   79      \"hwasan-instrument-atomics\",\n   80      cl::desc(\"instrument atomic instructions (rmw, cmpxchg)\"), cl::Hidden,\n   81      cl::init(true));\n   82  \n   83: static cl::opt<bool> ClRecover(\n   84      \"hwasan-recover\",\n   85      cl::desc(\"Enable recovery mode (continue-after-error).\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/IndirectCallPromotion.cpp:\n   65  // Command line option to disable indirect-call promotion with the default as\n   66  // false. This is for debug purpose.\n   67: static cl::opt<bool> DisableICP(\"disable-icp\", cl::init(false), cl::Hidden,\n   68                                  cl::desc(\"Disable indirect call promotion\"));\n   69  \n   ..\n   72  // value.\n   73  // For debug use only.\n   74: static cl::opt<unsigned>\n   75      ICPCutOff(\"icp-cutoff\", cl::init(0), cl::Hidden, cl::ZeroOrMore,\n   76                cl::desc(\"Max number of promotions for this compilation\"));\n   ..\n   78  // If ICPCSSkip is non zero, the first ICPCSSkip callsites will be skipped.\n   79  // For debug use only.\n   80: static cl::opt<unsigned>\n   81      ICPCSSkip(\"icp-csskip\", cl::init(0), cl::Hidden, cl::ZeroOrMore,\n   82                cl::desc(\"Skip Callsite up to this number for this compilation\"));\n   ..\n   85  // is the pass won't prefix the source module name to the internal linkage\n   86  // symbols.\n   87: static cl::opt<bool> ICPLTOMode(\"icp-lto\", cl::init(false), cl::Hidden,\n   88                                  cl::desc(\"Run indirect-call promotion in LTO \"\n   89                                           \"mode\"));\n   ..\n   91  // Set if the pass is called in SamplePGO mode. The difference for SamplePGO\n   92  // mode is it will add prof metadatato the created direct call.\n   93: static cl::opt<bool>\n   94      ICPSamplePGOMode(\"icp-samplepgo\", cl::init(false), cl::Hidden,\n   95                       cl::desc(\"Run indirect-call promotion in SamplePGO mode\"));\n   ..\n   97  // If the option is set to true, only call instructions will be considered for\n   98  // transformation -- invoke instructions will be ignored.\n   99: static cl::opt<bool>\n  100      ICPCallOnly(\"icp-call-only\", cl::init(false), cl::Hidden,\n  101                  cl::desc(\"Run indirect-call promotion for call instructions \"\n  ...\n  104  // If the option is set to true, only invoke instructions will be considered for\n  105  // transformation -- call instructions will be ignored.\n  106: static cl::opt<bool> ICPInvokeOnly(\"icp-invoke-only\", cl::init(false),\n  107                                     cl::Hidden,\n  108                                     cl::desc(\"Run indirect-call promotion for \"\n  ...\n  111  // Dump the function level IR if the transformation happened in this\n  112  // function. For debug use only.\n  113: static cl::opt<bool>\n  114      ICPDUMPAFTER(\"icp-dumpafter\", cl::init(false), cl::Hidden,\n  115                   cl::desc(\"Dump IR after transformation happens\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:\n   58  // The start and end values of precise value profile range for memory\n   59  // intrinsic sizes\n   60: cl::opt<std::string> MemOPSizeRange(\n   61      \"memop-size-range\",\n   62      cl::desc(\"Set the range of size in memory intrinsic calls to be profiled \"\n   ..\n   65  \n   66  // The value that considered to be large value in  memory intrinsic.\n   67: cl::opt<unsigned> MemOPSizeLarge(\n   68      \"memop-size-large\",\n   69      cl::desc(\"Set large value thresthold in memory intrinsic size profiling. \"\n   ..\n   73  namespace {\n   74  \n   75: cl::opt<bool> DoNameCompression(\"enable-name-compression\",\n   76                                  cl::desc(\"Enable name string compression\"),\n   77                                  cl::init(true));\n   78  \n   79: cl::opt<bool> DoHashBasedCounterSplit(\n   80      \"hash-based-counter-split\",\n   81      cl::desc(\"Rename counter variable of a comdat function based on cfg hash\"),\n   82      cl::init(true));\n   83  \n   84: cl::opt<bool> ValueProfileStaticAlloc(\n   85      \"vp-static-alloc\",\n   86      cl::desc(\"Do static counter allocation for value profiler\"),\n   87      cl::init(true));\n   88  \n   89: cl::opt<double> NumCountersPerValueSite(\n   90      \"vp-counters-per-site\",\n   91      cl::desc(\"The average number of profile counters allocated \"\n   ..\n   97      cl::init(1.0));\n   98  \n   99: cl::opt<bool> AtomicCounterUpdatePromoted(\n  100      \"atomic-counter-update-promoted\", cl::ZeroOrMore,\n  101      cl::desc(\"Do counter update using atomic fetch add \"\n  ...\n  108  // does not mean the promotion will be done by default. Explicitly\n  109  // setting this option can override the default behavior.\n  110: cl::opt<bool> DoCounterPromotion(\"do-counter-promotion\", cl::ZeroOrMore,\n  111                                   cl::desc(\"Do counter register promotion\"),\n  112                                   cl::init(false));\n  113: cl::opt<unsigned> MaxNumOfPromotionsPerLoop(\n  114      cl::ZeroOrMore, \"max-counter-promotions-per-loop\", cl::init(20),\n  115      cl::desc(\"Max number counter promotions per loop to avoid\"\n  ...\n  117  \n  118  // A debug option\n  119: cl::opt<int>\n  120      MaxNumOfPromotions(cl::ZeroOrMore, \"max-counter-promotions\", cl::init(-1),\n  121                         cl::desc(\"Max number of allowed counter promotions\"));\n  122  \n  123: cl::opt<unsigned> SpeculativeCounterPromotionMaxExiting(\n  124      cl::ZeroOrMore, \"speculative-counter-promotion-max-exiting\", cl::init(3),\n  125      cl::desc(\"The max number of exiting blocks of a loop to allow \"\n  126               \" speculative counter promotion\"));\n  127  \n  128: cl::opt<bool> SpeculativeCounterPromotionToLoop(\n  129      cl::ZeroOrMore, \"speculative-counter-promotion-to-loop\", cl::init(false),\n  130      cl::desc(\"When the option is false, if the target block is in a loop, \"\n  ...\n  133               \" region.\"));\n  134  \n  135: cl::opt<bool> IterativeCounterPromotion(\n  136      cl::ZeroOrMore, \"iterative-counter-promotion\", cl::init(true),\n  137      cl::desc(\"Allow counter promotion across the whole loop nest.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:\n  168  /// Adds a section to MemorySanitizer report that points to the allocation\n  169  /// (stack or heap) the uninitialized bits came from originally.\n  170: static cl::opt<int> ClTrackOrigins(\"msan-track-origins\",\n  171         cl::desc(\"Track origins (allocation sites) of poisoned memory\"),\n  172         cl::Hidden, cl::init(0));\n  173  \n  174: static cl::opt<bool> ClKeepGoing(\"msan-keep-going\",\n  175         cl::desc(\"keep going after reporting a UMR\"),\n  176         cl::Hidden, cl::init(false));\n  177  \n  178: static cl::opt<bool> ClPoisonStack(\"msan-poison-stack\",\n  179         cl::desc(\"poison uninitialized stack variables\"),\n  180         cl::Hidden, cl::init(true));\n  181  \n  182: static cl::opt<bool> ClPoisonStackWithCall(\"msan-poison-stack-with-call\",\n  183         cl::desc(\"poison uninitialized stack variables with a call\"),\n  184         cl::Hidden, cl::init(false));\n  185  \n  186: static cl::opt<int> ClPoisonStackPattern(\"msan-poison-stack-pattern\",\n  187         cl::desc(\"poison uninitialized stack variables with the given pattern\"),\n  188         cl::Hidden, cl::init(0xff));\n  189  \n  190: static cl::opt<bool> ClPoisonUndef(\"msan-poison-undef\",\n  191         cl::desc(\"poison undef temps\"),\n  192         cl::Hidden, cl::init(true));\n  193  \n  194: static cl::opt<bool> ClHandleICmp(\"msan-handle-icmp\",\n  195         cl::desc(\"propagate shadow through ICmpEQ and ICmpNE\"),\n  196         cl::Hidden, cl::init(true));\n  197  \n  198: static cl::opt<bool> ClHandleICmpExact(\"msan-handle-icmp-exact\",\n  199         cl::desc(\"exact handling of relational integer ICmp\"),\n  200         cl::Hidden, cl::init(false));\n  ...\n  206  // early at program startup where malloc-ed memory is more likely to\n  207  // be zeroed. As of 2012-08-28 this flag adds 20% slowdown.\n  208: static cl::opt<bool> ClCheckAccessAddress(\"msan-check-access-address\",\n  209         cl::desc(\"report accesses through a pointer which has poisoned shadow\"),\n  210         cl::Hidden, cl::init(true));\n  211  \n  212: static cl::opt<bool> ClDumpStrictInstructions(\"msan-dump-strict-instructions\",\n  213         cl::desc(\"print out instructions with default strict semantics\"),\n  214         cl::Hidden, cl::init(false));\n  215  \n  216: static cl::opt<int> ClInstrumentationWithCallThreshold(\n  217      \"msan-instrumentation-with-call-threshold\",\n  218      cl::desc(\n  ...\n  225  // compile-time constant. For some unexplainable reason they were silently\n  226  // ignored in the instrumentation.\n  227: static cl::opt<bool> ClCheckConstantShadow(\"msan-check-constant-shadow\",\n  228         cl::desc(\"Insert checks for constant shadow values\"),\n  229         cl::Hidden, cl::init(false));\n  ...\n  231  // This is off by default because of a bug in gold:\n  232  // https://sourceware.org/bugzilla/show_bug.cgi?id=19002\n  233: static cl::opt<bool> ClWithComdat(\"msan-with-comdat\",\n  234         cl::desc(\"Place MSan constructors in comdat sections\"),\n  235         cl::Hidden, cl::init(false));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:\n  136  // Command line option to specify the file to read profile from. This is\n  137  // mainly used for testing.\n  138: static cl::opt<std::string>\n  139      PGOTestProfileFile(\"pgo-test-profile-file\", cl::init(\"\"), cl::Hidden,\n  140                         cl::value_desc(\"filename\"),\n  ...\n  144  // Command line option to disable value profiling. The default is false:\n  145  // i.e. value profiling is enabled by default. This is for debug purpose.\n  146: static cl::opt<bool> DisableValueProfiling(\"disable-vp\", cl::init(false),\n  147                                             cl::Hidden,\n  148                                             cl::desc(\"Disable Value Profiling\"));\n  ...\n  150  // Command line option to set the maximum number of VP annotations to write to\n  151  // the metadata for a single indirect call callsite.\n  152: static cl::opt<unsigned> MaxNumAnnotations(\n  153      \"icp-max-annotations\", cl::init(3), cl::Hidden, cl::ZeroOrMore,\n  154      cl::desc(\"Max number of annotations for a single indirect \"\n  ...\n  157  // Command line option to set the maximum number of value annotations\n  158  // to write to the metadata for a single memop intrinsic.\n  159: static cl::opt<unsigned> MaxNumMemOPAnnotations(\n  160      \"memop-max-annotations\", cl::init(4), cl::Hidden, cl::ZeroOrMore,\n  161      cl::desc(\"Max number of preicise value annotations for a single memop\"\n  ...\n  164  // Command line option to control appending FunctionHash to the name of a COMDAT\n  165  // function. This is to avoid the hash mismatch caused by the preinliner.\n  166: static cl::opt<bool> DoComdatRenaming(\n  167      \"do-comdat-renaming\", cl::init(false), cl::Hidden,\n  168      cl::desc(\"Append function hash to the name of COMDAT function to avoid \"\n  ...\n  171  // Command line option to enable/disable the warning about missing profile\n  172  // information.\n  173: static cl::opt<bool>\n  174      PGOWarnMissing(\"pgo-warn-missing-function\", cl::init(false), cl::Hidden,\n  175                     cl::desc(\"Use this option to turn on/off \"\n  ...\n  179  // Command line option to enable/disable the warning about a hash mismatch in\n  180  // the profile data.\n  181: static cl::opt<bool>\n  182      NoPGOWarnMismatch(\"no-pgo-warn-mismatch\", cl::init(false), cl::Hidden,\n  183                        cl::desc(\"Use this option to turn off/on \"\n  ...\n  187  // the profile data for Comdat functions, which often turns out to be false\n  188  // positive due to the pre-instrumentation inline.\n  189: static cl::opt<bool>\n  190      NoPGOWarnMismatchComdat(\"no-pgo-warn-mismatch-comdat\", cl::init(true),\n  191                              cl::Hidden,\n  ...\n  195  \n  196  // Command line option to enable/disable select instruction instrumentation.\n  197: static cl::opt<bool>\n  198      PGOInstrSelect(\"pgo-instr-select\", cl::init(true), cl::Hidden,\n  199                     cl::desc(\"Use this option to turn on/off SELECT \"\n  ...\n  201  \n  202  // Command line option to turn on CFG dot or text dump of raw profile counts\n  203: static cl::opt<PGOViewCountsType> PGOViewRawCounts(\n  204      \"pgo-view-raw-counts\", cl::Hidden,\n  205      cl::desc(\"A boolean option to show CFG dag or text \"\n  ...\n  214  \n  215  // Command line option to enable/disable memop intrinsic call.size profiling.\n  216: static cl::opt<bool>\n  217      PGOInstrMemOP(\"pgo-instr-memop\", cl::init(true), cl::Hidden,\n  218                    cl::desc(\"Use this option to turn on/off \"\n  ...\n  220  \n  221  // Emit branch probability as optimization remarks.\n  222: static cl::opt<bool>\n  223      EmitBranchProbability(\"pgo-emit-branch-prob\", cl::init(false), cl::Hidden,\n  224                            cl::desc(\"When this option is on, the annotated \"\n  ...\n  229  // Command line option to turn on CFG dot dump after profile annotation.\n  230  // Defined in Analysis/BlockFrequencyInfo.cpp:  -pgo-view-counts\n  231: extern cl::opt<PGOViewCountsType> PGOViewCounts;\n  232  \n  233  // Command line option to specify the name of the function for CFG dump\n  234  // Defined in Analysis/BlockFrequencyInfo.cpp:  -view-bfi-func-name=\n  235: extern cl::opt<std::string> ViewBlockFreqFuncName;\n  236  \n  237  // Return a string describing the branch condition that can be\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/PGOMemOPSizeOpt.cpp:\n   59  \n   60  // The minimum call count to optimize memory intrinsic calls.\n   61: static cl::opt<unsigned>\n   62      MemOPCountThreshold(\"pgo-memop-count-threshold\", cl::Hidden, cl::ZeroOrMore,\n   63                          cl::init(1000),\n   ..\n   67  // Command line option to disable memory intrinsic optimization. The default is\n   68  // false. This is for debug purpose.\n   69: static cl::opt<bool> DisableMemOPOPT(\"disable-memop-opt\", cl::init(false),\n   70                                       cl::Hidden, cl::desc(\"Disable optimize\"));\n   71  \n   72  // The percent threshold to optimize memory intrinsic calls.\n   73: static cl::opt<unsigned>\n   74      MemOPPercentThreshold(\"pgo-memop-percent-threshold\", cl::init(40),\n   75                            cl::Hidden, cl::ZeroOrMore,\n   ..\n   78  \n   79  // Maximum number of versions for optimizing memory intrinsic call.\n   80: static cl::opt<unsigned>\n   81      MemOPMaxVersion(\"pgo-memop-max-version\", cl::init(3), cl::Hidden,\n   82                      cl::ZeroOrMore,\n   ..\n   85  \n   86  // Scale the counts from the annotation using the BB count value.\n   87: static cl::opt<bool>\n   88      MemOPScaleCount(\"pgo-memop-scale-count\", cl::init(true), cl::Hidden,\n   89                      cl::desc(\"Scale the memop size counts using the basic \"\n   ..\n   91  \n   92  // This option sets the rangge of precise profile memop sizes.\n   93: extern cl::opt<std::string> MemOPSizeRange;\n   94  \n   95  // This option sets the value that groups large memop sizes\n   96: extern cl::opt<unsigned> MemOPSizeLarge;\n   97  \n   98  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp:\n   80  static const char *const SanCovLowestStackName = \"__sancov_lowest_stack\";\n   81  \n   82: static cl::opt<int> ClCoverageLevel(\n   83      \"sanitizer-coverage-level\",\n   84      cl::desc(\"Sanitizer Coverage. 0: none, 1: entry block, 2: all blocks, \"\n   ..\n   86      cl::Hidden, cl::init(0));\n   87  \n   88: static cl::opt<bool> ClTracePC(\"sanitizer-coverage-trace-pc\",\n   89                                 cl::desc(\"Experimental pc tracing\"), cl::Hidden,\n   90                                 cl::init(false));\n   91  \n   92: static cl::opt<bool> ClTracePCGuard(\"sanitizer-coverage-trace-pc-guard\",\n   93                                      cl::desc(\"pc tracing with a guard\"),\n   94                                      cl::Hidden, cl::init(false));\n   ..\n   99  // This way the coverage instrumentation does not need to acquire the PCs\n  100  // at run-time. Works with trace-pc-guard and inline-8bit-counters.\n  101: static cl::opt<bool> ClCreatePCTable(\"sanitizer-coverage-pc-table\",\n  102                                       cl::desc(\"create a static PC table\"),\n  103                                       cl::Hidden, cl::init(false));\n  104  \n  105: static cl::opt<bool>\n  106      ClInline8bitCounters(\"sanitizer-coverage-inline-8bit-counters\",\n  107                           cl::desc(\"increments 8-bit counter for every edge\"),\n  108                           cl::Hidden, cl::init(false));\n  109  \n  110: static cl::opt<bool>\n  111      ClCMPTracing(\"sanitizer-coverage-trace-compares\",\n  112                   cl::desc(\"Tracing of CMP and similar instructions\"),\n  113                   cl::Hidden, cl::init(false));\n  114  \n  115: static cl::opt<bool> ClDIVTracing(\"sanitizer-coverage-trace-divs\",\n  116                                    cl::desc(\"Tracing of DIV instructions\"),\n  117                                    cl::Hidden, cl::init(false));\n  118  \n  119: static cl::opt<bool> ClGEPTracing(\"sanitizer-coverage-trace-geps\",\n  120                                    cl::desc(\"Tracing of GEP instructions\"),\n  121                                    cl::Hidden, cl::init(false));\n  122  \n  123: static cl::opt<bool>\n  124      ClPruneBlocks(\"sanitizer-coverage-prune-blocks\",\n  125                    cl::desc(\"Reduce the number of instrumented blocks\"),\n  126                    cl::Hidden, cl::init(true));\n  127  \n  128: static cl::opt<bool> ClStackDepth(\"sanitizer-coverage-stack-depth\",\n  129                                    cl::desc(\"max stack depth tracing\"),\n  130                                    cl::Hidden, cl::init(false));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:\n   52  #define DEBUG_TYPE \"tsan\"\n   53  \n   54: static cl::opt<bool>  ClInstrumentMemoryAccesses(\n   55      \"tsan-instrument-memory-accesses\", cl::init(true),\n   56      cl::desc(\"Instrument memory accesses\"), cl::Hidden);\n   57: static cl::opt<bool>  ClInstrumentFuncEntryExit(\n   58      \"tsan-instrument-func-entry-exit\", cl::init(true),\n   59      cl::desc(\"Instrument function entry and exit\"), cl::Hidden);\n   60: static cl::opt<bool>  ClHandleCxxExceptions(\n   61      \"tsan-handle-cxx-exceptions\", cl::init(true),\n   62      cl::desc(\"Handle C++ exceptions (insert cleanup blocks for unwinding)\"),\n   63      cl::Hidden);\n   64: static cl::opt<bool>  ClInstrumentAtomics(\n   65      \"tsan-instrument-atomics\", cl::init(true),\n   66      cl::desc(\"Instrument atomics\"), cl::Hidden);\n   67: static cl::opt<bool>  ClInstrumentMemIntrinsics(\n   68      \"tsan-instrument-memintrinsics\", cl::init(true),\n   69      cl::desc(\"Instrument memintrinsics (memset/memcpy/memmove)\"), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/ADCE.cpp:\n   62  // This is a temporary option until we change the interface to this pass based\n   63  // on optimization level.\n   64: static cl::opt<bool> RemoveControlFlowFlag(\"adce-remove-control-flow\",\n   65                                             cl::init(true), cl::Hidden);\n   66  \n   67  // This option enables removing of may-be-infinite loops which have no other\n   68  // effect.\n   69: static cl::opt<bool> RemoveLoops(\"adce-remove-loops\", cl::init(false),\n   70                                   cl::Hidden);\n   71  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp:\n   77  STATISTIC(NumConstantsRebased, \"Number of constants rebased\");\n   78  \n   79: static cl::opt<bool> ConstHoistWithBlockFrequency(\n   80      \"consthoist-with-block-frequency\", cl::init(true), cl::Hidden,\n   81      cl::desc(\"Enable the use of the block frequency analysis to reduce the \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:\n   63  STATISTIC(NumOverflows, \"Number of overflow checks removed\");\n   64  \n   65: static cl::opt<bool> DontProcessAdds(\"cvp-dont-process-adds\", cl::init(true));\n   66  \n   67  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:\n   76  STATISTIC(NumModifiedStores, \"Number of stores modified\");\n   77  \n   78: static cl::opt<bool>\n   79  EnablePartialOverwriteTracking(\"enable-dse-partial-overwrite-tracking\",\n   80    cl::init(true), cl::Hidden,\n   81    cl::desc(\"Enable partial-overwrite tracking in DSE\"));\n   82  \n   83: static cl::opt<bool>\n   84  EnablePartialStoreMerging(\"enable-dse-partial-store-merging\",\n   85    cl::init(true), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/Float2Int.cpp:\n   46  \n   47  /// The largest integer type worth dealing with.\n   48: static cl::opt<unsigned>\n   49  MaxIntegerBW(\"float2int-max-integer-bw\", cl::init(64), cl::Hidden,\n   50               cl::desc(\"Max integer bitwidth to consider in float2int\"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/GVN.cpp:\n   94  STATISTIC(NumPRELoad,   \"Number of loads PRE'd\");\n   95  \n   96: static cl::opt<bool> EnablePRE(\"enable-pre\",\n   97                                 cl::init(true), cl::Hidden);\n   98: static cl::opt<bool> EnableLoadPRE(\"enable-load-pre\", cl::init(true));\n   99  \n  100  // Maximum allowed recursion depth.\n  101: static cl::opt<uint32_t>\n  102  MaxRecurseDepth(\"max-recurse-depth\", cl::Hidden, cl::init(1000), cl::ZeroOrMore,\n  103                  cl::desc(\"Max recurse depth (default = 1000)\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/GVNHoist.cpp:\n   94  STATISTIC(NumCallsRemoved, \"Number of calls removed\");\n   95  \n   96: static cl::opt<int>\n   97      MaxHoistedThreshold(\"gvn-max-hoisted\", cl::Hidden, cl::init(-1),\n   98                          cl::desc(\"Max number of instructions to hoist \"\n   99                                   \"(default unlimited = -1)\"));\n  100  \n  101: static cl::opt<int> MaxNumberOfBBSInPath(\n  102      \"gvn-hoist-max-bbs\", cl::Hidden, cl::init(4),\n  103      cl::desc(\"Max number of basic blocks on the path between \"\n  104               \"hoisting locations (default = 4, unlimited = -1)\"));\n  105  \n  106: static cl::opt<int> MaxDepthInBB(\n  107      \"gvn-hoist-max-depth\", cl::Hidden, cl::init(100),\n  108      cl::desc(\"Hoist instructions from the beginning of the BB up to the \"\n  109               \"maximum specified depth (default = 100, unlimited = -1)\"));\n  110  \n  111: static cl::opt<int>\n  112      MaxChainLength(\"gvn-hoist-max-chain-length\", cl::Hidden, cl::init(10),\n  113                     cl::desc(\"Maximum length of dependent chains to hoist \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:\n   98  // implement a strong expression equivalence checker in SCEV. Until then, we\n   99  // use the verify-indvars flag, which may assert in some cases.\n  100: static cl::opt<bool> VerifyIndvars(\n  101    \"verify-indvars\", cl::Hidden,\n  102    cl::desc(\"Verify the ScalarEvolution result after running indvars\"));\n  ...\n  104  enum ReplaceExitVal { NeverRepl, OnlyCheapRepl, AlwaysRepl };\n  105  \n  106: static cl::opt<ReplaceExitVal> ReplaceExitValue(\n  107      \"replexitval\", cl::Hidden, cl::init(OnlyCheapRepl),\n  108      cl::desc(\"Choose the strategy to replace exit value in IndVarSimplify\"),\n  ...\n  113                            \"always replace exit value whenever possible\")));\n  114  \n  115: static cl::opt<bool> UsePostIncrementRanges(\n  116    \"indvars-post-increment-ranges\", cl::Hidden,\n  117    cl::desc(\"Use post increment control-dependent ranges in IndVarSimplify\"),\n  118    cl::init(true));\n  119  \n  120: static cl::opt<bool>\n  121  DisableLFTR(\"disable-lftr\", cl::Hidden, cl::init(false),\n  122              cl::desc(\"Disable Linear Function Test Replace optimization\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:\n   97  using namespace llvm::PatternMatch;\n   98  \n   99: static cl::opt<unsigned> LoopSizeCutoff(\"irce-loop-size-cutoff\", cl::Hidden,\n  100                                          cl::init(64));\n  101  \n  102: static cl::opt<bool> PrintChangedLoops(\"irce-print-changed-loops\", cl::Hidden,\n  103                                         cl::init(false));\n  104  \n  105: static cl::opt<bool> PrintRangeChecks(\"irce-print-range-checks\", cl::Hidden,\n  106                                        cl::init(false));\n  107  \n  108: static cl::opt<int> MaxExitProbReciprocal(\"irce-max-exit-prob-reciprocal\",\n  109                                            cl::Hidden, cl::init(10));\n  110  \n  111: static cl::opt<bool> SkipProfitabilityChecks(\"irce-skip-profitability-checks\",\n  112                                               cl::Hidden, cl::init(false));\n  113  \n  114: static cl::opt<bool> AllowUnsignedLatchCondition(\"irce-allow-unsigned-latch\",\n  115                                                   cl::Hidden, cl::init(true));\n  116  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/JumpThreading.cpp:\n   85  STATISTIC(NumDupes,   \"Number of branch blocks duplicated to eliminate phi\");\n   86  \n   87: static cl::opt<unsigned>\n   88  BBDuplicateThreshold(\"jump-threading-threshold\",\n   89            cl::desc(\"Max block size to duplicate for jump threading\"),\n   90            cl::init(6), cl::Hidden);\n   91  \n   92: static cl::opt<unsigned>\n   93  ImplicationSearchThreshold(\n   94    \"jump-threading-implication-search-threshold\",\n   ..\n   97    cl::init(3), cl::Hidden);\n   98  \n   99: static cl::opt<bool> PrintLVIAfterJumpThreading(\n  100      \"print-lvi-after-jump-threading\",\n  101      cl::desc(\"Print the LazyValueInfo cache after JumpThreading\"), cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LICM.cpp:\n   81  \n   82  /// Memory promotion is enabled by default.\n   83: static cl::opt<bool>\n   84      DisablePromotion(\"disable-licm-promotion\", cl::Hidden, cl::init(false),\n   85                       cl::desc(\"Disable memory promotion in LICM pass\"));\n   86  \n   87: static cl::opt<uint32_t> MaxNumUsesTraversed(\n   88      \"licm-max-num-uses-traversed\", cl::Hidden, cl::init(8),\n   89      cl::desc(\"Max num uses visited for identifying load \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopDataPrefetch.cpp:\n   38  // By default, we limit this to creating 16 PHIs (which is a little over half\n   39  // of the allocatable register set).\n   40: static cl::opt<bool>\n   41  PrefetchWrites(\"loop-prefetch-writes\", cl::Hidden, cl::init(false),\n   42                 cl::desc(\"Prefetch write addresses\"));\n   43  \n   44: static cl::opt<unsigned>\n   45      PrefetchDistance(\"prefetch-distance\",\n   46                       cl::desc(\"Number of instructions to prefetch ahead\"),\n   47                       cl::Hidden);\n   48  \n   49: static cl::opt<unsigned>\n   50      MinPrefetchStride(\"min-prefetch-stride\",\n   51                        cl::desc(\"Min stride to add prefetches\"), cl::Hidden);\n   52  \n   53: static cl::opt<unsigned> MaxPrefetchIterationsAhead(\n   54      \"max-prefetch-iters-ahead\",\n   55      cl::desc(\"Max number of iterations to prefetch ahead\"), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:\n   79  #define DEBUG_TYPE LDIST_NAME\n   80  \n   81: static cl::opt<bool>\n   82      LDistVerify(\"loop-distribute-verify\", cl::Hidden,\n   83                  cl::desc(\"Turn on DominatorTree and LoopInfo verification \"\n   ..\n   85                  cl::init(false));\n   86  \n   87: static cl::opt<bool> DistributeNonIfConvertible(\n   88      \"loop-distribute-non-if-convertible\", cl::Hidden,\n   89      cl::desc(\"Whether to distribute into a loop that may not be \"\n   ..\n   91      cl::init(false));\n   92  \n   93: static cl::opt<unsigned> DistributeSCEVCheckThreshold(\n   94      \"loop-distribute-scev-check-threshold\", cl::init(8), cl::Hidden,\n   95      cl::desc(\"The maximum number of SCEV checks allowed for Loop \"\n   96               \"Distribution\"));\n   97  \n   98: static cl::opt<unsigned> PragmaDistributeSCEVCheckThreshold(\n   99      \"loop-distribute-scev-check-threshold-with-pragma\", cl::init(128),\n  100      cl::Hidden,\n  ...\n  103          \"Distribution for loop marked with #pragma loop distribute(enable)\"));\n  104  \n  105: static cl::opt<bool> EnableLoopDistribute(\n  106      \"enable-loop-distribute\", cl::Hidden,\n  107      cl::desc(\"Enable the new, experimental LoopDistribution Pass\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:\n  104  STATISTIC(NumMemCpy, \"Number of memcpy's formed from loop load+stores\");\n  105  \n  106: static cl::opt<bool> UseLIRCodeSizeHeurs(\n  107      \"use-lir-code-size-heurs\",\n  108      cl::desc(\"Use loop idiom recognition code size heuristics when compiling\"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:\n   51  #define DEBUG_TYPE \"loop-interchange\"\n   52  \n   53: static cl::opt<int> LoopInterchangeCostThreshold(\n   54      \"loop-interchange-threshold\", cl::init(0), cl::Hidden,\n   55      cl::desc(\"Interchange if you gain more than this number\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:\n   66  #define DEBUG_TYPE LLE_OPTION\n   67  \n   68: static cl::opt<unsigned> CheckPerElim(\n   69      \"runtime-check-per-loop-load-elim\", cl::Hidden,\n   70      cl::desc(\"Max number of memchecks allowed per eliminated load on average\"),\n   71      cl::init(1));\n   72  \n   73: static cl::opt<unsigned> LoadElimSCEVCheckThreshold(\n   74      \"loop-load-elimination-scev-check-threshold\", cl::init(8), cl::Hidden,\n   75      cl::desc(\"The maximum number of SCEV checks allowed for Loop \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopPredication.cpp:\n  194  using namespace llvm;\n  195  \n  196: static cl::opt<bool> EnableIVTruncation(\"loop-predication-enable-iv-truncation\",\n  197                                          cl::Hidden, cl::init(true));\n  198  \n  199: static cl::opt<bool> EnableCountDownLoop(\"loop-predication-enable-count-down-loop\",\n  200                                          cl::Hidden, cl::init(true));\n  201  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:\n   69  STATISTIC(NumRerolledLoops, \"Number of rerolled loops\");\n   70  \n   71: static cl::opt<unsigned>\n   72  MaxInc(\"max-reroll-increment\", cl::init(2048), cl::Hidden,\n   73    cl::desc(\"The maximum increment for loop rerolling\"));\n   74  \n   75: static cl::opt<unsigned>\n   76  NumToleratedFailedMatches(\"reroll-num-tolerated-failed-matches\", cl::init(400),\n   77                            cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopRotation.cpp:\n   45  #define DEBUG_TYPE \"loop-rotate\"\n   46  \n   47: static cl::opt<unsigned> DefaultRotationThreshold(\n   48      \"rotation-max-header-size\", cl::init(16), cl::Hidden,\n   49      cl::desc(\"The default maximum header size for automatic loop rotation\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopSink.cpp:\n   59  STATISTIC(NumLoopSunkCloned, \"Number of cloned instructions sunk into loop\");\n   60  \n   61: static cl::opt<unsigned> SinkFrequencyPercentThreshold(\n   62      \"sink-freq-percent-threshold\", cl::Hidden, cl::init(90),\n   63      cl::desc(\"Do not sink instructions that require cloning unless they \"\n   64               \"execute less than this percent of the time.\"));\n   65  \n   66: static cl::opt<unsigned> MaxNumberOfUseBBsForSinking(\n   67      \"max-uses-for-sinking\", cl::Hidden, cl::init(30),\n   68      cl::desc(\"Do not sink instructions that have too many uses.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:\n  132  // not. The flag should be removed after the v3.0 release.\n  133  // This is now needed for ivchains.\n  134: static cl::opt<bool> EnablePhiElim(\n  135    \"enable-lsr-phielim\", cl::Hidden, cl::init(true),\n  136    cl::desc(\"Enable LSR phi elimination\"));\n  137  \n  138  // The flag adds instruction count to solutions cost comparision.\n  139: static cl::opt<bool> InsnsCost(\n  140    \"lsr-insns-cost\", cl::Hidden, cl::init(true),\n  141    cl::desc(\"Add instruction count to a LSR cost model\"));\n  142  \n  143  // Flag to choose how to narrow complex lsr solution\n  144: static cl::opt<bool> LSRExpNarrow(\n  145    \"lsr-exp-narrow\", cl::Hidden, cl::init(false),\n  146    cl::desc(\"Narrow LSR complex solution using\"\n  ...\n  149  // Flag to narrow search space by filtering non-optimal formulae with\n  150  // the same ScaledReg and Scale.\n  151: static cl::opt<bool> FilterSameScaledReg(\n  152      \"lsr-filter-same-scaled-reg\", cl::Hidden, cl::init(true),\n  153      cl::desc(\"Narrow LSR search space by filtering non-optimal formulae\"\n  ...\n  156  #ifndef NDEBUG\n  157  // Stress test IV chain generation.\n  158: static cl::opt<bool> StressIVChain(\n  159    \"stress-ivchain\", cl::Hidden, cl::init(false),\n  160    cl::desc(\"Stress test LSR IV chains\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:\n   69  #define DEBUG_TYPE \"loop-unroll\"\n   70  \n   71: static cl::opt<unsigned>\n   72      UnrollThreshold(\"unroll-threshold\", cl::Hidden,\n   73                      cl::desc(\"The cost threshold for loop unrolling\"));\n   74  \n   75: static cl::opt<unsigned> UnrollPartialThreshold(\n   76      \"unroll-partial-threshold\", cl::Hidden,\n   77      cl::desc(\"The cost threshold for partial loop unrolling\"));\n   78  \n   79: static cl::opt<unsigned> UnrollMaxPercentThresholdBoost(\n   80      \"unroll-max-percent-threshold-boost\", cl::init(400), cl::Hidden,\n   81      cl::desc(\"The maximum 'boost' (represented as a percentage >= 100) applied \"\n   ..\n   86               \"X/Y). This limit avoids excessive code bloat.\"));\n   87  \n   88: static cl::opt<unsigned> UnrollMaxIterationsCountToAnalyze(\n   89      \"unroll-max-iteration-count-to-analyze\", cl::init(10), cl::Hidden,\n   90      cl::desc(\"Don't allow loop unrolling to simulate more than this number of\"\n   91               \"iterations when checking full unroll profitability\"));\n   92  \n   93: static cl::opt<unsigned> UnrollCount(\n   94      \"unroll-count\", cl::Hidden,\n   95      cl::desc(\"Use this unroll count for all loops including those with \"\n   96               \"unroll_count pragma values, for testing purposes\"));\n   97  \n   98: static cl::opt<unsigned> UnrollMaxCount(\n   99      \"unroll-max-count\", cl::Hidden,\n  100      cl::desc(\"Set the max unroll count for partial and runtime unrolling, for\"\n  101               \"testing purposes\"));\n  102  \n  103: static cl::opt<unsigned> UnrollFullMaxCount(\n  104      \"unroll-full-max-count\", cl::Hidden,\n  105      cl::desc(\n  106          \"Set the max unroll count for full unrolling, for testing purposes\"));\n  107  \n  108: static cl::opt<unsigned> UnrollPeelCount(\n  109      \"unroll-peel-count\", cl::Hidden,\n  110      cl::desc(\"Set the unroll peeling count, for testing purposes\"));\n  111  \n  112: static cl::opt<bool>\n  113      UnrollAllowPartial(\"unroll-allow-partial\", cl::Hidden,\n  114                         cl::desc(\"Allows loops to be partially unrolled until \"\n  115                                  \"-unroll-threshold loop size is reached.\"));\n  116  \n  117: static cl::opt<bool> UnrollAllowRemainder(\n  118      \"unroll-allow-remainder\", cl::Hidden,\n  119      cl::desc(\"Allow generation of a loop remainder (extra iterations) \"\n  120               \"when unrolling a loop.\"));\n  121  \n  122: static cl::opt<bool>\n  123      UnrollRuntime(\"unroll-runtime\", cl::ZeroOrMore, cl::Hidden,\n  124                    cl::desc(\"Unroll loops with run-time trip counts\"));\n  125  \n  126: static cl::opt<unsigned> UnrollMaxUpperBound(\n  127      \"unroll-max-upperbound\", cl::init(8), cl::Hidden,\n  128      cl::desc(\n  129          \"The max of trip count upper bound that is considered in unrolling\"));\n  130  \n  131: static cl::opt<unsigned> PragmaUnrollThreshold(\n  132      \"pragma-unroll-threshold\", cl::init(16 * 1024), cl::Hidden,\n  133      cl::desc(\"Unrolled size limit for loops with an unroll(full) or \"\n  134               \"unroll_count pragma.\"));\n  135  \n  136: static cl::opt<unsigned> FlatLoopTripCountThreshold(\n  137      \"flat-loop-tripcount-threshold\", cl::init(5), cl::Hidden,\n  138      cl::desc(\"If the runtime tripcount for the loop is lower than the \"\n  ...\n  140               \"aggressively unrolled.\"));\n  141  \n  142: static cl::opt<bool>\n  143      UnrollAllowPeeling(\"unroll-allow-peeling\", cl::init(true), cl::Hidden,\n  144                         cl::desc(\"Allows loops to be peeled when the dynamic \"\n  145                                  \"trip count is known to be low.\"));\n  146  \n  147: static cl::opt<bool> UnrollUnrollRemainder(\n  148    \"unroll-remainder\", cl::Hidden,\n  149    cl::desc(\"Allow the loop remainder to be unrolled.\"));\n  ...\n  152  // experiments to check the assumptions about when this kind of revisit is\n  153  // necessary.\n  154: static cl::opt<bool> UnrollRevisitChildLoops(\n  155      \"unroll-revisit-child-loops\", cl::Hidden,\n  156      cl::desc(\"Enqueue and re-visit child loops in the loop PM after unrolling. \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopUnswitch.cpp:\n   92  // The specific value of 100 here was chosen based only on intuition and a\n   93  // few specific examples.\n   94: static cl::opt<unsigned>\n   95  Threshold(\"loop-unswitch-threshold\", cl::desc(\"Max loop size to unswitch\"),\n   96            cl::init(100), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:\n   99  /// Threshold minimum allowed percentage for possible\n  100  /// invariant instructions in a loop.\n  101: static cl::opt<float>\n  102      LVInvarThreshold(\"licm-versioning-invariant-threshold\",\n  103                       cl::desc(\"LoopVersioningLICM's minimum allowed percentage\"\n  ...\n  106  \n  107  /// Threshold for maximum allowed loop nest/depth\n  108: static cl::opt<unsigned> LVLoopDepthThreshold(\n  109      \"licm-versioning-max-depth-threshold\",\n  110      cl::desc(\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LowerExpectIntrinsic.cpp:\n   48  // shared space, so they can be used directly by other passes.\n   49  \n   50: static cl::opt<uint32_t> LikelyBranchWeight(\n   51      \"likely-branch-weight\", cl::Hidden, cl::init(2000),\n   52      cl::desc(\"Weight of the branch likely to be taken (default = 2000)\"));\n   53: static cl::opt<uint32_t> UnlikelyBranchWeight(\n   54      \"unlikely-branch-weight\", cl::Hidden, cl::init(1),\n   55      cl::desc(\"Weight of the branch unlikely to be taken (default = 1)\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LowerGuardIntrinsic.cpp:\n   30  using namespace llvm;\n   31  \n   32: static cl::opt<uint32_t> PredicatePassBranchWeight(\n   33      \"guards-predicate-pass-branch-weight\", cl::Hidden, cl::init(1 << 20),\n   34      cl::desc(\"The probability of a guard failing is assumed to be the \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/NewGVN.cpp:\n  148  // egregiously slow.  This flag lets us keep it working while we work on this\n  149  // issue.\n  150: static cl::opt<bool> EnableStoreRefinement(\"enable-store-refinement\",\n  151                                             cl::init(false), cl::Hidden);\n  152  \n  153  /// Currently, the generation \"phi of ops\" can result in correctness issues.\n  154: static cl::opt<bool> EnablePhiOfOps(\"enable-phi-of-ops\", cl::init(true),\n  155                                      cl::Hidden);\n  156  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:\n   82  // Ignore opportunities to avoid placing safepoints on backedges, useful for\n   83  // validation\n   84: static cl::opt<bool> AllBackedges(\"spp-all-backedges\", cl::Hidden,\n   85                                    cl::init(false));\n   86  \n   87  /// How narrow does the trip count of a loop have to be to have to be considered\n   88  /// \"counted\"?  Counted loops do not get safepoints at backedges.\n   89: static cl::opt<int> CountedLoopTripWidth(\"spp-counted-loop-trip-width\",\n   90                                           cl::Hidden, cl::init(32));\n   91  \n   ..\n   94  // experimentation, but in practice, it looks like splitting the backedge\n   95  // optimizes better.\n   96: static cl::opt<bool> SplitBackedge(\"spp-split-backedge\", cl::Hidden,\n   97                                     cl::init(false));\n   98  \n   ..\n  153  }\n  154  \n  155: static cl::opt<bool> NoEntry(\"spp-no-entry\", cl::Hidden, cl::init(false));\n  156: static cl::opt<bool> NoCall(\"spp-no-call\", cl::Hidden, cl::init(false));\n  157: static cl::opt<bool> NoBackedge(\"spp-no-backedge\", cl::Hidden, cl::init(false));\n  158  \n  159  namespace {\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:\n   82  \n   83  // Print the liveset found at the insert location\n   84: static cl::opt<bool> PrintLiveSet(\"spp-print-liveset\", cl::Hidden,\n   85                                    cl::init(false));\n   86: static cl::opt<bool> PrintLiveSetSize(\"spp-print-liveset-size\", cl::Hidden,\n   87                                        cl::init(false));\n   88  \n   89  // Print out the base pointers for debugging\n   90: static cl::opt<bool> PrintBasePointers(\"spp-print-base-pointers\", cl::Hidden,\n   91                                         cl::init(false));\n   92  \n   93  // Cost threshold measuring when it is profitable to rematerialize value instead\n   94  // of relocating it\n   95: static cl::opt<unsigned>\n   96  RematerializationThreshold(\"spp-rematerialization-threshold\", cl::Hidden,\n   97                             cl::init(6));\n   ..\n  103  #endif\n  104  \n  105: static cl::opt<bool, true> ClobberNonLiveOverride(\"rs4gc-clobber-non-live\",\n  106                                                    cl::location(ClobberNonLive),\n  107                                                    cl::Hidden);\n  108  \n  109: static cl::opt<bool>\n  110      AllowStatepointWithNoDeoptInfo(\"rs4gc-allow-statepoint-with-no-deopt-info\",\n  111                                     cl::Hidden, cl::init(true));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/SROA.cpp:\n  117  /// Hidden option to enable randomly shuffling the slices to help uncover\n  118  /// instability in their order.\n  119: static cl::opt<bool> SROARandomShuffleSlices(\"sroa-random-shuffle-slices\",\n  120                                               cl::init(false), cl::Hidden);\n  121  \n  122  /// Hidden option to experiment with completely strict handling of inbounds\n  123  /// GEPs.\n  124: static cl::opt<bool> SROAStrictInbounds(\"sroa-strict-inbounds\", cl::init(false),\n  125                                          cl::Hidden);\n  126  \n  127  /// Hidden option to allow more aggressive splitting.\n  128: static cl::opt<bool>\n  129  SROASplitNonWholeAllocaSlices(\"sroa-split-nonwhole-alloca-slices\",\n  130                                cl::init(false), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:\n  199  using namespace llvm::PatternMatch;\n  200  \n  201: static cl::opt<bool> DisableSeparateConstOffsetFromGEP(\n  202      \"disable-separate-const-offset-from-gep\", cl::init(false),\n  203      cl::desc(\"Do not separate the constant offset from a GEP instruction\"),\n  ...\n  207  // contains dead instructions. Therefore, we set it only in unit tests that are\n  208  // free of dead code.\n  209: static cl::opt<bool>\n  210      VerifyNoDeadCode(\"reassociate-geps-verify-no-dead-code\", cl::init(false),\n  211                       cl::desc(\"Verify this pass produces no dead code\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:\n   58  STATISTIC(NumTrivial, \"Number of unswitches that are trivial\");\n   59  \n   60: static cl::opt<bool> EnableNonTrivialUnswitch(\n   61      \"enable-nontrivial-unswitch\", cl::init(false), cl::Hidden,\n   62      cl::desc(\"Forcibly enables non-trivial loop unswitching rather than \"\n   63               \"following the configuration passed into the pass.\"));\n   64  \n   65: static cl::opt<int>\n   66      UnswitchThreshold(\"unswitch-threshold\", cl::init(50), cl::Hidden,\n   67                        cl::desc(\"The cost threshold for unswitching a loop.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp:\n   46  #define DEBUG_TYPE \"simplifycfg\"\n   47  \n   48: static cl::opt<unsigned> UserBonusInstThreshold(\n   49      \"bonus-inst-threshold\", cl::Hidden, cl::init(1),\n   50      cl::desc(\"Control the number of bonus instructions (default = 1)\"));\n   51  \n   52: static cl::opt<bool> UserKeepLoops(\n   53      \"keep-loops\", cl::Hidden, cl::init(true),\n   54      cl::desc(\"Preserve canonical loop structure (default = true)\"));\n   55  \n   56: static cl::opt<bool> UserSwitchToLookup(\n   57      \"switch-to-lookup\", cl::Hidden, cl::init(false),\n   58      cl::desc(\"Convert switches to lookup tables (default = false)\"));\n   59  \n   60: static cl::opt<bool> UserForwardSwitchCond(\n   61      \"forward-switch-cond\", cl::Hidden, cl::init(false),\n   62      cl::desc(\"Forward switch condition to phi ops (default = false)\"));\n   63  \n   64: static cl::opt<bool> UserSinkCommonInsts(\n   65      \"sink-common-insts\", cl::Hidden, cl::init(false),\n   66      cl::desc(\"Sink common instructions (default = false)\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp:\n   78  // The risk that speculation will not pay off increases with the\n   79  // number of instructions speculated, so we put a limit on that.\n   80: static cl::opt<unsigned> SpecExecMaxSpeculationCost(\n   81      \"spec-exec-max-speculation-cost\", cl::init(7), cl::Hidden,\n   82      cl::desc(\"Speculative execution is not applied to basic blocks where \"\n   ..\n   88  // that small basic blocks are more likely to be candidates for\n   89  // further optimization.\n   90: static cl::opt<unsigned> SpecExecMaxNotHoisted(\n   91      \"spec-exec-max-not-hoisted\", cl::init(5), cl::Hidden,\n   92      cl::desc(\"Speculative execution is not applied to basic blocks where the \"\n   ..\n   94               \"exceeds this limit.\"));\n   95  \n   96: static cl::opt<bool> SpecExecOnlyIfDivergentTarget(\n   97      \"spec-exec-only-if-divergent-target\", cl::init(false), cl::Hidden,\n   98      cl::desc(\"Speculative execution is applied only to targets with divergent \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/AddDiscriminators.cpp:\n   80  // presence of debug information. This is only needed when debugging\n   81  // debug info generation issues.\n   82: static cl::opt<bool> NoDiscriminators(\n   83      \"no-discriminators\", cl::init(false),\n   84      cl::desc(\"Disable generation of discriminator information.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/CodeExtractor.cpp:\n   74  // extracted functions to pthread-based code, as only one argument (void*) can\n   75  // be passed in to pthread_create().\n   76: static cl::opt<bool>\n   77  AggregateArgsOpt(\"aggregate-extracted-args\", cl::Hidden,\n   78                   cl::desc(\"Aggregate arguments to code-extracted functions\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/InlineFunction.cpp:\n   74  using namespace llvm;\n   75  \n   76: static cl::opt<bool>\n   77  EnableNoAliasConversion(\"enable-noalias-to-md-conversion\", cl::init(true),\n   78    cl::Hidden,\n   79    cl::desc(\"Convert noalias attributes to metadata during inlining.\"));\n   80  \n   81: static cl::opt<bool>\n   82  PreserveAlignmentAssumptions(\"preserve-alignment-assumptions-during-inlining\",\n   83    cl::init(true), cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/LCSSA.cpp:\n   57  static bool VerifyLoopLCSSA = false;\n   58  #endif\n   59: static cl::opt<bool, true>\n   60      VerifyLoopLCSSAFlag(\"verify-loop-lcssa\", cl::location(VerifyLoopLCSSA),\n   61                          cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/LoopUnroll.cpp:\n   47  STATISTIC(NumUnrolled, \"Number of loops unrolled (completely or otherwise)\");\n   48  \n   49: static cl::opt<bool>\n   50  UnrollRuntimeEpilog(\"unroll-runtime-epilog\", cl::init(false), cl::Hidden,\n   51                      cl::desc(\"Allow runtime unrolled loops to be unrolled \"\n   52                               \"with epilog instead of prolog.\"));\n   53  \n   54: static cl::opt<bool>\n   55  UnrollVerifyDomtree(\"unroll-verify-domtree\", cl::Hidden,\n   56                      cl::desc(\"Verify domtree after unrolling\"),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/LoopUnrollPeel.cpp:\n   52  STATISTIC(NumPeeled, \"Number of loops peeled\");\n   53  \n   54: static cl::opt<unsigned> UnrollPeelMaxCount(\n   55      \"unroll-peel-max-count\", cl::init(7), cl::Hidden,\n   56      cl::desc(\"Max average trip count which will cause loop peeling.\"));\n   57  \n   58: static cl::opt<unsigned> UnrollForcePeelCount(\n   59      \"unroll-force-peel-count\", cl::init(0), cl::Hidden,\n   60      cl::desc(\"Force a peel count regardless of profiling information.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp:\n   47  STATISTIC(NumRuntimeUnrolled,\n   48            \"Number of loops unrolled with run-time trip counts\");\n   49: static cl::opt<bool> UnrollRuntimeMultiExit(\n   50      \"unroll-runtime-multi-exit\", cl::init(false), cl::Hidden,\n   51      cl::desc(\"Allow runtime unrolling for loops with multiple exits, when \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/LoopVersioning.cpp:\n   25  using namespace llvm;\n   26  \n   27: static cl::opt<bool>\n   28      AnnotateNoAlias(\"loop-version-annotate-no-alias\", cl::init(true),\n   29                      cl::Hidden,\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/PredicateInfo.cpp:\n   47  INITIALIZE_PASS_END(PredicateInfoPrinterLegacyPass, \"print-predicateinfo\",\n   48                      \"PredicateInfo Printer\", false, false)\n   49: static cl::opt<bool> VerifyPredicateInfo(\n   50      \"verify-predicateinfo\", cl::init(false), cl::Hidden,\n   51      cl::desc(\"Verify PredicateInfo in legacy printer pass.\"));\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:\n   90  // To catch this, we need to fold a compare and a select, hence '2' being the\n   91  // minimum reasonable default.\n   92: static cl::opt<unsigned> PHINodeFoldingThreshold(\n   93      \"phi-node-folding-threshold\", cl::Hidden, cl::init(2),\n   94      cl::desc(\n   95          \"Control the amount of phi node folding to perform (default = 2)\"));\n   96  \n   97: static cl::opt<bool> DupRet(\n   98      \"simplifycfg-dup-ret\", cl::Hidden, cl::init(false),\n   99      cl::desc(\"Duplicate return instructions into unconditional branches\"));\n  100  \n  101: static cl::opt<bool>\n  102      SinkCommon(\"simplifycfg-sink-common\", cl::Hidden, cl::init(true),\n  103                 cl::desc(\"Sink common instructions down to the end block\"));\n  104  \n  105: static cl::opt<bool> HoistCondStores(\n  106      \"simplifycfg-hoist-cond-stores\", cl::Hidden, cl::init(true),\n  107      cl::desc(\"Hoist conditional stores if an unconditional store precedes\"));\n  108  \n  109: static cl::opt<bool> MergeCondStores(\n  110      \"simplifycfg-merge-cond-stores\", cl::Hidden, cl::init(true),\n  111      cl::desc(\"Hoist conditional stores even if an unconditional store does not \"\n  ...\n  113               \"predicated store\"));\n  114  \n  115: static cl::opt<bool> MergeCondStoresAggressively(\n  116      \"simplifycfg-merge-cond-stores-aggressively\", cl::Hidden, cl::init(false),\n  117      cl::desc(\"When merging conditional stores, do so even if the resultant \"\n  118               \"basic blocks are unlikely to be if-converted as a result\"));\n  119  \n  120: static cl::opt<bool> SpeculateOneExpensiveInst(\n  121      \"speculate-one-expensive-inst\", cl::Hidden, cl::init(true),\n  122      cl::desc(\"Allow exactly one expensive instruction to be speculatively \"\n  123               \"executed\"));\n  124  \n  125: static cl::opt<unsigned> MaxSpeculationDepth(\n  126      \"max-speculation-depth\", cl::Hidden, cl::init(10),\n  127      cl::desc(\"Limit maximum recursion depth when calculating costs of \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:\n   39  using namespace PatternMatch;\n   40  \n   41: static cl::opt<bool>\n   42      EnableUnsafeFPShrink(\"enable-double-float-shrink\", cl::Hidden,\n   43                           cl::init(false),\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:\n  146  STATISTIC(LoopsAnalyzed, \"Number of loops analyzed for vectorization\");\n  147  \n  148: static cl::opt<bool>\n  149      EnableIfConversion(\"enable-if-conversion\", cl::init(true), cl::Hidden,\n  150                         cl::desc(\"Enable if-conversion during vectorization.\"));\n  ...\n  152  /// Loops with a known constant trip count below this number are vectorized only\n  153  /// if no scalar iteration overheads are incurred.\n  154: static cl::opt<unsigned> TinyTripCountVectorThreshold(\n  155      \"vectorizer-min-trip-count\", cl::init(16), cl::Hidden,\n  156      cl::desc(\"Loops with a constant trip count that is smaller than this \"\n  ...\n  158               \"are incurred.\"));\n  159  \n  160: static cl::opt<bool> MaximizeBandwidth(\n  161      \"vectorizer-maximize-bandwidth\", cl::init(false), cl::Hidden,\n  162      cl::desc(\"Maximize bandwidth when selecting vectorization factor which \"\n  163               \"will be determined by the smallest type in loop.\"));\n  164  \n  165: static cl::opt<bool> EnableInterleavedMemAccesses(\n  166      \"enable-interleaved-mem-accesses\", cl::init(false), cl::Hidden,\n  167      cl::desc(\"Enable vectorization on interleaved memory accesses in a loop\"));\n  168  \n  169  /// Maximum factor for an interleaved memory access.\n  170: static cl::opt<unsigned> MaxInterleaveGroupFactor(\n  171      \"max-interleave-group-factor\", cl::Hidden,\n  172      cl::desc(\"Maximum factor for an interleaved access group (default = 8)\"),\n  ...\n  177  static const unsigned TinyTripCountInterleaveThreshold = 128;\n  178  \n  179: static cl::opt<unsigned> ForceTargetNumScalarRegs(\n  180      \"force-target-num-scalar-regs\", cl::init(0), cl::Hidden,\n  181      cl::desc(\"A flag that overrides the target's number of scalar registers.\"));\n  182  \n  183: static cl::opt<unsigned> ForceTargetNumVectorRegs(\n  184      \"force-target-num-vector-regs\", cl::init(0), cl::Hidden,\n  185      cl::desc(\"A flag that overrides the target's number of vector registers.\"));\n  ...\n  188  static const unsigned MaxInterleaveFactor = 16;\n  189  \n  190: static cl::opt<unsigned> ForceTargetMaxScalarInterleaveFactor(\n  191      \"force-target-max-scalar-interleave\", cl::init(0), cl::Hidden,\n  192      cl::desc(\"A flag that overrides the target's max interleave factor for \"\n  193               \"scalar loops.\"));\n  194  \n  195: static cl::opt<unsigned> ForceTargetMaxVectorInterleaveFactor(\n  196      \"force-target-max-vector-interleave\", cl::init(0), cl::Hidden,\n  197      cl::desc(\"A flag that overrides the target's max interleave factor for \"\n  198               \"vectorized loops.\"));\n  199  \n  200: static cl::opt<unsigned> ForceTargetInstructionCost(\n  201      \"force-target-instruction-cost\", cl::init(0), cl::Hidden,\n  202      cl::desc(\"A flag that overrides the target's expected cost for \"\n  ...\n  204               \"useful for getting consistent testing.\"));\n  205  \n  206: static cl::opt<unsigned> SmallLoopCost(\n  207      \"small-loop-cost\", cl::init(20), cl::Hidden,\n  208      cl::desc(\n  209          \"The cost of a loop that is considered 'small' by the interleaver.\"));\n  210  \n  211: static cl::opt<bool> LoopVectorizeWithBlockFrequency(\n  212      \"loop-vectorize-with-block-frequency\", cl::init(false), cl::Hidden,\n  213      cl::desc(\"Enable the use of the block frequency analysis to access PGO \"\n  ...\n  216  \n  217  // Runtime interleave loops for load/store throughput.\n  218: static cl::opt<bool> EnableLoadStoreRuntimeInterleave(\n  219      \"enable-loadstore-runtime-interleave\", cl::init(true), cl::Hidden,\n  220      cl::desc(\n  ...\n  222  \n  223  /// The number of stores in a loop that are allowed to need predication.\n  224: static cl::opt<unsigned> NumberOfStoresToPredicate(\n  225      \"vectorize-num-stores-pred\", cl::init(1), cl::Hidden,\n  226      cl::desc(\"Max number of stores to be predicated behind an if.\"));\n  227  \n  228: static cl::opt<bool> EnableIndVarRegisterHeur(\n  229      \"enable-ind-var-reg-heur\", cl::init(true), cl::Hidden,\n  230      cl::desc(\"Count the induction variable only once when interleaving\"));\n  231  \n  232: static cl::opt<bool> EnableCondStoresVectorization(\n  233      \"enable-cond-stores-vec\", cl::init(true), cl::Hidden,\n  234      cl::desc(\"Enable if predication of stores during vectorization.\"));\n  235  \n  236: static cl::opt<unsigned> MaxNestedScalarReductionIC(\n  237      \"max-nested-scalar-reduction-interleave\", cl::init(2), cl::Hidden,\n  238      cl::desc(\"The maximum interleave count to use when interleaving a scalar \"\n  239               \"reduction in a nested loop.\"));\n  240  \n  241: static cl::opt<unsigned> PragmaVectorizeMemoryCheckThreshold(\n  242      \"pragma-vectorize-memory-check-threshold\", cl::init(128), cl::Hidden,\n  243      cl::desc(\"The maximum allowed number of runtime memory checks with a \"\n  244               \"vectorize(enable) pragma.\"));\n  245  \n  246: static cl::opt<unsigned> VectorizeSCEVCheckThreshold(\n  247      \"vectorize-scev-check-threshold\", cl::init(16), cl::Hidden,\n  248      cl::desc(\"The maximum number of SCEV checks allowed.\"));\n  249  \n  250: static cl::opt<unsigned> PragmaVectorizeSCEVCheckThreshold(\n  251      \"pragma-vectorize-scev-check-threshold\", cl::init(128), cl::Hidden,\n  252      cl::desc(\"The maximum number of SCEV checks allowed with a \"\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:\n  107  STATISTIC(NumVectorInstructions, \"Number of vector instructions generated\");\n  108  \n  109: static cl::opt<int>\n  110      SLPCostThreshold(\"slp-threshold\", cl::init(0), cl::Hidden,\n  111                       cl::desc(\"Only vectorize if you gain more than this \"\n  112                                \"number \"));\n  113  \n  114: static cl::opt<bool>\n  115  ShouldVectorizeHor(\"slp-vectorize-hor\", cl::init(true), cl::Hidden,\n  116                     cl::desc(\"Attempt to vectorize horizontal reductions\"));\n  117  \n  118: static cl::opt<bool> ShouldStartVectorizeHorAtStore(\n  119      \"slp-vectorize-hor-store\", cl::init(false), cl::Hidden,\n  120      cl::desc(\n  121          \"Attempt to vectorize horizontal reductions feeding into a store\"));\n  122  \n  123: static cl::opt<int>\n  124  MaxVectorRegSizeOption(\"slp-max-reg-size\", cl::init(128), cl::Hidden,\n  125      cl::desc(\"Attempt to vectorize for this register size in bits\"));\n  ...\n  129  /// instructions are spread over a wide range.\n  130  /// This limit is way higher than needed by real-world functions.\n  131: static cl::opt<int>\n  132  ScheduleRegionSizeBudget(\"slp-schedule-budget\", cl::init(100000), cl::Hidden,\n  133      cl::desc(\"Limit the size of the SLP scheduling region per block\"));\n  134  \n  135: static cl::opt<int> MinVectorRegSizeOption(\n  136      \"slp-min-reg-size\", cl::init(128), cl::Hidden,\n  137      cl::desc(\"Attempt to vectorize for this register size in bits\"));\n  138  \n  139: static cl::opt<unsigned> RecursionMaxDepth(\n  140      \"slp-recursion-max-depth\", cl::init(12), cl::Hidden,\n  141      cl::desc(\"Limit the recursion depth when building a vectorizable tree\"));\n  142  \n  143: static cl::opt<unsigned> MinTreeSize(\n  144      \"slp-min-tree-size\", cl::init(3), cl::Hidden,\n  145      cl::desc(\"Only vectorize small trees if they are fully vectorizable\"));\n  146  \n  147: static cl::opt<bool>\n  148      ViewSLPTree(\"view-slp-tree\", cl::Hidden,\n  149                  cl::desc(\"Display the SLP trees with Graphviz\"));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/BugDriver.cpp:\n   51  // source.\n   52  //\n   53: cl::opt<std::string> OutputFile(\"output\",\n   54                                  cl::desc(\"Specify a reference program output \"\n   55                                           \"(for miscompilation detection)\"));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/CrashDebugger.cpp:\n   38  \n   39  namespace {\n   40: cl::opt<bool> KeepMain(\"keep-main\",\n   41                         cl::desc(\"Force function reduction to keep main\"),\n   42                         cl::init(false));\n   43: cl::opt<bool> NoGlobalRM(\"disable-global-remove\",\n   44                           cl::desc(\"Do not remove global variables\"),\n   45                           cl::init(false));\n   46  \n   47: cl::opt<bool> ReplaceFuncsWithNull(\n   48      \"replace-funcs-with-null\",\n   49      cl::desc(\"When stubbing functions, replace all uses will null\"),\n   50      cl::init(false));\n   51: cl::opt<bool> DontReducePassList(\"disable-pass-list-reduction\",\n   52                                   cl::desc(\"Skip pass list reduction steps\"),\n   53                                   cl::init(false));\n   54  \n   55: cl::opt<bool> NoNamedMDRM(\"disable-namedmd-remove\",\n   56                            cl::desc(\"Do not remove global named metadata\"),\n   57                            cl::init(false));\n   58: cl::opt<bool> NoStripDebugInfo(\"disable-strip-debuginfo\",\n   59                                 cl::desc(\"Do not strip debug info metadata\"),\n   60                                 cl::init(false));\n   61: cl::opt<bool> NoStripDebugTypeInfo(\"disable-strip-debug-types\",\n   62                                 cl::desc(\"Do not strip debug type info metadata\"),\n   63                                 cl::init(false));\n   64: cl::opt<bool> VerboseErrors(\"verbose-errors\",\n   65                              cl::desc(\"Print the output of crashing program\"),\n   66                              cl::init(false));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/ExecutionDriver.cpp:\n   40  };\n   41  \n   42: cl::opt<double> AbsTolerance(\"abs-tolerance\",\n   43                               cl::desc(\"Absolute error tolerated\"),\n   44                               cl::init(0.0));\n   45: cl::opt<double> RelTolerance(\"rel-tolerance\",\n   46                               cl::desc(\"Relative error tolerated\"),\n   47                               cl::init(0.0));\n   48  \n   49: cl::opt<OutputType> InterpreterSel(\n   50      cl::desc(\"Specify the \\\"test\\\" i.e. suspect back-end:\"),\n   51      cl::values(clEnumValN(AutoPick, \"auto\", \"Use best guess\"),\n   ..\n   64      cl::init(AutoPick));\n   65  \n   66: cl::opt<OutputType> SafeInterpreterSel(\n   67      cl::desc(\"Specify \\\"safe\\\" i.e. known-good backend:\"),\n   68      cl::values(clEnumValN(AutoPick, \"safe-auto\", \"Use best guess\"),\n   ..\n   73      cl::init(AutoPick));\n   74  \n   75: cl::opt<std::string> SafeInterpreterPath(\n   76      \"safe-path\", cl::desc(\"Specify the path to the \\\"safe\\\" backend program\"),\n   77      cl::init(\"\"));\n   78  \n   79: cl::opt<bool> AppendProgramExitCode(\n   80      \"append-exit-code\",\n   81      cl::desc(\"Append the exit code to the output so it gets diff'd too\"),\n   82      cl::init(false));\n   83  \n   84: cl::opt<std::string>\n   85      InputFile(\"input\", cl::init(\"/dev/null\"),\n   86                cl::desc(\"Filename to pipe in as stdin (default: /dev/null)\"));\n   ..\n   93      \"Xlinker\", cl::desc(\"Additional arguments to pass to the linker\"));\n   94  \n   95: cl::opt<std::string> CustomCompileCommand(\n   96      \"compile-command\", cl::init(\"llc\"),\n   97      cl::desc(\"Command to compile the bitcode (use with -compile-custom) \"\n   98               \"(default: llc)\"));\n   99  \n  100: cl::opt<std::string> CustomExecCommand(\n  101      \"exec-command\", cl::init(\"simulate\"),\n  102      cl::desc(\"Command to execute the bitcode (use with -run-custom) \"\n  ...\n  111                                  cl::ZeroOrMore, cl::PositionalEatsArgs);\n  112  \n  113: cl::opt<std::string>\n  114      OutputPrefix(\"output-prefix\", cl::init(\"bugpoint\"),\n  115                   cl::desc(\"Prefix to use for outputs (default: 'bugpoint')\"));\n  ...\n  125                                     cl::ZeroOrMore, cl::PositionalEatsArgs);\n  126  \n  127: cl::opt<std::string> CCBinary(\"gcc\", cl::init(\"\"),\n  128                                cl::desc(\"The gcc binary to use.\"));\n  129  \n\n/home/mw/0-rust/src/llvm/tools/bugpoint/ExtractFunction.cpp:\n   39  namespace llvm {\n   40  bool DisableSimplifyCFG = false;\n   41: extern cl::opt<std::string> OutputPrefix;\n   42  } // End llvm namespace\n   43  \n   44  namespace {\n   45: cl::opt<bool> NoDCE(\"disable-dce\",\n   46                      cl::desc(\"Do not use the -dce pass to reduce testcases\"));\n   47: cl::opt<bool, true>\n   48      NoSCFG(\"disable-simplifycfg\", cl::location(DisableSimplifyCFG),\n   49             cl::desc(\"Do not use the -simplifycfg pass to reduce testcases\"));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/Miscompilation.cpp:\n   31  \n   32  namespace llvm {\n   33: extern cl::opt<std::string> OutputPrefix;\n   34  extern cl::list<std::string> InputArgv;\n   35  } // end namespace llvm\n   36  \n   37  namespace {\n   38: static llvm::cl::opt<bool> DisableLoopExtraction(\n   39      \"disable-loop-extraction\",\n   40      cl::desc(\"Don't extract loops when searching for miscompilations\"),\n   41      cl::init(false));\n   42: static llvm::cl::opt<bool> DisableBlockExtraction(\n   43      \"disable-block-extraction\",\n   44      cl::desc(\"Don't extract blocks when searching for miscompilations\"),\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/OptimizerDriver.cpp:\n   36  \n   37  namespace llvm {\n   38: extern cl::opt<std::string> OutputPrefix;\n   39  }\n   40  \n   41: static cl::opt<bool> PreserveBitcodeUseListOrder(\n   42      \"preserve-bc-uselistorder\",\n   43      cl::desc(\"Preserve use-list order when writing LLVM bitcode.\"),\n   ..\n   46  // ChildOutput - This option captures the name of the child output file that\n   47  // is set up by the parent bugpoint process\n   48: static cl::opt<std::string> ChildOutput(\"child-output\", cl::ReallyHidden);\n   49: static cl::opt<std::string>\n   50      OptCmd(\"opt-command\", cl::init(\"\"),\n   51             cl::desc(\"Path to opt. (default: search path \"\n   ..\n  117  }\n  118  \n  119: cl::opt<bool> SilencePasses(\n  120      \"silence-passes\",\n  121      cl::desc(\"Suppress output of running passes (both stdout and stderr)\"));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/ToolRunner.cpp:\n   28  \n   29  namespace llvm {\n   30: cl::opt<bool> SaveTemps(\"save-temps\", cl::init(false),\n   31                          cl::desc(\"Save temporary files\"));\n   32  }\n   33  \n   34  namespace {\n   35: cl::opt<std::string>\n   36      RemoteClient(\"remote-client\",\n   37                   cl::desc(\"Remote execution client (rsh/ssh)\"));\n   38  \n   39: cl::opt<std::string> RemoteHost(\"remote-host\",\n   40                                  cl::desc(\"Remote execution (rsh/ssh) host\"));\n   41  \n   42: cl::opt<std::string> RemotePort(\"remote-port\",\n   43                                  cl::desc(\"Remote execution (rsh/ssh) port\"));\n   44  \n   45: cl::opt<std::string> RemoteUser(\"remote-user\",\n   46                                  cl::desc(\"Remote execution (rsh/ssh) user id\"));\n   47  \n   48: cl::opt<std::string>\n   49      RemoteExtra(\"remote-extra-options\",\n   50                  cl::desc(\"Remote execution (rsh/ssh) extra options\"));\n\n/home/mw/0-rust/src/llvm/tools/bugpoint/ToolRunner.h:\n   28  namespace llvm {\n   29  \n   30: extern cl::opt<bool> SaveTemps;\n   31  extern Triple TargetTriple;\n   32  \n\n/home/mw/0-rust/src/llvm/tools/bugpoint/bugpoint.cpp:\n   37  using namespace llvm;\n   38  \n   39: static cl::opt<bool>\n   40      FindBugs(\"find-bugs\", cl::desc(\"Run many different optimization sequences \"\n   41                                     \"on program to find bugs\"),\n   ..\n   46                     cl::desc(\"<input llvm ll/bc files>\"));\n   47  \n   48: static cl::opt<unsigned> TimeoutValue(\n   49      \"timeout\", cl::init(300), cl::value_desc(\"seconds\"),\n   50      cl::desc(\"Number of seconds program is allowed to run before it \"\n   51               \"is killed (default is 300s), 0 disables timeout\"));\n   52  \n   53: static cl::opt<int> MemoryLimit(\n   54      \"mlimit\", cl::init(-1), cl::value_desc(\"MBytes\"),\n   55      cl::desc(\"Maximum amount of memory to use. 0 disables check. Defaults to \"\n   56               \"400MB (800MB under valgrind, 0 with sanitizers).\"));\n   57  \n   58: static cl::opt<bool>\n   59      UseValgrind(\"enable-valgrind\",\n   60                  cl::desc(\"Run optimizations through valgrind\"));\n   ..\n   66      PassList(cl::desc(\"Passes available:\"), cl::ZeroOrMore);\n   67  \n   68: static cl::opt<bool>\n   69      StandardLinkOpts(\"std-link-opts\",\n   70                       cl::desc(\"Include the standard link time optimizations\"));\n   71  \n   72: static cl::opt<bool>\n   73      OptLevelO1(\"O1\", cl::desc(\"Optimization level 1. Identical to 'opt -O1'\"));\n   74  \n   75: static cl::opt<bool>\n   76      OptLevelO2(\"O2\", cl::desc(\"Optimization level 2. Identical to 'opt -O2'\"));\n   77  \n   78: static cl::opt<bool> OptLevelOs(\n   79      \"Os\",\n   80      cl::desc(\n   81          \"Like -O2 with extra optimizations for size. Similar to clang -Os\"));\n   82  \n   83: static cl::opt<bool>\n   84      OptLevelO3(\"O3\", cl::desc(\"Optimization level 3. Identical to 'opt -O3'\"));\n   85  \n   86: static cl::opt<std::string>\n   87      OverrideTriple(\"mtriple\", cl::desc(\"Override target triple for module\"));\n   88  \n\n/home/mw/0-rust/src/llvm/tools/llc/llc.cpp:\n   58  // and back-end code generation options are specified with the target machine.\n   59  //\n   60: static cl::opt<std::string>\n   61  InputFilename(cl::Positional, cl::desc(\"<input bitcode>\"), cl::init(\"-\"));\n   62  \n   63: static cl::opt<std::string>\n   64  InputLanguage(\"x\", cl::desc(\"Input language ('ir' or 'mir')\"));\n   65  \n   66: static cl::opt<std::string>\n   67  OutputFilename(\"o\", cl::desc(\"Output filename\"), cl::value_desc(\"filename\"));\n   68  \n   69: static cl::opt<unsigned>\n   70  TimeCompilations(\"time-compilations\", cl::Hidden, cl::init(1u),\n   71                   cl::value_desc(\"N\"),\n   72                   cl::desc(\"Repeat compilation N times for timing\"));\n   73  \n   74: static cl::opt<bool>\n   75  NoIntegratedAssembler(\"no-integrated-as\", cl::Hidden,\n   76                        cl::desc(\"Disable integrated assembler\"));\n   77  \n   78: static cl::opt<bool>\n   79      PreserveComments(\"preserve-as-comments\", cl::Hidden,\n   80                       cl::desc(\"Preserve Comments in outputted assembly\"),\n   ..\n   82  \n   83  // Determine optimization level.\n   84: static cl::opt<char>\n   85  OptLevel(\"O\",\n   86           cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n   ..\n   90           cl::init(' '));\n   91  \n   92: static cl::opt<std::string>\n   93  TargetTriple(\"mtriple\", cl::desc(\"Override target triple for module\"));\n   94  \n   95: static cl::opt<std::string> SplitDwarfFile(\n   96      \"split-dwarf-file\",\n   97      cl::desc(\n   98          \"Specify the name of the .dwo file to encode in the DWARF output\"));\n   99  \n  100: static cl::opt<bool> NoVerify(\"disable-verify\", cl::Hidden,\n  101                                cl::desc(\"Do not verify input module\"));\n  102  \n  103: static cl::opt<bool> DisableSimplifyLibCalls(\"disable-simplify-libcalls\",\n  104                                               cl::desc(\"Disable simplify-libcalls\"));\n  105  \n  106: static cl::opt<bool> ShowMCEncoding(\"show-mc-encoding\", cl::Hidden,\n  107                                      cl::desc(\"Show encoding in .s output\"));\n  108  \n  109: static cl::opt<bool> EnableDwarfDirectory(\n  110      \"enable-dwarf-directory\", cl::Hidden,\n  111      cl::desc(\"Use .file directives with an explicit directory.\"));\n  112  \n  113: static cl::opt<bool> AsmVerbose(\"asm-verbose\",\n  114                                  cl::desc(\"Add comments to directives.\"),\n  115                                  cl::init(true));\n  116  \n  117: static cl::opt<bool>\n  118      CompileTwice(\"compile-twice\", cl::Hidden,\n  119                   cl::desc(\"Run everything twice, re-using the same pass \"\n  ...\n  121                   cl::init(false));\n  122  \n  123: static cl::opt<bool> DiscardValueNames(\n  124      \"discard-value-names\",\n  125      cl::desc(\"Discard names from Value (other than GlobalValue).\"),\n  ...\n  128  static cl::list<std::string> IncludeDirs(\"I\", cl::desc(\"include search path\"));\n  129  \n  130: static cl::opt<bool> PassRemarksWithHotness(\n  131      \"pass-remarks-with-hotness\",\n  132      cl::desc(\"With PGO, include profile count in optimization remarks\"),\n  133      cl::Hidden);\n  134  \n  135: static cl::opt<unsigned> PassRemarksHotnessThreshold(\n  136      \"pass-remarks-hotness-threshold\",\n  137      cl::desc(\"Minimum profile count required for an optimization remark to be output\"),\n  138      cl::Hidden);\n  139  \n  140: static cl::opt<std::string>\n  141      RemarksFilename(\"pass-remarks-output\",\n  142                      cl::desc(\"YAML output filename for pass remarks\"),\n  ...\n  160  static RunPassOption RunPassOpt;\n  161  \n  162: static cl::opt<RunPassOption, true, cl::parser<std::string>> RunPass(\n  163      \"run-pass\",\n  164      cl::desc(\"Run compiler only for specified passes (comma separated list)\"),\n\n/home/mw/0-rust/src/llvm/tools/lli/OrcLazyJIT.cpp:\n   34  } // end anonymous namespace\n   35  \n   36: static cl::opt<DumpKind> OrcDumpKind(\n   37      \"orc-lazy-debug\", cl::desc(\"Debug dumping for the orc-lazy JIT.\"),\n   38      cl::init(DumpKind::NoDump),\n   ..\n   48      cl::Hidden);\n   49  \n   50: static cl::opt<bool> OrcInlineStubs(\"orc-lazy-inline-stubs\",\n   51                                      cl::desc(\"Try to inline stubs\"),\n   52                                      cl::init(true), cl::Hidden);\n\n/home/mw/0-rust/src/llvm/tools/lli/lli.cpp:\n   72    enum class JITKind { MCJIT, OrcMCJITReplacement, OrcLazy };\n   73  \n   74:   cl::opt<std::string>\n   75    InputFile(cl::desc(\"<input bitcode>\"), cl::Positional, cl::init(\"-\"));\n   76  \n   ..\n   78    InputArgv(cl::ConsumeAfter, cl::desc(\"<program arguments>...\"));\n   79  \n   80:   cl::opt<bool> ForceInterpreter(\"force-interpreter\",\n   81                                   cl::desc(\"Force interpretation: disable JIT\"),\n   82                                   cl::init(false));\n   83  \n   84:   cl::opt<JITKind> UseJITKind(\"jit-kind\",\n   85                                cl::desc(\"Choose underlying JIT kind.\"),\n   86                                cl::init(JITKind::MCJIT),\n   ..\n   98    // the JIT compilation process. Use a forked process and a copying\n   99    // memory manager with IPC to execute using this functionality.\n  100:   cl::opt<bool> RemoteMCJIT(\"remote-mcjit\",\n  101      cl::desc(\"Execute MCJIT'ed code in a separate process.\"),\n  102      cl::init(false));\n  ...\n  106    // execution. The child process will be executed and will communicate with\n  107    // lli via stdin/stdout pipes.\n  108:   cl::opt<std::string>\n  109    ChildExecPath(\"mcjit-remote-process\",\n  110                  cl::desc(\"Specify the filename of the process to launch \"\n  ...\n  114  \n  115    // Determine optimization level.\n  116:   cl::opt<char>\n  117    OptLevel(\"O\",\n  118             cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n  ...\n  122             cl::init(' '));\n  123  \n  124:   cl::opt<std::string>\n  125    TargetTriple(\"mtriple\", cl::desc(\"Override target triple for module\"));\n  126  \n  127:   cl::opt<std::string>\n  128    EntryFunc(\"entry-function\",\n  129              cl::desc(\"Specify the entry function (default = 'main') \"\n  ...\n  147           cl::value_desc(\"input archive\"));\n  148  \n  149:   cl::opt<bool>\n  150    EnableCacheManager(\"enable-cache-manager\",\n  151          cl::desc(\"Use cache manager to save/load mdoules\"),\n  152          cl::init(false));\n  153  \n  154:   cl::opt<std::string>\n  155    ObjectCacheDir(\"object-cache-dir\",\n  156                    cl::desc(\"Directory to store cached object files \"\n  ...\n  158                    cl::init(\"\"));\n  159  \n  160:   cl::opt<std::string>\n  161    FakeArgv0(\"fake-argv0\",\n  162              cl::desc(\"Override the 'argv[0]' value passed into the executing\"\n  163                       \" program\"), cl::value_desc(\"executable\"));\n  164  \n  165:   cl::opt<bool>\n  166    DisableCoreFiles(\"disable-core-files\", cl::Hidden,\n  167                     cl::desc(\"Disable emission of core files if possible\"));\n  168  \n  169:   cl::opt<bool>\n  170    NoLazyCompilation(\"disable-lazy-compilation\",\n  171                    cl::desc(\"Disable JIT lazy compilation\"),\n  172                    cl::init(false));\n  173  \n  174:   cl::opt<bool>\n  175    GenerateSoftFloatCalls(\"soft-float\",\n  176      cl::desc(\"Generate software floating point library calls\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-ar/llvm-ar.cpp:\n   82                 cl::desc(\"[relpos] [count] <archive-file> [members]...\"));\n   83  \n   84: static cl::opt<bool> MRI(\"M\", cl::desc(\"\"));\n   85: static cl::opt<std::string> Plugin(\"plugin\", cl::desc(\"plugin (ignored for compatibility\"));\n   86  \n   87  namespace {\n   ..\n   89  }\n   90  \n   91: static cl::opt<Format>\n   92      FormatOpt(\"format\", cl::desc(\"Archive format to create\"),\n   93                cl::values(clEnumValN(Default, \"default\", \"default\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-as/llvm-as.cpp:\n   32  using namespace llvm;\n   33  \n   34: static cl::opt<std::string> InputFilename(cl::Positional,\n   35                                            cl::desc(\"<input .llvm file>\"),\n   36                                            cl::init(\"-\"));\n   37  \n   38: static cl::opt<std::string> OutputFilename(\"o\",\n   39                                             cl::desc(\"Override output filename\"),\n   40                                             cl::value_desc(\"filename\"));\n   41  \n   42: static cl::opt<bool> Force(\"f\", cl::desc(\"Enable binary output on terminals\"));\n   43  \n   44: static cl::opt<bool> DisableOutput(\"disable-output\", cl::desc(\"Disable output\"),\n   45                                     cl::init(false));\n   46  \n   47: static cl::opt<bool> EmitModuleHash(\"module-hash\", cl::desc(\"Emit module hash\"),\n   48                                      cl::init(false));\n   49  \n   50: static cl::opt<bool> DumpAsm(\"d\", cl::desc(\"Print assembly as parsed\"),\n   51                               cl::Hidden);\n   52  \n   53: static cl::opt<bool>\n   54      DisableVerify(\"disable-verify\", cl::Hidden,\n   55                    cl::desc(\"Do not run verifier on input LLVM (dangerous!)\"));\n   56  \n   57: static cl::opt<bool> PreserveBitcodeUseListOrder(\n   58      \"preserve-bc-uselistorder\",\n   59      cl::desc(\"Preserve use-list order when writing LLVM bitcode.\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-bcanalyzer/llvm-bcanalyzer.cpp:\n   42  using namespace llvm;\n   43  \n   44: static cl::opt<std::string>\n   45    InputFilename(cl::Positional, cl::desc(\"<input bitcode>\"), cl::init(\"-\"));\n   46  \n   47: static cl::opt<bool> Dump(\"dump\", cl::desc(\"Dump low level bitcode trace\"));\n   48  \n   49  //===----------------------------------------------------------------------===//\n   ..\n   51  //===----------------------------------------------------------------------===//\n   52  \n   53: static cl::opt<bool> NoHistogram(\"disable-histogram\",\n   54                                   cl::desc(\"Do not print per-code histogram\"));\n   55  \n   56: static cl::opt<bool>\n   57  NonSymbolic(\"non-symbolic\",\n   58              cl::desc(\"Emit numeric info in dump even if\"\n   59                       \" symbolic info is available\"));\n   60  \n   61: static cl::opt<std::string>\n   62    BlockInfoFilename(\"block-info\",\n   63                      cl::desc(\"Use the BLOCK_INFO from the given file\"));\n   64  \n   65: static cl::opt<bool>\n   66    ShowBinaryBlobs(\"show-binary-blobs\",\n   67                    cl::desc(\"Print binary blobs using hex escapes\"));\n   68  \n   69: static cl::opt<std::string> CheckHash(\n   70      \"check-hash\",\n   71      cl::desc(\"Check module hash using the argument as a string table\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-cat/llvm-cat.cpp:\n   34  using namespace llvm;\n   35  \n   36: static cl::opt<bool>\n   37      BinaryCat(\"b\", cl::desc(\"Whether to perform binary concatenation\"));\n   38  \n   39: static cl::opt<std::string> OutputFilename(\"o\", cl::Required,\n   40                                             cl::desc(\"Output filename\"),\n   41                                             cl::value_desc(\"filename\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.cpp:\n   45  bool IgnoreDWARFFlag;\n   46  \n   47: static cl::opt<bool, true> IgnoreDWARFArg(\n   48      \"ignore-dwarf\",\n   49      cl::desc(\n\n/home/mw/0-rust/src/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.cpp:\n   43  unsigned long long SearchLengthForConditionalBranch;\n   44  \n   45: static cl::opt<unsigned long long, true> SearchLengthForUndefArg(\n   46      \"search-length-undef\",\n   47      cl::desc(\"Specify the maximum amount of instructions \"\n   ..\n   50      cl::location(SearchLengthForUndef), cl::init(2));\n   51  \n   52: static cl::opt<unsigned long long, true> SearchLengthForConditionalBranchArg(\n   53      \"search-length-cb\",\n   54      cl::desc(\"Specify the maximum amount of instructions \"\n\n/home/mw/0-rust/src/llvm/tools/llvm-cfi-verify/llvm-cfi-verify.cpp:\n   33  using namespace llvm::cfi_verify;\n   34  \n   35: cl::opt<std::string> InputFilename(cl::Positional, cl::desc(\"<input file>\"),\n   36                                     cl::Required);\n   37: cl::opt<std::string> BlacklistFilename(cl::Positional,\n   38                                         cl::desc(\"[blacklist file]\"),\n   39                                         cl::init(\"-\"));\n   40: cl::opt<bool> PrintGraphs(\n   41      \"print-graphs\",\n   42      cl::desc(\"Print graphs around indirect CF instructions in DOT format.\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-cov/CodeCoverage.cpp:\n  536  \n  537  int CodeCoverageTool::run(Command Cmd, int argc, const char **argv) {\n  538:   cl::opt<std::string> CovFilename(\n  539        cl::Positional, cl::desc(\"Covered executable or object file.\"));\n  540  \n  ...\n  546        cl::Positional, cl::desc(\"<Source files>\"), cl::ZeroOrMore);\n  547  \n  548:   cl::opt<bool> DebugDumpCollectedPaths(\n  549        \"dump-collected-paths\", cl::Optional, cl::Hidden,\n  550        cl::desc(\"Show the collected paths to source files\"));\n  551  \n  552:   cl::opt<std::string, true> PGOFilename(\n  553        \"instr-profile\", cl::Required, cl::location(this->PGOFilename),\n  554        cl::desc(\n  ...\n  558        \"arch\", cl::desc(\"architectures of the coverage mapping binaries\"));\n  559  \n  560:   cl::opt<bool> DebugDump(\"dump\", cl::Optional,\n  561                            cl::desc(\"Show internal debug dump\"));\n  562  \n  563:   cl::opt<CoverageViewOptions::OutputFormat> Format(\n  564        \"format\", cl::desc(\"Output format for line-based coverage reports\"),\n  565        cl::values(clEnumValN(CoverageViewOptions::OutputFormat::Text, \"text\",\n  ...\n  569        cl::init(CoverageViewOptions::OutputFormat::Text));\n  570  \n  571:   cl::opt<std::string> PathRemap(\n  572        \"path-equivalence\", cl::Optional,\n  573        cl::desc(\"<from>,<to> Map coverage data paths to local source file \"\n  ...\n  593        cl::ZeroOrMore, cl::cat(FilteringCategory));\n  594  \n  595:   cl::opt<double> RegionCoverageLtFilter(\n  596        \"region-coverage-lt\", cl::Optional,\n  597        cl::desc(\"Show code coverage only for functions with region coverage \"\n  ...\n  599        cl::cat(FilteringCategory));\n  600  \n  601:   cl::opt<double> RegionCoverageGtFilter(\n  602        \"region-coverage-gt\", cl::Optional,\n  603        cl::desc(\"Show code coverage only for functions with region coverage \"\n  ...\n  605        cl::cat(FilteringCategory));\n  606  \n  607:   cl::opt<double> LineCoverageLtFilter(\n  608        \"line-coverage-lt\", cl::Optional,\n  609        cl::desc(\"Show code coverage only for functions with line coverage less \"\n  ...\n  611        cl::cat(FilteringCategory));\n  612  \n  613:   cl::opt<double> LineCoverageGtFilter(\n  614        \"line-coverage-gt\", cl::Optional,\n  615        cl::desc(\"Show code coverage only for functions with line coverage \"\n  ...\n  617        cl::cat(FilteringCategory));\n  618  \n  619:   cl::opt<cl::boolOrDefault> UseColor(\n  620        \"use-color\", cl::desc(\"Emit colored output (default=autodetect)\"),\n  621        cl::init(cl::BOU_UNSET));\n  ...\n  624        \"Xdemangler\", cl::desc(\"<demangler-path>|<demangler-option>\"));\n  625  \n  626:   cl::opt<bool> RegionSummary(\n  627        \"show-region-summary\", cl::Optional,\n  628        cl::desc(\"Show region statistics in summary table\"),\n  629        cl::init(true));\n  630  \n  631:   cl::opt<bool> InstantiationSummary(\n  632        \"show-instantiation-summary\", cl::Optional,\n  633        cl::desc(\"Show instantiation statistics in summary table\"));\n  634  \n  635:   cl::opt<bool> SummaryOnly(\n  636        \"summary-only\", cl::Optional,\n  637        cl::desc(\"Export only summary information for each source file\"));\n  ...\n  770    cl::OptionCategory ViewCategory(\"Viewing options\");\n  771  \n  772:   cl::opt<bool> ShowLineExecutionCounts(\n  773        \"show-line-counts\", cl::Optional,\n  774        cl::desc(\"Show the execution counts for each line\"), cl::init(true),\n  775        cl::cat(ViewCategory));\n  776  \n  777:   cl::opt<bool> ShowRegions(\n  778        \"show-regions\", cl::Optional,\n  779        cl::desc(\"Show the execution counts for each region\"),\n  780        cl::cat(ViewCategory));\n  781  \n  782:   cl::opt<bool> ShowBestLineRegionsCounts(\n  783        \"show-line-counts-or-regions\", cl::Optional,\n  784        cl::desc(\"Show the execution counts for each line, or the execution \"\n  ...\n  786        cl::cat(ViewCategory));\n  787  \n  788:   cl::opt<bool> ShowExpansions(\"show-expansions\", cl::Optional,\n  789                                 cl::desc(\"Show expanded source regions\"),\n  790                                 cl::cat(ViewCategory));\n  791  \n  792:   cl::opt<bool> ShowInstantiations(\"show-instantiations\", cl::Optional,\n  793                                     cl::desc(\"Show function instantiations\"),\n  794                                     cl::init(true), cl::cat(ViewCategory));\n  795  \n  796:   cl::opt<std::string> ShowOutputDirectory(\n  797        \"output-dir\", cl::init(\"\"),\n  798        cl::desc(\"Directory in which coverage information is written out\"));\n  ...\n  800                                   cl::aliasopt(ShowOutputDirectory));\n  801  \n  802:   cl::opt<uint32_t> TabSize(\n  803        \"tab-size\", cl::init(2),\n  804        cl::desc(\n  805            \"Set tab expansion size for html coverage reports (default = 2)\"));\n  806  \n  807:   cl::opt<std::string> ProjectTitle(\n  808        \"project-title\", cl::Optional,\n  809        cl::desc(\"Set project title for the coverage report\"));\n  810  \n  811:   cl::opt<unsigned> NumThreads(\n  812        \"num-threads\", cl::init(0),\n  813        cl::desc(\"Number of merge threads to use (default: autodetect)\"));\n  ...\n  935  int CodeCoverageTool::report(int argc, const char **argv,\n  936                               CommandLineParserType commandLineParser) {\n  937:   cl::opt<bool> ShowFunctionSummaries(\n  938        \"show-functions\", cl::Optional, cl::init(false),\n  939        cl::desc(\"Show coverage summaries for each function\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-cov/TestingSupport.cpp:\n   20  \n   21  int convertForTestingMain(int argc, const char *argv[]) {\n   22:   cl::opt<std::string> InputSourceFile(cl::Positional, cl::Required,\n   23                                         cl::desc(\"<Source file>\"));\n   24  \n   25:   cl::opt<std::string> OutputFilename(\n   26        \"o\", cl::Required,\n   27        cl::desc(\n\n/home/mw/0-rust/src/llvm/tools/llvm-cov/gcov.cpp:\n   86                                      cl::desc(\"SOURCEFILE\"));\n   87  \n   88:   cl::opt<bool> AllBlocks(\"a\", cl::Grouping, cl::init(false),\n   89                            cl::desc(\"Display all basic blocks\"));\n   90    cl::alias AllBlocksA(\"all-blocks\", cl::aliasopt(AllBlocks));\n   91  \n   92:   cl::opt<bool> BranchProb(\"b\", cl::Grouping, cl::init(false),\n   93                             cl::desc(\"Display branch probabilities\"));\n   94    cl::alias BranchProbA(\"branch-probabilities\", cl::aliasopt(BranchProb));\n   95  \n   96:   cl::opt<bool> BranchCount(\"c\", cl::Grouping, cl::init(false),\n   97                              cl::desc(\"Display branch counts instead \"\n   98                                       \"of percentages (requires -b)\"));\n   99    cl::alias BranchCountA(\"branch-counts\", cl::aliasopt(BranchCount));\n  100  \n  101:   cl::opt<bool> LongNames(\"l\", cl::Grouping, cl::init(false),\n  102                            cl::desc(\"Prefix filenames with the main file\"));\n  103    cl::alias LongNamesA(\"long-file-names\", cl::aliasopt(LongNames));\n  104  \n  105:   cl::opt<bool> FuncSummary(\"f\", cl::Grouping, cl::init(false),\n  106                              cl::desc(\"Show coverage for each function\"));\n  107    cl::alias FuncSummaryA(\"function-summaries\", cl::aliasopt(FuncSummary));\n  108  \n  109:   cl::opt<bool> NoOutput(\"n\", cl::Grouping, cl::init(false),\n  110                           cl::desc(\"Do not output any .gcov files\"));\n  111    cl::alias NoOutputA(\"no-output\", cl::aliasopt(NoOutput));\n  112  \n  113:   cl::opt<std::string> ObjectDir(\n  114        \"o\", cl::value_desc(\"DIR|FILE\"), cl::init(\"\"),\n  115        cl::desc(\"Find objects in DIR or based on FILE's path\"));\n  ...\n  117    cl::alias ObjectDirB(\"object-file\", cl::aliasopt(ObjectDir));\n  118  \n  119:   cl::opt<bool> PreservePaths(\"p\", cl::Grouping, cl::init(false),\n  120                                cl::desc(\"Preserve path components\"));\n  121    cl::alias PreservePathsA(\"preserve-paths\", cl::aliasopt(PreservePaths));\n  122  \n  123:   cl::opt<bool> UncondBranch(\"u\", cl::Grouping, cl::init(false),\n  124                               cl::desc(\"Display unconditional branch info \"\n  125                                        \"(requires -b)\"));\n  ...\n  127  \n  128    cl::OptionCategory DebugCat(\"Internal and debugging options\");\n  129:   cl::opt<bool> DumpGCOV(\"dump\", cl::init(false), cl::cat(DebugCat),\n  130                           cl::desc(\"Dump the gcov file to stderr\"));\n  131:   cl::opt<std::string> InputGCNO(\"gcno\", cl::cat(DebugCat), cl::init(\"\"),\n  132                                   cl::desc(\"Override inferred gcno file\"));\n  133:   cl::opt<std::string> InputGCDA(\"gcda\", cl::cat(DebugCat), cl::init(\"\"),\n  134                                   cl::desc(\"Override inferred gcda file\"));\n  135  \n\n/home/mw/0-rust/src/llvm/tools/llvm-cxxfilt/llvm-cxxfilt.cpp:\n   29    GNAT   ///< ADA copiler (gnat)\n   30  };\n   31: static cl::opt<Style>\n   32      Format(\"format\", cl::desc(\"decoration style\"),\n   33             cl::values(clEnumValN(Auto, \"auto\", \"auto-detect style\"),\n   ..\n   37                               cl::aliasopt(Format));\n   38  \n   39: static cl::opt<bool> StripUnderscore(\"strip-underscore\",\n   40                                       cl::desc(\"strip the leading underscore\"),\n   41                                       cl::init(false));\n   ..\n   44                                        cl::aliasopt(StripUnderscore));\n   45  \n   46: static cl::opt<bool>\n   47      Types(\"types\",\n   48            cl::desc(\"attempt to demangle types as well as function names\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-diff/llvm-diff.cpp:\n   57  }\n   58  \n   59: static cl::opt<std::string> LeftFilename(cl::Positional,\n   60                                           cl::desc(\"<first file>\"),\n   61                                           cl::Required);\n   62: static cl::opt<std::string> RightFilename(cl::Positional,\n   63                                            cl::desc(\"<second file>\"),\n   64                                            cl::Required);\n\n/home/mw/0-rust/src/llvm/tools/llvm-dis/llvm-dis.cpp:\n   38  using namespace llvm;\n   39  \n   40: static cl::opt<std::string>\n   41  InputFilename(cl::Positional, cl::desc(\"<input bitcode>\"), cl::init(\"-\"));\n   42  \n   43: static cl::opt<std::string>\n   44  OutputFilename(\"o\", cl::desc(\"Override output filename\"),\n   45                 cl::value_desc(\"filename\"));\n   46  \n   47: static cl::opt<bool>\n   48  Force(\"f\", cl::desc(\"Enable binary output on terminals\"));\n   49  \n   50: static cl::opt<bool>\n   51  DontPrint(\"disable-output\", cl::desc(\"Don't output the .ll file\"), cl::Hidden);\n   52  \n   53: static cl::opt<bool>\n   54      SetImporting(\"set-importing\",\n   55                   cl::desc(\"Set lazy loading to pretend to import a module\"),\n   56                   cl::Hidden);\n   57  \n   58: static cl::opt<bool>\n   59      ShowAnnotations(\"show-annotations\",\n   60                      cl::desc(\"Add informational comments to the .ll file\"));\n   61  \n   62: static cl::opt<bool> PreserveAssemblyUseListOrder(\n   63      \"preserve-ll-uselistorder\",\n   64      cl::desc(\"Preserve use-list order when writing LLVM assembly.\"),\n   65      cl::init(false), cl::Hidden);\n   66  \n   67: static cl::opt<bool>\n   68      MaterializeMetadata(\"materialize-metadata\",\n   69                          cl::desc(\"Load module without materializing metadata, \"\n\n/home/mw/0-rust/src/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp:\n  205                     desc(\"Abbreviate the description of type unit entries.\"),\n  206                     cat(DwarfDumpCategory));\n  207: static cl::opt<bool>\n  208      Statistics(\"statistics\",\n  209                 cl::desc(\"Emit JSON-formatted debug info quality metrics.\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-extract/llvm-extract.cpp:\n   38  \n   39  // InputFilename - The filename to read from.\n   40: static cl::opt<std::string>\n   41  InputFilename(cl::Positional, cl::desc(\"<input bitcode file>\"),\n   42                cl::init(\"-\"), cl::value_desc(\"filename\"));\n   43  \n   44: static cl::opt<std::string>\n   45  OutputFilename(\"o\", cl::desc(\"Specify output filename\"),\n   46                 cl::value_desc(\"filename\"), cl::init(\"-\"));\n   47  \n   48: static cl::opt<bool>\n   49  Force(\"f\", cl::desc(\"Enable binary output on terminals\"));\n   50  \n   51: static cl::opt<bool>\n   52  DeleteFn(\"delete\", cl::desc(\"Delete specified Globals from Module\"));\n   53  \n   54: static cl::opt<bool>\n   55      Recursive(\"recursive\",\n   56                cl::desc(\"Recursively extract all called functions\"));\n   ..\n   93                       cl::ZeroOrMore, cl::value_desc(\"rglobal\"));\n   94  \n   95: static cl::opt<bool>\n   96  OutputAssembly(\"S\",\n   97                 cl::desc(\"Write output as LLVM assembly\"), cl::Hidden);\n   98  \n   99: static cl::opt<bool> PreserveBitcodeUseListOrder(\n  100      \"preserve-bc-uselistorder\",\n  101      cl::desc(\"Preserve use-list order when writing LLVM bitcode.\"),\n  102      cl::init(true), cl::Hidden);\n  103  \n  104: static cl::opt<bool> PreserveAssemblyUseListOrder(\n  105      \"preserve-ll-uselistorder\",\n  106      cl::desc(\"Preserve use-list order when writing LLVM assembly.\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp:\n   37  using namespace llvm;\n   38  \n   39: static cl::opt<char>\n   40  OptLevel(\"O\",\n   41           cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n   ..\n   45           cl::init(' '));\n   46  \n   47: static cl::opt<std::string>\n   48  TargetTriple(\"mtriple\", cl::desc(\"Override target triple for module\"));\n   49  \n\n/home/mw/0-rust/src/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:\n  174  } // end anonymous namespace\n  175  \n  176: static cl::opt<std::string>\n  177  InputFilename(cl::Positional, cl::desc(\"<input IR file>\"),\n  178                 cl::Required);\n\n/home/mw/0-rust/src/llvm/tools/llvm-link/llvm-link.cpp:\n   63  // exported (imported by a different llvm-link -import invocation), to ensure\n   64  // consistent promotion and renaming of locals.\n   65: static cl::opt<std::string>\n   66      SummaryIndex(\"summary-index\", cl::desc(\"Module summary index filename\"),\n   67                   cl::init(\"\"), cl::value_desc(\"filename\"));\n   68  \n   69: static cl::opt<std::string>\n   70  OutputFilename(\"o\", cl::desc(\"Override output filename\"), cl::init(\"-\"),\n   71                 cl::value_desc(\"filename\"));\n   72  \n   73: static cl::opt<bool>\n   74  Internalize(\"internalize\", cl::desc(\"Internalize linked symbols\"));\n   75  \n   76: static cl::opt<bool>\n   77      DisableDITypeMap(\"disable-debug-info-type-map\",\n   78                       cl::desc(\"Don't use a uniquing type map for debug info\"));\n   79  \n   80: static cl::opt<bool>\n   81  OnlyNeeded(\"only-needed\", cl::desc(\"Link only needed symbols\"));\n   82  \n   83: static cl::opt<bool>\n   84  Force(\"f\", cl::desc(\"Enable binary output on terminals\"));\n   85  \n   86: static cl::opt<bool>\n   87      DisableLazyLoad(\"disable-lazy-loading\",\n   88                      cl::desc(\"Disable lazy module loading\"));\n   89  \n   90: static cl::opt<bool>\n   91      OutputAssembly(\"S\", cl::desc(\"Write output as LLVM assembly\"), cl::Hidden);\n   92  \n   93: static cl::opt<bool>\n   94  Verbose(\"v\", cl::desc(\"Print information about actions taken\"));\n   95  \n   96: static cl::opt<bool>\n   97  DumpAsm(\"d\", cl::desc(\"Print assembly as linked\"), cl::Hidden);\n   98  \n   99: static cl::opt<bool>\n  100  SuppressWarnings(\"suppress-warnings\", cl::desc(\"Suppress all linking warnings\"),\n  101                   cl::init(false));\n  102  \n  103: static cl::opt<bool> PreserveBitcodeUseListOrder(\n  104      \"preserve-bc-uselistorder\",\n  105      cl::desc(\"Preserve use-list order when writing LLVM bitcode.\"),\n  106      cl::init(true), cl::Hidden);\n  107  \n  108: static cl::opt<bool> PreserveAssemblyUseListOrder(\n  109      \"preserve-ll-uselistorder\",\n  110      cl::desc(\"Preserve use-list order when writing LLVM assembly.\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-lto/llvm-lto.cpp:\n   66  using namespace llvm;\n   67  \n   68: static cl::opt<char>\n   69      OptLevel(\"O\", cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n   70                             \"(default = '-O2')\"),\n   71               cl::Prefix, cl::ZeroOrMore, cl::init('2'));\n   72  \n   73: static cl::opt<bool>\n   74      IndexStats(\"thinlto-index-stats\",\n   75                 cl::desc(\"Print statistic for the index in every input files\"),\n   76                 cl::init(false));\n   77  \n   78: static cl::opt<bool> DisableVerify(\n   79      \"disable-verify\", cl::init(false),\n   80      cl::desc(\"Do not run the verifier during the optimization pipeline\"));\n   81  \n   82: static cl::opt<bool> DisableInline(\"disable-inlining\", cl::init(false),\n   83                                     cl::desc(\"Do not run the inliner pass\"));\n   84  \n   85: static cl::opt<bool>\n   86      DisableGVNLoadPRE(\"disable-gvn-loadpre\", cl::init(false),\n   87                        cl::desc(\"Do not run the GVN load PRE pass\"));\n   88  \n   89: static cl::opt<bool> DisableLTOVectorization(\n   90      \"disable-lto-vectorization\", cl::init(false),\n   91      cl::desc(\"Do not run loop or slp vectorization during LTO\"));\n   92  \n   93: static cl::opt<bool> EnableFreestanding(\n   94      \"lto-freestanding\", cl::init(false),\n   95      cl::desc(\"Enable Freestanding (disable builtins / TLI) during LTO\"));\n   96  \n   97: static cl::opt<bool> UseDiagnosticHandler(\n   98      \"use-diagnostic-handler\", cl::init(false),\n   99      cl::desc(\"Use a diagnostic handler to test the handler interface\"));\n  100  \n  101: static cl::opt<bool>\n  102      ThinLTO(\"thinlto\", cl::init(false),\n  103              cl::desc(\"Only write combined global index for ThinLTO backends\"));\n  ...\n  115  };\n  116  \n  117: cl::opt<ThinLTOModes> ThinLTOMode(\n  118      \"thinlto-action\", cl::desc(\"Perform a single ThinLTO stage:\"),\n  119      cl::values(\n  ...\n  137          clEnumValN(THINALL, \"run\", \"Perform ThinLTO end-to-end\")));\n  138  \n  139: static cl::opt<std::string>\n  140      ThinLTOIndex(\"thinlto-index\",\n  141                   cl::desc(\"Provide the index produced by a ThinLink, required \"\n  142                            \"to perform the promotion and/or importing.\"));\n  143  \n  144: static cl::opt<std::string> ThinLTOPrefixReplace(\n  145      \"thinlto-prefix-replace\",\n  146      cl::desc(\"Control where files for distributed backends are \"\n  ...\n  149               \"replaced with newprefix.\"));\n  150  \n  151: static cl::opt<std::string> ThinLTOModuleId(\n  152      \"thinlto-module-id\",\n  153      cl::desc(\"For the module ID for the file to process, useful to \"\n  154               \"match what is in the index.\"));\n  155  \n  156: static cl::opt<std::string>\n  157      ThinLTOCacheDir(\"thinlto-cache-dir\", cl::desc(\"Enable ThinLTO caching.\"));\n  158  \n  159: static cl::opt<int>\n  160      ThinLTOCachePruningInterval(\"thinlto-cache-pruning-interval\", cl::desc(\"Set ThinLTO cache pruning interval.\"));\n  161  \n  162: static cl::opt<std::string> ThinLTOSaveTempsPrefix(\n  163      \"thinlto-save-temps\",\n  164      cl::desc(\"Save ThinLTO temp files using filenames created by adding \"\n  165               \"suffixes to the given file path prefix.\"));\n  166  \n  167: static cl::opt<std::string> ThinLTOGeneratedObjectsDir(\n  168      \"thinlto-save-objects\",\n  169      cl::desc(\"Save ThinLTO generated object files using filenames created in \"\n  170               \"the given directory.\"));\n  171  \n  172: static cl::opt<bool>\n  173      SaveModuleFile(\"save-merged-module\", cl::init(false),\n  174                     cl::desc(\"Write merged LTO module to file before CodeGen\"));\n  ...\n  177                                              cl::desc(\"<input bitcode files>\"));\n  178  \n  179: static cl::opt<std::string> OutputFilename(\"o\", cl::init(\"\"),\n  180                                             cl::desc(\"Override output filename\"),\n  181                                             cl::value_desc(\"filename\"));\n  ...\n  191                 cl::ZeroOrMore);\n  192  \n  193: static cl::opt<bool> ListSymbolsOnly(\n  194      \"list-symbols-only\", cl::init(false),\n  195      cl::desc(\"Instead of running LTO, list the symbols in each IR file\"));\n  196  \n  197: static cl::opt<bool> SetMergedModule(\n  198      \"set-merged-module\", cl::init(false),\n  199      cl::desc(\"Use the first input module as the merged module\"));\n  200  \n  201: static cl::opt<unsigned> Parallelism(\"j\", cl::Prefix, cl::init(1),\n  202                                       cl::desc(\"Number of backend threads\"));\n  203  \n  204: static cl::opt<bool> RestoreGlobalsLinkage(\n  205      \"restore-linkage\", cl::init(false),\n  206      cl::desc(\"Restore original linkage of globals prior to CodeGen\"));\n  207  \n  208: static cl::opt<bool> CheckHasObjC(\n  209      \"check-for-objc\", cl::init(false),\n  210      cl::desc(\"Only check if the module has objective-C defined in it\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-lto2/llvm-lto2.cpp:\n   30  using namespace lto;\n   31  \n   32: static cl::opt<char>\n   33      OptLevel(\"O\", cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n   34                             \"(default = '-O2')\"),\n   35               cl::Prefix, cl::ZeroOrMore, cl::init('2'));\n   36  \n   37: static cl::opt<char> CGOptLevel(\n   38      \"cg-opt-level\",\n   39      cl::desc(\"Codegen optimization level (0, 1, 2 or 3, default = '2')\"),\n   ..\n   43                                              cl::desc(\"<input bitcode files>\"));\n   44  \n   45: static cl::opt<std::string> OutputFilename(\"o\", cl::Required,\n   46                                             cl::desc(\"Output filename\"),\n   47                                             cl::value_desc(\"filename\"));\n   48  \n   49: static cl::opt<std::string> CacheDir(\"cache-dir\", cl::desc(\"Cache Directory\"),\n   50                                       cl::value_desc(\"directory\"));\n   51  \n   52: static cl::opt<std::string> OptPipeline(\"opt-pipeline\",\n   53                                          cl::desc(\"Optimizer Pipeline\"),\n   54                                          cl::value_desc(\"pipeline\"));\n   55  \n   56: static cl::opt<std::string> AAPipeline(\"aa-pipeline\",\n   57                                         cl::desc(\"Alias Analysis Pipeline\"),\n   58                                         cl::value_desc(\"aapipeline\"));\n   59  \n   60: static cl::opt<bool> SaveTemps(\"save-temps\", cl::desc(\"Save temporary files\"));\n   61  \n   62: static cl::opt<bool>\n   63      ThinLTODistributedIndexes(\"thinlto-distributed-indexes\", cl::init(false),\n   64                                cl::desc(\"Write out individual index and \"\n   ..\n   66                                         \"distributed backend case\"));\n   67  \n   68: static cl::opt<int> Threads(\"thinlto-threads\",\n   69                              cl::init(llvm::heavyweight_hardware_concurrency()));\n   70  \n   ..\n   83      cl::ZeroOrMore);\n   84  \n   85: static cl::opt<std::string> OverrideTriple(\n   86      \"override-triple\",\n   87      cl::desc(\"Replace target triples in input files with this triple\"));\n   88  \n   89: static cl::opt<std::string> DefaultTriple(\n   90      \"default-triple\",\n   91      cl::desc(\n   92          \"Replace unspecified target triples in input files with this triple\"));\n   93  \n   94: static cl::opt<std::string>\n   95      OptRemarksOutput(\"pass-remarks-output\",\n   96                       cl::desc(\"YAML output file for optimization remarks\"));\n   97  \n   98: static cl::opt<bool> OptRemarksWithHotness(\n   99      \"pass-remarks-with-hotness\",\n  100      cl::desc(\"Whether to include hotness informations in the remarks.\\n\"\n  101               \"Has effect only if -pass-remarks-output is specified.\"));\n  102  \n  103: static cl::opt<std::string>\n  104      SamplePGOFile(\"lto-sample-profile-file\",\n  105                    cl::desc(\"Specify a SamplePGO profile file\"));\n  106  \n  107: static cl::opt<bool>\n  108      UseNewPM(\"use-new-pm\",\n  109               cl::desc(\"Run LTO passes using the new pass manager\"),\n  110               cl::init(false), cl::Hidden);\n  111  \n  112: static cl::opt<bool>\n  113      DebugPassManager(\"debug-pass-manager\", cl::init(false), cl::Hidden,\n  114                       cl::desc(\"Print pass management debugging information\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:\n   37  using namespace llvm;\n   38  \n   39: static cl::opt<std::string>\n   40      TripleName(\"triple\", cl::desc(\"Target triple to assemble for, \"\n   41                                    \"see -version for available targets\"));\n   42  \n   43: static cl::opt<std::string>\n   44      MCPU(\"mcpu\",\n   45           cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   47  \n   48  // This is useful for variable-length instruction sets.\n   49: static cl::opt<unsigned> InsnLimit(\n   50      \"insn-limit\",\n   51      cl::desc(\"Limit the number of instructions to process (0 for no limit)\"),\n   ..\n   70    OFT_ObjectFile\n   71  };\n   72: static cl::opt<OutputFileType>\n   73  FileType(\"filetype\", cl::init(OFT_AssemblyFile),\n   74    cl::desc(\"Choose an output file type:\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:\n   20  const unsigned AssemblyTextBufSize = 80;\n   21  \n   22: static cl::opt<std::string>\n   23      TripleName(\"triple\", cl::desc(\"Target triple to assemble for, \"\n   24                                    \"see -version for available targets\"));\n   25  \n   26: static cl::opt<std::string>\n   27      MCPU(\"mcpu\",\n   28           cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   30  \n   31  // This is useful for variable-length instruction sets.\n   32: static cl::opt<unsigned> InsnLimit(\n   33      \"insn-limit\",\n   34      cl::desc(\"Limit the number of instructions to process (0 for no limit)\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-mc/llvm-mc.cpp:\n   43  using namespace llvm;\n   44  \n   45: static cl::opt<std::string>\n   46  InputFilename(cl::Positional, cl::desc(\"<input file>\"), cl::init(\"-\"));\n   47  \n   48: static cl::opt<std::string>\n   49  OutputFilename(\"o\", cl::desc(\"Output filename\"),\n   50                 cl::value_desc(\"filename\"));\n   51  \n   52: static cl::opt<bool>\n   53  ShowEncoding(\"show-encoding\", cl::desc(\"Show instruction encodings\"));\n   54  \n   55: static cl::opt<bool> RelaxELFRel(\n   56      \"relax-relocations\", cl::init(true),\n   57      cl::desc(\"Emit R_X86_64_GOTPCRELX instead of R_X86_64_GOTPCREL\"));\n   58  \n   59: static cl::opt<DebugCompressionType> CompressDebugSections(\n   60      \"compress-debug-sections\", cl::ValueOptional,\n   61      cl::init(DebugCompressionType::None),\n   ..\n   67                            \"Use zlib-gnu compression (deprecated)\")));\n   68  \n   69: static cl::opt<bool>\n   70  ShowInst(\"show-inst\", cl::desc(\"Show internal instruction representation\"));\n   71  \n   72: static cl::opt<bool>\n   73  ShowInstOperands(\"show-inst-operands\",\n   74                   cl::desc(\"Show instructions operands as parsed\"));\n   75  \n   76: static cl::opt<unsigned>\n   77  OutputAsmVariant(\"output-asm-variant\",\n   78                   cl::desc(\"Syntax variant to use for output printing\"));\n   79  \n   80: static cl::opt<bool>\n   81  PrintImmHex(\"print-imm-hex\", cl::init(false),\n   82              cl::desc(\"Prefer hex format for immediate values\"));\n   ..\n   85  DefineSymbol(\"defsym\", cl::desc(\"Defines a symbol to be an integer constant\"));\n   86  \n   87: static cl::opt<bool>\n   88      PreserveComments(\"preserve-comments\",\n   89                       cl::desc(\"Preserve Comments in outputted assembly\"));\n   ..\n   94    OFT_ObjectFile\n   95  };\n   96: static cl::opt<OutputFileType>\n   97  FileType(\"filetype\", cl::init(OFT_AssemblyFile),\n   98    cl::desc(\"Choose an output file type:\"),\n   ..\n  109              cl::value_desc(\"directory\"), cl::Prefix);\n  110  \n  111: static cl::opt<std::string>\n  112  ArchName(\"arch\", cl::desc(\"Target arch to assemble for, \"\n  113                            \"see -version for available targets\"));\n  114  \n  115: static cl::opt<std::string>\n  116  TripleName(\"triple\", cl::desc(\"Target triple to assemble for, \"\n  117                                \"see -version for available targets\"));\n  118  \n  119: static cl::opt<std::string>\n  120  MCPU(\"mcpu\",\n  121       cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n  ...\n  129    cl::value_desc(\"a1,+a2,-a3,...\"));\n  130  \n  131: static cl::opt<bool> PIC(\"position-independent\",\n  132                           cl::desc(\"Position independent\"), cl::init(false));\n  133  \n  134: static cl::opt<bool>\n  135      LargeCodeModel(\"large-code-model\",\n  136                     cl::desc(\"Create cfi directives that assume the code might \"\n  137                              \"be more than 2gb away\"));\n  138  \n  139: static cl::opt<bool>\n  140  NoInitialTextSection(\"n\", cl::desc(\"Don't assume assembly file starts \"\n  141                                     \"in the text section\"));\n  142  \n  143: static cl::opt<bool>\n  144  GenDwarfForAssembly(\"g\", cl::desc(\"Generate dwarf debugging info for assembly \"\n  145                                    \"source files\"));\n  146  \n  147: static cl::opt<std::string>\n  148  DebugCompilationDir(\"fdebug-compilation-dir\",\n  149                      cl::desc(\"Specifies the debug info's compilation dir\"));\n  150  \n  151: static cl::opt<std::string>\n  152  MainFileName(\"main-file-name\",\n  153               cl::desc(\"Specifies the name we should consider the input file\"));\n  154  \n  155: static cl::opt<bool> SaveTempLabels(\"save-temp-labels\",\n  156                                      cl::desc(\"Don't discard temporary labels\"));\n  157  \n  158: static cl::opt<bool> NoExecStack(\"no-exec-stack\",\n  159                                   cl::desc(\"File doesn't need an exec stack\"));\n  160  \n  ...\n  166  };\n  167  \n  168: static cl::opt<ActionType>\n  169  Action(cl::desc(\"Action to perform:\"),\n  170         cl::init(AC_Assemble),\n\n/home/mw/0-rust/src/llvm/tools/llvm-mcmarkup/llvm-mcmarkup.cpp:\n   24         InputFilenames(cl::Positional, cl::desc(\"<input files>\"),\n   25                        cl::ZeroOrMore);\n   26: static cl::opt<bool>\n   27  DumpTags(\"dump-tags\", cl::desc(\"List all tags encountered in input\"));\n   28  \n\n/home/mw/0-rust/src/llvm/tools/llvm-modextract/llvm-modextract.cpp:\n   23  using namespace llvm;\n   24  \n   25: static cl::opt<bool>\n   26      BinaryExtract(\"b\", cl::desc(\"Whether to perform binary extraction\"));\n   27  \n   28: static cl::opt<std::string> OutputFilename(\"o\", cl::Required,\n   29                                             cl::desc(\"Output filename\"),\n   30                                             cl::value_desc(\"filename\"));\n   31  \n   32: static cl::opt<std::string>\n   33      InputFilename(cl::Positional, cl::desc(\"<input bitcode>\"), cl::init(\"-\"));\n   34  \n   35: static cl::opt<unsigned> ModuleIndex(\"n\", cl::Required,\n   36                                       cl::desc(\"Index of module to extract\"),\n   37                                       cl::value_desc(\"index\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-nm/llvm-nm.cpp:\n   48  namespace {\n   49  enum OutputFormatTy { bsd, sysv, posix, darwin };\n   50: cl::opt<OutputFormatTy> OutputFormat(\n   51      \"format\", cl::desc(\"Specify output format\"),\n   52      cl::values(clEnumVal(bsd, \"BSD format\"), clEnumVal(sysv, \"System V format\"),\n   ..\n   60                                       cl::ZeroOrMore);\n   61  \n   62: cl::opt<bool> UndefinedOnly(\"undefined-only\",\n   63                              cl::desc(\"Show only undefined symbols\"));\n   64  cl::alias UndefinedOnly2(\"u\", cl::desc(\"Alias for --undefined-only\"),\n   65                           cl::aliasopt(UndefinedOnly), cl::Grouping);\n   66  \n   67: cl::opt<bool> DynamicSyms(\"dynamic\",\n   68                            cl::desc(\"Display the dynamic symbols instead \"\n   69                                     \"of normal symbols.\"));\n   ..\n   71                         cl::aliasopt(DynamicSyms), cl::Grouping);\n   72  \n   73: cl::opt<bool> DefinedOnly(\"defined-only\",\n   74                            cl::desc(\"Show only defined symbols\"));\n   75  cl::alias DefinedOnly2(\"U\", cl::desc(\"Alias for --defined-only\"),\n   76                         cl::aliasopt(DefinedOnly), cl::Grouping);\n   77  \n   78: cl::opt<bool> ExternalOnly(\"extern-only\",\n   79                             cl::desc(\"Show only external symbols\"),\n   80                             cl::ZeroOrMore);\n   ..\n   83                          cl::ZeroOrMore);\n   84  \n   85: cl::opt<bool> BSDFormat(\"B\", cl::desc(\"Alias for --format=bsd\"),\n   86                          cl::Grouping);\n   87: cl::opt<bool> POSIXFormat(\"P\", cl::desc(\"Alias for --format=posix\"),\n   88                            cl::Grouping);\n   89: cl::opt<bool> DarwinFormat(\"m\", cl::desc(\"Alias for --format=darwin\"),\n   90                             cl::Grouping);\n   91  \n   ..\n   95  bool ArchAll = false;\n   96  \n   97: cl::opt<bool> PrintFileName(\n   98      \"print-file-name\",\n   99      cl::desc(\"Precede each symbol with the object file it came from\"));\n  ...\n  104                           cl::aliasopt(PrintFileName), cl::Grouping);\n  105  \n  106: cl::opt<bool> DebugSyms(\"debug-syms\",\n  107                          cl::desc(\"Show all symbols, even debugger only\"));\n  108  cl::alias DebugSymsa(\"a\", cl::desc(\"Alias for --debug-syms\"),\n  109                       cl::aliasopt(DebugSyms), cl::Grouping);\n  110  \n  111: cl::opt<bool> NumericSort(\"numeric-sort\", cl::desc(\"Sort symbols by address\"));\n  112  cl::alias NumericSortn(\"n\", cl::desc(\"Alias for --numeric-sort\"),\n  113                         cl::aliasopt(NumericSort), cl::Grouping);\n  ...\n  115                         cl::aliasopt(NumericSort), cl::Grouping);\n  116  \n  117: cl::opt<bool> NoSort(\"no-sort\", cl::desc(\"Show symbols in order encountered\"));\n  118  cl::alias NoSortp(\"p\", cl::desc(\"Alias for --no-sort\"), cl::aliasopt(NoSort),\n  119                    cl::Grouping);\n  120  \n  121: cl::opt<bool> Demangle(\"demangle\", cl::desc(\"Demangle C++ symbol names\"));\n  122  cl::alias DemangleC(\"C\", cl::desc(\"Alias for --demangle\"), cl::aliasopt(Demangle),\n  123                      cl::Grouping);\n  124  \n  125: cl::opt<bool> ReverseSort(\"reverse-sort\", cl::desc(\"Sort in reverse order\"));\n  126  cl::alias ReverseSortr(\"r\", cl::desc(\"Alias for --reverse-sort\"),\n  127                         cl::aliasopt(ReverseSort), cl::Grouping);\n  128  \n  129: cl::opt<bool> PrintSize(\"print-size\",\n  130                          cl::desc(\"Show symbol size instead of address\"));\n  131  cl::alias PrintSizeS(\"S\", cl::desc(\"Alias for --print-size\"),\n  ...\n  133  bool MachOPrintSizeWarning = false;\n  134  \n  135: cl::opt<bool> SizeSort(\"size-sort\", cl::desc(\"Sort symbols by size\"));\n  136  \n  137: cl::opt<bool> WithoutAliases(\"without-aliases\", cl::Hidden,\n  138                               cl::desc(\"Exclude aliases from output\"));\n  139  \n  140: cl::opt<bool> ArchiveMap(\"print-armap\", cl::desc(\"Print the archive map\"));\n  141  cl::alias ArchiveMaps(\"M\", cl::desc(\"Alias for --print-armap\"),\n  142                        cl::aliasopt(ArchiveMap), cl::Grouping);\n  143  \n  144  enum Radix { d, o, x };\n  145: cl::opt<Radix>\n  146      AddressRadix(\"radix\", cl::desc(\"Radix (o/d/x) for printing symbol Values\"),\n  147                   cl::values(clEnumVal(d, \"decimal\"), clEnumVal(o, \"octal\"),\n  ...\n  151                       cl::aliasopt(AddressRadix));\n  152  \n  153: cl::opt<bool> JustSymbolName(\"just-symbol-name\",\n  154                               cl::desc(\"Print just the symbol's name\"));\n  155  cl::alias JustSymbolNames(\"j\", cl::desc(\"Alias for --just-symbol-name\"),\n  ...\n  165                                         \"and section name, Mach-O only\"));\n  166  \n  167: cl::opt<bool> FormatMachOasHex(\"x\", cl::desc(\"Print symbol entry in hex, \"\n  168                                               \"Mach-O only\"), cl::Grouping);\n  169: cl::opt<bool> AddDyldInfo(\"add-dyldinfo\",\n  170                            cl::desc(\"Add symbols from the dyldinfo not already \"\n  171                                     \"in the symbol table, Mach-O only\"));\n  172: cl::opt<bool> NoDyldInfo(\"no-dyldinfo\",\n  173                           cl::desc(\"Don't add any symbols from the dyldinfo, \"\n  174                                    \"Mach-O only\"));\n  175: cl::opt<bool> DyldInfoOnly(\"dyldinfo-only\",\n  176                             cl::desc(\"Show only symbols from the dyldinfo, \"\n  177                                      \"Mach-O only\"));\n  178  \n  179: cl::opt<bool> NoLLVMBitcode(\"no-llvm-bc\",\n  180                              cl::desc(\"Disable LLVM bitcode reader\"));\n  181  \n\n/home/mw/0-rust/src/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:\n   72  } // end namespace llvm\n   73  \n   74: static cl::opt<std::string> InputFilename(cl::Positional, cl::desc(\"<input>\"));\n   75: static cl::opt<std::string> OutputFilename(cl::Positional, cl::desc(\"<output>\"),\n   76                                             cl::init(\"-\"));\n   77: static cl::opt<std::string>\n   78      OutputFormat(\"O\", cl::desc(\"Set output format to one of the following:\"\n   79                                 \"\\n\\tbinary\"));\n   ..\n   83  static cl::alias ToRemoveA(\"R\", cl::desc(\"Alias for remove-section\"),\n   84                             cl::aliasopt(ToRemove));\n   85: static cl::opt<bool> StripAll(\n   86      \"strip-all\",\n   87      cl::desc(\n   88          \"Removes non-allocated sections other than .gnu.warning* sections\"));\n   89: static cl::opt<bool>\n   90      StripAllGNU(\"strip-all-gnu\",\n   91                  cl::desc(\"Removes symbol, relocation, and debug information\"));\n   ..\n   97  static cl::alias OnlyKeepA(\"j\", cl::desc(\"Alias for only-keep\"),\n   98                             cl::aliasopt(OnlyKeep));\n   99: static cl::opt<bool> StripDebug(\"strip-debug\",\n  100                                  cl::desc(\"Removes all debug information\"));\n  101: static cl::opt<bool> StripSections(\"strip-sections\",\n  102                                     cl::desc(\"Remove all section headers\"));\n  103: static cl::opt<bool>\n  104      StripNonAlloc(\"strip-non-alloc\",\n  105                    cl::desc(\"Remove all non-allocated sections\"));\n  106: static cl::opt<bool>\n  107      StripDWO(\"strip-dwo\", cl::desc(\"Remove all DWARF .dwo sections from file\"));\n  108: static cl::opt<bool> ExtractDWO(\n  109      \"extract-dwo\",\n  110      cl::desc(\"Remove all sections that are not DWARF .dwo sections from file\"));\n  111: static cl::opt<std::string>\n  112      SplitDWO(\"split-dwo\",\n  113               cl::desc(\"Equivalent to extract-dwo on the input file to \"\n\n/home/mw/0-rust/src/llvm/tools/llvm-objdump/MachODump.cpp:\n   59  using namespace object;\n   60  \n   61: static cl::opt<bool>\n   62      UseDbg(\"g\",\n   63             cl::desc(\"Print line information from debug info if available\"));\n   64  \n   65: static cl::opt<std::string> DSYMFile(\"dsym\",\n   66                                       cl::desc(\"Use .dSYM file for debug info\"));\n   67  \n   68: static cl::opt<bool> FullLeadingAddr(\"full-leading-addr\",\n   69                                       cl::desc(\"Print full leading address\"));\n   70  \n   71: static cl::opt<bool> NoLeadingHeaders(\"no-leading-headers\",\n   72                                        cl::desc(\"Print no leading headers\"));\n   73  \n   74: cl::opt<bool> llvm::UniversalHeaders(\"universal-headers\",\n   75                                       cl::desc(\"Print Mach-O universal headers \"\n   76                                                \"(requires -macho)\"));\n   77  \n   78: cl::opt<bool>\n   79      llvm::ArchiveHeaders(\"archive-headers\",\n   80                           cl::desc(\"Print archive headers for Mach-O archives \"\n   81                                    \"(requires -macho)\"));\n   82  \n   83: cl::opt<bool>\n   84      ArchiveMemberOffsets(\"archive-member-offsets\",\n   85                           cl::desc(\"Print the offset to each archive member for \"\n   ..\n   87                                    \"-archive-headers)\"));\n   88  \n   89: cl::opt<bool>\n   90      llvm::IndirectSymbols(\"indirect-symbols\",\n   91                            cl::desc(\"Print indirect symbol table for Mach-O \"\n   92                                     \"objects (requires -macho)\"));\n   93  \n   94: cl::opt<bool>\n   95      llvm::DataInCode(\"data-in-code\",\n   96                       cl::desc(\"Print the data in code table for Mach-O objects \"\n   97                                \"(requires -macho)\"));\n   98  \n   99: cl::opt<bool>\n  100      llvm::LinkOptHints(\"link-opt-hints\",\n  101                         cl::desc(\"Print the linker optimization hints for \"\n  102                                  \"Mach-O objects (requires -macho)\"));\n  103  \n  104: cl::opt<bool>\n  105      llvm::InfoPlist(\"info-plist\",\n  106                      cl::desc(\"Print the info plist section as strings for \"\n  107                               \"Mach-O objects (requires -macho)\"));\n  108  \n  109: cl::opt<bool>\n  110      llvm::DylibsUsed(\"dylibs-used\",\n  111                       cl::desc(\"Print the shared libraries used for linked \"\n  112                                \"Mach-O files (requires -macho)\"));\n  113  \n  114: cl::opt<bool>\n  115      llvm::DylibId(\"dylib-id\",\n  116                    cl::desc(\"Print the shared library's id for the dylib Mach-O \"\n  117                             \"file (requires -macho)\"));\n  118  \n  119: cl::opt<bool>\n  120      llvm::NonVerbose(\"non-verbose\",\n  121                       cl::desc(\"Print the info for Mach-O objects in \"\n  122                                \"non-verbose or numeric form (requires -macho)\"));\n  123  \n  124: cl::opt<bool>\n  125      llvm::ObjcMetaData(\"objc-meta-data\",\n  126                         cl::desc(\"Print the Objective-C runtime meta data for \"\n  127                                  \"Mach-O files (requires -macho)\"));\n  128  \n  129: cl::opt<std::string> llvm::DisSymName(\n  130      \"dis-symname\",\n  131      cl::desc(\"disassemble just this symbol's instructions (requires -macho)\"));\n  132  \n  133: static cl::opt<bool> NoSymbolicOperands(\n  134      \"no-symbolic-operands\",\n  135      cl::desc(\"do not symbolic operands when disassembling (requires -macho)\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-objdump/llvm-objdump.cpp:\n   72  InputFilenames(cl::Positional, cl::desc(\"<input object files>\"),cl::ZeroOrMore);\n   73  \n   74: cl::opt<bool>\n   75  llvm::Disassemble(\"disassemble\",\n   76    cl::desc(\"Display assembler mnemonics for the machine instructions\"));\n   ..\n   79               cl::aliasopt(Disassemble));\n   80  \n   81: cl::opt<bool>\n   82  llvm::DisassembleAll(\"disassemble-all\",\n   83    cl::desc(\"Display assembler mnemonics for the machine instructions\"));\n   ..\n   86               cl::aliasopt(DisassembleAll));\n   87  \n   88: cl::opt<bool>\n   89  llvm::Relocations(\"r\", cl::desc(\"Display the relocation entries in the file\"));\n   90  \n   91: cl::opt<bool>\n   92  llvm::SectionContents(\"s\", cl::desc(\"Display the content of each section\"));\n   93  \n   94: cl::opt<bool>\n   95  llvm::SymbolTable(\"t\", cl::desc(\"Display the symbol table\"));\n   96  \n   97: cl::opt<bool>\n   98  llvm::ExportsTrie(\"exports-trie\", cl::desc(\"Display mach-o exported symbols\"));\n   99  \n  100: cl::opt<bool>\n  101  llvm::Rebase(\"rebase\", cl::desc(\"Display mach-o rebasing info\"));\n  102  \n  103: cl::opt<bool>\n  104  llvm::Bind(\"bind\", cl::desc(\"Display mach-o binding info\"));\n  105  \n  106: cl::opt<bool>\n  107  llvm::LazyBind(\"lazy-bind\", cl::desc(\"Display mach-o lazy binding info\"));\n  108  \n  109: cl::opt<bool>\n  110  llvm::WeakBind(\"weak-bind\", cl::desc(\"Display mach-o weak binding info\"));\n  111  \n  112: cl::opt<bool>\n  113  llvm::RawClangAST(\"raw-clang-ast\",\n  114      cl::desc(\"Dump the raw binary contents of the clang AST section\"));\n  115  \n  116: static cl::opt<bool>\n  117  MachOOpt(\"macho\", cl::desc(\"Use MachO specific object file parser\"));\n  118  static cl::alias\n  119  MachOm(\"m\", cl::desc(\"Alias for --macho\"), cl::aliasopt(MachOOpt));\n  120  \n  121: cl::opt<std::string>\n  122  llvm::TripleName(\"triple\", cl::desc(\"Target triple to disassemble for, \"\n  123                                      \"see -version for available targets\"));\n  124  \n  125: cl::opt<std::string>\n  126  llvm::MCPU(\"mcpu\",\n  127       cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n  ...\n  129       cl::init(\"\"));\n  130  \n  131: cl::opt<std::string>\n  132  llvm::ArchName(\"arch-name\", cl::desc(\"Target arch to disassemble for, \"\n  133                                  \"see -version for available targets\"));\n  134  \n  135: cl::opt<bool>\n  136  llvm::SectionHeaders(\"section-headers\", cl::desc(\"Display summaries of the \"\n  137                                                   \"headers for each section.\"));\n  ...\n  156    cl::value_desc(\"a1,+a2,-a3,...\"));\n  157  \n  158: cl::opt<bool>\n  159  llvm::NoShowRawInsn(\"no-show-raw-insn\", cl::desc(\"When disassembling \"\n  160                                                   \"instructions, do not print \"\n  161                                                   \"the instruction bytes.\"));\n  162: cl::opt<bool>\n  163  llvm::NoLeadingAddr(\"no-leading-addr\", cl::desc(\"Print no leading address\"));\n  164  \n  165: cl::opt<bool>\n  166  llvm::UnwindInfo(\"unwind-info\", cl::desc(\"Display unwind information\"));\n  167  \n  ...\n  170                  cl::aliasopt(UnwindInfo));\n  171  \n  172: cl::opt<bool>\n  173  llvm::PrivateHeaders(\"private-headers\",\n  174                       cl::desc(\"Display format specific file headers\"));\n  175  \n  176: cl::opt<bool>\n  177  llvm::FirstPrivateHeader(\"private-header\",\n  178                           cl::desc(\"Display only the first format specific file \"\n  ...\n  183                      cl::aliasopt(PrivateHeaders));\n  184  \n  185: cl::opt<bool>\n  186      llvm::PrintImmHex(\"print-imm-hex\",\n  187                        cl::desc(\"Use hex format for immediate values\"));\n  188  \n  189: cl::opt<bool> PrintFaultMaps(\"fault-map-section\",\n  190                               cl::desc(\"Display contents of faultmap section\"));\n  191  \n  192: cl::opt<DIDumpType> llvm::DwarfDumpType(\n  193      \"dwarf\", cl::init(DIDT_Null), cl::desc(\"Dump of dwarf debug sections:\"),\n  194      cl::values(clEnumValN(DIDT_DebugFrame, \"frames\", \".debug_frame\")));\n  195  \n  196: cl::opt<bool> PrintSource(\n  197      \"source\",\n  198      cl::desc(\n  ...\n  202                             cl::aliasopt(PrintSource));\n  203  \n  204: cl::opt<bool> PrintLines(\"line-numbers\",\n  205                           cl::desc(\"Display source line numbers with \"\n  206                                    \"disassembly. Implies disassemble object\"));\n  ...\n  209                            cl::aliasopt(PrintLines));\n  210  \n  211: cl::opt<unsigned long long>\n  212      StartAddress(\"start-address\", cl::desc(\"Disassemble beginning at address\"),\n  213                   cl::value_desc(\"address\"), cl::init(0));\n  214: cl::opt<unsigned long long>\n  215      StopAddress(\"stop-address\", cl::desc(\"Stop disassembly at address\"),\n  216                  cl::value_desc(\"address\"), cl::init(UINT64_MAX));\n\n/home/mw/0-rust/src/llvm/tools/llvm-objdump/llvm-objdump.h:\n   28  }\n   29  \n   30: extern cl::opt<std::string> TripleName;\n   31: extern cl::opt<std::string> ArchName;\n   32: extern cl::opt<std::string> MCPU;\n   33  extern cl::list<std::string> MAttrs;\n   34  extern cl::list<std::string> FilterSections;\n   35: extern cl::opt<bool> Disassemble;\n   36: extern cl::opt<bool> DisassembleAll;\n   37: extern cl::opt<bool> NoShowRawInsn;\n   38: extern cl::opt<bool> NoLeadingAddr;\n   39: extern cl::opt<bool> PrivateHeaders;\n   40: extern cl::opt<bool> FirstPrivateHeader;\n   41: extern cl::opt<bool> ExportsTrie;\n   42: extern cl::opt<bool> Rebase;\n   43: extern cl::opt<bool> Bind;\n   44: extern cl::opt<bool> LazyBind;\n   45: extern cl::opt<bool> WeakBind;\n   46: extern cl::opt<bool> RawClangAST;\n   47: extern cl::opt<bool> UniversalHeaders;\n   48: extern cl::opt<bool> ArchiveHeaders;\n   49: extern cl::opt<bool> IndirectSymbols;\n   50: extern cl::opt<bool> DataInCode;\n   51: extern cl::opt<bool> LinkOptHints;\n   52: extern cl::opt<bool> InfoPlist;\n   53: extern cl::opt<bool> DylibsUsed;\n   54: extern cl::opt<bool> DylibId;\n   55: extern cl::opt<bool> ObjcMetaData;\n   56: extern cl::opt<std::string> DisSymName;\n   57: extern cl::opt<bool> NonVerbose;\n   58: extern cl::opt<bool> Relocations;\n   59: extern cl::opt<bool> SectionHeaders;\n   60: extern cl::opt<bool> SectionContents;\n   61: extern cl::opt<bool> SymbolTable;\n   62: extern cl::opt<bool> UnwindInfo;\n   63: extern cl::opt<bool> PrintImmHex;\n   64: extern cl::opt<DIDumpType> DwarfDumpType;\n   65  \n   66  // Various helper functions.\n\n/home/mw/0-rust/src/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:\n   25  using namespace llvm;\n   26  \n   27: static cl::opt<std::string>\n   28      TargetTripleStr(\"mtriple\", cl::desc(\"Override target triple for module\"));\n   29  \n   30  // Passes to run for this fuzzer instance. Expects new pass manager syntax.\n   31: static cl::opt<std::string> PassPipeline(\n   32      \"passes\",\n   33      cl::desc(\"A textual description of the pass pipeline for testing\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-opt-report/OptReport.cpp:\n   36  using namespace llvm::yaml;\n   37  \n   38: static cl::opt<bool> Help(\"h\", cl::desc(\"Alias for -help\"), cl::Hidden);\n   39  \n   40  // Mark all our options with this category, everything else (except for -version\n   ..\n   43      OptReportCategory(\"llvm-opt-report options\");\n   44  \n   45: static cl::opt<std::string>\n   46    InputFileName(cl::Positional, cl::desc(\"<input>\"), cl::init(\"-\"),\n   47                  cl::cat(OptReportCategory));\n   48  \n   49: static cl::opt<std::string>\n   50    OutputFileName(\"o\", cl::desc(\"Output file\"), cl::init(\"-\"),\n   51                   cl::cat(OptReportCategory));\n   52  \n   53: static cl::opt<std::string>\n   54    InputRelDir(\"r\", cl::desc(\"Root for relative input paths\"), cl::init(\"\"),\n   55                cl::cat(OptReportCategory));\n   56  \n   57: static cl::opt<bool>\n   58    Succinct(\"s\", cl::desc(\"Don't include vectorization factors, etc.\"),\n   59             cl::init(false), cl::cat(OptReportCategory));\n   60  \n   61: static cl::opt<bool>\n   62    NoDemangle(\"no-demangle\", cl::desc(\"Don't demangle function names\"),\n   63               cl::init(false), cl::cat(OptReportCategory));\n\n/home/mw/0-rust/src/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp:\n  148                                       cl::OneOrMore, cl::sub(PrettySubcommand));\n  149  \n  150: cl::opt<bool> Compilands(\"compilands\", cl::desc(\"Display compilands\"),\n  151                           cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  152: cl::opt<bool> Symbols(\"module-syms\",\n  153                        cl::desc(\"Display symbols for each compiland\"),\n  154                        cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  155: cl::opt<bool> Globals(\"globals\", cl::desc(\"Dump global symbols\"),\n  156                        cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  157: cl::opt<bool> Externals(\"externals\", cl::desc(\"Dump external symbols\"),\n  158                          cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  159  cl::list<SymLevel> SymTypes(\n  ...\n  166          clEnumValN(SymLevel::All, \"all\", \"Display all symbols (default)\")));\n  167  \n  168: cl::opt<bool>\n  169      Types(\"types\",\n  170            cl::desc(\"Display all types (implies -classes, -enums, -typedefs)\"),\n  171            cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  172: cl::opt<bool> Classes(\"classes\", cl::desc(\"Display class types\"),\n  173                        cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  174: cl::opt<bool> Enums(\"enums\", cl::desc(\"Display enum types\"),\n  175                      cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  176: cl::opt<bool> Typedefs(\"typedefs\", cl::desc(\"Display typedef types\"),\n  177                         cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  178: cl::opt<SymbolSortMode> SymbolOrder(\n  179      \"symbol-order\", cl::desc(\"symbol sort order\"),\n  180      cl::init(SymbolSortMode::None),\n  ...\n  186      cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  187  \n  188: cl::opt<ClassSortMode> ClassOrder(\n  189      \"class-order\", cl::desc(\"Class sort order\"), cl::init(ClassSortMode::None),\n  190      cl::values(\n  ...\n  204      cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  205  \n  206: cl::opt<ClassDefinitionFormat> ClassFormat(\n  207      \"class-definitions\", cl::desc(\"Class definition format\"),\n  208      cl::init(ClassDefinitionFormat::All),\n  ...\n  216                     \"Don't display class definitions\")),\n  217      cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  218: cl::opt<uint32_t> ClassRecursionDepth(\n  219      \"class-recurse-depth\", cl::desc(\"Class recursion depth (0=no limit)\"),\n  220      cl::init(0), cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  221  \n  222: cl::opt<bool> Lines(\"lines\", cl::desc(\"Line tables\"), cl::cat(TypeCategory),\n  223                      cl::sub(PrettySubcommand));\n  224: cl::opt<bool>\n  225      All(\"all\", cl::desc(\"Implies all other options in 'Symbol Types' category\"),\n  226          cl::cat(TypeCategory), cl::sub(PrettySubcommand));\n  227  \n  228: cl::opt<uint64_t> LoadAddress(\n  229      \"load-address\",\n  230      cl::desc(\"Assume the module is loaded at the specified address\"),\n  231      cl::cat(OtherOptions), cl::sub(PrettySubcommand));\n  232: cl::opt<bool> Native(\"native\", cl::desc(\"Use native PDB reader instead of DIA\"),\n  233                       cl::cat(OtherOptions), cl::sub(PrettySubcommand));\n  234: cl::opt<cl::boolOrDefault>\n  235      ColorOutput(\"color-output\",\n  236                  cl::desc(\"Override use of color (default = isatty)\"),\n  ...\n  258      cl::desc(\"Include only compilands those which match a regular expression\"),\n  259      cl::ZeroOrMore, cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  260: cl::opt<uint32_t> SizeThreshold(\n  261      \"min-type-size\", cl::desc(\"Displays only those types which are greater \"\n  262                                \"than or equal to the specified size.\"),\n  263      cl::init(0), cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  264: cl::opt<uint32_t> PaddingThreshold(\n  265      \"min-class-padding\", cl::desc(\"Displays only those classes which have at \"\n  266                                    \"least the specified amount of padding.\"),\n  267      cl::init(0), cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  268: cl::opt<uint32_t> ImmediatePaddingThreshold(\n  269      \"min-class-padding-imm\",\n  270      cl::desc(\"Displays only those classes which have at least the specified \"\n  ...\n  273      cl::init(0), cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  274  \n  275: cl::opt<bool> ExcludeCompilerGenerated(\n  276      \"no-compiler-generated\",\n  277      cl::desc(\"Don't show compiler generated types and symbols\"),\n  278      cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  279: cl::opt<bool>\n  280      ExcludeSystemLibraries(\"no-system-libs\",\n  281                             cl::desc(\"Don't show symbols from system libraries\"),\n  282                             cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  283  \n  284: cl::opt<bool> NoEnumDefs(\"no-enum-definitions\",\n  285                           cl::desc(\"Don't display full enum definitions\"),\n  286                           cl::cat(FilterCategory), cl::sub(PrettySubcommand));\n  ...\n  288  \n  289  namespace diff {\n  290: cl::opt<bool> PrintValueColumns(\n  291      \"values\", cl::init(true),\n  292      cl::desc(\"Print one column for each PDB with the field value\"),\n  293      cl::Optional, cl::sub(DiffSubcommand));\n  294: cl::opt<bool>\n  295      PrintResultColumn(\"result\", cl::init(false),\n  296                        cl::desc(\"Print a column with the result status\"),\n  ...\n  304                          cl::sub(DiffSubcommand));\n  305  \n  306: cl::opt<std::string> LeftRoot(\n  307      \"left-bin-root\", cl::Optional,\n  308      cl::desc(\"Treats the specified path as the root of the tree containing \"\n  ...\n  310               \"embedded paths when doing equality comparisons.\"),\n  311      cl::sub(DiffSubcommand));\n  312: cl::opt<std::string> RightRoot(\n  313      \"right-bin-root\", cl::Optional,\n  314      cl::desc(\"Treats the specified path as the root of the tree containing \"\n  ...\n  317      cl::sub(DiffSubcommand));\n  318  \n  319: cl::opt<std::string> Left(cl::Positional, cl::desc(\"<left>\"),\n  320                            cl::sub(DiffSubcommand));\n  321: cl::opt<std::string> Right(cl::Positional, cl::desc(\"<right>\"),\n  322                             cl::sub(DiffSubcommand));\n  323  \n  ...\n  337  llvm::Optional<NumberRange> DumpByteRange;\n  338  \n  339: cl::opt<std::string> DumpBlockRangeOpt(\n  340      \"block-range\", cl::value_desc(\"start[-end]\"),\n  341      cl::desc(\"Dump binary data from specified range of blocks.\"),\n  342      cl::sub(BytesSubcommand), cl::cat(MsfBytes));\n  343  \n  344: cl::opt<std::string>\n  345      DumpByteRangeOpt(\"byte-range\", cl::value_desc(\"start[-end]\"),\n  346                       cl::desc(\"Dump binary data from specified range of bytes\"),\n  ...\n  353                     cl::sub(BytesSubcommand), cl::cat(MsfBytes));\n  354  \n  355: cl::opt<bool> NameMap(\"name-map\", cl::desc(\"Dump bytes of PDB Name Map\"),\n  356                        cl::sub(BytesSubcommand), cl::cat(PdbBytes));\n  357: cl::opt<bool> Fpm(\"fpm\", cl::desc(\"Dump free page map\"),\n  358                    cl::sub(BytesSubcommand), cl::cat(MsfBytes));\n  359  \n  360: cl::opt<bool> SectionContributions(\"sc\", cl::desc(\"Dump section contributions\"),\n  361                                     cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  362: cl::opt<bool> SectionMap(\"sm\", cl::desc(\"Dump section map\"),\n  363                           cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  364: cl::opt<bool> ModuleInfos(\"modi\", cl::desc(\"Dump module info\"),\n  365                            cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  366: cl::opt<bool> FileInfo(\"files\", cl::desc(\"Dump source file info\"),\n  367                         cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  368: cl::opt<bool> TypeServerMap(\"type-server\", cl::desc(\"Dump type server map\"),\n  369                              cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  370: cl::opt<bool> ECData(\"ec\", cl::desc(\"Dump edit and continue map\"),\n  371                       cl::sub(BytesSubcommand), cl::cat(DbiBytes));\n  372  \n  ...\n  381              cl::cat(TypeCategory));\n  382  \n  383: cl::opt<uint32_t> ModuleIndex(\n  384      \"mod\",\n  385      cl::desc(\n  386          \"Limit options in the Modules category to the specified module index\"),\n  387      cl::Optional, cl::sub(BytesSubcommand), cl::cat(ModuleCategory));\n  388: cl::opt<bool> ModuleSyms(\"syms\", cl::desc(\"Dump symbol record substream\"),\n  389                           cl::sub(BytesSubcommand), cl::cat(ModuleCategory));\n  390: cl::opt<bool> ModuleC11(\"c11-chunks\", cl::Hidden,\n  391                          cl::desc(\"Dump C11 CodeView debug chunks\"),\n  392                          cl::sub(BytesSubcommand), cl::cat(ModuleCategory));\n  393: cl::opt<bool> ModuleC13(\"chunks\",\n  394                          cl::desc(\"Dump C13 CodeView debug chunk subsection\"),\n  395                          cl::sub(BytesSubcommand), cl::cat(ModuleCategory));\n  396: cl::opt<bool> SplitChunks(\n  397      \"split-chunks\",\n  398      cl::desc(\n  ...\n  413  \n  414  // MSF OPTIONS\n  415: cl::opt<bool> DumpSummary(\"summary\", cl::desc(\"dump file summary\"),\n  416                            cl::cat(MsfOptions), cl::sub(DumpSubcommand));\n  417: cl::opt<bool> DumpStreams(\"streams\",\n  418                            cl::desc(\"dump summary of the PDB streams\"),\n  419                            cl::cat(MsfOptions), cl::sub(DumpSubcommand));\n  420: cl::opt<bool> DumpStreamBlocks(\n  421      \"stream-blocks\",\n  422      cl::desc(\"Add block information to the output of -streams\"),\n  423      cl::cat(MsfOptions), cl::sub(DumpSubcommand));\n  424: cl::opt<bool> DumpSymbolStats(\n  425      \"sym-stats\",\n  426      cl::desc(\"Dump a detailed breakdown of symbol usage/size for each module\"),\n  427      cl::cat(MsfOptions), cl::sub(DumpSubcommand));\n  428  \n  429: cl::opt<bool> DumpUdtStats(\n  430      \"udt-stats\",\n  431      cl::desc(\"Dump a detailed breakdown of S_UDT record usage / stats\"),\n  ...\n  433  \n  434  // TYPE OPTIONS\n  435: cl::opt<bool> DumpTypes(\"types\",\n  436                          cl::desc(\"dump CodeView type records from TPI stream\"),\n  437                          cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  438: cl::opt<bool> DumpTypeData(\n  439      \"type-data\",\n  440      cl::desc(\"dump CodeView type record raw bytes from TPI stream\"),\n  441      cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  442  \n  443: cl::opt<bool> DumpTypeExtras(\"type-extras\",\n  444                               cl::desc(\"dump type hashes and index offsets\"),\n  445                               cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  ...\n  450      cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  451  \n  452: cl::opt<bool> DumpIds(\"ids\",\n  453                        cl::desc(\"dump CodeView type records from IPI stream\"),\n  454                        cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  455: cl::opt<bool>\n  456      DumpIdData(\"id-data\",\n  457                 cl::desc(\"dump CodeView type record raw bytes from IPI stream\"),\n  458                 cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  459  \n  460: cl::opt<bool> DumpIdExtras(\"id-extras\",\n  461                             cl::desc(\"dump id hashes and index offsets\"),\n  462                             cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  ...\n  466      cl::cat(TypeOptions), cl::sub(DumpSubcommand));\n  467  \n  468: cl::opt<bool> DumpTypeDependents(\n  469      \"dependents\",\n  470      cl::desc(\"In conjunection with -type-index and -id-index, dumps the entire \"\n  ...\n  474  \n  475  // SYMBOL OPTIONS\n  476: cl::opt<bool> DumpGlobals(\"globals\", cl::desc(\"dump Globals symbol records\"),\n  477                            cl::cat(SymbolOptions), cl::sub(DumpSubcommand));\n  478: cl::opt<bool> DumpGlobalExtras(\"global-extras\", cl::desc(\"dump Globals hashes\"),\n  479                                 cl::cat(SymbolOptions), cl::sub(DumpSubcommand));\n  480: cl::opt<bool> DumpPublics(\"publics\", cl::desc(\"dump Publics stream data\"),\n  481                            cl::cat(SymbolOptions), cl::sub(DumpSubcommand));\n  482: cl::opt<bool> DumpPublicExtras(\"public-extras\",\n  483                                 cl::desc(\"dump Publics hashes and address maps\"),\n  484                                 cl::cat(SymbolOptions), cl::sub(DumpSubcommand));\n  485: cl::opt<bool> DumpSymbols(\"symbols\", cl::desc(\"dump module symbols\"),\n  486                            cl::cat(SymbolOptions), cl::sub(DumpSubcommand));\n  487  \n  488: cl::opt<bool>\n  489      DumpSymRecordBytes(\"sym-data\",\n  490                         cl::desc(\"dump CodeView symbol record raw bytes\"),\n  ...\n  492  \n  493  // MODULE & FILE OPTIONS\n  494: cl::opt<bool> DumpModules(\"modules\", cl::desc(\"dump compiland information\"),\n  495                            cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  496: cl::opt<bool> DumpModuleFiles(\n  497      \"files\",\n  498      cl::desc(\"Dump the source files that contribute to each module's.\"),\n  499      cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  500: cl::opt<bool> DumpLines(\n  501      \"l\",\n  502      cl::desc(\"dump source file/line information (DEBUG_S_LINES subsection)\"),\n  503      cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  504: cl::opt<bool> DumpInlineeLines(\n  505      \"il\",\n  506      cl::desc(\"dump inlinee line information (DEBUG_S_INLINEELINES subsection)\"),\n  507      cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  508: cl::opt<bool> DumpXmi(\n  509      \"xmi\",\n  510      cl::desc(\n  511          \"dump cross module imports (DEBUG_S_CROSSSCOPEIMPORTS subsection)\"),\n  512      cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  513: cl::opt<bool> DumpXme(\n  514      \"xme\",\n  515      cl::desc(\n  516          \"dump cross module exports (DEBUG_S_CROSSSCOPEEXPORTS subsection)\"),\n  517      cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  518: cl::opt<uint32_t> DumpModi(\"modi\", cl::Optional,\n  519                             cl::desc(\"For all options that iterate over \"\n  520                                      \"modules, limit to the specified module\"),\n  521                             cl::cat(FileOptions), cl::sub(DumpSubcommand));\n  522: cl::opt<bool> JustMyCode(\"jmc\", cl::Optional,\n  523                           cl::desc(\"For all options that iterate over modules, \"\n  524                                    \"ignore modules from system libraries\"),\n  ...\n  526  \n  527  // MISCELLANEOUS OPTIONS\n  528: cl::opt<bool> DumpStringTable(\"string-table\", cl::desc(\"dump PDB String Table\"),\n  529                                cl::cat(MiscOptions), cl::sub(DumpSubcommand));\n  530  \n  531: cl::opt<bool> DumpSectionContribs(\"section-contribs\",\n  532                                    cl::desc(\"dump section contributions\"),\n  533                                    cl::cat(MiscOptions),\n  534                                    cl::sub(DumpSubcommand));\n  535: cl::opt<bool> DumpSectionMap(\"section-map\", cl::desc(\"dump section map\"),\n  536                               cl::cat(MiscOptions), cl::sub(DumpSubcommand));\n  537: cl::opt<bool> DumpSectionHeaders(\"section-headers\",\n  538                                   cl::desc(\"Dump image section headers\"),\n  539                                   cl::cat(MiscOptions), cl::sub(DumpSubcommand));\n  540  \n  541: cl::opt<bool> RawAll(\"all\", cl::desc(\"Implies most other options.\"),\n  542                       cl::cat(MiscOptions), cl::sub(DumpSubcommand));\n  543  \n  ...\n  548  \n  549  namespace yaml2pdb {\n  550: cl::opt<std::string>\n  551      YamlPdbOutputFile(\"pdb\", cl::desc(\"the name of the PDB file to write\"),\n  552                        cl::sub(YamlToPdbSubcommand));\n  553  \n  554: cl::opt<std::string> InputFilename(cl::Positional,\n  555                                     cl::desc(\"<input YAML file>\"), cl::Required,\n  556                                     cl::sub(YamlToPdbSubcommand));\n  ...\n  558  \n  559  namespace pdb2yaml {\n  560: cl::opt<bool> All(\"all\",\n  561                    cl::desc(\"Dump everything we know how to dump.\"),\n  562                    cl::sub(PdbToYamlSubcommand), cl::init(false));\n  563: cl::opt<bool> NoFileHeaders(\"no-file-headers\",\n  564                              cl::desc(\"Do not dump MSF file headers\"),\n  565                              cl::sub(PdbToYamlSubcommand), cl::init(false));\n  566: cl::opt<bool> Minimal(\"minimal\",\n  567                        cl::desc(\"Don't write fields with default values\"),\n  568                        cl::sub(PdbToYamlSubcommand), cl::init(false));\n  569  \n  570: cl::opt<bool> StreamMetadata(\n  571      \"stream-metadata\",\n  572      cl::desc(\"Dump the number of streams and each stream's size\"),\n  573      cl::sub(PdbToYamlSubcommand), cl::init(false));\n  574: cl::opt<bool> StreamDirectory(\n  575      \"stream-directory\",\n  576      cl::desc(\"Dump each stream's block map (implies -stream-metadata)\"),\n  577      cl::sub(PdbToYamlSubcommand), cl::init(false));\n  578: cl::opt<bool> PdbStream(\"pdb-stream\",\n  579                          cl::desc(\"Dump the PDB Stream (Stream 1)\"),\n  580                          cl::sub(PdbToYamlSubcommand), cl::init(false));\n  581  \n  582: cl::opt<bool> StringTable(\"string-table\", cl::desc(\"Dump the PDB String Table\"),\n  583                            cl::sub(PdbToYamlSubcommand), cl::init(false));\n  584  \n  585: cl::opt<bool> DbiStream(\"dbi-stream\",\n  586                          cl::desc(\"Dump the DBI Stream Headers (Stream 2)\"),\n  587                          cl::sub(PdbToYamlSubcommand), cl::init(false));\n  588  \n  589: cl::opt<bool> TpiStream(\"tpi-stream\",\n  590                          cl::desc(\"Dump the TPI Stream (Stream 3)\"),\n  591                          cl::sub(PdbToYamlSubcommand), cl::init(false));\n  592  \n  593: cl::opt<bool> IpiStream(\"ipi-stream\",\n  594                          cl::desc(\"Dump the IPI Stream (Stream 5)\"),\n  595                          cl::sub(PdbToYamlSubcommand), cl::init(false));\n  596  \n  597  // MODULE & FILE OPTIONS\n  598: cl::opt<bool> DumpModules(\"modules\", cl::desc(\"dump compiland information\"),\n  599                            cl::cat(FileOptions), cl::sub(PdbToYamlSubcommand));\n  600: cl::opt<bool> DumpModuleFiles(\"module-files\", cl::desc(\"dump file information\"),\n  601                                cl::cat(FileOptions),\n  602                                cl::sub(PdbToYamlSubcommand));\n  ...\n  605      cl::desc(\"dump subsections from each module's debug stream\"), ChunkValues,\n  606      cl::cat(FileOptions), cl::sub(PdbToYamlSubcommand));\n  607: cl::opt<bool> DumpModuleSyms(\"module-syms\", cl::desc(\"dump module symbols\"),\n  608                               cl::cat(FileOptions),\n  609                               cl::sub(PdbToYamlSubcommand));\n  ...\n  615  \n  616  namespace analyze {\n  617: cl::opt<bool> StringTable(\"hash-collisions\", cl::desc(\"Find hash collisions\"),\n  618                            cl::sub(AnalyzeSubcommand), cl::init(false));\n  619  cl::list<std::string> InputFilename(cl::Positional,\n  ...\n  626                                       cl::desc(\"<input PDB files>\"),\n  627                                       cl::OneOrMore, cl::sub(MergeSubcommand));\n  628: cl::opt<std::string>\n  629      PdbOutputFile(\"pdb\", cl::desc(\"the name of the PDB file to write\"),\n  630                    cl::sub(MergeSubcommand));\n\n/home/mw/0-rust/src/llvm/tools/llvm-pdbutil/llvm-pdbutil.h:\n   76                          const std::unique_ptr<llvm::pdb::PDBSymbolData> &F2);\n   77  \n   78: extern llvm::cl::opt<bool> Compilands;\n   79: extern llvm::cl::opt<bool> Symbols;\n   80: extern llvm::cl::opt<bool> Globals;\n   81: extern llvm::cl::opt<bool> Classes;\n   82: extern llvm::cl::opt<bool> Enums;\n   83: extern llvm::cl::opt<bool> Typedefs;\n   84: extern llvm::cl::opt<bool> All;\n   85: extern llvm::cl::opt<bool> ExcludeCompilerGenerated;\n   86  \n   87: extern llvm::cl::opt<bool> NoEnumDefs;\n   88  extern llvm::cl::list<std::string> ExcludeTypes;\n   89  extern llvm::cl::list<std::string> ExcludeSymbols;\n   ..\n   92  extern llvm::cl::list<std::string> IncludeSymbols;\n   93  extern llvm::cl::list<std::string> IncludeCompilands;\n   94: extern llvm::cl::opt<SymbolSortMode> SymbolOrder;\n   95: extern llvm::cl::opt<ClassSortMode> ClassOrder;\n   96: extern llvm::cl::opt<uint32_t> SizeThreshold;\n   97: extern llvm::cl::opt<uint32_t> PaddingThreshold;\n   98: extern llvm::cl::opt<uint32_t> ImmediatePaddingThreshold;\n   99: extern llvm::cl::opt<ClassDefinitionFormat> ClassFormat;\n  100: extern llvm::cl::opt<uint32_t> ClassRecursionDepth;\n  101  }\n  102  \n  ...\n  110  extern llvm::Optional<NumberRange> DumpByteRange;\n  111  extern llvm::cl::list<std::string> DumpStreamData;\n  112: extern llvm::cl::opt<bool> NameMap;\n  113: extern llvm::cl::opt<bool> Fpm;\n  114  \n  115: extern llvm::cl::opt<bool> SectionContributions;\n  116: extern llvm::cl::opt<bool> SectionMap;\n  117: extern llvm::cl::opt<bool> ModuleInfos;\n  118: extern llvm::cl::opt<bool> FileInfo;\n  119: extern llvm::cl::opt<bool> TypeServerMap;\n  120: extern llvm::cl::opt<bool> ECData;\n  121  \n  122  extern llvm::cl::list<uint32_t> TypeIndex;\n  123  extern llvm::cl::list<uint32_t> IdIndex;\n  124  \n  125: extern llvm::cl::opt<uint32_t> ModuleIndex;\n  126: extern llvm::cl::opt<bool> ModuleSyms;\n  127: extern llvm::cl::opt<bool> ModuleC11;\n  128: extern llvm::cl::opt<bool> ModuleC13;\n  129: extern llvm::cl::opt<bool> SplitChunks;\n  130  } // namespace bytes\n  131  \n  132  namespace dump {\n  133  \n  134: extern llvm::cl::opt<bool> DumpSummary;\n  135: extern llvm::cl::opt<bool> DumpFpm;\n  136: extern llvm::cl::opt<bool> DumpStreams;\n  137: extern llvm::cl::opt<bool> DumpSymbolStats;\n  138: extern llvm::cl::opt<bool> DumpUdtStats;\n  139: extern llvm::cl::opt<bool> DumpStreamBlocks;\n  140  \n  141: extern llvm::cl::opt<bool> DumpLines;\n  142: extern llvm::cl::opt<bool> DumpInlineeLines;\n  143: extern llvm::cl::opt<bool> DumpXmi;\n  144: extern llvm::cl::opt<bool> DumpXme;\n  145: extern llvm::cl::opt<bool> DumpStringTable;\n  146: extern llvm::cl::opt<bool> DumpTypes;\n  147: extern llvm::cl::opt<bool> DumpTypeData;\n  148: extern llvm::cl::opt<bool> DumpTypeExtras;\n  149  extern llvm::cl::list<uint32_t> DumpTypeIndex;\n  150: extern llvm::cl::opt<bool> DumpTypeDependents;\n  151: extern llvm::cl::opt<bool> DumpSectionHeaders;\n  152  \n  153: extern llvm::cl::opt<bool> DumpIds;\n  154: extern llvm::cl::opt<bool> DumpIdData;\n  155: extern llvm::cl::opt<bool> DumpIdExtras;\n  156  extern llvm::cl::list<uint32_t> DumpIdIndex;\n  157: extern llvm::cl::opt<uint32_t> DumpModi;\n  158: extern llvm::cl::opt<bool> JustMyCode;\n  159: extern llvm::cl::opt<bool> DumpSymbols;\n  160: extern llvm::cl::opt<bool> DumpSymRecordBytes;\n  161: extern llvm::cl::opt<bool> DumpGlobals;\n  162: extern llvm::cl::opt<bool> DumpGlobalExtras;\n  163: extern llvm::cl::opt<bool> DumpPublics;\n  164: extern llvm::cl::opt<bool> DumpPublicExtras;\n  165: extern llvm::cl::opt<bool> DumpSectionContribs;\n  166: extern llvm::cl::opt<bool> DumpSectionMap;\n  167: extern llvm::cl::opt<bool> DumpModules;\n  168: extern llvm::cl::opt<bool> DumpModuleFiles;\n  169: extern llvm::cl::opt<bool> RawAll;\n  170  }\n  171  \n  172  namespace pdb2yaml {\n  173: extern llvm::cl::opt<bool> All;\n  174: extern llvm::cl::opt<bool> NoFileHeaders;\n  175: extern llvm::cl::opt<bool> Minimal;\n  176: extern llvm::cl::opt<bool> StreamMetadata;\n  177: extern llvm::cl::opt<bool> StreamDirectory;\n  178: extern llvm::cl::opt<bool> StringTable;\n  179: extern llvm::cl::opt<bool> PdbStream;\n  180: extern llvm::cl::opt<bool> DbiStream;\n  181: extern llvm::cl::opt<bool> TpiStream;\n  182: extern llvm::cl::opt<bool> IpiStream;\n  183  extern llvm::cl::list<std::string> InputFilename;\n  184: extern llvm::cl::opt<bool> DumpModules;\n  185: extern llvm::cl::opt<bool> DumpModuleFiles;\n  186  extern llvm::cl::list<ModuleSubsection> DumpModuleSubsections;\n  187: extern llvm::cl::opt<bool> DumpModuleSyms;\n  188  } // namespace pdb2yaml\n  189  \n  190  namespace diff {\n  191: extern llvm::cl::opt<bool> PrintValueColumns;\n  192: extern llvm::cl::opt<bool> PrintResultColumn;\n  193  extern llvm::DenseMap<uint32_t, uint32_t> Equivalences;\n  194: extern llvm::cl::opt<std::string> LeftRoot;\n  195: extern llvm::cl::opt<std::string> RightRoot;\n  196  } // namespace diff\n  197  }\n\n/home/mw/0-rust/src/llvm/tools/llvm-profdata/llvm-profdata.cpp:\n  442    cl::list<std::string> WeightedInputFilenames(\"weighted-input\",\n  443                                                 cl::desc(\"<weight>,<filename>\"));\n  444:   cl::opt<std::string> InputFilenamesFile(\n  445        \"input-files\", cl::init(\"\"),\n  446        cl::desc(\"Path to file containing newline-separated \"\n  ...\n  448    cl::alias InputFilenamesFileA(\"f\", cl::desc(\"Alias for --input-files\"),\n  449                                  cl::aliasopt(InputFilenamesFile));\n  450:   cl::opt<bool> DumpInputFileList(\n  451        \"dump-input-file-list\", cl::init(false), cl::Hidden,\n  452        cl::desc(\"Dump the list of input files and their weights, then exit\"));\n  453:   cl::opt<std::string> OutputFilename(\"output\", cl::value_desc(\"output\"),\n  454                                        cl::init(\"-\"), cl::Required,\n  455                                        cl::desc(\"Output file\"));\n  456    cl::alias OutputFilenameA(\"o\", cl::desc(\"Alias for --output\"),\n  457                              cl::aliasopt(OutputFilename));\n  458:   cl::opt<ProfileKinds> ProfileKind(\n  459        cl::desc(\"Profile kind:\"), cl::init(instr),\n  460        cl::values(clEnumVal(instr, \"Instrumentation profile (default)\"),\n  461                   clEnumVal(sample, \"Sample profile\")));\n  462:   cl::opt<ProfileFormat> OutputFormat(\n  463        cl::desc(\"Format of output profile\"), cl::init(PF_Binary),\n  464        cl::values(clEnumValN(PF_Binary, \"binary\", \"Binary encoding (default)\"),\n  ...\n  466                   clEnumValN(PF_GCC, \"gcc\",\n  467                              \"GCC encoding (only meaningful for -sample)\")));\n  468:   cl::opt<bool> OutputSparse(\"sparse\", cl::init(false),\n  469        cl::desc(\"Generate a sparse profile (only meaningful for -instr)\"));\n  470:   cl::opt<unsigned> NumThreads(\n  471        \"num-threads\", cl::init(0),\n  472        cl::desc(\"Number of merge threads to use (default: autodetect)\"));\n  ...\n  738  \n  739  static int show_main(int argc, const char *argv[]) {\n  740:   cl::opt<std::string> Filename(cl::Positional, cl::Required,\n  741                                  cl::desc(\"<profdata-file>\"));\n  742  \n  743:   cl::opt<bool> ShowCounts(\"counts\", cl::init(false),\n  744                             cl::desc(\"Show counter values for shown functions\"));\n  745:   cl::opt<bool> TextFormat(\n  746        \"text\", cl::init(false),\n  747        cl::desc(\"Show instr profile data in text dump format\"));\n  748:   cl::opt<bool> ShowIndirectCallTargets(\n  749        \"ic-targets\", cl::init(false),\n  750        cl::desc(\"Show indirect call site target values for shown functions\"));\n  751:   cl::opt<bool> ShowMemOPSizes(\n  752        \"memop-sizes\", cl::init(false),\n  753        cl::desc(\"Show the profiled sizes of the memory intrinsic calls \"\n  754                 \"for shown functions\"));\n  755:   cl::opt<bool> ShowDetailedSummary(\"detailed-summary\", cl::init(false),\n  756                                      cl::desc(\"Show detailed profile summary\"));\n  757    cl::list<uint32_t> DetailedSummaryCutoffs(\n  ...\n  760            \"Cutoff percentages (times 10000) for generating detailed summary\"),\n  761        cl::value_desc(\"800000,901000,999999\"));\n  762:   cl::opt<bool> ShowAllFunctions(\"all-functions\", cl::init(false),\n  763                                   cl::desc(\"Details for every function\"));\n  764:   cl::opt<std::string> ShowFunction(\"function\",\n  765                                      cl::desc(\"Details for matching functions\"));\n  766  \n  767:   cl::opt<std::string> OutputFilename(\"output\", cl::value_desc(\"output\"),\n  768                                        cl::init(\"-\"), cl::desc(\"Output file\"));\n  769    cl::alias OutputFilenameA(\"o\", cl::desc(\"Alias for --output\"),\n  770                              cl::aliasopt(OutputFilename));\n  771:   cl::opt<ProfileKinds> ProfileKind(\n  772        cl::desc(\"Profile kind:\"), cl::init(instr),\n  773        cl::values(clEnumVal(instr, \"Instrumentation profile (default)\"),\n  774                   clEnumVal(sample, \"Sample profile\")));\n  775:   cl::opt<uint32_t> TopNFunctions(\n  776        \"topn\", cl::init(0),\n  777        cl::desc(\"Show the list of functions with the largest internal counts\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-readobj/llvm-readobj.cpp:\n   51  \n   52    // -wide, -W\n   53:   cl::opt<bool> WideOutput(\"wide\",\n   54      cl::desc(\"Ignored for compatibility with GNU readelf\"));\n   55    cl::alias WideOutputShort(\"W\",\n   ..\n   58  \n   59    // -file-headers, -h\n   60:   cl::opt<bool> FileHeaders(\"file-headers\",\n   61      cl::desc(\"Display file headers \"));\n   62    cl::alias FileHeadersShort(\"h\",\n   ..\n   66    // -sections, -s, -S\n   67    // Note: In GNU readelf, -s means --symbols!\n   68:   cl::opt<bool> Sections(\"sections\",\n   69      cl::desc(\"Display all sections.\"));\n   70    cl::alias SectionsShort(\"s\",\n   ..\n   76  \n   77    // -section-relocations, -sr\n   78:   cl::opt<bool> SectionRelocations(\"section-relocations\",\n   79      cl::desc(\"Display relocations for each section shown.\"));\n   80    cl::alias SectionRelocationsShort(\"sr\",\n   ..\n   83  \n   84    // -section-symbols, -st\n   85:   cl::opt<bool> SectionSymbols(\"section-symbols\",\n   86      cl::desc(\"Display symbols for each section shown.\"));\n   87    cl::alias SectionSymbolsShort(\"st\",\n   ..\n   90  \n   91    // -section-data, -sd\n   92:   cl::opt<bool> SectionData(\"section-data\",\n   93      cl::desc(\"Display section data for each section shown.\"));\n   94    cl::alias SectionDataShort(\"sd\",\n   ..\n   97  \n   98    // -relocations, -r\n   99:   cl::opt<bool> Relocations(\"relocations\",\n  100      cl::desc(\"Display the relocation entries in the file\"));\n  101    cl::alias RelocationsShort(\"r\",\n  ...\n  104  \n  105    // -notes, -n\n  106:   cl::opt<bool> Notes(\"notes\", cl::desc(\"Display the ELF notes in the file\"));\n  107    cl::alias NotesShort(\"n\", cl::desc(\"Alias for --notes\"), cl::aliasopt(Notes));\n  108  \n  109    // -dyn-relocations\n  110:   cl::opt<bool> DynRelocs(\"dyn-relocations\",\n  111      cl::desc(\"Display the dynamic relocation entries in the file\"));\n  112  \n  113    // -symbols, -t\n  114:   cl::opt<bool> Symbols(\"symbols\",\n  115      cl::desc(\"Display the symbol table\"));\n  116    cl::alias SymbolsShort(\"t\",\n  ...\n  119  \n  120    // -dyn-symbols, -dt\n  121:   cl::opt<bool> DynamicSymbols(\"dyn-symbols\",\n  122      cl::desc(\"Display the dynamic symbol table\"));\n  123    cl::alias DynamicSymbolsShort(\"dt\",\n  ...\n  126  \n  127    // -unwind, -u\n  128:   cl::opt<bool> UnwindInfo(\"unwind\",\n  129      cl::desc(\"Display unwind information\"));\n  130    cl::alias UnwindInfoShort(\"u\",\n  ...\n  133  \n  134    // -dynamic-table\n  135:   cl::opt<bool> DynamicTable(\"dynamic-table\",\n  136      cl::desc(\"Display the ELF .dynamic section table\"));\n  137    cl::alias DynamicTableShort(\"d\", cl::desc(\"Alias for --dynamic-table\"),\n  ...\n  139  \n  140    // -needed-libs\n  141:   cl::opt<bool> NeededLibraries(\"needed-libs\",\n  142      cl::desc(\"Display the needed libraries\"));\n  143  \n  144    // -program-headers\n  145:   cl::opt<bool> ProgramHeaders(\"program-headers\",\n  146      cl::desc(\"Display ELF program headers\"));\n  147    cl::alias ProgramHeadersShort(\"l\", cl::desc(\"Alias for --program-headers\"),\n  ...\n  149  \n  150    // -hash-table\n  151:   cl::opt<bool> HashTable(\"hash-table\",\n  152      cl::desc(\"Display ELF hash table\"));\n  153  \n  154    // -gnu-hash-table\n  155:   cl::opt<bool> GnuHashTable(\"gnu-hash-table\",\n  156      cl::desc(\"Display ELF .gnu.hash section\"));\n  157  \n  158    // -expand-relocs\n  159:   cl::opt<bool> ExpandRelocs(\"expand-relocs\",\n  160      cl::desc(\"Expand each shown relocation to multiple lines\"));\n  161  \n  162    // -codeview\n  163:   cl::opt<bool> CodeView(\"codeview\",\n  164                           cl::desc(\"Display CodeView debug information\"));\n  165  \n  166    // -codeview-merged-types\n  167:   cl::opt<bool>\n  168        CodeViewMergedTypes(\"codeview-merged-types\",\n  169                            cl::desc(\"Display the merged CodeView type stream\"));\n  170  \n  171    // -codeview-subsection-bytes\n  172:   cl::opt<bool> CodeViewSubsectionBytes(\n  173        \"codeview-subsection-bytes\",\n  174        cl::desc(\"Dump raw contents of codeview debug sections and records\"));\n  175  \n  176    // -arm-attributes, -a\n  177:   cl::opt<bool> ARMAttributes(\"arm-attributes\",\n  178                                cl::desc(\"Display the ARM attributes section\"));\n  179    cl::alias ARMAttributesShort(\"a\", cl::desc(\"Alias for --arm-attributes\"),\n  ...\n  181  \n  182    // -mips-plt-got\n  183:   cl::opt<bool>\n  184    MipsPLTGOT(\"mips-plt-got\",\n  185               cl::desc(\"Display the MIPS GOT and PLT GOT sections\"));\n  186  \n  187    // -mips-abi-flags\n  188:   cl::opt<bool> MipsABIFlags(\"mips-abi-flags\",\n  189                               cl::desc(\"Display the MIPS.abiflags section\"));\n  190  \n  191    // -mips-reginfo\n  192:   cl::opt<bool> MipsReginfo(\"mips-reginfo\",\n  193                              cl::desc(\"Display the MIPS .reginfo section\"));\n  194  \n  195    // -mips-options\n  196:   cl::opt<bool> MipsOptions(\"mips-options\",\n  197                              cl::desc(\"Display the MIPS .MIPS.options section\"));\n  198  \n  199    // -coff-imports\n  200:   cl::opt<bool>\n  201    COFFImports(\"coff-imports\", cl::desc(\"Display the PE/COFF import table\"));\n  202  \n  203    // -coff-exports\n  204:   cl::opt<bool>\n  205    COFFExports(\"coff-exports\", cl::desc(\"Display the PE/COFF export table\"));\n  206  \n  207    // -coff-directives\n  208:   cl::opt<bool>\n  209    COFFDirectives(\"coff-directives\",\n  210                   cl::desc(\"Display the PE/COFF .drectve section\"));\n  211  \n  212    // -coff-basereloc\n  213:   cl::opt<bool>\n  214    COFFBaseRelocs(\"coff-basereloc\",\n  215                   cl::desc(\"Display the PE/COFF .reloc section\"));\n  216  \n  217    // -coff-debug-directory\n  218:   cl::opt<bool>\n  219    COFFDebugDirectory(\"coff-debug-directory\",\n  220                       cl::desc(\"Display the PE/COFF debug directory\"));\n  221  \n  222    // -coff-resources\n  223:   cl::opt<bool> COFFResources(\"coff-resources\",\n  224                                cl::desc(\"Display the PE/COFF .rsrc section\"));\n  225  \n  226    // -coff-load-config\n  227:   cl::opt<bool>\n  228    COFFLoadConfig(\"coff-load-config\",\n  229                   cl::desc(\"Display the PE/COFF load config\"));\n  230  \n  231    // -macho-data-in-code\n  232:   cl::opt<bool>\n  233    MachODataInCode(\"macho-data-in-code\",\n  234                    cl::desc(\"Display MachO Data in Code command\"));\n  235  \n  236    // -macho-indirect-symbols\n  237:   cl::opt<bool>\n  238    MachOIndirectSymbols(\"macho-indirect-symbols\",\n  239                    cl::desc(\"Display MachO indirect symbols\"));\n  240  \n  241    // -macho-linker-options\n  242:   cl::opt<bool>\n  243    MachOLinkerOptions(\"macho-linker-options\",\n  244                    cl::desc(\"Display MachO linker options\"));\n  245  \n  246    // -macho-segment\n  247:   cl::opt<bool>\n  248    MachOSegment(\"macho-segment\",\n  249                    cl::desc(\"Display MachO Segment command\"));\n  250  \n  251    // -macho-version-min\n  252:   cl::opt<bool>\n  253    MachOVersionMin(\"macho-version-min\",\n  254                    cl::desc(\"Display MachO version min command\"));\n  255  \n  256    // -macho-dysymtab\n  257:   cl::opt<bool>\n  258    MachODysymtab(\"macho-dysymtab\",\n  259                    cl::desc(\"Display MachO Dysymtab command\"));\n  260  \n  261    // -stackmap\n  262:   cl::opt<bool>\n  263    PrintStackMap(\"stackmap\",\n  264                  cl::desc(\"Display contents of stackmap section\"));\n  265  \n  266    // -version-info\n  267:   cl::opt<bool>\n  268        VersionInfo(\"version-info\",\n  269                    cl::desc(\"Display ELF version sections (if present)\"));\n  ...\n  271                               cl::aliasopt(VersionInfo));\n  272  \n  273:   cl::opt<bool> SectionGroups(\"elf-section-groups\",\n  274                                cl::desc(\"Display ELF section group contents\"));\n  275    cl::alias SectionGroupsShort(\"g\", cl::desc(\"Alias for -elf-sections-groups\"),\n  276                                 cl::aliasopt(SectionGroups));\n  277:   cl::opt<bool> HashHistogram(\n  278        \"elf-hash-histogram\",\n  279        cl::desc(\"Display bucket list histogram for hash sections\"));\n  ...\n  281                                 cl::aliasopt(HashHistogram));\n  282  \n  283:   cl::opt<OutputStyleTy>\n  284        Output(\"elf-output-style\", cl::desc(\"Specify ELF dump style\"),\n  285               cl::values(clEnumVal(LLVM, \"LLVM default style\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-readobj/llvm-readobj.h:\n   51  namespace opts {\n   52    extern llvm::cl::list<std::string> InputFilenames;\n   53:   extern llvm::cl::opt<bool> FileHeaders;\n   54:   extern llvm::cl::opt<bool> Sections;\n   55:   extern llvm::cl::opt<bool> SectionRelocations;\n   56:   extern llvm::cl::opt<bool> SectionSymbols;\n   57:   extern llvm::cl::opt<bool> SectionData;\n   58:   extern llvm::cl::opt<bool> Relocations;\n   59:   extern llvm::cl::opt<bool> Symbols;\n   60:   extern llvm::cl::opt<bool> DynamicSymbols;\n   61:   extern llvm::cl::opt<bool> UnwindInfo;\n   62:   extern llvm::cl::opt<bool> ExpandRelocs;\n   63:   extern llvm::cl::opt<bool> CodeView;\n   64:   extern llvm::cl::opt<bool> CodeViewSubsectionBytes;\n   65:   extern llvm::cl::opt<bool> ARMAttributes;\n   66:   extern llvm::cl::opt<bool> MipsPLTGOT;\n   67    enum OutputStyleTy { LLVM, GNU };\n   68:   extern llvm::cl::opt<OutputStyleTy> Output;\n   69  } // namespace opts\n   70  \n\n/home/mw/0-rust/src/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:\n   53  };\n   54  \n   55: static cl::opt<ActionType>\n   56  Action(cl::desc(\"Action to perform:\"),\n   57         cl::init(AC_Execute),\n   ..\n   67                               \"Load, link and verify the resulting memory image.\")));\n   68  \n   69: static cl::opt<std::string>\n   70  EntryPoint(\"entry\",\n   71             cl::desc(\"Function to call as entry point.\"),\n   ..\n   77         cl::ZeroOrMore);\n   78  \n   79: static cl::opt<std::string>\n   80  TripleName(\"triple\", cl::desc(\"Target triple for disassembler\"));\n   81  \n   82: static cl::opt<std::string>\n   83  MCPU(\"mcpu\",\n   84       cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   91             cl::ZeroOrMore);\n   92  \n   93: static cl::opt<uint64_t>\n   94  PreallocMemory(\"preallocate\",\n   95                cl::desc(\"Allocate memory upfront rather than on-demand\"),\n   96                cl::init(0));\n   97  \n   98: static cl::opt<uint64_t>\n   99  TargetAddrStart(\"target-addr-start\",\n  100                  cl::desc(\"For -verify only: start of phony target address \"\n  ...\n  103                  cl::Hidden);\n  104  \n  105: static cl::opt<uint64_t>\n  106  TargetAddrEnd(\"target-addr-end\",\n  107                cl::desc(\"For -verify only: end of phony target address range.\"),\n  ...\n  109                cl::Hidden);\n  110  \n  111: static cl::opt<uint64_t>\n  112  TargetSectionSep(\"target-section-sep\",\n  113                   cl::desc(\"For -verify only: Separation between sections in \"\n  ...\n  130                      cl::Hidden);\n  131  \n  132: static cl::opt<bool>\n  133  PrintAllocationRequests(\"print-alloc-requests\",\n  134                          cl::desc(\"Print allocation requests made to the memory \"\n\n/home/mw/0-rust/src/llvm/tools/llvm-size/llvm-size.cpp:\n   37  \n   38  enum OutputFormatTy { berkeley, sysv, darwin };\n   39: static cl::opt<OutputFormatTy>\n   40  OutputFormat(\"format\", cl::desc(\"Specify output format\"),\n   41               cl::values(clEnumVal(sysv, \"System V format\"),\n   ..\n   44               cl::init(berkeley));\n   45  \n   46: static cl::opt<OutputFormatTy> OutputFormatShort(\n   47      cl::desc(\"Specify output format\"),\n   48      cl::values(clEnumValN(sysv, \"A\", \"System V format\"),\n   ..\n   58  static uint64_t TotalObjectTotal = 0;\n   59  \n   60: cl::opt<bool>\n   61  DarwinLongFormat(\"l\", cl::desc(\"When format is darwin, use long format \"\n   62                                 \"to include addresses and offsets.\"));\n   63  \n   64: cl::opt<bool>\n   65      ELFCommons(\"common\",\n   66                 cl::desc(\"Print common symbols in the ELF file.  When using \"\n   ..\n   74  \n   75  enum RadixTy { octal = 8, decimal = 10, hexadecimal = 16 };\n   76: static cl::opt<unsigned int>\n   77  Radix(\"radix\", cl::desc(\"Print size in radix. Only 8, 10, and 16 are valid\"),\n   78        cl::init(decimal));\n   79  \n   80: static cl::opt<RadixTy>\n   81  RadixShort(cl::desc(\"Print size in radix:\"),\n   82             cl::values(clEnumValN(octal, \"o\", \"Print size in octal\"),\n   ..\n   85             cl::init(decimal));\n   86  \n   87: static cl::opt<bool>\n   88      TotalSizes(\"totals\",\n   89                 cl::desc(\"Print totals of all objects - Berkeley format only\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-split/llvm-split.cpp:\n   26  using namespace llvm;\n   27  \n   28: static cl::opt<std::string>\n   29  InputFilename(cl::Positional, cl::desc(\"<input bitcode file>\"),\n   30      cl::init(\"-\"), cl::value_desc(\"filename\"));\n   31  \n   32: static cl::opt<std::string>\n   33  OutputFilename(\"o\", cl::desc(\"Override output filename\"),\n   34                 cl::value_desc(\"filename\"));\n   35  \n   36: static cl::opt<unsigned> NumOutputs(\"j\", cl::Prefix, cl::init(2),\n   37                                      cl::desc(\"Number of output files\"));\n   38  \n   39: static cl::opt<bool>\n   40      PreserveLocals(\"preserve-locals\", cl::Prefix, cl::init(false),\n   41                     cl::desc(\"Split without externalizing locals\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-stress/llvm-stress.cpp:\n   55  namespace llvm {\n   56  \n   57: static cl::opt<unsigned> SeedCL(\"seed\",\n   58    cl::desc(\"Seed used for randomness\"), cl::init(0));\n   59  \n   60: static cl::opt<unsigned> SizeCL(\"size\",\n   61    cl::desc(\"The estimated size of the generated function (# of instrs)\"),\n   62    cl::init(100));\n   63  \n   64: static cl::opt<std::string>\n   65  OutputFilename(\"o\", cl::desc(\"Override output filename\"),\n   66                 cl::value_desc(\"filename\"));\n\n/home/mw/0-rust/src/llvm/tools/llvm-strings/llvm-strings.cpp:\n   31                                              cl::ZeroOrMore);\n   32  \n   33: static cl::opt<bool>\n   34      PrintFileName(\"print-file-name\",\n   35                    cl::desc(\"Print the name of the file before each string\"));\n   ..\n   37                                      cl::aliasopt(PrintFileName));\n   38  \n   39: static cl::opt<int>\n   40      MinLength(\"bytes\", cl::desc(\"Print sequences of the specified length\"),\n   41                cl::init(4));\n   42  static cl::alias MinLengthShort(\"n\", cl::desc(\"\"), cl::aliasopt(MinLength));\n   43  \n   44: static cl::opt<bool>\n   45      AllSections(\"all\",\n   46                    cl::desc(\"Check all sections, not just the data section\"));\n   ..\n   49  \n   50  enum radix { none, octal, hexadecimal, decimal };\n   51: static cl::opt<radix>\n   52      Radix(\"radix\", cl::desc(\"print the offset within the file\"),\n   53            cl::values(clEnumValN(octal, \"o\", \"octal\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:\n   35  using namespace symbolize;\n   36  \n   37: static cl::opt<bool>\n   38  ClUseSymbolTable(\"use-symbol-table\", cl::init(true),\n   39                   cl::desc(\"Prefer names in symbol table to names \"\n   40                            \"in debug info\"));\n   41  \n   42: static cl::opt<FunctionNameKind> ClPrintFunctions(\n   43      \"functions\", cl::init(FunctionNameKind::LinkageName),\n   44      cl::desc(\"Print function name for a given address:\"),\n   ..\n   49                            \"print function linkage name\")));\n   50  \n   51: static cl::opt<bool>\n   52      ClUseRelativeAddress(\"relative-address\", cl::init(false),\n   53                           cl::desc(\"Interpret addresses as relative addresses\"),\n   54                           cl::ReallyHidden);\n   55  \n   56: static cl::opt<bool>\n   57      ClPrintInlining(\"inlining\", cl::init(true),\n   58                      cl::desc(\"Print all inlined frames for a given address\"));\n   59  \n   60: static cl::opt<bool>\n   61  ClDemangle(\"demangle\", cl::init(true), cl::desc(\"Demangle function names\"));\n   62  \n   63: static cl::opt<std::string> ClDefaultArch(\"default-arch\", cl::init(\"\"),\n   64                                            cl::desc(\"Default architecture \"\n   65                                                     \"(for multi-arch objects)\"));\n   66  \n   67: static cl::opt<std::string>\n   68  ClBinaryName(\"obj\", cl::init(\"\"),\n   69               cl::desc(\"Path to object file to be symbolized (if not provided, \"\n   70                        \"object file should be specified for each input line)\"));\n   71  \n   72: static cl::opt<std::string>\n   73      ClDwpName(\"dwp\", cl::init(\"\"),\n   74                cl::desc(\"Path to DWP file to be use for any split CUs\"));\n   ..\n   78             cl::desc(\"Path to .dSYM bundles to search for debug info for the \"\n   79                      \"object files\"));\n   80: static cl::opt<bool>\n   81      ClPrintAddress(\"print-address\", cl::init(false),\n   82                     cl::desc(\"Show address before line information\"));\n   83  \n   84: static cl::opt<bool>\n   85      ClPrettyPrint(\"pretty-print\", cl::init(false),\n   86                    cl::desc(\"Make the output more human friendly\"));\n   87  \n   88: static cl::opt<int> ClPrintSourceContextLines(\n   89      \"print-source-context-lines\", cl::init(0),\n   90      cl::desc(\"Print N number of source file context\"));\n   91  \n   92: static cl::opt<bool> ClVerbose(\"verbose\", cl::init(false),\n   93                                 cl::desc(\"Print verbose line info\"));\n   94  \n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-account.cc:\n   29  \n   30  static cl::SubCommand Account(\"account\", \"Function call accounting\");\n   31: static cl::opt<std::string> AccountInput(cl::Positional,\n   32                                           cl::desc(\"<xray log file>\"),\n   33                                           cl::Required, cl::sub(Account));\n   34: static cl::opt<bool>\n   35      AccountKeepGoing(\"keep-going\", cl::desc(\"Keep going on errors encountered\"),\n   36                       cl::sub(Account), cl::init(false));\n   ..\n   38                                     cl::desc(\"Alias for -keep_going\"),\n   39                                     cl::sub(Account));\n   40: static cl::opt<bool> AccountDeduceSiblingCalls(\n   41      \"deduce-sibling-calls\",\n   42      cl::desc(\"Deduce sibling calls when unrolling function call stacks\"),\n   ..\n   46                                 cl::desc(\"Alias for -deduce_sibling_calls\"),\n   47                                 cl::sub(Account));\n   48: static cl::opt<std::string>\n   49      AccountOutput(\"output\", cl::value_desc(\"output file\"), cl::init(\"-\"),\n   50                    cl::desc(\"output file; use '-' for stdout\"),\n   ..\n   54                                  cl::sub(Account));\n   55  enum class AccountOutputFormats { TEXT, CSV };\n   56: static cl::opt<AccountOutputFormats>\n   57      AccountOutputFormat(\"format\", cl::desc(\"output format\"),\n   58                          cl::values(clEnumValN(AccountOutputFormats::TEXT,\n   ..\n   77  };\n   78  \n   79: static cl::opt<SortField> AccountSortOutput(\n   80      \"sort\", cl::desc(\"sort output by this field\"), cl::value_desc(\"field\"),\n   81      cl::sub(Account), cl::init(SortField::FUNCID),\n   ..\n   97    DESCENDING,\n   98  };\n   99: static cl::opt<SortDirection> AccountSortOrder(\n  100      \"sortorder\", cl::desc(\"sort ordering\"), cl::init(SortDirection::ASCENDING),\n  101      cl::values(clEnumValN(SortDirection::ASCENDING, \"asc\", \"ascending\"),\n  ...\n  106                                     cl::sub(Account));\n  107  \n  108: static cl::opt<int> AccountTop(\"top\", cl::desc(\"only show the top N results\"),\n  109                                 cl::value_desc(\"N\"), cl::sub(Account),\n  110                                 cl::init(-1));\n  ...\n  112                               cl::aliasopt(AccountTop), cl::sub(Account));\n  113  \n  114: static cl::opt<std::string>\n  115      AccountInstrMap(\"instr_map\",\n  116                      cl::desc(\"binary with the instrumentation map, or \"\n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-converter.cc:\n   32  // ----------------------------------------------------------------------------\n   33  static cl::SubCommand Convert(\"convert\", \"Trace Format Conversion\");\n   34: static cl::opt<std::string> ConvertInput(cl::Positional,\n   35                                           cl::desc(\"<xray log file>\"),\n   36                                           cl::Required, cl::sub(Convert));\n   37  enum class ConvertFormats { BINARY, YAML, CHROME_TRACE_EVENT };\n   38: static cl::opt<ConvertFormats> ConvertOutputFormat(\n   39      \"output-format\", cl::desc(\"output format\"),\n   40      cl::values(clEnumValN(ConvertFormats::BINARY, \"raw\", \"output in binary\"),\n   ..\n   47                                        cl::desc(\"Alias for -output-format\"),\n   48                                        cl::sub(Convert));\n   49: static cl::opt<std::string>\n   50      ConvertOutput(\"output\", cl::value_desc(\"output file\"), cl::init(\"-\"),\n   51                    cl::desc(\"output file; use '-' for stdout\"),\n   ..\n   55                                  cl::sub(Convert));\n   56  \n   57: static cl::opt<bool>\n   58      ConvertSymbolize(\"symbolize\",\n   59                       cl::desc(\"symbolize function ids from the input log\"),\n   ..\n   63                                     cl::sub(Convert));\n   64  \n   65: static cl::opt<std::string>\n   66      ConvertInstrMap(\"instr_map\",\n   67                      cl::desc(\"binary with the instrumentation map, or \"\n   ..\n   72                                    cl::desc(\"Alias for -instr_map\"),\n   73                                    cl::sub(Convert));\n   74: static cl::opt<bool> ConvertSortInput(\n   75      \"sort\",\n   76      cl::desc(\"determines whether to sort input log records by timestamp\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-extract.cc:\n   32  // ----------------------------------------------------------------------------\n   33  static cl::SubCommand Extract(\"extract\", \"Extract instrumentation maps\");\n   34: static cl::opt<std::string> ExtractInput(cl::Positional,\n   35                                           cl::desc(\"<input file>\"), cl::Required,\n   36                                           cl::sub(Extract));\n   37: static cl::opt<std::string>\n   38      ExtractOutput(\"output\", cl::value_desc(\"output file\"), cl::init(\"-\"),\n   39                    cl::desc(\"output file; use '-' for stdout\"),\n   ..\n   42                                  cl::desc(\"Alias for -output\"),\n   43                                  cl::sub(Extract));\n   44: static cl::opt<bool> ExtractSymbolize(\"symbolize\", cl::value_desc(\"symbolize\"),\n   45                                        cl::init(false),\n   46                                        cl::desc(\"symbolize functions\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-graph-diff.cc:\n   31  static cl::SubCommand GraphDiff(\"graph-diff\",\n   32                                  \"Generate diff of function-call graphs\");\n   33: static cl::opt<std::string> GraphDiffInput1(cl::Positional,\n   34                                              cl::desc(\"<xray log file 1>\"),\n   35                                              cl::Required, cl::sub(GraphDiff));\n   36: static cl::opt<std::string> GraphDiffInput2(cl::Positional,\n   37                                              cl::desc(\"<xray log file 2>\"),\n   38                                              cl::Required, cl::sub(GraphDiff));\n   39  \n   40: static cl::opt<bool>\n   41      GraphDiffKeepGoing(\"keep-going\",\n   42                         cl::desc(\"Keep going on errors encountered\"),\n   ..\n   45                                       cl::desc(\"Alias for -keep-going\"),\n   46                                       cl::sub(GraphDiff));\n   47: static cl::opt<bool>\n   48      GraphDiffKeepGoing1(\"keep-going-1\",\n   49                          cl::desc(\"Keep going on errors encountered in trace 1\"),\n   ..\n   52                                        cl::desc(\"Alias for -keep-going-1\"),\n   53                                        cl::sub(GraphDiff));\n   54: static cl::opt<bool>\n   55      GraphDiffKeepGoing2(\"keep-going-2\",\n   56                          cl::desc(\"Keep going on errors encountered in trace 2\"),\n   ..\n   60                                        cl::sub(GraphDiff));\n   61  \n   62: static cl::opt<std::string>\n   63      GraphDiffInstrMap(\"instr-map\",\n   64                        cl::desc(\"binary with the instrumentation map, or \"\n   ..\n   69                                      cl::desc(\"Alias for -instr-map\"),\n   70                                      cl::sub(GraphDiff));\n   71: static cl::opt<std::string>\n   72      GraphDiffInstrMap1(\"instr-map-1\",\n   73                         cl::desc(\"binary with the instrumentation map, or \"\n   ..\n   78                                       cl::desc(\"Alias for -instr-map-1\"),\n   79                                       cl::sub(GraphDiff));\n   80: static cl::opt<std::string>\n   81      GraphDiffInstrMap2(\"instr-map-2\",\n   82                         cl::desc(\"binary with the instrumentation map, or \"\n   ..\n   88                                       cl::sub(GraphDiff));\n   89  \n   90: static cl::opt<bool> GraphDiffDeduceSiblingCalls(\n   91      \"deduce-sibling-calls\",\n   92      cl::desc(\"Deduce sibling calls when unrolling function call stacks\"),\n   ..\n   96                                   cl::desc(\"Alias for -deduce-sibling-calls\"),\n   97                                   cl::sub(GraphDiff));\n   98: static cl::opt<bool> GraphDiffDeduceSiblingCalls1(\n   99      \"deduce-sibling-calls-1\",\n  100      cl::desc(\"Deduce sibling calls when unrolling function call stacks\"),\n  ...\n  103      \"d1\", cl::aliasopt(GraphDiffDeduceSiblingCalls1),\n  104      cl::desc(\"Alias for -deduce-sibling-calls-1\"), cl::sub(GraphDiff));\n  105: static cl::opt<bool> GraphDiffDeduceSiblingCalls2(\n  106      \"deduce-sibling-calls-2\",\n  107      cl::desc(\"Deduce sibling calls when unrolling function call stacks\"),\n  ...\n  111      cl::desc(\"Alias for -deduce-sibling-calls-2\"), cl::sub(GraphDiff));\n  112  \n  113: static cl::opt<GraphRenderer::StatType> GraphDiffEdgeLabel(\n  114      \"edge-label\", cl::desc(\"Output graphs with edges labeled with this field\"),\n  115      cl::value_desc(\"field\"), cl::sub(GraphDiff),\n  ...\n  135                                       cl::sub(GraphDiff));\n  136  \n  137: static cl::opt<GraphRenderer::StatType> GraphDiffEdgeColor(\n  138      \"edge-color\", cl::desc(\"Output graphs with edges colored by this field\"),\n  139      cl::value_desc(\"field\"), cl::sub(GraphDiff),\n  ...\n  159                                       cl::sub(GraphDiff));\n  160  \n  161: static cl::opt<GraphRenderer::StatType> GraphDiffVertexLabel(\n  162      \"vertex-label\",\n  163      cl::desc(\"Output graphs with vertices labeled with this field\"),\n  ...\n  184                                         cl::sub(GraphDiff));\n  185  \n  186: static cl::opt<GraphRenderer::StatType> GraphDiffVertexColor(\n  187      \"vertex-color\",\n  188      cl::desc(\"Output graphs with vertices colored by this field\"),\n  ...\n  209                                         cl::sub(GraphDiff));\n  210  \n  211: static cl::opt<int> GraphDiffVertexLabelTrunc(\n  212      \"vertex-label-trun\", cl::desc(\"What length to truncate vertex labels to \"),\n  213      cl::sub(GraphDiff), cl::init(40));\n  ...\n  217                                 cl::sub(GraphDiff));\n  218  \n  219: static cl::opt<std::string>\n  220      GraphDiffOutput(\"output\", cl::value_desc(\"Output file\"), cl::init(\"-\"),\n  221                      cl::desc(\"output file; use '-' for stdout\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-graph.cc:\n   24  // Setup llvm-xray graph subcommand and its options.\n   25  static cl::SubCommand GraphC(\"graph\", \"Generate function-call graph\");\n   26: static cl::opt<std::string> GraphInput(cl::Positional,\n   27                                         cl::desc(\"<xray log file>\"),\n   28                                         cl::Required, cl::sub(GraphC));\n   29  \n   30: static cl::opt<bool>\n   31      GraphKeepGoing(\"keep-going\", cl::desc(\"Keep going on errors encountered\"),\n   32                     cl::sub(GraphC), cl::init(false));\n   ..\n   35                                   cl::sub(GraphC));\n   36  \n   37: static cl::opt<std::string>\n   38      GraphOutput(\"output\", cl::value_desc(\"Output file\"), cl::init(\"-\"),\n   39                  cl::desc(\"output file; use '-' for stdout\"), cl::sub(GraphC));\n   ..\n   41                                cl::desc(\"Alias for -output\"), cl::sub(GraphC));\n   42  \n   43: static cl::opt<std::string>\n   44      GraphInstrMap(\"instr_map\",\n   45                    cl::desc(\"binary with the instrumrntation map, or \"\n   ..\n   51                                  cl::sub(GraphC));\n   52  \n   53: static cl::opt<bool> GraphDeduceSiblingCalls(\n   54      \"deduce-sibling-calls\",\n   55      cl::desc(\"Deduce sibling calls when unrolling function call stacks\"),\n   ..\n   60                               cl::sub(GraphC));\n   61  \n   62: static cl::opt<GraphRenderer::StatType>\n   63      GraphEdgeLabel(\"edge-label\",\n   64                     cl::desc(\"Output graphs with edges labeled with this field\"),\n   ..\n   85                                   cl::sub(GraphC));\n   86  \n   87: static cl::opt<GraphRenderer::StatType> GraphVertexLabel(\n   88      \"vertex-label\",\n   89      cl::desc(\"Output graphs with vertices labeled with this field\"),\n   ..\n  110                                     cl::sub(GraphC));\n  111  \n  112: static cl::opt<GraphRenderer::StatType> GraphEdgeColorType(\n  113      \"color-edges\",\n  114      cl::desc(\"Output graphs with edge colors determined by this field\"),\n  ...\n  135                                       cl::sub(GraphC));\n  136  \n  137: static cl::opt<GraphRenderer::StatType> GraphVertexColorType(\n  138      \"color-vertices\",\n  139      cl::desc(\"Output graphs with vertex colors determined by this field\"),\n\n/home/mw/0-rust/src/llvm/tools/llvm-xray/xray-stacks.cc:\n   40                                           cl::sub(Stack), cl::OneOrMore);\n   41  \n   42: static cl::opt<bool>\n   43      StackKeepGoing(\"keep-going\", cl::desc(\"Keep going on errors encountered\"),\n   44                     cl::sub(Stack), cl::init(false));\n   ..\n   49  // TODO: Does there need to be an option to deduce tail or sibling calls?\n   50  \n   51: static cl::opt<std::string> StacksInstrMap(\n   52      \"instr_map\",\n   53      cl::desc(\"instrumentation map used to identify function ids. \"\n   ..\n   58                                   cl::sub(Stack));\n   59  \n   60: static cl::opt<bool>\n   61      SeparateThreadStacks(\"per-thread-stacks\",\n   62                           cl::desc(\"Report top stacks within each thread id\"),\n   63                           cl::sub(Stack), cl::init(false));\n   64  \n   65: static cl::opt<bool>\n   66      AggregateThreads(\"aggregate-threads\",\n   67                       cl::desc(\"Aggregate stack times across threads\"),\n   68                       cl::sub(Stack), cl::init(false));\n   69  \n   70: static cl::opt<bool>\n   71      DumpAllStacks(\"all-stacks\",\n   72                    cl::desc(\"Dump sum of timings for all stacks. \"\n   ..\n   81  enum StackOutputFormat { HUMAN, FLAMETOOL };\n   82  \n   83: static cl::opt<StackOutputFormat> StacksOutputFormat(\n   84      \"stack-format\",\n   85      cl::desc(\"The format that output stacks should be \"\n   ..\n   99  };\n  100  \n  101: static cl::opt<AggregationType> RequestedAggregation(\n  102      \"aggregation-type\",\n  103      cl::desc(\"The type of aggregation to do on call stacks.\"),\n\n/home/mw/0-rust/src/llvm/tools/lto/lto.cpp:\n   29  \n   30  // extra command-line flags needed for LTOCodeGenerator\n   31: static cl::opt<char>\n   32  OptLevel(\"O\",\n   33           cl::desc(\"Optimization level. [-O0, -O1, -O2, or -O3] \"\n   ..\n   37           cl::init('2'));\n   38  \n   39: static cl::opt<bool>\n   40  DisableInline(\"disable-inlining\", cl::init(false),\n   41    cl::desc(\"Do not run the inliner pass\"));\n   42  \n   43: static cl::opt<bool>\n   44  DisableGVNLoadPRE(\"disable-gvn-loadpre\", cl::init(false),\n   45    cl::desc(\"Do not run the GVN load PRE pass\"));\n   46  \n   47: static cl::opt<bool> DisableLTOVectorization(\n   48      \"disable-lto-vectorization\", cl::init(false),\n   49      cl::desc(\"Do not run loop or slp vectorization during LTO\"));\n   50  \n   51: static cl::opt<bool> EnableFreestanding(\n   52      \"lto-freestanding\", cl::init(false),\n   53      cl::desc(\"Enable Freestanding (disable builtins / TLI) during LTO\"));\n   ..\n   59  #endif\n   60  \n   61: static cl::opt<bool> DisableVerify(\n   62      \"disable-llvm-verifier\", cl::init(!VerifyByDefault),\n   63      cl::desc(\"Don't run the LLVM verifier during the optimization pipeline\"));\n\n/home/mw/0-rust/src/llvm/tools/obj2yaml/obj2yaml.cpp:\n   59  }\n   60  \n   61: cl::opt<std::string> InputFilename(cl::Positional, cl::desc(\"<input file>\"),\n   62                                     cl::init(\"-\"));\n   63  \n\n/home/mw/0-rust/src/llvm/tools/opt/NewPMDriver.cpp:\n   37  using namespace opt_tool;\n   38  \n   39: static cl::opt<bool>\n   40      DebugPM(\"debug-pass-manager\", cl::Hidden,\n   41              cl::desc(\"Print pass management debugging information\"));\n   ..\n   44  // use when querying for aliasing information. It only works in concert with\n   45  // the \"passes\" flag above.\n   46: static cl::opt<std::string>\n   47      AAPipeline(\"aa-pipeline\",\n   48                 cl::desc(\"A textual description of the alias analysis \"\n   ..\n   52  /// {{@ These options accept textual pipeline descriptions which will be\n   53  /// inserted into default pipelines at the respective extension points\n   54: static cl::opt<std::string> PeepholeEPPipeline(\n   55      \"passes-ep-peephole\",\n   56      cl::desc(\"A textual description of the function pass pipeline inserted at \"\n   57               \"the Peephole extension points into default pipelines\"),\n   58      cl::Hidden);\n   59: static cl::opt<std::string> LateLoopOptimizationsEPPipeline(\n   60      \"passes-ep-late-loop-optimizations\",\n   61      cl::desc(\n   ..\n   63          \"the LateLoopOptimizations extension point into default pipelines\"),\n   64      cl::Hidden);\n   65: static cl::opt<std::string> LoopOptimizerEndEPPipeline(\n   66      \"passes-ep-loop-optimizer-end\",\n   67      cl::desc(\"A textual description of the loop pass pipeline inserted at \"\n   68               \"the LoopOptimizerEnd extension point into default pipelines\"),\n   69      cl::Hidden);\n   70: static cl::opt<std::string> ScalarOptimizerLateEPPipeline(\n   71      \"passes-ep-scalar-optimizer-late\",\n   72      cl::desc(\"A textual description of the function pass pipeline inserted at \"\n   73               \"the ScalarOptimizerLate extension point into default pipelines\"),\n   74      cl::Hidden);\n   75: static cl::opt<std::string> CGSCCOptimizerLateEPPipeline(\n   76      \"passes-ep-cgscc-optimizer-late\",\n   77      cl::desc(\"A textual description of the cgscc pass pipeline inserted at \"\n   78               \"the CGSCCOptimizerLate extension point into default pipelines\"),\n   79      cl::Hidden);\n   80: static cl::opt<std::string> VectorizerStartEPPipeline(\n   81      \"passes-ep-vectorizer-start\",\n   82      cl::desc(\"A textual description of the function pass pipeline inserted at \"\n   ..\n   84      cl::Hidden);\n   85  enum PGOKind { NoPGO, InstrGen, InstrUse, SampleUse };\n   86: static cl::opt<PGOKind> PGOKindFlag(\n   87      \"pgo-kind\", cl::init(NoPGO), cl::Hidden,\n   88      cl::desc(\"The kind of profile guided optimization\"),\n   ..\n   94                 clEnumValN(SampleUse, \"new-pm-pgo-sample-use-pipeline\",\n   95                            \"Use sampled profile to guide PGO.\")));\n   96: static cl::opt<std::string> ProfileFile(\n   97      \"profile-file\", cl::desc(\"Path to the profile.\"), cl::Hidden);\n   98: static cl::opt<bool> DebugInfoForProfiling(\n   99      \"new-pm-debug-info-for-profiling\", cl::init(false), cl::Hidden,\n  100      cl::desc(\"Emit special debug info to enable PGO profile generation.\"));\n\n/home/mw/0-rust/src/llvm/tools/opt/opt.cpp:\n   72  // infrastructure, completely disabling all of the flags specific to the old\n   73  // pass management.\n   74: static cl::opt<std::string> PassPipeline(\n   75      \"passes\",\n   76      cl::desc(\"A textual description of the pass pipeline for optimizing\"),\n   ..\n   79  // Other command line options...\n   80  //\n   81: static cl::opt<std::string>\n   82  InputFilename(cl::Positional, cl::desc(\"<input bitcode file>\"),\n   83      cl::init(\"-\"), cl::value_desc(\"filename\"));\n   84  \n   85: static cl::opt<std::string>\n   86  OutputFilename(\"o\", cl::desc(\"Override output filename\"),\n   87                 cl::value_desc(\"filename\"));\n   88  \n   89: static cl::opt<bool>\n   90  Force(\"f\", cl::desc(\"Enable binary output on terminals\"));\n   91  \n   92: static cl::opt<bool>\n   93  PrintEachXForm(\"p\", cl::desc(\"Print module after each transformation\"));\n   94  \n   95: static cl::opt<bool>\n   96  NoOutput(\"disable-output\",\n   97           cl::desc(\"Do not write result bitcode file\"), cl::Hidden);\n   98  \n   99: static cl::opt<bool>\n  100  OutputAssembly(\"S\", cl::desc(\"Write output as LLVM assembly\"));\n  101  \n  102: static cl::opt<bool>\n  103      OutputThinLTOBC(\"thinlto-bc\",\n  104                      cl::desc(\"Write output as ThinLTO-ready bitcode\"));\n  105  \n  106: static cl::opt<std::string> ThinLinkBitcodeFile(\n  107      \"thin-link-bitcode-file\", cl::value_desc(\"filename\"),\n  108      cl::desc(\n  109          \"A file in which to write minimized bitcode for the thin link only\"));\n  110  \n  111: static cl::opt<bool>\n  112  NoVerify(\"disable-verify\", cl::desc(\"Do not run the verifier\"), cl::Hidden);\n  113  \n  114: static cl::opt<bool>\n  115  VerifyEach(\"verify-each\", cl::desc(\"Verify after each transform\"));\n  116  \n  117: static cl::opt<bool>\n  118      DisableDITypeMap(\"disable-debug-info-type-map\",\n  119                       cl::desc(\"Don't use a uniquing type map for debug info\"));\n  120  \n  121: static cl::opt<bool>\n  122  StripDebug(\"strip-debug\",\n  123             cl::desc(\"Strip debugger symbol info from translation unit\"));\n  124  \n  125: static cl::opt<bool>\n  126  DisableInline(\"disable-inlining\", cl::desc(\"Do not run the inliner pass\"));\n  127  \n  128: static cl::opt<bool>\n  129  DisableOptimizations(\"disable-opt\",\n  130                       cl::desc(\"Do not run any optimization passes\"));\n  131  \n  132: static cl::opt<bool>\n  133  StandardLinkOpts(\"std-link-opts\",\n  134                   cl::desc(\"Include the standard link time optimizations\"));\n  135  \n  136: static cl::opt<bool>\n  137  OptLevelO0(\"O0\",\n  138    cl::desc(\"Optimization level 0. Similar to clang -O0\"));\n  139  \n  140: static cl::opt<bool>\n  141  OptLevelO1(\"O1\",\n  142             cl::desc(\"Optimization level 1. Similar to clang -O1\"));\n  143  \n  144: static cl::opt<bool>\n  145  OptLevelO2(\"O2\",\n  146             cl::desc(\"Optimization level 2. Similar to clang -O2\"));\n  147  \n  148: static cl::opt<bool>\n  149  OptLevelOs(\"Os\",\n  150             cl::desc(\"Like -O2 with extra optimizations for size. Similar to clang -Os\"));\n  151  \n  152: static cl::opt<bool>\n  153  OptLevelOz(\"Oz\",\n  154             cl::desc(\"Like -Os but reduces code size further. Similar to clang -Oz\"));\n  155  \n  156: static cl::opt<bool>\n  157  OptLevelO3(\"O3\",\n  158             cl::desc(\"Optimization level 3. Similar to clang -O3\"));\n  159  \n  160: static cl::opt<unsigned>\n  161  CodeGenOptLevel(\"codegen-opt-level\",\n  162                  cl::desc(\"Override optimization level for codegen hooks\"));\n  163  \n  164: static cl::opt<std::string>\n  165  TargetTriple(\"mtriple\", cl::desc(\"Override target triple for module\"));\n  166  \n  167: static cl::opt<bool>\n  168  UnitAtATime(\"funit-at-a-time\",\n  169              cl::desc(\"Enable IPO. This corresponds to gcc's -funit-at-a-time\"),\n  170              cl::init(true));\n  171  \n  172: static cl::opt<bool>\n  173  DisableLoopUnrolling(\"disable-loop-unrolling\",\n  174                       cl::desc(\"Disable loop unrolling in all relevant passes\"),\n  175                       cl::init(false));\n  176: static cl::opt<bool>\n  177  DisableLoopVectorization(\"disable-loop-vectorization\",\n  178                       cl::desc(\"Disable the loop vectorization pass\"),\n  179                       cl::init(false));\n  180  \n  181: static cl::opt<bool>\n  182  DisableSLPVectorization(\"disable-slp-vectorization\",\n  183                          cl::desc(\"Disable the slp vectorization pass\"),\n  184                          cl::init(false));\n  185  \n  186: static cl::opt<bool> EmitSummaryIndex(\"module-summary\",\n  187                                        cl::desc(\"Emit module summary index\"),\n  188                                        cl::init(false));\n  189  \n  190: static cl::opt<bool> EmitModuleHash(\"module-hash\", cl::desc(\"Emit module hash\"),\n  191                                      cl::init(false));\n  192  \n  193: static cl::opt<bool>\n  194  DisableSimplifyLibCalls(\"disable-simplify-libcalls\",\n  195                          cl::desc(\"Disable simplify-libcalls\"));\n  196  \n  197: static cl::opt<bool>\n  198  Quiet(\"q\", cl::desc(\"Obsolete option\"), cl::Hidden);\n  199  \n  ...\n  201  QuietA(\"quiet\", cl::desc(\"Alias for -q\"), cl::aliasopt(Quiet));\n  202  \n  203: static cl::opt<bool>\n  204  AnalyzeOnly(\"analyze\", cl::desc(\"Only perform analysis, no optimization\"));\n  205  \n  206: static cl::opt<bool>\n  207  PrintBreakpoints(\"print-breakpoints-for-testing\",\n  208                   cl::desc(\"Print select breakpoints location for testing\"));\n  209  \n  210: static cl::opt<std::string> ClDataLayout(\"data-layout\",\n  211                                           cl::desc(\"data layout string to use\"),\n  212                                           cl::value_desc(\"layout-string\"),\n  213                                           cl::init(\"\"));\n  214  \n  215: static cl::opt<bool> PreserveBitcodeUseListOrder(\n  216      \"preserve-bc-uselistorder\",\n  217      cl::desc(\"Preserve use-list order when writing LLVM bitcode.\"),\n  218      cl::init(true), cl::Hidden);\n  219  \n  220: static cl::opt<bool> PreserveAssemblyUseListOrder(\n  221      \"preserve-ll-uselistorder\",\n  222      cl::desc(\"Preserve use-list order when writing LLVM assembly.\"),\n  223      cl::init(false), cl::Hidden);\n  224  \n  225: static cl::opt<bool>\n  226      RunTwice(\"run-twice\",\n  227               cl::desc(\"Run all passes twice, re-using the same pass manager.\"),\n  228               cl::init(false), cl::Hidden);\n  229  \n  230: static cl::opt<bool> DiscardValueNames(\n  231      \"discard-value-names\",\n  232      cl::desc(\"Discard names from Value (other than GlobalValue).\"),\n  233      cl::init(false), cl::Hidden);\n  234  \n  235: static cl::opt<bool> Coroutines(\n  236    \"enable-coroutines\",\n  237    cl::desc(\"Enable coroutine passes.\"),\n  238    cl::init(false), cl::Hidden);\n  239  \n  240: static cl::opt<bool> PassRemarksWithHotness(\n  241      \"pass-remarks-with-hotness\",\n  242      cl::desc(\"With PGO, include profile count in optimization remarks\"),\n  243      cl::Hidden);\n  244  \n  245: static cl::opt<unsigned> PassRemarksHotnessThreshold(\n  246      \"pass-remarks-hotness-threshold\",\n  247      cl::desc(\"Minimum profile count required for an optimization remark to be output\"),\n  248      cl::Hidden);\n  249  \n  250: static cl::opt<std::string>\n  251      RemarksFilename(\"pass-remarks-output\",\n  252                      cl::desc(\"YAML output filename for pass remarks\"),\n\n/home/mw/0-rust/src/llvm/tools/sancov/sancov.cc:\n   69  };\n   70  \n   71: cl::opt<ActionType> Action(\n   72      cl::desc(\"Action (required)\"), cl::Required,\n   73      cl::values(\n   ..\n   92                            \"<.symcov files...>\"));\n   93  \n   94: static cl::opt<bool> ClDemangle(\"demangle\", cl::init(true),\n   95                                  cl::desc(\"Print demangled function name.\"));\n   96  \n   97: static cl::opt<bool>\n   98      ClSkipDeadFiles(\"skip-dead-files\", cl::init(true),\n   99                      cl::desc(\"Do not list dead source files in reports.\"));\n  100  \n  101: static cl::opt<std::string> ClStripPathPrefix(\n  102      \"strip_path_prefix\", cl::init(\"\"),\n  103      cl::desc(\"Strip this prefix from file paths in reports.\"));\n  104  \n  105: static cl::opt<std::string>\n  106      ClBlacklist(\"blacklist\", cl::init(\"\"),\n  107                  cl::desc(\"Blacklist file (sanitizer blacklist format).\"));\n  108  \n  109: static cl::opt<bool> ClUseDefaultBlacklist(\n  110      \"use_default_blacklist\", cl::init(true), cl::Hidden,\n  111      cl::desc(\"Controls if default blacklist should be used.\"));\n\n/home/mw/0-rust/src/llvm/tools/sanstats/sanstats.cpp:\n   22  using namespace llvm;\n   23  \n   24: static cl::opt<std::string> ClInputFile(cl::Positional, cl::Required,\n   25                                          cl::desc(\"<filename>\"));\n   26  \n   27: static cl::opt<bool> ClDemangle(\"demangle\", cl::init(false),\n   28                                  cl::desc(\"Print demangled function name.\"));\n   29  \n\n/home/mw/0-rust/src/llvm/tools/verify-uselistorder/verify-uselistorder.cpp:\n   57  #define DEBUG_TYPE \"uselistorder\"\n   58  \n   59: static cl::opt<std::string> InputFilename(cl::Positional,\n   60                                            cl::desc(\"<input bitcode file>\"),\n   61                                            cl::init(\"-\"),\n   62                                            cl::value_desc(\"filename\"));\n   63  \n   64: static cl::opt<bool> SaveTemps(\"save-temps\", cl::desc(\"Save temp files\"),\n   65                                 cl::init(false));\n   66  \n   67: static cl::opt<unsigned>\n   68      NumShuffles(\"num-shuffles\",\n   69                  cl::desc(\"Number of times to shuffle and verify use-lists\"),\n\n/home/mw/0-rust/src/llvm/tools/yaml2obj/yaml2obj.cpp:\n   31  using namespace llvm;\n   32  \n   33: static cl::opt<std::string>\n   34    Input(cl::Positional, cl::desc(\"<input>\"), cl::init(\"-\"));\n   35  \n   36: cl::opt<unsigned>\n   37  DocNum(\"docnum\", cl::init(1),\n   38         cl::desc(\"Read specified document from input (default = 1)\"));\n   39  \n   40: static cl::opt<std::string> OutputFilename(\"o\", cl::desc(\"Output filename\"),\n   41                                             cl::value_desc(\"filename\"));\n   42  \n\n/home/mw/0-rust/src/llvm/unittests/Support/CommandLineTest.cpp:\n   52  \n   53  template <typename T>\n   54: class StackOption : public cl::opt<T> {\n   55:   typedef cl::opt<T> Base;\n   56  public:\n   57    // One option...\n   ..\n  136  const char test_env_var[] = \"LLVM_TEST_COMMAND_LINE_FLAGS\";\n  137  \n  138: cl::opt<std::string> EnvironmentTestOption(\"env-test-opt\");\n  139  TEST(CommandLineTest, ParseEnvironment) {\n  140    TempEnvVar TEV(test_env_var, \"-env-test-opt=hello\");\n\n/home/mw/0-rust/src/llvm/unittests/Support/ProgramTest.cpp:\n   54  using namespace sys;\n   55  \n   56: static cl::opt<std::string>\n   57  ProgramTestStringArg1(\"program-test-string-arg1\");\n   58: static cl::opt<std::string>\n   59  ProgramTestStringArg2(\"program-test-string-arg2\");\n   60  \n\n/home/mw/0-rust/src/llvm/utils/FileCheck/FileCheck.cpp:\n   36  using namespace llvm;\n   37  \n   38: static cl::opt<std::string>\n   39      CheckFilename(cl::Positional, cl::desc(\"<check-file>\"), cl::Required);\n   40  \n   41: static cl::opt<std::string>\n   42      InputFilename(\"input-file\", cl::desc(\"File to check (defaults to stdin)\"),\n   43                    cl::init(\"-\"), cl::value_desc(\"filename\"));\n   ..\n   52          \"Alias for -check-prefix permitting multiple comma separated values\"));\n   53  \n   54: static cl::opt<bool> NoCanonicalizeWhiteSpace(\n   55      \"strict-whitespace\",\n   56      cl::desc(\"Do not treat all horizontal whitespace as equivalent\"));\n   ..\n   67      cl::value_desc(\"VAR=VALUE\"));\n   68  \n   69: static cl::opt<bool> AllowEmptyInput(\n   70      \"allow-empty\", cl::init(false),\n   71      cl::desc(\"Allow the input file to be empty. This is useful when making\\n\"\n   72               \"checks that some error message does not occur, for example.\"));\n   73  \n   74: static cl::opt<bool> MatchFullLines(\n   75      \"match-full-lines\", cl::init(false),\n   76      cl::desc(\"Require all positive matches to cover an entire input line.\\n\"\n   ..\n   78               \"is not also passed.\"));\n   79  \n   80: static cl::opt<bool> EnableVarScope(\n   81      \"enable-var-scope\", cl::init(false),\n   82      cl::desc(\"Enables scope for regex variables. Variables with names that\\n\"\n\n/home/mw/0-rust/src/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:\n   63  \n   64  namespace {\n   65:   cl::opt<std::string> ProgramToRun(cl::Positional,\n   66      cl::desc(\"<program to run>\"));\n   67    cl::list<std::string>  Argv(cl::ConsumeAfter,\n   68      cl::desc(\"<program arguments>...\"));\n   69:   cl::opt<bool> TraceExecution(\"x\",\n   70      cl::desc(\"Print detailed output about what is being run to stderr.\"));\n   71:   cl::opt<unsigned> Timeout(\"t\", cl::init(0),\n   72      cl::desc(\"Set maximum runtime in seconds. Defaults to infinite.\"));\n   73:   cl::opt<bool> NoUser32(\"no-user32\",\n   74      cl::desc(\"Terminate process if it loads user32.dll.\"));\n   75  \n\n/home/mw/0-rust/src/llvm/utils/TableGen/AsmMatcherEmitter.cpp:\n  126  cl::OptionCategory AsmMatcherEmitterCat(\"Options for -gen-asm-matcher\");\n  127  \n  128: static cl::opt<std::string>\n  129      MatchPrefix(\"match-prefix\", cl::init(\"\"),\n  130                  cl::desc(\"Only match instructions with the given prefix\"),\n\n/home/mw/0-rust/src/llvm/utils/TableGen/CodeGenTarget.cpp:\n   30  cl::OptionCategory AsmWriterCat(\"Options for -gen-asm-writer\");\n   31  \n   32: static cl::opt<unsigned>\n   33      AsmParserNum(\"asmparsernum\", cl::init(0),\n   34                   cl::desc(\"Make -gen-asm-parser emit assembly parser #N\"),\n   35                   cl::cat(AsmParserCat));\n   36  \n   37: static cl::opt<unsigned>\n   38      AsmWriterNum(\"asmwriternum\", cl::init(0),\n   39                   cl::desc(\"Make -gen-asm-writer emit assembly writer #N\"),\n\n/home/mw/0-rust/src/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp:\n   36  \n   37  // To reduce generated source code size.\n   38: static cl::opt<bool> OmitComments(\"omit-comments\",\n   39                                    cl::desc(\"Do not generate comments\"),\n   40                                    cl::init(false), cl::cat(DAGISelCat));\n   41  \n   42: static cl::opt<bool> InstrumentCoverage(\n   43      \"instrument-coverage\",\n   44      cl::desc(\"Generates tables to help identify patterns matched\"),\n\n/home/mw/0-rust/src/llvm/utils/TableGen/GlobalISelEmitter.cpp:\n   59  cl::OptionCategory GlobalISelEmitterCat(\"Options for -gen-global-isel\");\n   60  \n   61: static cl::opt<bool> WarnOnSkippedPatterns(\n   62      \"warn-on-skipped-patterns\",\n   63      cl::desc(\"Explain why a pattern was skipped for inclusion \"\n   ..\n   65      cl::init(false), cl::cat(GlobalISelEmitterCat));\n   66  \n   67: static cl::opt<bool> GenerateCoverage(\n   68      \"instrument-gisel-coverage\",\n   69      cl::desc(\"Generate coverage instrumentation for GlobalISel\"),\n   70      cl::init(false), cl::cat(GlobalISelEmitterCat));\n   71  \n   72: static cl::opt<std::string> UseCoverageFile(\n   73      \"gisel-coverage-file\", cl::init(\"\"),\n   74      cl::desc(\"Specify file to retrieve coverage information from\"),\n   75      cl::cat(GlobalISelEmitterCat));\n   76  \n   77: static cl::opt<bool> OptimizeMatchTable(\n   78      \"optimize-match-table\",\n   79      cl::desc(\"Generate an optimized version of the match table\"),\n\n/home/mw/0-rust/src/llvm/utils/TableGen/RegisterInfoEmitter.cpp:\n   48  cl::OptionCategory RegisterInfoCat(\"Options for -gen-register-info\");\n   49  \n   50: static cl::opt<bool>\n   51      RegisterInfoDebug(\"register-info-debug\", cl::init(false),\n   52                        cl::desc(\"Dump register information to help debugging\"),\n\n/home/mw/0-rust/src/llvm/utils/TableGen/TableGen.cpp:\n   53  \n   54  namespace {\n   55:   cl::opt<ActionType>\n   56    Action(cl::desc(\"Action to perform:\"),\n   57           cl::values(clEnumValN(PrintRecords, \"print-records\",\n   ..\n  109  \n  110    cl::OptionCategory PrintEnumsCat(\"Options for -print-enums\");\n  111:   cl::opt<std::string>\n  112    Class(\"class\", cl::desc(\"Print Enum list for this class\"),\n  113          cl::value_desc(\"class name\"), cl::cat(PrintEnumsCat));\n\n/home/mw/0-rust/src/llvm/utils/fpcmp/fpcmp.cpp:\n   19  \n   20  namespace {\n   21:   cl::opt<std::string>\n   22    File1(cl::Positional, cl::desc(\"<input file #1>\"), cl::Required);\n   23:   cl::opt<std::string>\n   24    File2(cl::Positional, cl::desc(\"<input file #2>\"), cl::Required);\n   25  \n   26:   cl::opt<double>\n   27    RelTolerance(\"r\", cl::desc(\"Relative error tolerated\"), cl::init(0));\n   28:   cl::opt<double>\n   29    AbsTolerance(\"a\", cl::desc(\"Absolute error tolerated\"), cl::init(0));\n   30  }\n\n/home/mw/0-rust/src/llvm/utils/yaml-bench/YAMLBench.cpp:\n   27  using namespace llvm;\n   28  \n   29: static cl::opt<bool>\n   30    DumpTokens( \"tokens\"\n   31              , cl::desc(\"Print the tokenization of the file.\")\n   ..\n   33              );\n   34  \n   35: static cl::opt<bool>\n   36    DumpCanonical( \"canonical\"\n   37                 , cl::desc(\"Print the canonical YAML for this file.\")\n   ..\n   39                 );\n   40  \n   41: static cl::opt<std::string>\n   42   Input(cl::Positional, cl::desc(\"<input>\"));\n   43  \n   44: static cl::opt<bool>\n   45    Verify( \"verify\"\n   46          , cl::desc(\n   ..\n   49          );\n   50  \n   51: static cl::opt<unsigned>\n   52    MemoryLimitMB(\"memory-limit\", cl::desc(\n   53                    \"Do not use more megabytes of memory\"),\n   54                  cl::init(1000));\n   55  \n   56: cl::opt<cl::boolOrDefault>\n   57      UseColor(\"use-color\", cl::desc(\"Emit colored output (default=autodetect)\"),\n   58               cl::init(cl::BOU_UNSET));\n\n/home/mw/0-rust/src/rustllvm/PassWrapper.cpp:\n   52  using namespace llvm::legacy;\n   53  \n   54: extern cl::opt<bool> EnableARMEHABI;\n   55  \n   56  typedef struct LLVMOpaquePass *LLVMPassRef;\n\n/home/mw/llvm/include/llvm/Analysis/Loads.h:\n   64  /// The default number of maximum instructions to scan in the block, used by\n   65  /// FindAvailableLoadedValue().\n   66: extern cl::opt<unsigned> DefMaxInstsToScan;\n   67  \n   68  /// Scan backwards to see if we have the value of the given load available\n\n/home/mw/llvm/include/llvm/Analysis/LoopAnalysisManager.h:\n   64  \n   65  /// Enables memory ssa as a dependency for loop passes.\n   66: extern cl::opt<bool> EnableMSSALoopDependency;\n   67  \n   68  /// Extern template declaration for the analysis set for this IR unit.\n\n/home/mw/llvm/include/llvm/CodeGen/BasicTTIImpl.h:\n   64  class TargetMachine;\n   65  \n   66: extern cl::opt<unsigned> PartialUnrollingThreshold;\n   67  \n   68  /// \\brief Base class which can be used to help build a TTI implementation.\n\n/home/mw/llvm/include/llvm/CodeGen/CommandFlags.def:\n   28  using namespace llvm;\n   29  \n   30: static cl::opt<std::string>\n   31      MArch(\"march\",\n   32            cl::desc(\"Architecture to generate code for (see --version)\"));\n   33  \n   34: static cl::opt<std::string>\n   35      MCPU(\"mcpu\",\n   36           cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"),\n   ..\n   42             cl::value_desc(\"a1,+a2,-a3,...\"));\n   43  \n   44: static cl::opt<Reloc::Model> RelocModel(\n   45      \"relocation-model\", cl::desc(\"Choose relocation model\"),\n   46      cl::values(\n   ..\n   66  }\n   67  \n   68: static cl::opt<ThreadModel::Model> TMModel(\n   69      \"thread-model\", cl::desc(\"Choose threading model\"),\n   70      cl::init(ThreadModel::POSIX),\n   ..\n   73                            \"Single thread model\")));\n   74  \n   75: static cl::opt<llvm::CodeModel::Model> CMModel(\n   76      \"code-model\", cl::desc(\"Choose code model\"),\n   77      cl::values(clEnumValN(CodeModel::Small, \"small\", \"Small code model\"),\n   ..\n   88  }\n   89  \n   90: static cl::opt<llvm::ExceptionHandling> ExceptionModel(\n   91      \"exception-model\", cl::desc(\"exception model\"),\n   92      cl::init(ExceptionHandling::None),\n   ..\n  103                     \"WebAssembly exception handling\")));\n  104  \n  105: static cl::opt<TargetMachine::CodeGenFileType> FileType(\n  106      \"filetype\", cl::init(TargetMachine::CGFT_AssemblyFile),\n  107      cl::desc(\n  ...\n  114                            \"Emit nothing, for performance testing\")));\n  115  \n  116: static cl::opt<bool>\n  117      DisableFPElim(\"disable-fp-elim\",\n  118                    cl::desc(\"Disable frame pointer elimination optimization\"),\n  119                    cl::init(false));\n  120  \n  121: static cl::opt<bool> EnableUnsafeFPMath(\n  122      \"enable-unsafe-fp-math\",\n  123      cl::desc(\"Enable optimizations that may decrease FP precision\"),\n  124      cl::init(false));\n  125  \n  126: static cl::opt<bool> EnableNoInfsFPMath(\n  127      \"enable-no-infs-fp-math\",\n  128      cl::desc(\"Enable FP math optimizations that assume no +-Infs\"),\n  129      cl::init(false));\n  130  \n  131: static cl::opt<bool> EnableNoNaNsFPMath(\n  132      \"enable-no-nans-fp-math\",\n  133      cl::desc(\"Enable FP math optimizations that assume no NaNs\"),\n  134      cl::init(false));\n  135  \n  136: static cl::opt<bool> EnableNoSignedZerosFPMath(\n  137      \"enable-no-signed-zeros-fp-math\",\n  138      cl::desc(\"Enable FP math optimizations that assume \"\n  ...\n  140      cl::init(false));\n  141  \n  142: static cl::opt<bool>\n  143      EnableNoTrappingFPMath(\"enable-no-trapping-fp-math\",\n  144                             cl::desc(\"Enable setting the FP exceptions build \"\n  ...\n  146                             cl::init(false));\n  147  \n  148: static cl::opt<llvm::FPDenormal::DenormalMode> DenormalMode(\n  149      \"denormal-fp-math\",\n  150      cl::desc(\"Select which denormal numbers the code is permitted to require\"),\n  ...\n  158                            \"denormals are flushed to positive zero\")));\n  159  \n  160: static cl::opt<bool> EnableHonorSignDependentRoundingFPMath(\n  161      \"enable-sign-dependent-rounding-fp-math\", cl::Hidden,\n  162      cl::desc(\"Force codegen to assume rounding mode can change dynamically\"),\n  163      cl::init(false));\n  164  \n  165: static cl::opt<llvm::FloatABI::ABIType> FloatABIForCalls(\n  166      \"float-abi\", cl::desc(\"Choose float ABI type\"), cl::init(FloatABI::Default),\n  167      cl::values(clEnumValN(FloatABI::Default, \"default\",\n  ...\n  172                            \"Hard float ABI (uses FP registers)\")));\n  173  \n  174: static cl::opt<llvm::FPOpFusion::FPOpFusionMode> FuseFPOps(\n  175      \"fp-contract\", cl::desc(\"Enable aggressive formation of fused FP ops\"),\n  176      cl::init(FPOpFusion::Standard),\n  ...\n  181                     \"Only fuse FP ops when the result won't be affected.\")));\n  182  \n  183: static cl::opt<bool> DontPlaceZerosInBSS(\n  184      \"nozero-initialized-in-bss\",\n  185      cl::desc(\"Don't place zero-initialized symbols into bss section\"),\n  186      cl::init(false));\n  187  \n  188: static cl::opt<bool> EnableGuaranteedTailCallOpt(\n  189      \"tailcallopt\",\n  190      cl::desc(\n  ...\n  192      cl::init(false));\n  193  \n  194: static cl::opt<bool> DisableTailCalls(\"disable-tail-calls\",\n  195                                        cl::desc(\"Never emit tail calls\"),\n  196                                        cl::init(false));\n  197  \n  198: static cl::opt<bool> StackSymbolOrdering(\"stack-symbol-ordering\",\n  199                                           cl::desc(\"Order local stack symbols.\"),\n  200                                           cl::init(true));\n  201  \n  202: static cl::opt<unsigned>\n  203      OverrideStackAlignment(\"stack-alignment\",\n  204                             cl::desc(\"Override default stack alignment\"),\n  205                             cl::init(0));\n  206  \n  207: static cl::opt<bool>\n  208      StackRealign(\"stackrealign\",\n  209                   cl::desc(\"Force align the stack to the minimum alignment\"),\n  210                   cl::init(false));\n  211  \n  212: static cl::opt<std::string> TrapFuncName(\n  213      \"trap-func\", cl::Hidden,\n  214      cl::desc(\"Emit a call to trap function rather than a trap instruction\"),\n  215      cl::init(\"\"));\n  216  \n  217: static cl::opt<bool> UseCtors(\"use-ctors\",\n  218                                cl::desc(\"Use .ctors instead of .init_array.\"),\n  219                                cl::init(false));\n  220  \n  221: static cl::opt<bool> RelaxELFRelocations(\n  222      \"relax-elf-relocations\",\n  223      cl::desc(\"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF\"),\n  224      cl::init(false));\n  225  \n  226: static cl::opt<bool> DataSections(\"data-sections\",\n  227                                    cl::desc(\"Emit data into separate sections\"),\n  228                                    cl::init(false));\n  229  \n  230: static cl::opt<bool>\n  231      FunctionSections(\"function-sections\",\n  232                       cl::desc(\"Emit functions into separate sections\"),\n  233                       cl::init(false));\n  234  \n  235: static cl::opt<bool> EmulatedTLS(\"emulated-tls\",\n  236                                   cl::desc(\"Use emulated TLS model\"),\n  237                                   cl::init(false));\n  238  \n  239: static cl::opt<bool>\n  240      UniqueSectionNames(\"unique-section-names\",\n  241                         cl::desc(\"Give unique names to every section\"),\n  242                         cl::init(true));\n  243  \n  244: static cl::opt<llvm::EABI>\n  245      EABIVersion(\"meabi\", cl::desc(\"Set EABI type (default depends on triple):\"),\n  246                  cl::init(EABI::Default),\n  ...\n  251                             clEnumValN(EABI::GNU, \"gnu\", \"EABI GNU\")));\n  252  \n  253: static cl::opt<DebuggerKind> DebuggerTuningOpt(\n  254      \"debugger-tune\", cl::desc(\"Tune debug info for a particular debugger\"),\n  255      cl::init(DebuggerKind::Default),\n  ...\n  258                 clEnumValN(DebuggerKind::SCE, \"sce\", \"SCE targets (e.g. PS4)\")));\n  259  \n  260: static cl::opt<bool> EnableStackSizeSection(\n  261      \"stack-size-section\",\n  262      cl::desc(\"Emit a section containing stack size metadata\"), cl::init(false));\n\n/home/mw/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:\n   33  namespace llvm {\n   34  \n   35: extern cl::opt<bool> DisableGISelLegalityCheck;\n   36  \n   37  class MachineInstr;\n\n/home/mw/llvm/include/llvm/CodeGen/LiveIntervals.h:\n   40  namespace llvm {\n   41  \n   42: extern cl::opt<bool> UseSegmentSetForPhysRegs;\n   43  \n   44  class BitVector;\n\n/home/mw/llvm/include/llvm/CodeGen/MachineScheduler.h:\n  100  namespace llvm {\n  101  \n  102: extern cl::opt<bool> ForceTopDown;\n  103: extern cl::opt<bool> ForceBottomUp;\n  104  \n  105  class LiveIntervals;\n\n/home/mw/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.def:\n   20  using namespace llvm;\n   21  \n   22: static cl::opt<MCTargetOptions::AsmInstrumentation> AsmInstrumentation(\n   23      \"asm-instrumentation\", cl::desc(\"Instrumentation of inline assembly and \"\n   24                                      \"assembly source files\"),\n   ..\n   29                            \"instrument instructions with memory arguments\")));\n   30  \n   31: static cl::opt<bool> RelaxAll(\"mc-relax-all\",\n   32                         cl::desc(\"When used with filetype=obj, \"\n   33                                  \"relax all fixups in the emitted object file\"));\n   34  \n   35: static cl::opt<bool> IncrementalLinkerCompatible(\n   36      \"incremental-linker-compatible\",\n   37      cl::desc(\n   ..\n   39          \"emit an object file which can be used with an incremental linker\"));\n   40  \n   41: static cl::opt<bool> PIECopyRelocations(\"pie-copy-relocations\", cl::desc(\"PIE Copy Relocations\"));\n   42  \n   43: static cl::opt<int> DwarfVersion(\"dwarf-version\", cl::desc(\"Dwarf version\"),\n   44                            cl::init(0));\n   45  \n   46: static cl::opt<bool> ShowMCInst(\"asm-show-inst\",\n   47                           cl::desc(\"Emit internal instruction representation to \"\n   48                                    \"assembly file\"));\n   49  \n   50: static cl::opt<bool> FatalWarnings(\"fatal-warnings\",\n   51                              cl::desc(\"Treat warnings as errors\"));\n   52  \n   53: static cl::opt<bool> NoWarn(\"no-warn\", cl::desc(\"Suppress all warnings\"));\n   54  static cl::alias NoWarnW(\"W\", cl::desc(\"Alias for --no-warn\"), cl::aliasopt(NoWarn));\n   55  \n   56: static cl::opt<bool> NoDeprecatedWarn(\"no-deprecated-warn\",\n   57                                 cl::desc(\"Suppress all deprecated warnings\"));\n   58  \n   59: static cl::opt<std::string>\n   60  ABIName(\"target-abi\", cl::Hidden,\n   61          cl::desc(\"The name of the ABI to be targeted from the backend.\"),\n\n/home/mw/llvm/include/llvm/Support/Options.h:\n   96    static void registerOption(StringRef ArgStr, StringRef Desc,\n   97                               const ValT &InitValue) {\n   98:     cl::opt<ValT> *Option = new cl::opt<ValT>(ArgStr, cl::desc(Desc),\n   99                                                cl::Hidden, cl::init(InitValue));\n  100      instance().addOption(&detail::OptionKey<ValT, Base, Mem>::ID, Option);\n  ...\n  112      auto It = Options.find(&detail::OptionKey<ValT, Base, Mem>::ID);\n  113      assert(It != Options.end() && \"Option not in OptionRegistry\");\n  114:     return *(cl::opt<ValT> *)It->second;\n  115    }\n  116  };\n\n/home/mw/llvm/include/llvm/Support/PluginLoader.h:\n   29  #ifndef DONT_GET_PLUGIN_LOADER_OPTION\n   30    // This causes operator= above to be invoked for every -load option.\n   31:   static cl::opt<PluginLoader, false, cl::parser<std::string> >\n   32      LoadOpt(\"load\", cl::ZeroOrMore, cl::value_desc(\"pluginfilename\"),\n   33              cl::desc(\"Load the specified plugin\"));\n\n2192 matches across 460 files\n\n\nSearching 55287 files for \"thin\" (whole word)\n\n/home/mw/0-rust/build/tmp/extended-error-metadata/x86_64-unknown-linux-gnu/librustc_typeck.json:\n    1: {\"E0023\":{\"description\":\"\\nA pattern used to match against an enum variant must provide a sub-pattern for\\neach field of the enum variant. This error indicates that a pattern attempted to\\nextract an incorrect number of fields from a variant.\\n\\n```\\nenum Fruit {\\n    Apple(String, String),\\n    Pear(u32),\\n}\\n```\\n\\nHere the `Apple` variant has two fields, and should be matched against like so:\\n\\n```\\nenum Fruit {\\n    Apple(String, String),\\n    Pear(u32),\\n}\\n\\nlet x = Fruit::Apple(String::new(), String::new());\\n\\n// Correct.\\nmatch x {\\n    Fruit::Apple(a, b) => {},\\n    _ => {}\\n}\\n```\\n\\nMatching with the wrong number of fields has no sensible interpretation:\\n\\n```compile_fail,E0023\\nenum Fruit {\\n    Apple(String, String),\\n    Pear(u32),\\n}\\n\\nlet x = Fruit::Apple(String::new(), String::new());\\n\\n// Incorrect.\\nmatch x {\\n    Fruit::Apple(a) => {},\\n    Fruit::Apple(a, b, c) => {},\\n}\\n```\\n\\nCheck how many fields the enum was declared with and ensure that your pattern\\nuses the same number.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0025\":{\"description\":\"\\nEach field of a struct can only be bound once in a pattern. Erroneous code\\nexample:\\n\\n```compile_fail,E0025\\nstruct Foo {\\n    a: u8,\\n    b: u8,\\n}\\n\\nfn main(){\\n    let x = Foo { a:1, b:2 };\\n\\n    let Foo { a: x, a: y } = x;\\n    // error: field `a` bound multiple times in the pattern\\n}\\n```\\n\\nEach occurrence of a field name binds the value of that field, so to fix this\\nerror you will have to remove or alter the duplicate uses of the field name.\\nPerhaps you misspelled another field name? Example:\\n\\n```\\nstruct Foo {\\n    a: u8,\\n    b: u8,\\n}\\n\\nfn main(){\\n    let x = Foo { a:1, b:2 };\\n\\n    let Foo { a: x, b: y } = x; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0026\":{\"description\":\"\\nThis error indicates that a struct pattern attempted to extract a non-existent\\nfield from a struct. Struct fields are identified by the name used before the\\ncolon `:` so struct patterns should resemble the declaration of the struct type\\nbeing matched.\\n\\n```\\n// Correct matching.\\nstruct Thing {\\n    x: u32,\\n    y: u32\\n}\\n\\nlet thing = Thing { x: 1, y: 2 };\\n\\nmatch thing {\\n    Thing { x: xfield, y: yfield } => {}\\n}\\n```\\n\\nIf you are using shorthand field patterns but want to refer to the struct field\\nby a different name, you should rename it explicitly.\\n\\nChange this:\\n\\n```compile_fail,E0026\\nstruct Thing {\\n    x: u32,\\n    y: u32\\n}\\n\\nlet thing = Thing { x: 0, y: 0 };\\n\\nmatch thing {\\n    Thing { x, z } => {}\\n}\\n```\\n\\nTo this:\\n\\n```\\nstruct Thing {\\n    x: u32,\\n    y: u32\\n}\\n\\nlet thing = Thing { x: 0, y: 0 };\\n\\nmatch thing {\\n    Thing { x, y: z } => {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0027\":{\"description\":\"\\nThis error indicates that a pattern for a struct fails to specify a sub-pattern\\nfor every one of the struct's fields. Ensure that each field from the struct's\\ndefinition is mentioned in the pattern, or use `..` to ignore unwanted fields.\\n\\nFor example:\\n\\n```compile_fail,E0027\\nstruct Dog {\\n    name: String,\\n    age: u32,\\n}\\n\\nlet d = Dog { name: \\\"Rusty\\\".to_string(), age: 8 };\\n\\n// This is incorrect.\\nmatch d {\\n    Dog { age: x } => {}\\n}\\n```\\n\\nThis is correct (explicit):\\n\\n```\\nstruct Dog {\\n    name: String,\\n    age: u32,\\n}\\n\\nlet d = Dog { name: \\\"Rusty\\\".to_string(), age: 8 };\\n\\nmatch d {\\n    Dog { name: ref n, age: x } => {}\\n}\\n\\n// This is also correct (ignore unused fields).\\nmatch d {\\n    Dog { age: x, .. } => {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0029\":{\"description\":\"\\nIn a match expression, only numbers and characters can be matched against a\\nrange. This is because the compiler checks that the range is non-empty at\\ncompile-time, and is unable to evaluate arbitrary comparison functions. If you\\nwant to capture values of an orderable type between two end-points, you can use\\na guard.\\n\\n```compile_fail,E0029\\nlet string = \\\"salutations !\\\";\\n\\n// The ordering relation for strings can't be evaluated at compile time,\\n// so this doesn't work:\\nmatch string {\\n    \\\"hello\\\" ... \\\"world\\\" => {}\\n    _ => {}\\n}\\n\\n// This is a more general version, using a guard:\\nmatch string {\\n    s if s >= \\\"hello\\\" && s <= \\\"world\\\" => {}\\n    _ => {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0033\":{\"description\":\"\\nThis error indicates that a pointer to a trait type cannot be implicitly\\ndereferenced by a pattern. Every trait defines a type, but because the\\nsize of trait implementors isn't fixed, this type has no compile-time size.\\nTherefore, all accesses to trait types must be through pointers. If you\\nencounter this error you should try to avoid dereferencing the pointer.\\n\\n```compile_fail,E0033\\n# trait SomeTrait { fn method_one(&self){} fn method_two(&self){} }\\n# impl<T> SomeTrait for T {}\\nlet trait_obj: &SomeTrait = &\\\"some_value\\\";\\n\\n// This tries to implicitly dereference to create an unsized local variable.\\nlet &invalid = trait_obj;\\n\\n// You can call methods without binding to the value being pointed at.\\ntrait_obj.method_one();\\ntrait_obj.method_two();\\n```\\n\\nYou can read more about trait objects in the [Trait Objects] section of the\\nReference.\\n\\n[Trait Objects]: https://doc.rust-lang.org/reference/types.html#trait-objects\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0034\":{\"description\":\"\\nThe compiler doesn't know what method to call because more than one method\\nhas the same prototype. Erroneous code example:\\n\\n```compile_fail,E0034\\nstruct Test;\\n\\ntrait Trait1 {\\n    fn foo();\\n}\\n\\ntrait Trait2 {\\n    fn foo();\\n}\\n\\nimpl Trait1 for Test { fn foo() {} }\\nimpl Trait2 for Test { fn foo() {} }\\n\\nfn main() {\\n    Test::foo() // error, which foo() to call?\\n}\\n```\\n\\nTo avoid this error, you have to keep only one of them and remove the others.\\nSo let's take our example and fix it:\\n\\n```\\nstruct Test;\\n\\ntrait Trait1 {\\n    fn foo();\\n}\\n\\nimpl Trait1 for Test { fn foo() {} }\\n\\nfn main() {\\n    Test::foo() // and now that's good!\\n}\\n```\\n\\nHowever, a better solution would be using fully explicit naming of type and\\ntrait:\\n\\n```\\nstruct Test;\\n\\ntrait Trait1 {\\n    fn foo();\\n}\\n\\ntrait Trait2 {\\n    fn foo();\\n}\\n\\nimpl Trait1 for Test { fn foo() {} }\\nimpl Trait2 for Test { fn foo() {} }\\n\\nfn main() {\\n    <Test as Trait1>::foo()\\n}\\n```\\n\\nOne last example:\\n\\n```\\ntrait F {\\n    fn m(&self);\\n}\\n\\ntrait G {\\n    fn m(&self);\\n}\\n\\nstruct X;\\n\\nimpl F for X { fn m(&self) { println!(\\\"I am F\\\"); } }\\nimpl G for X { fn m(&self) { println!(\\\"I am G\\\"); } }\\n\\nfn main() {\\n    let f = X;\\n\\n    F::m(&f); // it displays \\\"I am F\\\"\\n    G::m(&f); // it displays \\\"I am G\\\"\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0040\":{\"description\":\"\\nIt is not allowed to manually call destructors in Rust. It is also not\\nnecessary to do this since `drop` is called automatically whenever a value goes\\nout of scope.\\n\\nHere's an example of this error:\\n\\n```compile_fail,E0040\\nstruct Foo {\\n    x: i32,\\n}\\n\\nimpl Drop for Foo {\\n    fn drop(&mut self) {\\n        println!(\\\"kaboom\\\");\\n    }\\n}\\n\\nfn main() {\\n    let mut x = Foo { x: -7 };\\n    x.drop(); // error: explicit use of destructor method\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0044\":{\"description\":\"\\nYou can't use type parameters on foreign items. Example of erroneous code:\\n\\n```compile_fail,E0044\\nextern { fn some_func<T>(x: T); }\\n```\\n\\nTo fix this, replace the type parameter with the specializations that you\\nneed:\\n\\n```\\nextern { fn some_func_i32(x: i32); }\\nextern { fn some_func_i64(x: i64); }\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0045\":{\"description\":\"\\nRust only supports variadic parameters for interoperability with C code in its\\nFFI. As such, variadic parameters can only be used with functions which are\\nusing the C ABI. Examples of erroneous code:\\n\\n```compile_fail\\n#![feature(unboxed_closures)]\\n\\nextern \\\"rust-call\\\" { fn foo(x: u8, ...); }\\n\\n// or\\n\\nfn foo(x: u8, ...) {}\\n```\\n\\nTo fix such code, put them in an extern \\\"C\\\" block:\\n\\n```\\nextern \\\"C\\\" {\\n    fn foo (x: u8, ...);\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0046\":{\"description\":\"\\nItems are missing in a trait implementation. Erroneous code example:\\n\\n```compile_fail,E0046\\ntrait Foo {\\n    fn foo();\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {}\\n// error: not all trait items implemented, missing: `foo`\\n```\\n\\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\\nprovide implementations for all of `Foo`'s required methods (meaning the\\nmethods that do not have default implementations), as well as any required\\ntrait items like associated types or constants. Example:\\n\\n```\\ntrait Foo {\\n    fn foo();\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    fn foo() {} // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0049\":{\"description\":\"\\nThis error indicates that an attempted implementation of a trait method\\nhas the wrong number of type parameters.\\n\\nFor example, the trait below has a method `foo` with a type parameter `T`,\\nbut the implementation of `foo` for the type `Bar` is missing this parameter:\\n\\n```compile_fail,E0049\\ntrait Foo {\\n    fn foo<T: Default>(x: T) -> Self;\\n}\\n\\nstruct Bar;\\n\\n// error: method `foo` has 0 type parameters but its trait declaration has 1\\n// type parameter\\nimpl Foo for Bar {\\n    fn foo(x: bool) -> Self { Bar }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0050\":{\"description\":\"\\nThis error indicates that an attempted implementation of a trait method\\nhas the wrong number of function parameters.\\n\\nFor example, the trait below has a method `foo` with two function parameters\\n(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\\nthe `u8` parameter:\\n\\n```compile_fail,E0050\\ntrait Foo {\\n    fn foo(&self, x: u8) -> bool;\\n}\\n\\nstruct Bar;\\n\\n// error: method `foo` has 1 parameter but the declaration in trait `Foo::foo`\\n// has 2\\nimpl Foo for Bar {\\n    fn foo(&self) -> bool { true }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0053\":{\"description\":\"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0054\":{\"description\":\"\\nIt is not allowed to cast to a bool. If you are trying to cast a numeric type\\nto a bool, you can compare it with zero instead:\\n\\n```compile_fail,E0054\\nlet x = 5;\\n\\n// Not allowed, won't compile\\nlet x_is_nonzero = x as bool;\\n```\\n\\n```\\nlet x = 5;\\n\\n// Ok\\nlet x_is_nonzero = x != 0;\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0055\":{\"description\":\"\\nDuring a method call, a value is automatically dereferenced as many times as\\nneeded to make the value's type match the method's receiver. The catch is that\\nthe compiler will only attempt to dereference a number of times up to the\\nrecursion limit (which can be set via the `recursion_limit` attribute).\\n\\nFor a somewhat artificial example:\\n\\n```compile_fail,E0055\\n#![recursion_limit=\\\"2\\\"]\\n\\nstruct Foo;\\n\\nimpl Foo {\\n    fn foo(&self) {}\\n}\\n\\nfn main() {\\n    let foo = Foo;\\n    let ref_foo = &&Foo;\\n\\n    // error, reached the recursion limit while auto-dereferencing &&Foo\\n    ref_foo.foo();\\n}\\n```\\n\\nOne fix may be to increase the recursion limit. Note that it is possible to\\ncreate an infinite recursion of dereferencing, in which case the only fix is to\\nsomehow break the recursion.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0057\":{\"description\":\"\\nWhen invoking closures or other implementations of the function traits `Fn`,\\n`FnMut` or `FnOnce` using call notation, the number of parameters passed to the\\nfunction must match its definition.\\n\\nAn example using a closure:\\n\\n```compile_fail,E0057\\nlet f = |x| x * 3;\\nlet a = f();        // invalid, too few parameters\\nlet b = f(4);       // this works!\\nlet c = f(2, 3);    // invalid, too many parameters\\n```\\n\\nA generic function must be treated similarly:\\n\\n```\\nfn foo<F: Fn()>(f: F) {\\n    f(); // this is valid, but f(3) would not work\\n}\\n```\\n\",\"use_site\":null},\"E0059\":{\"description\":\"\\nThe built-in function traits are generic over a tuple of the function arguments.\\nIf one uses angle-bracket notation (`Fn<(T,), Output=U>`) instead of parentheses\\n(`Fn(T) -> U`) to denote the function trait, the type parameter should be a\\ntuple. Otherwise function call notation cannot be used and the trait will not be\\nimplemented by closures.\\n\\nThe most likely source of this error is using angle-bracket notation without\\nwrapping the function argument type into a tuple, for example:\\n\\n```compile_fail,E0059\\n#![feature(unboxed_closures)]\\n\\nfn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }\\n```\\n\\nIt can be fixed by adjusting the trait bound like this:\\n\\n```\\n#![feature(unboxed_closures)]\\n\\nfn foo<F: Fn<(i32,)>>(f: F) -> F::Output { f(3) }\\n```\\n\\nNote that `(T,)` always denotes the type of a 1-tuple containing an element of\\ntype `T`. The comma is necessary for syntactic disambiguation.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0060\":{\"description\":\"\\nExternal C functions are allowed to be variadic. However, a variadic function\\ntakes a minimum number of arguments. For example, consider C's variadic `printf`\\nfunction:\\n\\n```\\nuse std::os::raw::{c_char, c_int};\\n\\nextern \\\"C\\\" {\\n    fn printf(_: *const c_char, ...) -> c_int;\\n}\\n```\\n\\nUsing this declaration, it must be called with at least one argument, so\\nsimply calling `printf()` is invalid. But the following uses are allowed:\\n\\n```\\n# #![feature(static_nobundle)]\\n# use std::os::raw::{c_char, c_int};\\n# #[cfg_attr(all(windows, target_env = \\\"msvc\\\"),\\n#            link(name = \\\"legacy_stdio_definitions\\\", kind = \\\"static-nobundle\\\"))]\\n# extern \\\"C\\\" { fn printf(_: *const c_char, ...) -> c_int; }\\n# fn main() {\\nunsafe {\\n    use std::ffi::CString;\\n\\n    let fmt = CString::new(\\\"test\\\\n\\\").unwrap();\\n    printf(fmt.as_ptr());\\n\\n    let fmt = CString::new(\\\"number = %d\\\\n\\\").unwrap();\\n    printf(fmt.as_ptr(), 3);\\n\\n    let fmt = CString::new(\\\"%d, %d\\\\n\\\").unwrap();\\n    printf(fmt.as_ptr(), 10, 5);\\n}\\n# }\\n```\\n\",\"use_site\":null},\"E0061\":{\"description\":\"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g. `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\",\"use_site\":null},\"E0062\":{\"description\":\"\\nThis error indicates that during an attempt to build a struct or struct-like\\nenum variant, one of the fields was specified more than once. Erroneous code\\nexample:\\n\\n```compile_fail,E0062\\nstruct Foo {\\n    x: i32,\\n}\\n\\nfn main() {\\n    let x = Foo {\\n                x: 0,\\n                x: 0, // error: field `x` specified more than once\\n            };\\n}\\n```\\n\\nEach field should be specified exactly one time. Example:\\n\\n```\\nstruct Foo {\\n    x: i32,\\n}\\n\\nfn main() {\\n    let x = Foo { x: 0 }; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0063\":{\"description\":\"\\nThis error indicates that during an attempt to build a struct or struct-like\\nenum variant, one of the fields was not provided. Erroneous code example:\\n\\n```compile_fail,E0063\\nstruct Foo {\\n    x: i32,\\n    y: i32,\\n}\\n\\nfn main() {\\n    let x = Foo { x: 0 }; // error: missing field: `y`\\n}\\n```\\n\\nEach field should be specified exactly once. Example:\\n\\n```\\nstruct Foo {\\n    x: i32,\\n    y: i32,\\n}\\n\\nfn main() {\\n    let x = Foo { x: 0, y: 0 }; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0067\":{\"description\":\"\\nThe left-hand side of a compound assignment expression must be a place\\nexpression. A place expression represents a memory location and includes\\nitem paths (ie, namespaced variables), dereferences, indexing expressions,\\nand field references.\\n\\nLet's start with some erroneous code examples:\\n\\n```compile_fail,E0067\\nuse std::collections::LinkedList;\\n\\n// Bad: assignment to non-place expression\\nLinkedList::new() += 1;\\n\\n// ...\\n\\nfn some_func(i: &mut i32) {\\n    i += 12; // Error : '+=' operation cannot be applied on a reference !\\n}\\n```\\n\\nAnd now some working examples:\\n\\n```\\nlet mut i : i32 = 0;\\n\\ni += 12; // Good !\\n\\n// ...\\n\\nfn some_func(i: &mut i32) {\\n    *i += 12; // Good !\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0069\":{\"description\":\"\\nThe compiler found a function whose body contains a `return;` statement but\\nwhose return type is not `()`. An example of this is:\\n\\n```compile_fail,E0069\\n// error\\nfn foo() -> u8 {\\n    return;\\n}\\n```\\n\\nSince `return;` is just like `return ();`, there is a mismatch between the\\nfunction's return type and the value being returned.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0070\":{\"description\":\"\\nThe left-hand side of an assignment operator must be a place expression. An\\nplace expression represents a memory location and can be a variable (with\\noptional namespacing), a dereference, an indexing expression or a field\\nreference.\\n\\nMore details can be found in the [Expressions] section of the Reference.\\n\\n[Expressions]: https://doc.rust-lang.org/reference/expressions.html#places-rvalues-and-temporaries\\n\\nNow, we can go further. Here are some erroneous code examples:\\n\\n```compile_fail,E0070\\nstruct SomeStruct {\\n    x: i32,\\n    y: i32\\n}\\n\\nconst SOME_CONST : i32 = 12;\\n\\nfn some_other_func() {}\\n\\nfn some_function() {\\n    SOME_CONST = 14; // error : a constant value cannot be changed!\\n    1 = 3; // error : 1 isn't a valid place!\\n    some_other_func() = 4; // error : we can't assign value to a function!\\n    SomeStruct.x = 12; // error : SomeStruct a structure name but it is used\\n                       // like a variable!\\n}\\n```\\n\\nAnd now let's give working examples:\\n\\n```\\nstruct SomeStruct {\\n    x: i32,\\n    y: i32\\n}\\nlet mut s = SomeStruct {x: 0, y: 0};\\n\\ns.x = 3; // that's good !\\n\\n// ...\\n\\nfn some_func(x: &mut i32) {\\n    *x = 12; // that's good !\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0071\":{\"description\":\"\\nYou tried to use structure-literal syntax to create an item that is\\nnot a structure or enum variant.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0071\\ntype U32 = u32;\\nlet t = U32 { value: 4 }; // error: expected struct, variant or union type,\\n                          // found builtin type `u32`\\n```\\n\\nTo fix this, ensure that the name was correctly spelled, and that\\nthe correct form of initializer was used.\\n\\nFor example, the code above can be fixed to:\\n\\n```\\nenum Foo {\\n    FirstValue(i32)\\n}\\n\\nfn main() {\\n    let u = Foo::FirstValue(0i32);\\n\\n    let t = 4;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0073\":{\"description\":\"\\n#### Note: this error code is no longer emitted by the compiler.\\n\\nYou cannot define a struct (or enum) `Foo` that requires an instance of `Foo`\\nin order to make a new `Foo` value. This is because there would be no way a\\nfirst instance of `Foo` could be made to initialize another instance!\\n\\nHere's an example of a struct that has this problem:\\n\\n```\\nstruct Foo { x: Box<Foo> } // error\\n```\\n\\nOne fix is to use `Option`, like so:\\n\\n```\\nstruct Foo { x: Option<Box<Foo>> }\\n```\\n\\nNow it's possible to create at least one instance of `Foo`: `Foo { x: None }`.\\n\",\"use_site\":null},\"E0074\":{\"description\":\"\\n#### Note: this error code is no longer emitted by the compiler.\\n\\nWhen using the `#[simd]` attribute on a tuple struct, the components of the\\ntuple struct must all be of a concrete, nongeneric type so the compiler can\\nreason about how to use SIMD with them. This error will occur if the types\\nare generic.\\n\\nThis will cause an error:\\n\\n```\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Bad<T>(T, T, T);\\n```\\n\\nThis will not:\\n\\n```\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Good(u32, u32, u32);\\n```\\n\",\"use_site\":null},\"E0075\":{\"description\":\"\\nThe `#[simd]` attribute can only be applied to non empty tuple structs, because\\nit doesn't make sense to try to use SIMD operations when there are no values to\\noperate on.\\n\\nThis will cause an error:\\n\\n```compile_fail,E0075\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Bad;\\n```\\n\\nThis will not:\\n\\n```\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Good(u32);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0076\":{\"description\":\"\\nWhen using the `#[simd]` attribute to automatically use SIMD operations in tuple\\nstruct, the types in the struct must all be of the same type, or the compiler\\nwill trigger this error.\\n\\nThis will cause an error:\\n\\n```compile_fail,E0076\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Bad(u16, u32, u32);\\n```\\n\\nThis will not:\\n\\n```\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Good(u32, u32, u32);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0077\":{\"description\":\"\\nWhen using the `#[simd]` attribute on a tuple struct, the elements in the tuple\\nmust be machine types so SIMD operations can be applied to them.\\n\\nThis will cause an error:\\n\\n```compile_fail,E0077\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Bad(String);\\n```\\n\\nThis will not:\\n\\n```\\n#![feature(repr_simd)]\\n\\n#[repr(simd)]\\nstruct Good(u32, u32, u32);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0081\":{\"description\":\"\\nEnum discriminants are used to differentiate enum variants stored in memory.\\nThis error indicates that the same value was used for two or more variants,\\nmaking them impossible to tell apart.\\n\\n```compile_fail,E0081\\n// Bad.\\nenum Enum {\\n    P = 3,\\n    X = 3,\\n    Y = 5,\\n}\\n```\\n\\n```\\n// Good.\\nenum Enum {\\n    P,\\n    X = 3,\\n    Y = 5,\\n}\\n```\\n\\nNote that variants without a manually specified discriminant are numbered from\\ntop to bottom starting from 0, so clashes can occur with seemingly unrelated\\nvariants.\\n\\n```compile_fail,E0081\\nenum Bad {\\n    X,\\n    Y = 0\\n}\\n```\\n\\nHere `X` will have already been specified the discriminant 0 by the time `Y` is\\nencountered, so a conflict occurs.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0084\":{\"description\":\"\\nAn unsupported representation was attempted on a zero-variant enum.\\n\\nErroneous code example:\\n\\n```compile_fail,E0084\\n#[repr(i32)]\\nenum NightsWatch {} // error: unsupported representation for zero-variant enum\\n```\\n\\nIt is impossible to define an integer type to be used to represent zero-variant\\nenum values because there are no zero-variant enum values. There is no way to\\nconstruct an instance of the following type using only safe code. So you have\\ntwo solutions. Either you add variants in your enum:\\n\\n```\\n#[repr(i32)]\\nenum NightsWatch {\\n    JonSnow,\\n    Commander,\\n}\\n```\\n\\nor you remove the integer represention of your enum:\\n\\n```\\nenum NightsWatch {}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0087\":{\"description\":\"\\nToo many type parameters were supplied for a function. For example:\\n\\n```compile_fail,E0087\\nfn foo<T>() {}\\n\\nfn main() {\\n    foo::<f64, bool>(); // error, expected 1 parameter, found 2 parameters\\n}\\n```\\n\\nThe number of supplied parameters must exactly match the number of defined type\\nparameters.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0088\":{\"description\":\"\\nYou gave too many lifetime parameters. Erroneous code example:\\n\\n```compile_fail,E0088\\nfn f() {}\\n\\nfn main() {\\n    f::<'static>() // error: too many lifetime parameters provided\\n}\\n```\\n\\nPlease check you give the right number of lifetime parameters. Example:\\n\\n```\\nfn f() {}\\n\\nfn main() {\\n    f() // ok!\\n}\\n```\\n\\nIt's also important to note that the Rust compiler can generally\\ndetermine the lifetime by itself. Example:\\n\\n```\\nstruct Foo {\\n    value: String\\n}\\n\\nimpl Foo {\\n    // it can be written like this\\n    fn get_value<'a>(&'a self) -> &'a str { &self.value }\\n    // but the compiler works fine with this too:\\n    fn without_lifetime(&self) -> &str { &self.value }\\n}\\n\\nfn main() {\\n    let f = Foo { value: \\\"hello\\\".to_owned() };\\n\\n    println!(\\\"{}\\\", f.get_value());\\n    println!(\\\"{}\\\", f.without_lifetime());\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0089\":{\"description\":\"\\nNot enough type parameters were supplied for a function. For example:\\n\\n```compile_fail,E0089\\nfn foo<T, U>() {}\\n\\nfn main() {\\n    foo::<f64>(); // error, expected 2 parameters, found 1 parameter\\n}\\n```\\n\\nNote that if a function takes multiple type parameters but you want the compiler\\nto infer some of them, you can use type placeholders:\\n\\n```compile_fail,E0089\\nfn foo<T, U>(x: T) {}\\n\\nfn main() {\\n    let x: bool = true;\\n    foo::<f64>(x);    // error, expected 2 parameters, found 1 parameter\\n    foo::<_, f64>(x); // same as `foo::<bool, f64>(x)`\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0090\":{\"description\":\"\\nYou gave too few lifetime parameters. Example:\\n\\n```compile_fail,E0090\\nfn foo<'a: 'b, 'b: 'a>() {}\\n\\nfn main() {\\n    foo::<'static>(); // error, expected 2 lifetime parameters\\n}\\n```\\n\\nPlease check you give the right number of lifetime parameters. Example:\\n\\n```\\nfn foo<'a: 'b, 'b: 'a>() {}\\n\\nfn main() {\\n    foo::<'static, 'static>();\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0091\":{\"description\":\"\\nYou gave an unnecessary type parameter in a type alias. Erroneous code\\nexample:\\n\\n```compile_fail,E0091\\ntype Foo<T> = u32; // error: type parameter `T` is unused\\n// or:\\ntype Foo<A,B> = Box<A>; // error: type parameter `B` is unused\\n```\\n\\nPlease check you didn't write too many type parameters. Example:\\n\\n```\\ntype Foo = u32; // ok!\\ntype Foo2<A> = Box<A>; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0092\":{\"description\":\"\\nYou tried to declare an undefined atomic operation function.\\nErroneous code example:\\n\\n```compile_fail,E0092\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn atomic_foo(); // error: unrecognized atomic operation\\n                     //        function\\n}\\n```\\n\\nPlease check you didn't make a mistake in the function's name. All intrinsic\\nfunctions are defined in librustc_trans/trans/intrinsic.rs and in\\nlibcore/intrinsics.rs in the Rust source code. Example:\\n\\n```\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn atomic_fence(); // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0093\":{\"description\":\"\\nYou declared an unknown intrinsic function. Erroneous code example:\\n\\n```compile_fail,E0093\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn foo(); // error: unrecognized intrinsic function: `foo`\\n}\\n\\nfn main() {\\n    unsafe {\\n        foo();\\n    }\\n}\\n```\\n\\nPlease check you didn't make a mistake in the function's name. All intrinsic\\nfunctions are defined in librustc_trans/trans/intrinsic.rs and in\\nlibcore/intrinsics.rs in the Rust source code. Example:\\n\\n```\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn atomic_fence(); // ok!\\n}\\n\\nfn main() {\\n    unsafe {\\n        atomic_fence();\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0094\":{\"description\":\"\\nYou gave an invalid number of type parameters to an intrinsic function.\\nErroneous code example:\\n\\n```compile_fail,E0094\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn size_of<T, U>() -> usize; // error: intrinsic has wrong number\\n                                 //        of type parameters\\n}\\n```\\n\\nPlease check that you provided the right number of type parameters\\nand verify with the function declaration in the Rust source code.\\nExample:\\n\\n```\\n#![feature(intrinsics)]\\n\\nextern \\\"rust-intrinsic\\\" {\\n    fn size_of<T>() -> usize; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0107\":{\"description\":\"\\nThis error means that an incorrect number of lifetime parameters were provided\\nfor a type (like a struct or enum) or trait:\\n\\n```compile_fail,E0107\\nstruct Foo<'a, 'b>(&'a str, &'b str);\\nenum Bar { A, B, C }\\n\\nstruct Baz<'a> {\\n    foo: Foo<'a>, // error: expected 2, found 1\\n    bar: Bar<'a>, // error: expected 0, found 1\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0109\":{\"description\":\"\\nYou tried to give a type parameter to a type which doesn't need it. Erroneous\\ncode example:\\n\\n```compile_fail,E0109\\ntype X = u32<i32>; // error: type parameters are not allowed on this type\\n```\\n\\nPlease check that you used the correct type and recheck its definition. Perhaps\\nit doesn't need the type parameter.\\n\\nExample:\\n\\n```\\ntype X = u32; // this compiles\\n```\\n\\nNote that type parameters for enum-variant constructors go after the variant,\\nnot after the enum (`Option::None::<u32>`, not `Option::<u32>::None`).\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0110\":{\"description\":\"\\nYou tried to give a lifetime parameter to a type which doesn't need it.\\nErroneous code example:\\n\\n```compile_fail,E0110\\ntype X = u32<'static>; // error: lifetime parameters are not allowed on\\n                       //        this type\\n```\\n\\nPlease check that the correct type was used and recheck its definition; perhaps\\nit doesn't need the lifetime parameter. Example:\\n\\n```\\ntype X = u32; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0116\":{\"description\":\"\\nYou can only define an inherent implementation for a type in the same crate\\nwhere the type was defined. For example, an `impl` block as below is not allowed\\nsince `Vec` is defined in the standard library:\\n\\n```compile_fail,E0116\\nimpl Vec<u8> { } // error\\n```\\n\\nTo fix this problem, you can do either of these things:\\n\\n - define a trait that has the desired associated functions/types/constants and\\n   implement the trait for the type in question\\n - define a new type wrapping the type and define an implementation on the new\\n   type\\n\\nNote that using the `type` keyword does not work here because `type` only\\nintroduces a type alias:\\n\\n```compile_fail,E0116\\ntype Bytes = Vec<u8>;\\n\\nimpl Bytes { } // error, same as above\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0117\":{\"description\":\"\\nThis error indicates a violation of one of Rust's orphan rules for trait\\nimplementations. The rule prohibits any implementation of a foreign trait (a\\ntrait defined in another crate) where\\n\\n - the type that is implementing the trait is foreign\\n - all of the parameters being passed to the trait (if there are any) are also\\n   foreign.\\n\\nHere's one example of this error:\\n\\n```compile_fail,E0117\\nimpl Drop for u32 {}\\n```\\n\\nTo avoid this kind of error, ensure that at least one local type is referenced\\nby the `impl`:\\n\\n```\\npub struct Foo; // you define your type in your crate\\n\\nimpl Drop for Foo { // and you can implement the trait on it!\\n    // code of trait implementation here\\n#   fn drop(&mut self) { }\\n}\\n\\nimpl From<Foo> for i32 { // or you use a type from your crate as\\n                         // a type parameter\\n    fn from(i: Foo) -> i32 {\\n        0\\n    }\\n}\\n```\\n\\nAlternatively, define a trait locally and implement that instead:\\n\\n```\\ntrait Bar {\\n    fn get(&self) -> usize;\\n}\\n\\nimpl Bar for u32 {\\n    fn get(&self) -> usize { 0 }\\n}\\n```\\n\\nFor information on the design of the orphan rules, see [RFC 1023].\\n\\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0118\":{\"description\":\"\\nYou're trying to write an inherent implementation for something which isn't a\\nstruct nor an enum. Erroneous code example:\\n\\n```compile_fail,E0118\\nimpl (u8, u8) { // error: no base type found for inherent implementation\\n    fn get_state(&self) -> String {\\n        // ...\\n    }\\n}\\n```\\n\\nTo fix this error, please implement a trait on the type or wrap it in a struct.\\nExample:\\n\\n```\\n// we create a trait here\\ntrait LiveLongAndProsper {\\n    fn get_state(&self) -> String;\\n}\\n\\n// and now you can implement it on (u8, u8)\\nimpl LiveLongAndProsper for (u8, u8) {\\n    fn get_state(&self) -> String {\\n        \\\"He's dead, Jim!\\\".to_owned()\\n    }\\n}\\n```\\n\\nAlternatively, you can create a newtype. A newtype is a wrapping tuple-struct.\\nFor example, `NewType` is a newtype over `Foo` in `struct NewType(Foo)`.\\nExample:\\n\\n```\\nstruct TypeWrapper((u8, u8));\\n\\nimpl TypeWrapper {\\n    fn get_state(&self) -> String {\\n        \\\"Fascinating!\\\".to_owned()\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0120\":{\"description\":\"\\nAn attempt was made to implement Drop on a trait, which is not allowed: only\\nstructs and enums can implement Drop. An example causing this error:\\n\\n```compile_fail,E0120\\ntrait MyTrait {}\\n\\nimpl Drop for MyTrait {\\n    fn drop(&mut self) {}\\n}\\n```\\n\\nA workaround for this problem is to wrap the trait up in a struct, and implement\\nDrop on that. An example is shown below:\\n\\n```\\ntrait MyTrait {}\\nstruct MyWrapper<T: MyTrait> { foo: T }\\n\\nimpl <T: MyTrait> Drop for MyWrapper<T> {\\n    fn drop(&mut self) {}\\n}\\n\\n```\\n\\nAlternatively, wrapping trait objects requires something like the following:\\n\\n```\\ntrait MyTrait {}\\n\\n//or Box<MyTrait>, if you wanted an owned trait object\\nstruct MyWrapper<'a> { foo: &'a MyTrait }\\n\\nimpl <'a> Drop for MyWrapper<'a> {\\n    fn drop(&mut self) {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0121\":{\"description\":\"\\nIn order to be consistent with Rust's lack of global type inference, type\\nplaceholders are disallowed by design in item signatures.\\n\\nExamples of this error include:\\n\\n```compile_fail,E0121\\nfn foo() -> _ { 5 } // error, explicitly write out the return type instead\\n\\nstatic BAR: _ = \\\"test\\\"; // error, explicitly write out the type instead\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0124\":{\"description\":\"\\nYou declared two fields of a struct with the same name. Erroneous code\\nexample:\\n\\n```compile_fail,E0124\\nstruct Foo {\\n    field1: i32,\\n    field1: i32, // error: field is already declared\\n}\\n```\\n\\nPlease verify that the field names have been correctly spelled. Example:\\n\\n```\\nstruct Foo {\\n    field1: i32,\\n    field2: i32, // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0131\":{\"description\":\"\\nIt is not possible to define `main` with type parameters, or even with function\\nparameters. When `main` is present, it must take no arguments and return `()`.\\nErroneous code example:\\n\\n```compile_fail,E0131\\nfn main<T>() { // error: main function is not allowed to have type parameters\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0132\":{\"description\":\"\\nA function with the `start` attribute was declared with type parameters.\\n\\nErroneous code example:\\n\\n```compile_fail,E0132\\n#![feature(start)]\\n\\n#[start]\\nfn f<T>() {}\\n```\\n\\nIt is not possible to declare type parameters on a function that has the `start`\\nattribute. Such a function must have the following type signature (for more\\ninformation: http://doc.rust-lang.org/stable/book/first-edition/no-stdlib.html):\\n\\n```\\n# let _:\\nfn(isize, *const *const u8) -> isize;\\n```\\n\\nExample:\\n\\n```\\n#![feature(start)]\\n\\n#[start]\\nfn my_start(argc: isize, argv: *const *const u8) -> isize {\\n    0\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0164\":{\"description\":\"\\nThis error means that an attempt was made to match a struct type enum\\nvariant as a non-struct type:\\n\\n```compile_fail,E0164\\nenum Foo { B { i: u32 } }\\n\\nfn bar(foo: Foo) -> u32 {\\n    match foo {\\n        Foo::B(i) => i, // error E0164\\n    }\\n}\\n```\\n\\nTry using `{}` instead:\\n\\n```\\nenum Foo { B { i: u32 } }\\n\\nfn bar(foo: Foo) -> u32 {\\n    match foo {\\n        Foo::B{i} => i,\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0183\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0184\":{\"description\":\"\\nExplicitly implementing both Drop and Copy for a type is currently disallowed.\\nThis feature can make some sense in theory, but the current implementation is\\nincorrect and can lead to memory unsafety (see [issue #20126][iss20126]), so\\nit has been disabled for now.\\n\\n[iss20126]: https://github.com/rust-lang/rust/issues/20126\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0185\":{\"description\":\"\\nAn associated function for a trait was defined to be static, but an\\nimplementation of the trait declared the same function to be a method (i.e. to\\ntake a `self` parameter).\\n\\nHere's an example of this error:\\n\\n```compile_fail,E0185\\ntrait Foo {\\n    fn foo();\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, method `foo` has a `&self` declaration in the impl, but not in\\n    // the trait\\n    fn foo(&self) {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0186\":{\"description\":\"\\nAn associated function for a trait was defined to be a method (i.e. to take a\\n`self` parameter), but an implementation of the trait declared the same function\\nto be static.\\n\\nHere's an example of this error:\\n\\n```compile_fail,E0186\\ntrait Foo {\\n    fn foo(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, method `foo` has a `&self` declaration in the trait, but not in\\n    // the impl\\n    fn foo() {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0191\":{\"description\":\"\\nTrait objects need to have all associated types specified. Erroneous code\\nexample:\\n\\n```compile_fail,E0191\\ntrait Trait {\\n    type Bar;\\n}\\n\\ntype Foo = Trait; // error: the value of the associated type `Bar` (from\\n                  //        the trait `Trait`) must be specified\\n```\\n\\nPlease verify you specified all associated types of the trait and that you\\nused the right trait. Example:\\n\\n```\\ntrait Trait {\\n    type Bar;\\n}\\n\\ntype Foo = Trait<Bar=i32>; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0192\":{\"description\":\"\\nNegative impls are only allowed for auto traits. For more\\ninformation see the [opt-in builtin traits RFC][RFC 19].\\n\\n[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0193\":{\"description\":\"\\n#### Note: this error code is no longer emitted by the compiler.\\n\\n`where` clauses must use generic type parameters: it does not make sense to use\\nthem otherwise. An example causing this error:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n#[derive(Copy,Clone)]\\nstruct Wrapper<T> {\\n    Wrapped: T\\n}\\n\\nimpl Foo for Wrapper<u32> where Wrapper<u32>: Clone {\\n    fn bar(&self) { }\\n}\\n```\\n\\nThis use of a `where` clause is strange - a more common usage would look\\nsomething like the following:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n#[derive(Copy,Clone)]\\nstruct Wrapper<T> {\\n    Wrapped: T\\n}\\nimpl <T> Foo for Wrapper<T> where Wrapper<T>: Clone {\\n    fn bar(&self) { }\\n}\\n```\\n\\nHere, we're saying that the implementation exists on Wrapper only when the\\nwrapped type `T` implements `Clone`. The `where` clause is important because\\nsome types will not implement `Clone`, and thus will not get this method.\\n\\nIn our erroneous example, however, we're referencing a single concrete type.\\nSince we know for certain that `Wrapper<u32>` implements `Clone`, there's no\\nreason to also specify it in a `where` clause.\\n\",\"use_site\":null},\"E0194\":{\"description\":\"\\nA type parameter was declared which shadows an existing one. An example of this\\nerror:\\n\\n```compile_fail,E0194\\ntrait Foo<T> {\\n    fn do_something(&self) -> T;\\n    fn do_something_else<T: Clone>(&self, bar: T);\\n}\\n```\\n\\nIn this example, the trait `Foo` and the trait method `do_something_else` both\\ndefine a type parameter `T`. This is not allowed: if the method wishes to\\ndefine a type parameter, it must use a different name for it.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0195\":{\"description\":\"\\nYour method's lifetime parameters do not match the trait declaration.\\nErroneous code example:\\n\\n```compile_fail,E0195\\ntrait Trait {\\n    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\\n}\\n\\nstruct Foo;\\n\\nimpl Trait for Foo {\\n    fn bar<'a,'b>(x: &'a str, y: &'b str) {\\n    // error: lifetime parameters or bounds on method `bar`\\n    // do not match the trait declaration\\n    }\\n}\\n```\\n\\nThe lifetime constraint `'b` for bar() implementation does not match the\\ntrait declaration. Ensure lifetime declarations match exactly in both trait\\ndeclaration and implementation. Example:\\n\\n```\\ntrait Trait {\\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str);\\n}\\n\\nstruct Foo;\\n\\nimpl Trait for Foo {\\n    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0199\":{\"description\":\"\\nSafe traits should not have unsafe implementations, therefore marking an\\nimplementation for a safe trait unsafe will cause a compiler error. Removing\\nthe unsafe marker on the trait noted in the error will resolve this problem.\\n\\n```compile_fail,E0199\\nstruct Foo;\\n\\ntrait Bar { }\\n\\n// this won't compile because Bar is safe\\nunsafe impl Bar for Foo { }\\n// this will compile\\nimpl Bar for Foo { }\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0200\":{\"description\":\"\\nUnsafe traits must have unsafe implementations. This error occurs when an\\nimplementation for an unsafe trait isn't marked as unsafe. This may be resolved\\nby marking the unsafe implementation as unsafe.\\n\\n```compile_fail,E0200\\nstruct Foo;\\n\\nunsafe trait Bar { }\\n\\n// this won't compile because Bar is unsafe and impl isn't unsafe\\nimpl Bar for Foo { }\\n// this will compile\\nunsafe impl Bar for Foo { }\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0201\":{\"description\":\"\\nIt is an error to define two associated items (like methods, associated types,\\nassociated functions, etc.) with the same identifier.\\n\\nFor example:\\n\\n```compile_fail,E0201\\nstruct Foo(u8);\\n\\nimpl Foo {\\n    fn bar(&self) -> bool { self.0 > 5 }\\n    fn bar() {} // error: duplicate associated function\\n}\\n\\ntrait Baz {\\n    type Quux;\\n    fn baz(&self) -> bool;\\n}\\n\\nimpl Baz for Foo {\\n    type Quux = u32;\\n\\n    fn baz(&self) -> bool { true }\\n\\n    // error: duplicate method\\n    fn baz(&self) -> bool { self.0 > 5 }\\n\\n    // error: duplicate associated type\\n    type Quux = u32;\\n}\\n```\\n\\nNote, however, that items with the same name are allowed for inherent `impl`\\nblocks that don't overlap:\\n\\n```\\nstruct Foo<T>(T);\\n\\nimpl Foo<u8> {\\n    fn bar(&self) -> bool { self.0 > 5 }\\n}\\n\\nimpl Foo<bool> {\\n    fn bar(&self) -> bool { self.0 }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0202\":{\"description\":\"\\nInherent associated types were part of [RFC 195] but are not yet implemented.\\nSee [the tracking issue][iss8995] for the status of this implementation.\\n\\n[RFC 195]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\\n[iss8995]: https://github.com/rust-lang/rust/issues/8995\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0203\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0204\":{\"description\":\"\\nAn attempt to implement the `Copy` trait for a struct failed because one of the\\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\\nmentioned field. Note that this may not be possible, as in the example of\\n\\n```compile_fail,E0204\\nstruct Foo {\\n    foo : Vec<u32>,\\n}\\n\\nimpl Copy for Foo { }\\n```\\n\\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\\n\\nHere's another example that will fail:\\n\\n```compile_fail,E0204\\n#[derive(Copy)]\\nstruct Foo<'a> {\\n    ty: &'a mut bool,\\n}\\n```\\n\\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\\ndiffers from the behavior for `&T`, which is always `Copy`).\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0206\":{\"description\":\"\\nYou can only implement `Copy` for a struct or enum. Both of the following\\nexamples will fail, because neither `[u8; 256]` nor `&'static mut Bar`\\n(mutable reference to `Bar`) is a struct or enum:\\n\\n```compile_fail,E0206\\ntype Foo = [u8; 256];\\nimpl Copy for Foo { } // error\\n\\n#[derive(Copy, Clone)]\\nstruct Bar;\\nimpl Copy for &'static mut Bar { } // error\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0207\":{\"description\":\"\\nAny type parameter or lifetime parameter of an `impl` must meet at least one of\\nthe following criteria:\\n\\n - it appears in the self type of the impl\\n - for a trait impl, it appears in the trait reference\\n - it is bound as an associated type\\n\\n### Error example 1\\n\\nSuppose we have a struct `Foo` and we would like to define some methods for it.\\nThe following definition leads to a compiler error:\\n\\n```compile_fail,E0207\\nstruct Foo;\\n\\nimpl<T: Default> Foo {\\n// error: the type parameter `T` is not constrained by the impl trait, self\\n// type, or predicates [E0207]\\n    fn get(&self) -> T {\\n        <T as Default>::default()\\n    }\\n}\\n```\\n\\nThe problem is that the parameter `T` does not appear in the self type (`Foo`)\\nof the impl. In this case, we can fix the error by moving the type parameter\\nfrom the `impl` to the method `get`:\\n\\n\\n```\\nstruct Foo;\\n\\n// Move the type parameter from the impl to the method\\nimpl Foo {\\n    fn get<T: Default>(&self) -> T {\\n        <T as Default>::default()\\n    }\\n}\\n```\\n\\n### Error example 2\\n\\nAs another example, suppose we have a `Maker` trait and want to establish a\\ntype `FooMaker` that makes `Foo`s:\\n\\n```compile_fail,E0207\\ntrait Maker {\\n    type Item;\\n    fn make(&mut self) -> Self::Item;\\n}\\n\\nstruct Foo<T> {\\n    foo: T\\n}\\n\\nstruct FooMaker;\\n\\nimpl<T: Default> Maker for FooMaker {\\n// error: the type parameter `T` is not constrained by the impl trait, self\\n// type, or predicates [E0207]\\n    type Item = Foo<T>;\\n\\n    fn make(&mut self) -> Foo<T> {\\n        Foo { foo: <T as Default>::default() }\\n    }\\n}\\n```\\n\\nThis fails to compile because `T` does not appear in the trait or in the\\nimplementing type.\\n\\nOne way to work around this is to introduce a phantom type parameter into\\n`FooMaker`, like so:\\n\\n```\\nuse std::marker::PhantomData;\\n\\ntrait Maker {\\n    type Item;\\n    fn make(&mut self) -> Self::Item;\\n}\\n\\nstruct Foo<T> {\\n    foo: T\\n}\\n\\n// Add a type parameter to `FooMaker`\\nstruct FooMaker<T> {\\n    phantom: PhantomData<T>,\\n}\\n\\nimpl<T: Default> Maker for FooMaker<T> {\\n    type Item = Foo<T>;\\n\\n    fn make(&mut self) -> Foo<T> {\\n        Foo {\\n            foo: <T as Default>::default(),\\n        }\\n    }\\n}\\n```\\n\\nAnother way is to do away with the associated type in `Maker` and use an input\\ntype parameter instead:\\n\\n```\\n// Use a type parameter instead of an associated type here\\ntrait Maker<Item> {\\n    fn make(&mut self) -> Item;\\n}\\n\\nstruct Foo<T> {\\n    foo: T\\n}\\n\\nstruct FooMaker;\\n\\nimpl<T: Default> Maker<Foo<T>> for FooMaker {\\n    fn make(&mut self) -> Foo<T> {\\n        Foo { foo: <T as Default>::default() }\\n    }\\n}\\n```\\n\\n### Additional information\\n\\nFor more information, please see [RFC 447].\\n\\n[RFC 447]: https://github.com/rust-lang/rfcs/blob/master/text/0447-no-unused-impl-parameters.md\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0208\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0210\":{\"description\":\"\\nThis error indicates a violation of one of Rust's orphan rules for trait\\nimplementations. The rule concerns the use of type parameters in an\\nimplementation of a foreign trait (a trait defined in another crate), and\\nstates that type parameters must be \\\"covered\\\" by a local type. To understand\\nwhat this means, it is perhaps easiest to consider a few examples.\\n\\nIf `ForeignTrait` is a trait defined in some external crate `foo`, then the\\nfollowing trait `impl` is an error:\\n\\n```compile_fail,E0210\\n# #[cfg(for_demonstration_only)]\\nextern crate foo;\\n# #[cfg(for_demonstration_only)]\\nuse foo::ForeignTrait;\\n# use std::panic::UnwindSafe as ForeignTrait;\\n\\nimpl<T> ForeignTrait for T { } // error\\n# fn main() {}\\n```\\n\\nTo work around this, it can be covered with a local type, `MyType`:\\n\\n```\\n# use std::panic::UnwindSafe as ForeignTrait;\\nstruct MyType<T>(T);\\nimpl<T> ForeignTrait for MyType<T> { } // Ok\\n```\\n\\nPlease note that a type alias is not sufficient.\\n\\nFor another example of an error, suppose there's another trait defined in `foo`\\nnamed `ForeignTrait2` that takes two type parameters. Then this `impl` results\\nin the same rule violation:\\n\\n```ignore (cannot-doctest-multicrate-project)\\nstruct MyType2;\\nimpl<T> ForeignTrait2<T, MyType<T>> for MyType2 { } // error\\n```\\n\\nThe reason for this is that there are two appearances of type parameter `T` in\\nthe `impl` header, both as parameters for `ForeignTrait2`. The first appearance\\nis uncovered, and so runs afoul of the orphan rule.\\n\\nConsider one more example:\\n\\n```ignore (cannot-doctest-multicrate-project)\\nimpl<T> ForeignTrait2<MyType<T>, T> for MyType2 { } // Ok\\n```\\n\\nThis only differs from the previous `impl` in that the parameters `T` and\\n`MyType<T>` for `ForeignTrait2` have been swapped. This example does *not*\\nviolate the orphan rule; it is permitted.\\n\\nTo see why that last example was allowed, you need to understand the general\\nrule. Unfortunately this rule is a bit tricky to state. Consider an `impl`:\\n\\n```ignore (only-for-syntax-highlight)\\nimpl<P1, ..., Pm> ForeignTrait<T1, ..., Tn> for T0 { ... }\\n```\\n\\nwhere `P1, ..., Pm` are the type parameters of the `impl` and `T0, ..., Tn`\\nare types. One of the types `T0, ..., Tn` must be a local type (this is another\\norphan rule, see the explanation for E0117). Let `i` be the smallest integer\\nsuch that `Ti` is a local type. Then no type parameter can appear in any of the\\n`Tj` for `j < i`.\\n\\nFor information on the design of the orphan rules, see [RFC 1023].\\n\\n[RFC 1023]: https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0212\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0220\":{\"description\":\"\\nYou used an associated type which isn't defined in the trait.\\nErroneous code example:\\n\\n```compile_fail,E0220\\ntrait T1 {\\n    type Bar;\\n}\\n\\ntype Foo = T1<F=i32>; // error: associated type `F` not found for `T1`\\n\\n// or:\\n\\ntrait T2 {\\n    type Bar;\\n\\n    // error: Baz is used but not declared\\n    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\\n}\\n```\\n\\nMake sure that you have defined the associated type in the trait body.\\nAlso, verify that you used the right trait or you didn't misspell the\\nassociated type name. Example:\\n\\n```\\ntrait T1 {\\n    type Bar;\\n}\\n\\ntype Foo = T1<Bar=i32>; // ok!\\n\\n// or:\\n\\ntrait T2 {\\n    type Bar;\\n    type Baz; // we declare `Baz` in our trait.\\n\\n    // and now we can use it here:\\n    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0221\":{\"description\":\"\\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\\nFor example:\\n\\n```compile_fail,E0221\\ntrait T1 {}\\ntrait T2 {}\\n\\ntrait Foo {\\n    type A: T1;\\n}\\n\\ntrait Bar : Foo {\\n    type A: T2;\\n    fn do_something() {\\n        let _: Self::A;\\n    }\\n}\\n```\\n\\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\\nfrom `Foo`, and defines another associated type of the same name. As a result,\\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\\nby `Foo` or the one defined by `Bar`.\\n\\nThere are two options to work around this issue. The first is simply to rename\\none of the types. Alternatively, one can specify the intended type using the\\nfollowing syntax:\\n\\n```\\ntrait T1 {}\\ntrait T2 {}\\n\\ntrait Foo {\\n    type A: T1;\\n}\\n\\ntrait Bar : Foo {\\n    type A: T2;\\n    fn do_something() {\\n        let _: <Self as Bar>::A;\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0223\":{\"description\":\"\\nAn attempt was made to retrieve an associated type, but the type was ambiguous.\\nFor example:\\n\\n```compile_fail,E0223\\ntrait MyTrait {type X; }\\n\\nfn main() {\\n    let foo: MyTrait::X;\\n}\\n```\\n\\nThe problem here is that we're attempting to take the type of X from MyTrait.\\nUnfortunately, the type of X is not defined, because it's only made concrete in\\nimplementations of the trait. A working version of this code might look like:\\n\\n```\\ntrait MyTrait {type X; }\\nstruct MyStruct;\\n\\nimpl MyTrait for MyStruct {\\n    type X = u32;\\n}\\n\\nfn main() {\\n    let foo: <MyStruct as MyTrait>::X;\\n}\\n```\\n\\nThis syntax specifies that we want the X type from MyTrait, as made concrete in\\nMyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\\nmight implement two different traits with identically-named associated types.\\nThis syntax allows disambiguation between the two.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0224\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0225\":{\"description\":\"\\nYou attempted to use multiple types as bounds for a closure or trait object.\\nRust does not currently support this. A simple example that causes this error:\\n\\n```compile_fail,E0225\\nfn main() {\\n    let _: Box<std::io::Read + std::io::Write>;\\n}\\n```\\n\\nAuto traits such as Send and Sync are an exception to this rule:\\nIt's possible to have bounds of one non-builtin trait, plus any number of\\nauto traits. For example, the following compiles correctly:\\n\\n```\\nfn main() {\\n    let _: Box<std::io::Read + Send + Sync>;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0227\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0228\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0229\":{\"description\":\"\\nAn associated type binding was done outside of the type parameter declaration\\nand `where` clause. Erroneous code example:\\n\\n```compile_fail,E0229\\npub trait Foo {\\n    type A;\\n    fn boo(&self) -> <Self as Foo>::A;\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for isize {\\n    type A = usize;\\n    fn boo(&self) -> usize { 42 }\\n}\\n\\nfn baz<I>(x: &<I as Foo<A=Bar>>::A) {}\\n// error: associated type bindings are not allowed here\\n```\\n\\nTo solve this error, please move the type bindings in the type parameter\\ndeclaration:\\n\\n```\\n# struct Bar;\\n# trait Foo { type A; }\\nfn baz<I: Foo<A=Bar>>(x: &<I as Foo>::A) {} // ok!\\n```\\n\\nOr in the `where` clause:\\n\\n```\\n# struct Bar;\\n# trait Foo { type A; }\\nfn baz<I>(x: &<I as Foo>::A) where I: Foo<A=Bar> {}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0243\":{\"description\":\"\\nThis error indicates that not enough type parameters were found in a type or\\ntrait.\\n\\nFor example, the `Foo` struct below is defined to be generic in `T`, but the\\ntype parameter is missing in the definition of `Bar`:\\n\\n```compile_fail,E0243\\nstruct Foo<T> { x: T }\\n\\nstruct Bar { x: Foo }\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0244\":{\"description\":\"\\nThis error indicates that too many type parameters were found in a type or\\ntrait.\\n\\nFor example, the `Foo` struct below has no type parameters, but is supplied\\nwith two in the definition of `Bar`:\\n\\n```compile_fail,E0244\\nstruct Foo { x: bool }\\n\\nstruct Bar<S, T> { x: Foo<S, T> }\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0307\":{\"description\":null,\"use_site\":null},\"E0321\":{\"description\":\"\\nA cross-crate opt-out trait was implemented on something which wasn't a struct\\nor enum type. Erroneous code example:\\n\\n```compile_fail,E0321\\n#![feature(optin_builtin_traits)]\\n\\nstruct Foo;\\n\\nimpl !Sync for Foo {}\\n\\nunsafe impl Send for &'static Foo {}\\n// error: cross-crate traits with a default impl, like `core::marker::Send`,\\n//        can only be implemented for a struct/enum type, not\\n//        `&'static Foo`\\n```\\n\\nOnly structs and enums are permitted to impl Send, Sync, and other opt-out\\ntrait, and the struct or enum must be local to the current crate. So, for\\nexample, `unsafe impl Send for Rc<Foo>` is not allowed.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0322\":{\"description\":\"\\nThe `Sized` trait is a special trait built-in to the compiler for types with a\\nconstant size known at compile-time. This trait is automatically implemented\\nfor types as needed by the compiler, and it is currently disallowed to\\nexplicitly implement it for a type.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0323\":{\"description\":\"\\nAn associated const was implemented when another trait item was expected.\\nErroneous code example:\\n\\n```compile_fail,E0323\\ntrait Foo {\\n    type N;\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    const N : u32 = 0;\\n    // error: item `N` is an associated const, which doesn't match its\\n    //        trait `<Bar as Foo>`\\n}\\n```\\n\\nPlease verify that the associated const wasn't misspelled and the correct trait\\nwas implemented. Example:\\n\\n```\\nstruct Bar;\\n\\ntrait Foo {\\n    type N;\\n}\\n\\nimpl Foo for Bar {\\n    type N = u32; // ok!\\n}\\n```\\n\\nOr:\\n\\n```\\nstruct Bar;\\n\\ntrait Foo {\\n    const N : u32;\\n}\\n\\nimpl Foo for Bar {\\n    const N : u32 = 0; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0324\":{\"description\":\"\\nA method was implemented when another trait item was expected. Erroneous\\ncode example:\\n\\n```compile_fail,E0324\\nstruct Bar;\\n\\ntrait Foo {\\n    const N : u32;\\n\\n    fn M();\\n}\\n\\nimpl Foo for Bar {\\n    fn N() {}\\n    // error: item `N` is an associated method, which doesn't match its\\n    //        trait `<Bar as Foo>`\\n}\\n```\\n\\nTo fix this error, please verify that the method name wasn't misspelled and\\nverify that you are indeed implementing the correct trait items. Example:\\n\\n```\\nstruct Bar;\\n\\ntrait Foo {\\n    const N : u32;\\n\\n    fn M();\\n}\\n\\nimpl Foo for Bar {\\n    const N : u32 = 0;\\n\\n    fn M() {} // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0325\":{\"description\":\"\\nAn associated type was implemented when another trait item was expected.\\nErroneous code example:\\n\\n```compile_fail,E0325\\nstruct Bar;\\n\\ntrait Foo {\\n    const N : u32;\\n}\\n\\nimpl Foo for Bar {\\n    type N = u32;\\n    // error: item `N` is an associated type, which doesn't match its\\n    //        trait `<Bar as Foo>`\\n}\\n```\\n\\nPlease verify that the associated type name wasn't misspelled and your\\nimplementation corresponds to the trait definition. Example:\\n\\n```\\nstruct Bar;\\n\\ntrait Foo {\\n    type N;\\n}\\n\\nimpl Foo for Bar {\\n    type N = u32; // ok!\\n}\\n```\\n\\nOr:\\n\\n```\\nstruct Bar;\\n\\ntrait Foo {\\n    const N : u32;\\n}\\n\\nimpl Foo for Bar {\\n    const N : u32 = 0; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0326\":{\"description\":\"\\nThe types of any associated constants in a trait implementation must match the\\ntypes in the trait definition. This error indicates that there was a mismatch.\\n\\nHere's an example of this error:\\n\\n```compile_fail,E0326\\ntrait Foo {\\n    const BAR: bool;\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    const BAR: u32 = 5; // error, expected bool, found u32\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0328\":{\"description\":\"\\nThe Unsize trait should not be implemented directly. All implementations of\\nUnsize are provided automatically by the compiler.\\n\\nErroneous code example:\\n\\n```compile_fail,E0328\\n#![feature(unsize)]\\n\\nuse std::marker::Unsize;\\n\\npub struct MyType;\\n\\nimpl<T> Unsize<T> for MyType {}\\n```\\n\\nIf you are defining your own smart pointer type and would like to enable\\nconversion from a sized to an unsized type with the\\n[DST coercion system][RFC 982], use [`CoerceUnsized`] instead.\\n\\n```\\n#![feature(coerce_unsized)]\\n\\nuse std::ops::CoerceUnsized;\\n\\npub struct MyType<T: ?Sized> {\\n    field_with_unsized_type: T,\\n}\\n\\nimpl<T, U> CoerceUnsized<MyType<U>> for MyType<T>\\n    where T: CoerceUnsized<U> {}\\n```\\n\\n[RFC 982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\\n[`CoerceUnsized`]: https://doc.rust-lang.org/std/ops/trait.CoerceUnsized.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0366\":{\"description\":\"\\nAn attempt was made to implement `Drop` on a concrete specialization of a\\ngeneric type. An example is shown below:\\n\\n```compile_fail,E0366\\nstruct Foo<T> {\\n    t: T\\n}\\n\\nimpl Drop for Foo<u32> {\\n    fn drop(&mut self) {}\\n}\\n```\\n\\nThis code is not legal: it is not possible to specialize `Drop` to a subset of\\nimplementations of a generic type. One workaround for this is to wrap the\\ngeneric type, as shown below:\\n\\n```\\nstruct Foo<T> {\\n    t: T\\n}\\n\\nstruct Bar {\\n    t: Foo<u32>\\n}\\n\\nimpl Drop for Bar {\\n    fn drop(&mut self) {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0367\":{\"description\":\"\\nAn attempt was made to implement `Drop` on a specialization of a generic type.\\nAn example is shown below:\\n\\n```compile_fail,E0367\\ntrait Foo{}\\n\\nstruct MyStruct<T> {\\n    t: T\\n}\\n\\nimpl<T: Foo> Drop for MyStruct<T> {\\n    fn drop(&mut self) {}\\n}\\n```\\n\\nThis code is not legal: it is not possible to specialize `Drop` to a subset of\\nimplementations of a generic type. In order for this code to work, `MyStruct`\\nmust also require that `T` implements `Foo`. Alternatively, another option is\\nto wrap the generic type in another that specializes appropriately:\\n\\n```\\ntrait Foo{}\\n\\nstruct MyStruct<T> {\\n    t: T\\n}\\n\\nstruct MyStructWrapper<T: Foo> {\\n    t: MyStruct<T>\\n}\\n\\nimpl <T: Foo> Drop for MyStructWrapper<T> {\\n    fn drop(&mut self) {}\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0368\":{\"description\":\"\\nThis error indicates that a binary assignment operator like `+=` or `^=` was\\napplied to a type that doesn't support it. For example:\\n\\n```compile_fail,E0368\\nlet mut x = 12f32; // error: binary operation `<<` cannot be applied to\\n                   //        type `f32`\\n\\nx <<= 2;\\n```\\n\\nTo fix this error, please check that this type implements this binary\\noperation. Example:\\n\\n```\\nlet mut x = 12u32; // the `u32` type does implement the `ShlAssign` trait\\n\\nx <<= 2; // ok!\\n```\\n\\nIt is also possible to overload most operators for your own type by\\nimplementing the `[OP]Assign` traits from `std::ops`.\\n\\nAnother problem you might be facing is this: suppose you've overloaded the `+`\\noperator for some type `Foo` by implementing the `std::ops::Add` trait for\\n`Foo`, but you find that using `+=` does not work, as in this example:\\n\\n```compile_fail,E0368\\nuse std::ops::Add;\\n\\nstruct Foo(u32);\\n\\nimpl Add for Foo {\\n    type Output = Foo;\\n\\n    fn add(self, rhs: Foo) -> Foo {\\n        Foo(self.0 + rhs.0)\\n    }\\n}\\n\\nfn main() {\\n    let mut x: Foo = Foo(5);\\n    x += Foo(7); // error, `+= cannot be applied to the type `Foo`\\n}\\n```\\n\\nThis is because `AddAssign` is not automatically implemented, so you need to\\nmanually implement it for your type.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0369\":{\"description\":\"\\nA binary operation was attempted on a type which doesn't support it.\\nErroneous code example:\\n\\n```compile_fail,E0369\\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\\n               //        type `f32`\\n\\nx << 2;\\n```\\n\\nTo fix this error, please check that this type implements this binary\\noperation. Example:\\n\\n```\\nlet x = 12u32; // the `u32` type does implement it:\\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\\n\\nx << 2; // ok!\\n```\\n\\nIt is also possible to overload most operators for your own type by\\nimplementing traits from `std::ops`.\\n\\nString concatenation appends the string on the right to the string on the\\nleft and may require reallocation. This requires ownership of the string\\non the left. If something should be added to a string literal, move the\\nliteral to the heap by allocating it with `to_owned()` like in\\n`\\\"Your text\\\".to_owned()`.\\n\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0370\":{\"description\":\"\\nThe maximum value of an enum was reached, so it cannot be automatically\\nset in the next enum value. Erroneous code example:\\n\\n```compile_fail\\n#[deny(overflowing_literals)]\\nenum Foo {\\n    X = 0x7fffffffffffffff,\\n    Y, // error: enum discriminant overflowed on value after\\n       //        9223372036854775807: i64; set explicitly via\\n       //        Y = -9223372036854775808 if that is desired outcome\\n}\\n```\\n\\nTo fix this, please set manually the next enum value or put the enum variant\\nwith the maximum value at the end of the enum. Examples:\\n\\n```\\nenum Foo {\\n    X = 0x7fffffffffffffff,\\n    Y = 0, // ok!\\n}\\n```\\n\\nOr:\\n\\n```\\nenum Foo {\\n    Y = 0, // ok!\\n    X = 0x7fffffffffffffff,\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0371\":{\"description\":\"\\nWhen `Trait2` is a subtrait of `Trait1` (for example, when `Trait2` has a\\ndefinition like `trait Trait2: Trait1 { ... }`), it is not allowed to implement\\n`Trait1` for `Trait2`. This is because `Trait2` already implements `Trait1` by\\ndefinition, so it is not useful to do this.\\n\\nExample:\\n\\n```compile_fail,E0371\\ntrait Foo { fn foo(&self) { } }\\ntrait Bar: Foo { }\\ntrait Baz: Bar { }\\n\\nimpl Bar for Baz { } // error, `Baz` implements `Bar` by definition\\nimpl Foo for Baz { } // error, `Baz` implements `Bar` which implements `Foo`\\nimpl Baz for Baz { } // error, `Baz` (trivially) implements `Baz`\\nimpl Baz for Bar { } // Note: This is OK\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0374\":{\"description\":\"\\nA struct without a field containing an unsized type cannot implement\\n`CoerceUnsized`. An\\n[unsized type](https://doc.rust-lang.org/book/first-edition/unsized-types.html)\\nis any type that the compiler doesn't know the length or alignment of at\\ncompile time. Any struct containing an unsized type is also unsized.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0374\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\nstruct Foo<T: ?Sized> {\\n    a: i32,\\n}\\n\\n// error: Struct `Foo` has no unsized fields that need `CoerceUnsized`.\\nimpl<T, U> CoerceUnsized<Foo<U>> for Foo<T>\\n    where T: CoerceUnsized<U> {}\\n```\\n\\n`CoerceUnsized` is used to coerce one struct containing an unsized type\\ninto another struct containing a different unsized type. If the struct\\ndoesn't have any fields of unsized types then you don't need explicit\\ncoercion to get the types you want. To fix this you can either\\nnot try to implement `CoerceUnsized` or you can add a field that is\\nunsized to the struct.\\n\\nExample:\\n\\n```\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\n// We don't need to impl `CoerceUnsized` here.\\nstruct Foo {\\n    a: i32,\\n}\\n\\n// We add the unsized type field to the struct.\\nstruct Bar<T: ?Sized> {\\n    a: i32,\\n    b: T,\\n}\\n\\n// The struct has an unsized field so we can implement\\n// `CoerceUnsized` for it.\\nimpl<T, U> CoerceUnsized<Bar<U>> for Bar<T>\\n    where T: CoerceUnsized<U> {}\\n```\\n\\nNote that `CoerceUnsized` is mainly used by smart pointers like `Box`, `Rc`\\nand `Arc` to be able to mark that they can coerce unsized types that they\\nare pointing at.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0375\":{\"description\":\"\\nA struct with more than one field containing an unsized type cannot implement\\n`CoerceUnsized`. This only occurs when you are trying to coerce one of the\\ntypes in your struct to another type in the struct. In this case we try to\\nimpl `CoerceUnsized` from `T` to `U` which are both types that the struct\\ntakes. An [unsized type] is any type that the compiler doesn't know the length\\nor alignment of at compile time. Any struct containing an unsized type is also\\nunsized.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0375\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\nstruct Foo<T: ?Sized, U: ?Sized> {\\n    a: i32,\\n    b: T,\\n    c: U,\\n}\\n\\n// error: Struct `Foo` has more than one unsized field.\\nimpl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\\n```\\n\\n`CoerceUnsized` only allows for coercion from a structure with a single\\nunsized type field to another struct with a single unsized type field.\\nIn fact Rust only allows for a struct to have one unsized type in a struct\\nand that unsized type must be the last field in the struct. So having two\\nunsized types in a single struct is not allowed by the compiler. To fix this\\nuse only one field containing an unsized type in the struct and then use\\nmultiple structs to manage each unsized type field you need.\\n\\nExample:\\n\\n```\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\nstruct Foo<T: ?Sized> {\\n    a: i32,\\n    b: T,\\n}\\n\\nimpl <T, U> CoerceUnsized<Foo<U>> for Foo<T>\\n    where T: CoerceUnsized<U> {}\\n\\nfn coerce_foo<T: CoerceUnsized<U>, U>(t: T) -> Foo<U> {\\n    Foo { a: 12i32, b: t } // we use coercion to get the `Foo<U>` type we need\\n}\\n```\\n\\n[unsized type]: https://doc.rust-lang.org/book/first-edition/unsized-types.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0376\":{\"description\":\"\\nThe type you are trying to impl `CoerceUnsized` for is not a struct.\\n`CoerceUnsized` can only be implemented for a struct. Unsized types are\\nalready able to be coerced without an implementation of `CoerceUnsized`\\nwhereas a struct containing an unsized type needs to know the unsized type\\nfield it's containing is able to be coerced. An\\n[unsized type](https://doc.rust-lang.org/book/first-edition/unsized-types.html)\\nis any type that the compiler doesn't know the length or alignment of at\\ncompile time. Any struct containing an unsized type is also unsized.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0376\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\nstruct Foo<T: ?Sized> {\\n    a: T,\\n}\\n\\n// error: The type `U` is not a struct\\nimpl<T, U> CoerceUnsized<U> for Foo<T> {}\\n```\\n\\nThe `CoerceUnsized` trait takes a struct type. Make sure the type you are\\nproviding to `CoerceUnsized` is a struct with only the last field containing an\\nunsized type.\\n\\nExample:\\n\\n```\\n#![feature(coerce_unsized)]\\nuse std::ops::CoerceUnsized;\\n\\nstruct Foo<T> {\\n    a: T,\\n}\\n\\n// The `Foo<U>` is a struct so `CoerceUnsized` can be implemented\\nimpl<T, U> CoerceUnsized<Foo<U>> for Foo<T> where T: CoerceUnsized<U> {}\\n```\\n\\nNote that in Rust, structs can only contain an unsized type if the field\\ncontaining the unsized type is the last and only unsized type field in the\\nstruct.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0377\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0390\":{\"description\":\"\\nYou tried to implement methods for a primitive type. Erroneous code example:\\n\\n```compile_fail,E0390\\nstruct Foo {\\n    x: i32\\n}\\n\\nimpl *mut Foo {}\\n// error: only a single inherent implementation marked with\\n//        `#[lang = \\\"mut_ptr\\\"]` is allowed for the `*mut T` primitive\\n```\\n\\nThis isn't allowed, but using a trait to implement a method is a good solution.\\nExample:\\n\\n```\\nstruct Foo {\\n    x: i32\\n}\\n\\ntrait Bar {\\n    fn bar();\\n}\\n\\nimpl Bar for *mut Foo {\\n    fn bar() {} // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0392\":{\"description\":\"\\nThis error indicates that a type or lifetime parameter has been declared\\nbut not actually used. Here is an example that demonstrates the error:\\n\\n```compile_fail,E0392\\nenum Foo<T> {\\n    Bar,\\n}\\n```\\n\\nIf the type parameter was included by mistake, this error can be fixed\\nby simply removing the type parameter, as shown below:\\n\\n```\\nenum Foo {\\n    Bar,\\n}\\n```\\n\\nAlternatively, if the type parameter was intentionally inserted, it must be\\nused. A simple fix is shown below:\\n\\n```\\nenum Foo<T> {\\n    Bar(T),\\n}\\n```\\n\\nThis error may also commonly be found when working with unsafe code. For\\nexample, when using raw pointers one may wish to specify the lifetime for\\nwhich the pointed-at data is valid. An initial attempt (below) causes this\\nerror:\\n\\n```compile_fail,E0392\\nstruct Foo<'a, T> {\\n    x: *const T,\\n}\\n```\\n\\nWe want to express the constraint that Foo should not outlive `'a`, because\\nthe data pointed to by `T` is only valid for that lifetime. The problem is\\nthat there are no actual uses of `'a`. It's possible to work around this\\nby adding a PhantomData type to the struct, using it to tell the compiler\\nto act as if the struct contained a borrowed reference `&'a T`:\\n\\n```\\nuse std::marker::PhantomData;\\n\\nstruct Foo<'a, T: 'a> {\\n    x: *const T,\\n    phantom: PhantomData<&'a T>\\n}\\n```\\n\\n[PhantomData] can also be used to express information about unused type\\nparameters.\\n\\n[PhantomData]: https://doc.rust-lang.org/std/marker/struct.PhantomData.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0393\":{\"description\":\"\\nA type parameter which references `Self` in its default value was not specified.\\nExample of erroneous code:\\n\\n```compile_fail,E0393\\ntrait A<T=Self> {}\\n\\nfn together_we_will_rule_the_galaxy(son: &A) {}\\n// error: the type parameter `T` must be explicitly specified in an\\n//        object type because its default value `Self` references the\\n//        type `Self`\\n```\\n\\nA trait object is defined over a single, fully-defined trait. With a regular\\ndefault parameter, this parameter can just be substituted in. However, if the\\ndefault parameter is `Self`, the trait changes for each concrete type; i.e.\\n`i32` will be expected to implement `A<i32>`, `bool` will be expected to\\nimplement `A<bool>`, etc... These types will not share an implementation of a\\nfully-defined trait; instead they share implementations of a trait with\\ndifferent parameters substituted in for each implementation. This is\\nirreconcilable with what we need to make a trait object work, and is thus\\ndisallowed. Making the trait concrete by explicitly specifying the value of the\\ndefaulted parameter will fix this issue. Fixed example:\\n\\n```\\ntrait A<T=Self> {}\\n\\nfn together_we_will_rule_the_galaxy(son: &A<i32>) {} // Ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0399\":{\"description\":\"\\nYou implemented a trait, overriding one or more of its associated types but did\\nnot reimplement its default methods.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0399\\n#![feature(associated_type_defaults)]\\n\\npub trait Foo {\\n    type Assoc = u8;\\n    fn bar(&self) {}\\n}\\n\\nimpl Foo for i32 {\\n    // error - the following trait items need to be reimplemented as\\n    //         `Assoc` was overridden: `bar`\\n    type Assoc = i32;\\n}\\n```\\n\\nTo fix this, add an implementation for each default method from the trait:\\n\\n```\\n#![feature(associated_type_defaults)]\\n\\npub trait Foo {\\n    type Assoc = u8;\\n    fn bar(&self) {}\\n}\\n\\nimpl Foo for i32 {\\n    type Assoc = i32;\\n    fn bar(&self) {} // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0436\":{\"description\":\"\\nThe functional record update syntax is only allowed for structs. (Struct-like\\nenum variants don't qualify, for example.)\\n\\nErroneous code example:\\n\\n```compile_fail,E0436\\nenum PublicationFrequency {\\n    Weekly,\\n    SemiMonthly { days: (u8, u8), annual_special: bool },\\n}\\n\\nfn one_up_competitor(competitor_frequency: PublicationFrequency)\\n                     -> PublicationFrequency {\\n    match competitor_frequency {\\n        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\\n            days: (1, 15), annual_special: false\\n        },\\n        c @ PublicationFrequency::SemiMonthly{ .. } =>\\n            PublicationFrequency::SemiMonthly {\\n                annual_special: true, ..c // error: functional record update\\n                                          //        syntax requires a struct\\n        }\\n    }\\n}\\n```\\n\\nRewrite the expression without functional record update syntax:\\n\\n```\\nenum PublicationFrequency {\\n    Weekly,\\n    SemiMonthly { days: (u8, u8), annual_special: bool },\\n}\\n\\nfn one_up_competitor(competitor_frequency: PublicationFrequency)\\n                     -> PublicationFrequency {\\n    match competitor_frequency {\\n        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\\n            days: (1, 15), annual_special: false\\n        },\\n        PublicationFrequency::SemiMonthly{ days, .. } =>\\n            PublicationFrequency::SemiMonthly {\\n                days, annual_special: true // ok!\\n        }\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0439\":{\"description\":\"\\nThe length of the platform-intrinsic function `simd_shuffle`\\nwasn't specified. Erroneous code example:\\n\\n```compile_fail,E0439\\n#![feature(platform_intrinsics)]\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;\\n    // error: invalid `simd_shuffle`, needs length: `simd_shuffle`\\n}\\n```\\n\\nThe `simd_shuffle` function needs the length of the array passed as\\nlast parameter in its name. Example:\\n\\n```\\n#![feature(platform_intrinsics)]\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn simd_shuffle8<A,B>(a: A, b: A, c: [u32; 8]) -> B;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0440\":{\"description\":\"\\nA platform-specific intrinsic function has the wrong number of type\\nparameters. Erroneous code example:\\n\\n```compile_fail,E0440\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct f64x2(f64, f64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32;\\n    // error: platform-specific intrinsic has wrong number of type\\n    //        parameters\\n}\\n```\\n\\nPlease refer to the function declaration to see if it corresponds\\nwith yours. Example:\\n\\n```\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct f64x2(f64, f64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_movemask_pd(x: f64x2) -> i32;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0441\":{\"description\":\"\\nAn unknown platform-specific intrinsic function was used. Erroneous\\ncode example:\\n\\n```compile_fail,E0441\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8;\\n    // error: unrecognized platform-specific intrinsic function\\n}\\n```\\n\\nPlease verify that the function name wasn't misspelled, and ensure\\nthat it is declared in the rust source code (in the file\\nsrc/librustc_platform_intrinsics/x86.rs). Example:\\n\\n```\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0442\":{\"description\":\"\\nIntrinsic argument(s) and/or return value have the wrong type.\\nErroneous code example:\\n\\n```compile_fail,E0442\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\\n             i8, i8, i8, i8, i8, i8, i8, i8);\\n#[repr(simd)]\\nstruct i32x4(i32, i32, i32, i32);\\n#[repr(simd)]\\nstruct i64x2(i64, i64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\\n    // error: intrinsic arguments/return value have wrong type\\n}\\n```\\n\\nTo fix this error, please refer to the function declaration to give\\nit the awaited types. Example:\\n\\n```\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0443\":{\"description\":\"\\nIntrinsic argument(s) and/or return value have the wrong type.\\nErroneous code example:\\n\\n```compile_fail,E0443\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\\n#[repr(simd)]\\nstruct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8;\\n    // error: intrinsic argument/return value has wrong type\\n}\\n```\\n\\nTo fix this error, please refer to the function declaration to give\\nit the awaited types. Example:\\n\\n```\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0444\":{\"description\":\"\\nA platform-specific intrinsic function has wrong number of arguments.\\nErroneous code example:\\n\\n```compile_fail,E0444\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct f64x2(f64, f64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32;\\n    // error: platform-specific intrinsic has invalid number of arguments\\n}\\n```\\n\\nPlease refer to the function declaration to see if it corresponds\\nwith yours. Example:\\n\\n```\\n#![feature(repr_simd)]\\n#![feature(platform_intrinsics)]\\n\\n#[repr(simd)]\\nstruct f64x2(f64, f64);\\n\\nextern \\\"platform-intrinsic\\\" {\\n    fn x86_mm_movemask_pd(x: f64x2) -> i32; // ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0516\":{\"description\":\"\\nThe `typeof` keyword is currently reserved but unimplemented.\\nErroneous code example:\\n\\n```compile_fail,E0516\\nfn main() {\\n    let x: typeof(92) = 92;\\n}\\n```\\n\\nTry using type inference instead. Example:\\n\\n```\\nfn main() {\\n    let x = 92;\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0520\":{\"description\":\"\\nA non-default implementation was already made on this type so it cannot be\\nspecialized further. Erroneous code example:\\n\\n```compile_fail,E0520\\n#![feature(specialization)]\\n\\ntrait SpaceLlama {\\n    fn fly(&self);\\n}\\n\\n// applies to all T\\nimpl<T> SpaceLlama for T {\\n    default fn fly(&self) {}\\n}\\n\\n// non-default impl\\n// applies to all `Clone` T and overrides the previous impl\\nimpl<T: Clone> SpaceLlama for T {\\n    fn fly(&self) {}\\n}\\n\\n// since `i32` is clone, this conflicts with the previous implementation\\nimpl SpaceLlama for i32 {\\n    default fn fly(&self) {}\\n    // error: item `fly` is provided by an `impl` that specializes\\n    //        another, but the item in the parent `impl` is not marked\\n    //        `default` and so it cannot be specialized.\\n}\\n```\\n\\nSpecialization only allows you to override `default` functions in\\nimplementations.\\n\\nTo fix this error, you need to mark all the parent implementations as default.\\nExample:\\n\\n```\\n#![feature(specialization)]\\n\\ntrait SpaceLlama {\\n    fn fly(&self);\\n}\\n\\n// applies to all T\\nimpl<T> SpaceLlama for T {\\n    default fn fly(&self) {} // This is a parent implementation.\\n}\\n\\n// applies to all `Clone` T; overrides the previous impl\\nimpl<T: Clone> SpaceLlama for T {\\n    default fn fly(&self) {} // This is a parent implementation but was\\n                             // previously not a default one, causing the error\\n}\\n\\n// applies to i32, overrides the previous two impls\\nimpl SpaceLlama for i32 {\\n    fn fly(&self) {} // And now that's ok!\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0527\":{\"description\":\"\\nThe number of elements in an array or slice pattern differed from the number of\\nelements in the array being matched.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0527\\nlet r = &[1, 2, 3, 4];\\nmatch r {\\n    &[a, b] => { // error: pattern requires 2 elements but array\\n                 //        has 4\\n        println!(\\\"a={}, b={}\\\", a, b);\\n    }\\n}\\n```\\n\\nEnsure that the pattern is consistent with the size of the matched\\narray. Additional elements can be matched with `..`:\\n\\n```\\n#![feature(slice_patterns)]\\n\\nlet r = &[1, 2, 3, 4];\\nmatch r {\\n    &[a, b, ..] => { // ok!\\n        println!(\\\"a={}, b={}\\\", a, b);\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0528\":{\"description\":\"\\nAn array or slice pattern required more elements than were present in the\\nmatched array.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0528\\n#![feature(slice_patterns)]\\n\\nlet r = &[1, 2];\\nmatch r {\\n    &[a, b, c, rest..] => { // error: pattern requires at least 3\\n                            //        elements but array has 2\\n        println!(\\\"a={}, b={}, c={} rest={:?}\\\", a, b, c, rest);\\n    }\\n}\\n```\\n\\nEnsure that the matched array has at least as many elements as the pattern\\nrequires. You can match an arbitrary number of remaining elements with `..`:\\n\\n```\\n#![feature(slice_patterns)]\\n\\nlet r = &[1, 2, 3, 4, 5];\\nmatch r {\\n    &[a, b, c, rest..] => { // ok!\\n        // prints `a=1, b=2, c=3 rest=[4, 5]`\\n        println!(\\\"a={}, b={}, c={} rest={:?}\\\", a, b, c, rest);\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0529\":{\"description\":\"\\nAn array or slice pattern was matched against some other type.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0529\\nlet r: f32 = 1.0;\\nmatch r {\\n    [a, b] => { // error: expected an array or slice, found `f32`\\n        println!(\\\"a={}, b={}\\\", a, b);\\n    }\\n}\\n```\\n\\nEnsure that the pattern and the expression being matched on are of consistent\\ntypes:\\n\\n```\\nlet r = [1.0, 2.0];\\nmatch r {\\n    [a, b] => { // ok!\\n        println!(\\\"a={}, b={}\\\", a, b);\\n    }\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0533\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0534\":{\"description\":\"\\nThe `inline` attribute was malformed.\\n\\nErroneous code example:\\n\\n```ignore (compile_fail not working here; see Issue #43707)\\n#[inline()] // error: expected one argument\\npub fn something() {}\\n\\nfn main() {}\\n```\\n\\nThe parenthesized `inline` attribute requires the parameter to be specified:\\n\\n```\\n#[inline(always)]\\nfn something() {}\\n```\\n\\nor:\\n\\n```\\n#[inline(never)]\\nfn something() {}\\n```\\n\\nAlternatively, a paren-less version of the attribute may be used to hint the\\ncompiler about inlining opportunity:\\n\\n```\\n#[inline]\\nfn something() {}\\n```\\n\\nFor more information about the inline attribute, read:\\nhttps://doc.rust-lang.org/reference.html#inline-attributes\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0535\":{\"description\":\"\\nAn unknown argument was given to the `inline` attribute.\\n\\nErroneous code example:\\n\\n```ignore (compile_fail not working here; see Issue #43707)\\n#[inline(unknown)] // error: invalid argument\\npub fn something() {}\\n\\nfn main() {}\\n```\\n\\nThe `inline` attribute only supports two arguments:\\n\\n * always\\n * never\\n\\nAll other arguments given to the `inline` attribute will return this error.\\nExample:\\n\\n```\\n#[inline(never)] // ok!\\npub fn something() {}\\n\\nfn main() {}\\n```\\n\\nFor more information about the inline attribute, https:\\nread://doc.rust-lang.org/reference.html#inline-attributes\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0558\":{\"description\":\"\\nThe `export_name` attribute was malformed.\\n\\nErroneous code example:\\n\\n```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\\n#[export_name] // error: export_name attribute has invalid format\\npub fn something() {}\\n\\nfn main() {}\\n```\\n\\nThe `export_name` attribute expects a string in order to determine the name of\\nthe exported symbol. Example:\\n\\n```\\n#[export_name = \\\"some_function\\\"] // ok!\\npub fn something() {}\\n\\nfn main() {}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0559\":{\"description\":\"\\nAn unknown field was specified into an enum's structure variant.\\n\\nErroneous code example:\\n\\n```compile_fail,E0559\\nenum Field {\\n    Fool { x: u32 },\\n}\\n\\nlet s = Field::Fool { joke: 0 };\\n// error: struct variant `Field::Fool` has no field named `joke`\\n```\\n\\nVerify you didn't misspell the field's name or that the field exists. Example:\\n\\n```\\nenum Field {\\n    Fool { joke: u32 },\\n}\\n\\nlet s = Field::Fool { joke: 0 }; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0560\":{\"description\":\"\\nAn unknown field was specified into a structure.\\n\\nErroneous code example:\\n\\n```compile_fail,E0560\\nstruct Simba {\\n    mother: u32,\\n}\\n\\nlet s = Simba { mother: 1, father: 0 };\\n// error: structure `Simba` has no field named `father`\\n```\\n\\nVerify you didn't misspell the field's name or that the field exists. Example:\\n\\n```\\nstruct Simba {\\n    mother: u32,\\n    father: u32,\\n}\\n\\nlet s = Simba { mother: 1, father: 0 }; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0564\":{\"description\":null,\"use_site\":null},\"E0569\":{\"description\":\"\\nIf an impl has a generic parameter with the `#[may_dangle]` attribute, then\\nthat impl must be declared as an `unsafe impl.\\n\\nErroneous code example:\\n\\n```compile_fail,E0569\\n#![feature(dropck_eyepatch)]\\n\\nstruct Foo<X>(X);\\nimpl<#[may_dangle] X> Drop for Foo<X> {\\n    fn drop(&mut self) { }\\n}\\n```\\n\\nIn this example, we are asserting that the destructor for `Foo` will not\\naccess any data of type `X`, and require this assertion to be true for\\noverall safety in our program. The compiler does not currently attempt to\\nverify this assertion; therefore we must tag this `impl` as unsafe.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0570\":{\"description\":\"\\nThe requested ABI is unsupported by the current target.\\n\\nThe rust compiler maintains for each target a blacklist of ABIs unsupported on\\nthat target. If an ABI is present in such a list this usually means that the\\ntarget / ABI combination is currently unsupported by llvm.\\n\\nIf necessary, you can circumvent this check using custom target specifications.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0572\":{\"description\":\"\\nA return statement was found outside of a function body.\\n\\nErroneous code example:\\n\\n```compile_fail,E0572\\nconst FOO: u32 = return 0; // error: return statement outside of function body\\n\\nfn main() {}\\n```\\n\\nTo fix this issue, just remove the return keyword or move the expression into a\\nfunction. Example:\\n\\n```\\nconst FOO: u32 = 0;\\n\\nfn some_fn() -> u32 {\\n    return FOO;\\n}\\n\\nfn main() {\\n    some_fn();\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0581\":{\"description\":\"\\nIn a `fn` type, a lifetime appears only in the return type,\\nand not in the arguments types.\\n\\nErroneous code example:\\n\\n```compile_fail,E0581\\nfn main() {\\n    // Here, `'a` appears only in the return type:\\n    let x: for<'a> fn() -> &'a i32;\\n}\\n```\\n\\nTo fix this issue, either use the lifetime in the arguments, or use\\n`'static`. Example:\\n\\n```\\nfn main() {\\n    // Here, `'a` appears only in the return type:\\n    let x: for<'a> fn(&'a i32) -> &'a i32;\\n    let y: fn() -> &'static i32;\\n}\\n```\\n\\nNote: The examples above used to be (erroneously) accepted by the\\ncompiler, but this was since corrected. See [issue #33685] for more\\ndetails.\\n\\n[issue #33685]: https://github.com/rust-lang/rust/issues/33685\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0582\":{\"description\":\"\\nA lifetime appears only in an associated-type binding,\\nand not in the input types to the trait.\\n\\nErroneous code example:\\n\\n```compile_fail,E0582\\nfn bar<F>(t: F)\\n    // No type can satisfy this requirement, since `'a` does not\\n    // appear in any of the input types (here, `i32`):\\n    where F: for<'a> Fn(i32) -> Option<&'a i32>\\n{\\n}\\n\\nfn main() { }\\n```\\n\\nTo fix this issue, either use the lifetime in the inputs, or use\\n`'static`. Example:\\n\\n```\\nfn bar<F, G>(t: F, u: G)\\n    where F: for<'a> Fn(&'a i32) -> Option<&'a i32>,\\n          G: Fn(i32) -> Option<&'static i32>,\\n{\\n}\\n\\nfn main() { }\\n```\\n\\nNote: The examples above used to be (erroneously) accepted by the\\ncompiler, but this was since corrected. See [issue #33685] for more\\ndetails.\\n\\n[issue #33685]: https://github.com/rust-lang/rust/issues/33685\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0587\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0588\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0592\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0599\":{\"description\":\"\\nThis error occurs when a method is used on a type which doesn't implement it:\\n\\nErroneous code example:\\n\\n```compile_fail,E0599\\nstruct Mouth;\\n\\nlet x = Mouth;\\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\\n               //        in the current scope\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0600\":{\"description\":\"\\nAn unary operator was used on a type which doesn't implement it.\\n\\nExample of erroneous code:\\n\\n```compile_fail,E0600\\nenum Question {\\n    Yes,\\n    No,\\n}\\n\\n!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\\n```\\n\\nIn this case, `Question` would need to implement the `std::ops::Not` trait in\\norder to be able to use `!` on it. Let's implement it:\\n\\n```\\nuse std::ops::Not;\\n\\nenum Question {\\n    Yes,\\n    No,\\n}\\n\\n// We implement the `Not` trait on the enum.\\nimpl Not for Question {\\n    type Output = bool;\\n\\n    fn not(self) -> bool {\\n        match self {\\n            Question::Yes => false, // If the `Answer` is `Yes`, then it\\n                                    // returns false.\\n            Question::No => true, // And here we do the opposite.\\n        }\\n    }\\n}\\n\\nassert_eq!(!Question::Yes, false);\\nassert_eq!(!Question::No, true);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0604\":{\"description\":\"\\nA cast to `char` was attempted on a type other than `u8`.\\n\\nErroneous code example:\\n\\n```compile_fail,E0604\\n0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\\n```\\n\\nAs the error message indicates, only `u8` can be cast into `char`. Example:\\n\\n```\\nlet c = 86u8 as char; // ok!\\nassert_eq!(c, 'V');\\n```\\n\\nFor more information about casts, take a look at The Book:\\nhttps://doc.rust-lang.org/book/first-edition/casting-between-types.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0605\":{\"description\":\"\\nAn invalid cast was attempted.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0605\\nlet x = 0u8;\\nx as Vec<u8>; // error: non-primitive cast: `u8` as `std::vec::Vec<u8>`\\n\\n// Another example\\n\\nlet v = 0 as *const u8; // So here, `v` is a `*const u8`.\\nv as &u8; // error: non-primitive cast: `*const u8` as `&u8`\\n```\\n\\nOnly primitive types can be cast into each other. Examples:\\n\\n```\\nlet x = 0u8;\\nx as u32; // ok!\\n\\nlet v = 0 as *const u8;\\nv as *const i8; // ok!\\n```\\n\\nFor more information about casts, take a look at The Book:\\nhttps://doc.rust-lang.org/book/first-edition/casting-between-types.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0606\":{\"description\":\"\\nAn incompatible cast was attempted.\\n\\nErroneous code example:\\n\\n```compile_fail,E0606\\nlet x = &0u8; // Here, `x` is a `&u8`.\\nlet y: u32 = x as u32; // error: casting `&u8` as `u32` is invalid\\n```\\n\\nWhen casting, keep in mind that only primitive types can be cast into each\\nother. Example:\\n\\n```\\nlet x = &0u8;\\nlet y: u32 = *x as u32; // We dereference it first and then cast it.\\n```\\n\\nFor more information about casts, take a look at The Book:\\nhttps://doc.rust-lang.org/book/first-edition/casting-between-types.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0607\":{\"description\":\"\\nA cast between a thin and a fat pointer was attempted.\\n\\nErroneous code example:\\n\\n```compile_fail,E0607\\nlet v = 0 as *const u8;\\nv as *const [u8];\\n```\\n\\nFirst: what are thin and fat pointers?\\n\\nThin pointers are \\\"simple\\\" pointers: they are purely a reference to a memory\\naddress.\\n\\nFat pointers are pointers referencing Dynamically Sized Types (also called DST).\\nDST don't have a statically known size, therefore they can only exist behind\\nsome kind of pointers that contain additional information. Slices and trait\\nobjects are DSTs. In the case of slices, the additional information the fat\\npointer holds is their size.\\n\\nTo fix this error, don't try to cast directly between thin and fat pointers.\\n\\nFor more information about casts, take a look at The Book:\\nhttps://doc.rust-lang.org/book/first-edition/casting-between-types.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Real\",\"fields\":[\"librustc_typeck/structured_errors.rs\"]},\"line\":114}},\"E0608\":{\"description\":\"\\nAn attempt to index into a type which doesn't implement the `std::ops::Index`\\ntrait was performed.\\n\\nErroneous code example:\\n\\n```compile_fail,E0608\\n0u8[2]; // error: cannot index into a value of type `u8`\\n```\\n\\nTo be able to index into a type it needs to implement the `std::ops::Index`\\ntrait. Example:\\n\\n```\\nlet v: Vec<u8> = vec![0, 1, 2, 3];\\n\\n// The `Vec` type implements the `Index` trait so you can do:\\nprintln!(\\\"{}\\\", v[2]);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0609\":{\"description\":\"\\nAttempted to access a non-existent field in a struct.\\n\\nErroneous code example:\\n\\n```compile_fail,E0609\\nstruct StructWithFields {\\n    x: u32,\\n}\\n\\nlet s = StructWithFields { x: 0 };\\nprintln!(\\\"{}\\\", s.foo); // error: no field `foo` on type `StructWithFields`\\n```\\n\\nTo fix this error, check that you didn't misspell the field's name or that the\\nfield actually exists. Example:\\n\\n```\\nstruct StructWithFields {\\n    x: u32,\\n}\\n\\nlet s = StructWithFields { x: 0 };\\nprintln!(\\\"{}\\\", s.x); // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0610\":{\"description\":\"\\nAttempted to access a field on a primitive type.\\n\\nErroneous code example:\\n\\n```compile_fail,E0610\\nlet x: u32 = 0;\\nprintln!(\\\"{}\\\", x.foo); // error: `{integer}` is a primitive type, therefore\\n                       //        doesn't have fields\\n```\\n\\nPrimitive types are the most basic types available in Rust and don't have\\nfields. To access data via named fields, struct types are used. Example:\\n\\n```\\n// We declare struct called `Foo` containing two fields:\\nstruct Foo {\\n    x: u32,\\n    y: i64,\\n}\\n\\n// We create an instance of this struct:\\nlet variable = Foo { x: 0, y: -12 };\\n// And we can now access its fields:\\nprintln!(\\\"x: {}, y: {}\\\", variable.x, variable.y);\\n```\\n\\nFor more information about primitives and structs, take a look at The Book:\\nhttps://doc.rust-lang.org/book/first-edition/primitive-types.html\\nhttps://doc.rust-lang.org/book/first-edition/structs.html\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0611\":{\"description\":\"\\nAttempted to access a private field on a tuple-struct.\\n\\nErroneous code example:\\n\\n```compile_fail,E0611\\nmod some_module {\\n    pub struct Foo(u32);\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo(0) }\\n    }\\n}\\n\\nlet y = some_module::Foo::new();\\nprintln!(\\\"{}\\\", y.0); // error: field `0` of tuple-struct `some_module::Foo`\\n                     //        is private\\n```\\n\\nSince the field is private, you have two solutions:\\n\\n1) Make the field public:\\n\\n```\\nmod some_module {\\n    pub struct Foo(pub u32); // The field is now public.\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo(0) }\\n    }\\n}\\n\\nlet y = some_module::Foo::new();\\nprintln!(\\\"{}\\\", y.0); // So we can access it directly.\\n```\\n\\n2) Add a getter function to keep the field private but allow for accessing its\\nvalue:\\n\\n```\\nmod some_module {\\n    pub struct Foo(u32);\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo(0) }\\n\\n        // We add the getter function.\\n        pub fn get(&self) -> &u32 { &self.0 }\\n    }\\n}\\n\\nlet y = some_module::Foo::new();\\nprintln!(\\\"{}\\\", y.get()); // So we can get the value through the function.\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0612\":{\"description\":\"\\nAttempted out-of-bounds tuple index.\\n\\nErroneous code example:\\n\\n```compile_fail,E0612\\nstruct Foo(u32);\\n\\nlet y = Foo(0);\\nprintln!(\\\"{}\\\", y.1); // error: attempted out-of-bounds tuple index `1`\\n                     //        on type `Foo`\\n```\\n\\nIf a tuple/tuple-struct type has n fields, you can only try to access these n\\nfields from 0 to (n - 1). So in this case, you can only index `0`. Example:\\n\\n```\\nstruct Foo(u32);\\n\\nlet y = Foo(0);\\nprintln!(\\\"{}\\\", y.0); // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0614\":{\"description\":\"\\nAttempted to dereference a variable which cannot be dereferenced.\\n\\nErroneous code example:\\n\\n```compile_fail,E0614\\nlet y = 0u32;\\n*y; // error: type `u32` cannot be dereferenced\\n```\\n\\nOnly types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\\nExample:\\n\\n```\\nlet y = 0u32;\\nlet x = &y;\\n// So here, `x` is a `&u32`, so we can dereference it:\\n*x; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0615\":{\"description\":\"\\nAttempted to access a method like a field.\\n\\nErroneous code example:\\n\\n```compile_fail,E0615\\nstruct Foo {\\n    x: u32,\\n}\\n\\nimpl Foo {\\n    fn method(&self) {}\\n}\\n\\nlet f = Foo { x: 0 };\\nf.method; // error: attempted to take value of method `method` on type `Foo`\\n```\\n\\nIf you want to use a method, add `()` after it:\\n\\n```\\n# struct Foo { x: u32 }\\n# impl Foo { fn method(&self) {} }\\n# let f = Foo { x: 0 };\\nf.method();\\n```\\n\\nHowever, if you wanted to access a field of a struct check that the field name\\nis spelled correctly. Example:\\n\\n```\\n# struct Foo { x: u32 }\\n# impl Foo { fn method(&self) {} }\\n# let f = Foo { x: 0 };\\nprintln!(\\\"{}\\\", f.x);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0616\":{\"description\":\"\\nAttempted to access a private field on a struct.\\n\\nErroneous code example:\\n\\n```compile_fail,E0616\\nmod some_module {\\n    pub struct Foo {\\n        x: u32, // So `x` is private in here.\\n    }\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo { x: 0 } }\\n    }\\n}\\n\\nlet f = some_module::Foo::new();\\nprintln!(\\\"{}\\\", f.x); // error: field `x` of struct `some_module::Foo` is private\\n```\\n\\nIf you want to access this field, you have two options:\\n\\n1) Set the field public:\\n\\n```\\nmod some_module {\\n    pub struct Foo {\\n        pub x: u32, // `x` is now public.\\n    }\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo { x: 0 } }\\n    }\\n}\\n\\nlet f = some_module::Foo::new();\\nprintln!(\\\"{}\\\", f.x); // ok!\\n```\\n\\n2) Add a getter function:\\n\\n```\\nmod some_module {\\n    pub struct Foo {\\n        x: u32, // So `x` is still private in here.\\n    }\\n\\n    impl Foo {\\n        pub fn new() -> Foo { Foo { x: 0 } }\\n\\n        // We create the getter function here:\\n        pub fn get_x(&self) -> &u32 { &self.x }\\n    }\\n}\\n\\nlet f = some_module::Foo::new();\\nprintln!(\\\"{}\\\", f.get_x()); // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0617\":{\"description\":\"\\nAttempted to pass an invalid type of variable into a variadic function.\\n\\nErroneous code example:\\n\\n```compile_fail,E0617\\nextern {\\n    fn printf(c: *const i8, ...);\\n}\\n\\nunsafe {\\n    printf(::std::ptr::null(), 0f32);\\n    // error: can't pass an `f32` to variadic function, cast to `c_double`\\n}\\n```\\n\\nCertain Rust types must be cast before passing them to a variadic function,\\nbecause of arcane ABI rules dictated by the C standard. To fix the error,\\ncast the value to the type specified by the error message (which you may need\\nto import from `std::os::raw`).\\n\",\"use_site\":{\"filename\":{\"variant\":\"Real\",\"fields\":[\"librustc_typeck/structured_errors.rs\"]},\"line\":61}},\"E0618\":{\"description\":\"\\nAttempted to call something which isn't a function nor a method.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0618\\nenum X {\\n    Entry,\\n}\\n\\nX::Entry(); // error: expected function, found `X::Entry`\\n\\n// Or even simpler:\\nlet x = 0i32;\\nx(); // error: expected function, found `i32`\\n```\\n\\nOnly functions and methods can be called using `()`. Example:\\n\\n```\\n// We declare a function:\\nfn i_am_a_function() {}\\n\\n// And we call it:\\ni_am_a_function();\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0619\":{\"description\":\"\\n#### Note: this error code is no longer emitted by the compiler.\\nThe type-checker needed to know the type of an expression, but that type had not\\nyet been inferred.\\n\\nErroneous code example:\\n\\n```compile_fail\\nlet mut x = vec![];\\nmatch x.pop() {\\n    Some(v) => {\\n        // Here, the type of `v` is not (yet) known, so we\\n        // cannot resolve this method call:\\n        v.to_uppercase(); // error: the type of this value must be known in\\n                          //        this context\\n    }\\n    None => {}\\n}\\n```\\n\\nType inference typically proceeds from the top of the function to the bottom,\\nfiguring out types as it goes. In some cases -- notably method calls and\\noverloadable operators like `*` -- the type checker may not have enough\\ninformation *yet* to make progress. This can be true even if the rest of the\\nfunction provides enough context (because the type-checker hasn't looked that\\nfar ahead yet). In this case, type annotations can be used to help it along.\\n\\nTo fix this error, just specify the type of the variable. Example:\\n\\n```\\nlet mut x: Vec<String> = vec![]; // We precise the type of the vec elements.\\nmatch x.pop() {\\n    Some(v) => {\\n        v.to_uppercase(); // Since rustc now knows the type of the vec elements,\\n                          // we can use `v`'s methods.\\n    }\\n    None => {}\\n}\\n```\\n\",\"use_site\":null},\"E0620\":{\"description\":\"\\nA cast to an unsized type was attempted.\\n\\nErroneous code example:\\n\\n```compile_fail,E0620\\nlet x = &[1_usize, 2] as [usize]; // error: cast to unsized type: `&[usize; 2]`\\n                                  //        as `[usize]`\\n```\\n\\nIn Rust, some types don't have a known size at compile-time. For example, in a\\nslice type like `[u32]`, the number of elements is not known at compile-time and\\nhence the overall size cannot be computed. As a result, such types can only be\\nmanipulated through a reference (e.g., `&T` or `&mut T`) or other pointer-type\\n(e.g., `Box` or `Rc`). Try casting to a reference instead:\\n\\n```\\nlet x = &[1_usize, 2] as &[usize]; // ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0622\":{\"description\":\"\\nAn intrinsic was declared without being a function.\\n\\nErroneous code example:\\n\\n```compile_fail,E0622\\n#![feature(intrinsics)]\\nextern \\\"rust-intrinsic\\\" {\\n    pub static breakpoint : unsafe extern \\\"rust-intrinsic\\\" fn();\\n    // error: intrinsic must be a function\\n}\\n\\nfn main() { unsafe { breakpoint(); } }\\n```\\n\\nAn intrinsic is a function available for use in a given programming language\\nwhose implementation is handled specially by the compiler. In order to fix this\\nerror, just declare a function.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0624\":{\"description\":\"\\nA private item was used outside of its scope.\\n\\nErroneous code example:\\n\\n```compile_fail,E0624\\nmod inner {\\n    pub struct Foo;\\n\\n    impl Foo {\\n        fn method(&self) {}\\n    }\\n}\\n\\nlet foo = inner::Foo;\\nfoo.method(); // error: method `method` is private\\n```\\n\\nTwo possibilities are available to solve this issue:\\n\\n1. Only use the item in the scope it has been defined:\\n\\n```\\nmod inner {\\n    pub struct Foo;\\n\\n    impl Foo {\\n        fn method(&self) {}\\n    }\\n\\n    pub fn call_method(foo: &Foo) { // We create a public function.\\n        foo.method(); // Which calls the item.\\n    }\\n}\\n\\nlet foo = inner::Foo;\\ninner::call_method(&foo); // And since the function is public, we can call the\\n                          // method through it.\\n```\\n\\n2. Make the item public:\\n\\n```\\nmod inner {\\n    pub struct Foo;\\n\\n    impl Foo {\\n        pub fn method(&self) {} // It's now public.\\n    }\\n}\\n\\nlet foo = inner::Foo;\\nfoo.method(); // Ok!\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0627\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0632\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0638\":{\"description\":\"\\nThis error indicates that the struct or enum must be matched non-exhaustively\\nas it has been marked as `non_exhaustive`.\\n\\nWhen applied within a crate, downstream users of the crate will need to use the\\n`_` pattern when matching enums and use the `..` pattern when matching structs.\\n\\nFor example, in the below example, since the enum is marked as\\n`non_exhaustive`, it is required that downstream crates match non-exhaustively\\non it.\\n\\n```rust,ignore (pseudo-Rust)\\nuse std::error::Error as StdError;\\n\\n#[non_exhaustive] pub enum Error {\\n   Message(String),\\n   Other,\\n}\\n\\nimpl StdError for Error {\\n   fn description(&self) -> &str {\\n        // This will not error, despite being marked as non_exhaustive, as this\\n        // enum is defined within the current crate, it can be matched\\n        // exhaustively.\\n        match *self {\\n           Message(ref s) => s,\\n           Other => \\\"other or unknown error\\\",\\n        }\\n   }\\n}\\n```\\n\\nAn example of matching non-exhaustively on the above enum is provided below:\\n\\n```rust,ignore (pseudo-Rust)\\nuse mycrate::Error;\\n\\n// This will not error as the non_exhaustive Error enum has been matched with a\\n// wildcard.\\nmatch error {\\n   Message(ref s) => ...,\\n   Other => ...,\\n   _ => ...,\\n}\\n```\\n\\nSimilarly, for structs, match with `..` to avoid this error.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0639\":{\"description\":\"\\nThis error indicates that the struct or enum cannot be instantiated from\\noutside of the defining crate as it has been marked as `non_exhaustive` and as\\nsuch more fields/variants may be added in future that could cause adverse side\\neffects for this code.\\n\\nIt is recommended that you look for a `new` function or equivalent in the\\ncrate's documentation.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0640\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0641\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0643\":{\"description\":\"\\nThis error indicates that there is a mismatch between generic parameters and\\nimpl Trait parameters in a trait declaration versus its impl.\\n\\n```compile_fail,E0643\\ntrait Foo {\\n    fn foo(&self, _: &impl Iterator);\\n}\\nimpl Foo for () {\\n    fn foo<U: Iterator>(&self, _: &U) { } // error method `foo` has incompatible\\n                                          // signature for trait\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0645\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0689\":{\"description\":\"\\nThis error indicates that the numeric value for the method being passed exists\\nbut the type of the numeric value or binding could not be identified.\\n\\nThe error happens on numeric literals:\\n\\n```compile_fail,E0689\\n2.0.powi(2);\\n```\\n\\nand on numeric bindings without an identified concrete type:\\n\\n```compile_fail,E0689\\nlet x = 2.0;\\nx.powi(2);  // same error as above\\n```\\n\\nBecause of this, you must give the numeric literal or binding a type:\\n\\n```\\nlet _ = 2.0_f32.powi(2);\\nlet x: f32 = 2.0;\\nlet _ = x.powi(2);\\nlet _ = (2.0 as f32).powi(2);\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0690\":{\"description\":\"\\nA struct with the representation hint `repr(transparent)` had zero or more than\\non fields that were not guaranteed to be zero-sized.\\n\\nErroneous code example:\\n\\n```compile_fail,E0690\\n#![feature(repr_transparent)]\\n\\n#[repr(transparent)]\\nstruct LengthWithUnit<U> { // error: transparent struct needs exactly one\\n    value: f32,            //        non-zero-sized field, but has 2\\n    unit: U,\\n}\\n```\\n\\nBecause transparent structs are represented exactly like one of their fields at\\nrun time, said field must be uniquely determined. If there is no field, or if\\nthere are multiple fields, it is not clear how the struct should be represented.\\nNote that fields of zero-typed types (e.g., `PhantomData`) can also exist\\nalongside the field that contains the actual data, they do not count for this\\nerror. When generic types are involved (as in the above example), an error is\\nreported because the type parameter could be non-zero-sized.\\n\\nTo combine `repr(transparent)` with type parameters, `PhantomData` may be\\nuseful:\\n\\n```\\n#![feature(repr_transparent)]\\n\\nuse std::marker::PhantomData;\\n\\n#[repr(transparent)]\\nstruct LengthWithUnit<U> {\\n    value: f32,\\n    unit: PhantomData<U>,\\n}\\n```\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0691\":{\"description\":\"\\nA struct with the `repr(transparent)` representation hint contains a zero-sized\\nfield that requires non-trivial alignment.\\n\\nErroneous code example:\\n\\n```compile_fail,E0691\\n#![feature(repr_transparent, repr_align, attr_literals)]\\n\\n#[repr(align(32))]\\nstruct ForceAlign32;\\n\\n#[repr(transparent)]\\nstruct Wrapper(f32, ForceAlign32); // error: zero-sized field in transparent\\n                                   //        struct has alignment larger than 1\\n```\\n\\nA transparent struct is supposed to be represented exactly like the piece of\\ndata it contains. Zero-sized fields with different alignment requirements\\npotentially conflict with this property. In the example above, `Wrapper` would\\nhave to be aligned to 32 bytes even though `f32` has a smaller alignment\\nrequirement.\\n\\nConsider removing the over-aligned zero-sized field:\\n\\n```\\n#![feature(repr_transparent)]\\n\\n#[repr(transparent)]\\nstruct Wrapper(f32);\\n```\\n\\nAlternatively, `PhantomData<T>` has alignment 1 for all `T`, so you can use it\\nif you need to keep the field for some reason:\\n\\n```\\n#![feature(repr_transparent, repr_align, attr_literals)]\\n\\nuse std::marker::PhantomData;\\n\\n#[repr(align(32))]\\nstruct ForceAlign32;\\n\\n#[repr(transparent)]\\nstruct Wrapper(f32, PhantomData<ForceAlign32>);\\n```\\n\\nNote that empty arrays `[T; 0]` have the same alignment requirement as the\\nelement type `T`. Also note that the error is conservatively reported even when\\nthe alignment of the zero-sized type is less than or equal to the data field's\\nalignment.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}},\"E0907\":{\"description\":null,\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"struct_span_err\"]},\"line\":4}},\"E0908\":{\"description\":\"\\nA method was called on a raw pointer whose inner type wasn't completely known.\\n\\nFor example, you may have done something like:\\n\\n```compile_fail\\n# #![deny(warnings)]\\nlet foo = &1;\\nlet bar = foo as *const _;\\nif bar.is_null() {\\n    // ...\\n}\\n```\\n\\nHere, the type of `bar` isn't known; it could be a pointer to anything. Instead,\\nspecify a type for the pointer (preferably something that makes sense for the\\nthing you're pointing to):\\n\\n```\\nlet foo = &1;\\nlet bar = foo as *const i32;\\nif bar.is_null() {\\n    // ...\\n}\\n```\\n\\nEven though `is_null()` exists as a method on any raw pointer, Rust shows this\\nerror because  Rust allows for `self` to have arbitrary types (behind the\\narbitrary_self_types feature flag).\\n\\nThis means that someone can specify such a function:\\n\\n```ignore (cannot-doctest-feature-doesnt-exist-yet)\\nimpl Foo {\\n    fn is_null(self: *const Self) -> bool {\\n        // do something else\\n    }\\n}\\n```\\n\\nand now when you call `.is_null()` on a raw pointer to `Foo`, there's ambiguity.\\n\\nGiven that we don't know what type the pointer is, and there's potential\\nambiguity for some types, we disallow calling methods on raw pointers when\\nthe type is unknown.\\n\",\"use_site\":{\"filename\":{\"variant\":\"Macros\",\"fields\":[\"span_err\"]},\"line\":4}}}\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-ar:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-dlltool:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-lib:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-ranlib:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/CMakeCache.txt:\n  785  LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY:BOOL=ON\n  786  \n  787: //Build LLVM with LTO. May be specified as Thin or Full to use\n  788  // a particular kind of LTO\n  789  LLVM_ENABLE_LTO:STRING=OFF\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-ar:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-dlltool:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-lib:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-ranlib:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/opt:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/build/lib/cmake/llvm/HandleLLVMOptions.cmake:\n   18  endif()\n   19  \n   20: set(LLVM_ENABLE_LTO OFF CACHE STRING \"Build LLVM with LTO. May be specified as Thin or Full to use a particular kind of LTO\")\n   21  string(TOUPPER \"${LLVM_ENABLE_LTO}\" uppercase_LLVM_ENABLE_LTO)\n   22  \n   ..\n   37    \"Define the maximum number of concurrent link jobs.\")\n   38  if(CMAKE_MAKE_PROGRAM MATCHES \"ninja\")\n   39:   if(NOT LLVM_PARALLEL_LINK_JOBS AND uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n   40      message(STATUS \"ThinLTO provides its own parallel linking - limiting parallel link jobs to 2.\")\n   41      set(LLVM_PARALLEL_LINK_JOBS \"2\")\n   ..\n  794    message(FATAL_ERROR \"When compiling for Windows, LLVM_ENABLE_LTO requires using lld as the linker (point CMAKE_LINKER at lld-link.exe)\")\n  795  endif()\n  796: if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm-c/lto.h:\n   96  typedef struct LLVMOpaqueLTOCodeGenerator *lto_code_gen_t;\n   97  \n   98: /** opaque reference to a thin code generator */\n   99  typedef struct LLVMOpaqueThinLTOCodeGenerator *thinlto_code_gen_t;\n  100  \n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Analysis/LazyCallGraph.h:\n  993    ///\n  994    /// These functions, because they are known to LLVM, can have calls\n  995:   /// introduced out of thin air from arbitrary IR.\n  996    ArrayRef<Function *> getLibFunctions() const {\n  997      return LibFunctions.getArrayRef();\n  ...\n 1137    /// Defined functions that are also known library functions which the\n 1138    /// optimizer can reason about and therefore might introduce calls to out of\n 1139:   /// thin air.\n 1140    SmallSetVector<Function *, 4> LibFunctions;\n 1141  \n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Bitcode/BitcodeWriter.h:\n   85      /// is used as the hash instead of computing from the generated bitcode.\n   86      /// Can be used to produce the same module hash for a minimized bitcode\n   87:     /// used just for the thin link as in the regular full bitcode that will\n   88      /// be used in the backend.\n   89      void writeModule(const Module *M, bool ShouldPreserveUseListOrder = false,\n   ..\n   91                       bool GenerateHash = false, ModuleHash *ModHash = nullptr);\n   92  \n   93:     /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n   94:     /// file) to the buffer specified at construction time. The thin link\n   95:     /// bitcode file is used for thin link, and it only contains the necessary\n   96:     /// information for thin link.\n   97      ///\n   98      /// ModHash is for use in ThinLTO incremental build, generated while the\n   ..\n  125    /// is used as the hash instead of computing from the generated bitcode.\n  126    /// Can be used to produce the same module hash for a minimized bitcode\n  127:   /// used just for the thin link as in the regular full bitcode that will\n  128    /// be used in the backend.\n  129    void WriteBitcodeToFile(const Module *M, raw_ostream &Out,\n  ...\n  133                            ModuleHash *ModHash = nullptr);\n  134  \n  135:   /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n  136    /// file) to the given raw output stream, where it will be written in a new\n  137:   /// bitcode block. The thin link bitcode file is used for thin link, and it\n  138:   /// only contains the necessary information for thin link.\n  139    ///\n  140    /// ModHash is for use in ThinLTO incremental build, generated while the IR\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/LTO/LTO.h:\n  190      NativeObjectCache;\n  191  \n  192: /// A ThinBackend defines what happens after the thin-link phase during ThinLTO.\n  193  /// The details of this type definition aren't important; clients can only\n  194  /// create a ThinBackend using one of the create*ThinBackend() functions below.\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:\n  245    /**\n  246     * Produce the combined summary index from all the bitcode files:\n  247:    * \"thin-link\".\n  248     */\n  249    std::unique_ptr<ModuleSummaryIndex> linkCombinedIndex();\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Object/ArchiveWriter.h:\n   41  Error writeArchive(StringRef ArcName, ArrayRef<NewArchiveMember> NewMembers,\n   42                     bool WriteSymtab, object::Archive::Kind Kind,\n   43:                    bool Deterministic, bool Thin,\n   44                     std::unique_ptr<MemoryBuffer> OldArchiveBuf = nullptr);\n   45  }\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/IPO/PassManagerBuilder.h:\n  139  \n  140    /// The module summary index to use for importing information to the\n  141:   /// thin LTO backends, for example for the CFI and devirtualization type\n  142    /// tests.\n  143    const ModuleSummaryIndex *ImportSummary = nullptr;\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/IPO/ThinLTOBitcodeWriter.h:\n    9  //\n   10  // This pass prepares a module containing type metadata for ThinLTO by splitting\n   11: // it into regular and thin LTO parts if possible, and writing both parts to\n   12  // a multi-module bitcode file. Modules that do not contain type metadata are\n   13  // written unmodified as a single module.\n   ..\n   29  \n   30  public:\n   31:   // Writes bitcode to OS. Also write thin link file to ThinLinkOS, if\n   32    // it's not nullptr.\n   33    ThinLTOBitcodeWriterPass(raw_ostream &OS, raw_ostream *ThinLinkOS)\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:\n   72    /// Process globals so that they can be used in ThinLTO. This includes\n   73    /// promoting local variables so that they can be reference externally by\n   74:   /// thin lto imported globals and converting strong external globals to\n   75    /// available_externally.\n   76    void processGlobalsForThinLTO();\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/lib/cmake/llvm/HandleLLVMOptions.cmake:\n   18  endif()\n   19  \n   20: set(LLVM_ENABLE_LTO OFF CACHE STRING \"Build LLVM with LTO. May be specified as Thin or Full to use a particular kind of LTO\")\n   21  string(TOUPPER \"${LLVM_ENABLE_LTO}\" uppercase_LLVM_ENABLE_LTO)\n   22  \n   ..\n   37    \"Define the maximum number of concurrent link jobs.\")\n   38  if(CMAKE_MAKE_PROGRAM MATCHES \"ninja\")\n   39:   if(NOT LLVM_PARALLEL_LINK_JOBS AND uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n   40      message(STATUS \"ThinLTO provides its own parallel linking - limiting parallel link jobs to 2.\")\n   41      set(LLVM_PARALLEL_LINK_JOBS \"2\")\n   ..\n  794    message(FATAL_ERROR \"When compiling for Windows, LLVM_ENABLE_LTO requires using lld as the linker (point CMAKE_LINKER at lld-link.exe)\")\n  795  endif()\n  796: if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/native/libbacktrace/libtool:\n 3400  \t    for darwin_arch in  $darwin_arches ; do\n 3401  \t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3402: \t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n 3403  \t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3404  \t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n ....\n 3406  \t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n 3407  \t    done # $darwin_arches\n 3408:             ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n 3409  \t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n 3410  \t    darwin_file=\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/build/backtrace-sys-8b35e3c2ea935fab/out/libtool:\n 3400  \t    for darwin_arch in  $darwin_arches ; do\n 3401  \t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3402: \t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n 3403  \t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3404  \t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n ....\n 3406  \t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n 3407  \t    done # $darwin_arches\n 3408:             ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n 3409  \t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n 3410  \t    darwin_file=\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/bin/rustdoc:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/lld:\n    <binary>\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/backtrace-sys-340c7157c7761734/out/libtool:\n 3400  \t    for darwin_arch in  $darwin_arches ; do\n 3401  \t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3402: \t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n 3403  \t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 3404  \t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n ....\n 3406  \t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n 3407  \t    done # $darwin_arches\n 3408:             ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n 3409  \t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n 3410  \t    darwin_file=\n\n/home/mw/0-rust/src/bootstrap/configure.py:\n  176              print('\\t{:30} {}'.format('--enable-{}'.format(option.name), option.desc))\n  177      print('')\n  178:     print('This configure script is a thin configuration shim over the true')\n  179      print('configuration system, `config.toml`. You can explore the comments')\n  180      print('in `config.toml.example` next to this configure script to see')\n\n/home/mw/0-rust/src/bootstrap/mk/Makefile.in:\n   32  \t$(Q)echo 'Welcome to the rustbuild build system!'\n   33  \t$(Q)echo\n   34: \t$(Q)echo This makefile is a thin veneer over the ./x.py script located\n   35  \t$(Q)echo in this directory. To get the full power of the build system\n   36  \t$(Q)echo you can run x.py directly.\n\n/home/mw/0-rust/src/doc/book/first-edition/src/trait-objects.md:\n   93  \n   94  However, the common case is that it is more efficient to use static dispatch,\n   95: and one can always have a thin statically-dispatched wrapper function that does\n   96  a dynamic dispatch, but not vice versa, meaning static calls are more flexible.\n   97  The standard library tries to be statically dispatched where possible for this\n\n/home/mw/0-rust/src/doc/book/second-edition/nostarch/chapter19.md:\n 1613  new type in a tuple struct (we covered tuple structs in the “Tuple Structs\n 1614  without Named Fields to Create Different Types” section of Chapter 5). The\n 1615: tuple struct will have one field and will be a thin wrapper around the type we\n 1616  want to implement a trait for. Then the wrapper type is local to our crate, and\n 1617  we can implement the trait on the wrapper. “Newtype” is a term originating from\n\n/home/mw/0-rust/src/doc/book/second-edition/src/ch19-03-advanced-traits.md:\n  642  new type in a tuple struct (we covered tuple structs in the “Tuple Structs\n  643  without Named Fields to Create Different Types” section of Chapter 5). The\n  644: tuple struct will have one field and will be a thin wrapper around the type we\n  645  want to implement a trait for. Then the wrapper type is local to our crate, and\n  646  we can implement the trait on the wrapper. “Newtype” is a term originating from\n\n/home/mw/0-rust/src/doc/nomicon/src/exotic-sizes.md:\n   65  \n   66  One of the most extreme example's of this is Sets and Maps. Given a\n   67: `Map<Key, Value>`, it is common to implement a `Set<Key>` as just a thin wrapper\n   68  around `Map<Key, UselessJunk>`. In many languages, this would necessitate\n   69  allocating space for UselessJunk and doing work to store and load UselessJunk\n\n/home/mw/0-rust/src/doc/nomicon/src/unbounded-lifetimes.md:\n    1  # Unbounded Lifetimes\n    2  \n    3: Unsafe code can often end up producing references or lifetimes out of thin air.\n    4  Such lifetimes come into the world as *unbounded*. The most common source of this\n    5  is dereferencing a raw pointer, which produces a reference with an unbounded lifetime.\n\n/home/mw/0-rust/src/doc/rust.css:\n  181  }\n  182  a:focus {\n  183: \toutline: thin dotted #333;\n  184  \toutline: 5px auto -webkit-focus-ring-color;\n  185  \toutline-offset: -2px;\n\n/home/mw/0-rust/src/liballoc/tests/str.rs:\n  541      assert!(\"\".chars().all(|c| c.is_whitespace()));\n  542      assert!(\" \".chars().all(|c| c.is_whitespace()));\n  543:     assert!(\"\\u{2009}\".chars().all(|c| c.is_whitespace())); // Thin space\n  544      assert!(\"  \\n\\t   \".chars().all(|c| c.is_whitespace()));\n  545      assert!(!\"   _   \".chars().all(|c| c.is_whitespace()));\n\n/home/mw/0-rust/src/libbacktrace/ltmain.sh:\n 2907  \t    for darwin_arch in  $darwin_arches ; do\n 2908  \t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 2909: \t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n 2910  \t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n 2911  \t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n ....\n 2913  \t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n 2914  \t    done # $darwin_arches\n 2915:             ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n 2916  \t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n 2917  \t    darwin_file=\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/lib/fuzzer/FuzzerInterface.h:\n   10  //===----------------------------------------------------------------------===//\n   11  \n   12: // NOTE: the libFuzzer interface is thin and in the majority of cases\n   13  // you should not include this file into your target. In 95% of cases\n   14  // all you need is to define the following function in your file:\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/lib/fuzzer/afl/afl_driver.cpp:\n   93    }\n   94  \n   95: // libFuzzer interface is thin, so we don't include any libFuzzer headers.\n   96  extern \"C\" {\n   97  int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size);\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/asan/TestCases/Darwin/haswell-symbolication.cc:\n    2  // RUN: %clangxx_asan -arch x86_64 -arch x86_64h -g %t.o.fat -o %t.fat\n    3  \n    4: // RUN: lipo %t.fat -thin    x86_64  -output %t.thin.x86_64  && lipo %t.thin.x86_64  -info | FileCheck %s --check-prefix=CHECK-LIPO-THIN-X86_64\n    5: // RUN: lipo %t.fat -thin    x86_64h -output %t.thin.x86_64h && lipo %t.thin.x86_64h -info | FileCheck %s --check-prefix=CHECK-LIPO-THIN-X86_64H\n    6  // RUN: lipo %t.fat -extract x86_64  -output %t.fat.x86_64   && lipo %t.fat.x86_64   -info | FileCheck %s --check-prefix=CHECK-LIPO-FAT-X86_64\n    7  // RUN: lipo %t.fat -extract x86_64h -output %t.fat.x86_64h  && lipo %t.fat.x86_64h  -info | FileCheck %s --check-prefix=CHECK-LIPO-FAT-X86_64H\n    8  \n    9: // CHECK-LIPO-THIN-X86_64:  Non-fat file: {{.*}} is architecture: x86_64\n   10: // CHECK-LIPO-THIN-X86_64H: Non-fat file: {{.*}} is architecture: x86_64h\n   11  // CHECK-LIPO-FAT-X86_64:   Architectures in the fat file: {{.*}} are: x86_64\n   12  // CHECK-LIPO-FAT-X86_64H:  Architectures in the fat file: {{.*}} are: x86_64h\n   13  \n   14: // RUN: dsymutil %t.thin.x86_64\n   15: // RUN: dsymutil %t.thin.x86_64h\n   16  // RUN: dsymutil %t.fat.x86_64\n   17  // RUN: dsymutil %t.fat.x86_64h\n   18  \n   19  // Check LLVM symbolizer\n   20: // RUN: %env_asan_opts=external_symbolizer_path=$(which llvm-symbolizer) not %run %t.thin.x86_64  2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   21: // RUN: %env_asan_opts=external_symbolizer_path=$(which llvm-symbolizer) not %run %t.thin.x86_64h 2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   22  // RUN: %env_asan_opts=external_symbolizer_path=$(which llvm-symbolizer) not %run %t.fat.x86_64   2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   23  // RUN: %env_asan_opts=external_symbolizer_path=$(which llvm-symbolizer) not %run %t.fat.x86_64h  2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   24  \n   25  // Check atos\n   26: // RUN: %env_asan_opts=external_symbolizer_path=$(which atos) not %run %t.thin.x86_64  2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   27: // RUN: %env_asan_opts=external_symbolizer_path=$(which atos) not %run %t.thin.x86_64h 2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   28  // RUN: %env_asan_opts=external_symbolizer_path=$(which atos) not %run %t.fat.x86_64   2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   29  // RUN: %env_asan_opts=external_symbolizer_path=$(which atos) not %run %t.fat.x86_64h  2>&1 | FileCheck %s --check-prefixes CHECK,CHECK-LI,CHECK-DATA\n   30  \n   31  // Check dladdr\n   32: // RUN: %env_asan_opts=external_symbolizer_path= not %run %t.thin.x86_64  2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-NOLI,CHECK-DATA\n   33: // RUN: %env_asan_opts=external_symbolizer_path= not %run %t.thin.x86_64h 2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-NOLI,CHECK-DATA\n   34  // RUN: %env_asan_opts=external_symbolizer_path= not %run %t.fat.x86_64   2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-NOLI,CHECK-DATA\n   35  // RUN: %env_asan_opts=external_symbolizer_path= not %run %t.fat.x86_64h  2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-NOLI,CHECK-DATA\n   36  \n   37  // Check asan_symbolize.py with llvm-symbolizer\n   38: // RUN: %env_asan_opts=symbolize=0 not %run %t.thin.x86_64  2>&1 | %asan_symbolize | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   39: // RUN: %env_asan_opts=symbolize=0 not %run %t.thin.x86_64h 2>&1 | %asan_symbolize | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   40  // RUN: %env_asan_opts=symbolize=0 not %run %t.fat.x86_64   2>&1 | %asan_symbolize | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   41  // RUN: %env_asan_opts=symbolize=0 not %run %t.fat.x86_64h  2>&1 | %asan_symbolize | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   42  \n   43  // Check asan_symbolize.py with atos\n   44: // RUN: %env_asan_opts=symbolize=0 not %run %t.thin.x86_64  2>&1 | %asan_symbolize --force-system-symbolizer | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   45: // RUN: %env_asan_opts=symbolize=0 not %run %t.thin.x86_64h 2>&1 | %asan_symbolize --force-system-symbolizer | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   46  // RUN: %env_asan_opts=symbolize=0 not %run %t.fat.x86_64   2>&1 | %asan_symbolize --force-system-symbolizer | FileCheck %s --check-prefixes CHECK,CHECK-LI\n   47  // RUN: %env_asan_opts=symbolize=0 not %run %t.fat.x86_64h  2>&1 | %asan_symbolize --force-system-symbolizer | FileCheck %s --check-prefixes CHECK,CHECK-LI\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/cfi/create-derivers.test:\n    1  REQUIRES: asserts\n    2  \n    3: %% Explicit -flto to override possible -flto=thin in %clangxx_cfi\n    4  RUN: %clangxx_cfi -flto -c -o %t1.o %S/simple-fail.cpp\n    5  RUN: opt -lowertypetests -debug-only=lowertypetests -o /dev/null %t1.o 2>&1 | FileCheck --check-prefix=B0 %s\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/cfi/icall/wrong-signature-mixed-lto.c:\n    2  // calling module has an incorrect declaration. Test a mix of lto types.\n    3  //\n    4: // -flto below overrides -flto=thin in %clang_cfi\n    5  // RUN: %clang_cfi %s -DMODULE_A -c -o %t1_a.o\n    6  // RUN: %clang_cfi %s -DMODULE_B -c -o %t1_b.o -flto\n\n/home/mw/0-rust/src/libcompiler_builtins/compiler-rt/test/lit.common.cfg:\n  263    if config.use_thinlto:\n  264      config.available_features.add('thinlto')\n  265:     config.lto_flags += [\"-flto=thin\"]\n  266    else:\n  267      config.lto_flags += [\"-flto\"]\n\n/home/mw/0-rust/src/libcore/hash/mod.rs:\n  670          fn hash<H: Hasher>(&self, state: &mut H) {\n  671              if mem::size_of::<Self>() == mem::size_of::<usize>() {\n  672:                 // Thin pointer\n  673                  state.write_usize(*self as *const () as usize);\n  674              } else {\n  ...\n  687          fn hash<H: Hasher>(&self, state: &mut H) {\n  688              if mem::size_of::<Self>() == mem::size_of::<usize>() {\n  689:                 // Thin pointer\n  690                  state.write_usize(*self as *const () as usize);\n  691              } else {\n\n/home/mw/0-rust/src/libcore/ops/unsize.rs:\n   18  ///\n   19  /// For builtin pointer types, pointers to `T` will coerce to pointers to `U` if `T: Unsize<U>`\n   20: /// by converting from a thin pointer to a fat pointer.\n   21  ///\n   22  /// For custom types, the coercion here works by coercing `Foo<T>` to `Foo<U>`\n\n/home/mw/0-rust/src/libcore/ptr.rs:\n  528      #[inline]\n  529      pub fn is_null(self) -> bool {\n  530:         // Compare via a cast to a thin pointer, so fat pointers are only\n  531          // considering their \"data\" part for null-ness.\n  532          (self as *const u8) == null()\n  ...\n 1264      #[inline]\n 1265      pub fn is_null(self) -> bool {\n 1266:         // Compare via a cast to a thin pointer, so fat pointers are only\n 1267          // considering their \"data\" part for null-ness.\n 1268          (self as *mut u8) == null_mut()\n\n/home/mw/0-rust/src/libcore/slice/mod.rs:\n 2673  /// use std::slice;\n 2674  ///\n 2675: /// // manifest a slice out of thin air!\n 2676  /// let ptr = 0x1234 as *const usize;\n 2677  /// let amt = 10;\n\n/home/mw/0-rust/src/librustc/dep_graph/graph.rs:\n  925              // If this is an input node, we expect that it either has no\n  926              // dependencies, or that it just depends on DepKind::CrateMetadata\n  927:             // or DepKind::Krate. This happens for some \"thin wrapper queries\"\n  928              // like `crate_disambiguator` which sometimes have zero deps (for\n  929              // when called for LOCAL_CRATE) or they depend on a CrateMetadata\n\n/home/mw/0-rust/src/librustc/mir/mod.rs:\n 1626      UnsafeFnPointer,\n 1627  \n 1628:     /// \"Unsize\" -- convert a thin-or-fat pointer to a fat pointer.\n 1629      /// trans must figure out the details once full monomorphization\n 1630      /// is known. For example, this could be used to cast from a\n\n/home/mw/0-rust/src/librustc/session/config.rs:\n   84  \n   85      /// Do a full crate graph LTO with ThinLTO\n   86:     Thin,\n   87  \n   88      /// Do a local graph LTO with ThinLTO (only relevant for multiple codegen\n   ..\n  771              Some(\"`string` or `string=string`\");\n  772          pub const parse_lto: Option<&'static str> =\n  773:             Some(\"one of `thin`, `fat`, or omitted\");\n  774          pub const parse_edition: Option<&'static str> =\n  775              Some(\"one of: `2015`, `2018`\");\n  ...\n  977              *slot = match v {\n  978                  None => Lto::Yes,\n  979:                 Some(\"thin\") => Lto::Thin,\n  980                  Some(\"fat\") => Lto::Fat,\n  981                  Some(_) => return false,\n\n/home/mw/0-rust/src/librustc/session/mod.rs:\n  583  \n  584          // If `-Z thinlto` specified process that, but note that this is mostly\n  585:         // a deprecated option now that `-C lto=thin` exists.\n  586          if let Some(enabled) = self.opts.debugging_opts.thinlto {\n  587              if enabled {\n\n/home/mw/0-rust/src/librustc/ty/adjustment.rs:\n   22  /// Here are some common scenarios:\n   23  ///\n   24: /// 1. The simplest cases are where a pointer is not adjusted fat vs thin.\n   25  ///    Here the pointer will be dereferenced N times (where a dereference can\n   26  ///    happen to raw or borrowed pointers or any smart pointer which implements\n   ..\n   30  ///    `false`.\n   31  ///\n   32: /// 2. A thin-to-fat coercion involves unsizing the underlying data. We start\n   33: ///    with a thin pointer, deref a number of times, unsize the underlying data,\n   34  ///    then autoref. The 'unsize' phase may change a fixed length array to a\n   35  ///    dynamically sized one, a concrete object to a trait object, or statically\n   ..\n   85  \n   86      /// Unsize a pointer/reference value, e.g. `&[T; n]` to\n   87:     /// `&[T]`. Note that the source could be a thin or fat pointer.\n   88:     /// This will do things like convert thin pointers to fat\n   89:     /// pointers, or convert structs containing thin pointers to\n   90      /// structs containing fat pointers, or convert between fat\n   91      /// pointers.  We don't store the details of how the transform is\n\n/home/mw/0-rust/src/librustc/ty/layout.rs:\n 2218                  assert!(i < 2);\n 2219  \n 2220:                 // Reuse the fat *T type as its own thin pointer data field.\n 2221                  // This provides information about e.g. DST struct pointees\n 2222                  // (which may have no non-DST form), and will work as long\n\n/home/mw/0-rust/src/librustc_mir/interpret/eval_context.rs:\n 1464                  // unsizing of generic struct with pointer fields\n 1465                  // Example: `Arc<T>` -> `Arc<Trait>`\n 1466:                 // here we need to increase the size of every &T thin ptr field to a fat ptr\n 1467                  for i in 0..src_layout.fields.count() {\n 1468                      let (dst_f_place, dst_field) =\n\n/home/mw/0-rust/src/librustc_mir/monomorphize/collector.rs:\n  807  /// ```\n  808  ///\n  809: /// In this case, if `T` is sized, `&ComplexStruct<T>` is a thin pointer. If `T`\n  810  /// is unsized, `&SomeStruct` is a fat pointer, and the vtable it points to is\n  811  /// for the pair of `T` (which is a trait) and the concrete type that `T` was\n\n/home/mw/0-rust/src/librustc_passes/rvalue_promotion.rs:\n  482          // Kind of hacky, but we allow Unsafe coercions in constants.\n  483          // These occur when we convert a &T or *T to a *U, as well as\n  484:         // when making a thin pointer (e.g., `*T`) into a fat pointer\n  485          // (e.g., `*Trait`).\n  486          match loan_cause {\n\n/home/mw/0-rust/src/librustc_trans/abi.rs:\n  750          };\n  751  \n  752:         // Handle safe Rust thin and fat pointers.\n  753          let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,\n  754                                        scalar: &layout::Scalar,\n\n/home/mw/0-rust/src/librustc_trans/back/command.rs:\n    9  // except according to those terms.\n   10  \n   11: //! A thin wrapper around `Command` in the standard library which allows us to\n   12  //! read the arguments that are built up.\n   13  \n\n/home/mw/0-rust/src/librustc_trans/back/link.rs:\n 1590      match sess.lto() {\n 1591          Lto::Yes |\n 1592:         Lto::Thin |\n 1593          Lto::Fat => true,\n 1594          Lto::No |\n\n/home/mw/0-rust/src/librustc_trans/back/lto.rs:\n   49      },\n   50  \n   51:     Thin(ThinModule),\n   52  }\n   53  \n   ..\n   56          match *self {\n   57              LtoModuleTranslation::Fat { .. } => \"everything\",\n   58:             LtoModuleTranslation::Thin(ref m) => m.name(),\n   59          }\n   60      }\n   ..\n   81                  Ok(trans)\n   82              }\n   83:             LtoModuleTranslation::Thin(ref mut thin) => thin.optimize(cgcx, timeline),\n   84          }\n   85      }\n   ..\n   91              // Only one module with fat LTO, so the cost doesn't matter.\n   92              LtoModuleTranslation::Fat { .. } => 0,\n   93:             LtoModuleTranslation::Thin(ref m) => m.cost(),\n   94          }\n   95      }\n   ..\n  107  \n  108          // We're doing LTO for the entire crate graph\n  109:         Lto::Yes | Lto::Fat | Lto::Thin => {\n  110              symbol_export::crates_export_threshold(&cgcx.crate_types)\n  111          }\n  ...\n  137      //\n  138      // We save off all the bytecode and LLVM module ids for later processing\n  139:     // with either fat or thin LTO\n  140      let mut upstream_modules = Vec::new();\n  141      if cgcx.lto != Lto::ThinLocal {\n  ...\n  192              fat_lto(cgcx, &diag_handler, modules, upstream_modules, &arr, timeline)\n  193          }\n  194:         Lto::Thin |\n  195          Lto::ThinLocal => {\n  196              thin_lto(&diag_handler, modules, upstream_modules, &arr, timeline)\n  ...\n  317  }\n  318  \n  319: /// Prepare \"thin\" LTO to get run on these modules.\n  320  ///\n  321  /// The general structure of ThinLTO is quite different from the structure of\n  322  /// \"fat\" LTO above. With \"fat\" LTO all LLVM modules in question are merged into\n  323  /// one giant LLVM module, and then we run more optimization passes over this\n  324: /// big module after internalizing most symbols. Thin LTO, on the other hand,\n  325  /// avoid this large bottleneck through more targeted optimization.\n  326  ///\n  327: /// At a high level Thin LTO looks like:\n  328  ///\n  329  ///     1. Prepare a \"summary\" of each LLVM module in question which describes\n  ...\n  334  ///        perform local transformations on the module, for example inlining\n  335  ///        small functions from other modules.\n  336: ///     5. Run thin-specific optimization passes over each module, and then code\n  337  ///        generate everything at the end.\n  338  ///\n  ...\n  355  {\n  356      unsafe {\n  357:         info!(\"going for that thin, thin LTO\");\n  358  \n  359          let mut thin_buffers = Vec::new();\n  ...\n  422          );\n  423          if data.is_null() {\n  424:             let msg = format!(\"failed to prepare thin LTO context\");\n  425              return Err(write::llvm_err(&diag_handler, msg))\n  426          }\n  427          let data = ThinData(data);\n  428:         info!(\"thin LTO data created\");\n  429          timeline.record(\"data\");\n  430  \n  431          // Throw our data in an `Arc` as we'll be sharing it across threads. We\n  432          // also put all memory referenced by the C++ data (buffers, ids, etc)\n  433:         // into the arc as well. After this we'll create a thin module\n  434          // translation per module in this data.\n  435          let shared = Arc::new(ThinShared {\n  ...\n  440          });\n  441          Ok((0..shared.module_names.len()).map(|i| {\n  442:             LtoModuleTranslation::Thin(ThinModule {\n  443                  shared: shared.clone(),\n  444                  idx: i,\n  ...\n  452                      llmod: ModuleRef,\n  453                      config: &ModuleConfig,\n  454:                     thin: bool) {\n  455      // Now we have one massive module inside of llmod. Time to run the\n  456      // LTO-specific optimization passes that LLVM provides.\n  ...\n  484          };\n  485          with_llvm_pmb(llmod, config, opt_level, &mut |b| {\n  486:             if thin {\n  487                  if !llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm) {\n  488                      panic!(\"this version of LLVM does not support ThinLTO\");\n  ...\n  643          );\n  644          if llmod.is_null() {\n  645:             let msg = format!(\"failed to parse bitcode for thin LTO module\");\n  646              return Err(write::llvm_err(&diag_handler, msg));\n  647          }\n  ...\n  656              kind: ModuleKind::Regular,\n  657          };\n  658:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-input\");\n  659  \n  660          // Before we do much else find the \"main\" `DICompileUnit` that we'll be\n  ...\n  674          if cgcx.no_landing_pads {\n  675              llvm::LLVMRustMarkAllFunctionsNounwind(llmod);\n  676:             cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-nounwind\");\n  677              timeline.record(\"nounwind\");\n  678          }\n  679  \n  680:         // Up next comes the per-module local analyses that we do for Thin LTO.\n  681          // Each of these functions is basically copied from the LLVM\n  682          // implementation and then tailored to suit this implementation. Ideally\n  ...\n  687          // bindings we've got (currently `PassWrapper.cpp`)\n  688          if !llvm::LLVMRustPrepareThinLTORename(self.shared.data.0, llmod) {\n  689:             let msg = format!(\"failed to prepare thin LTO module\");\n  690              return Err(write::llvm_err(&diag_handler, msg))\n  691          }\n  692:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-rename\");\n  693          timeline.record(\"rename\");\n  694          if !llvm::LLVMRustPrepareThinLTOResolveWeak(self.shared.data.0, llmod) {\n  695:             let msg = format!(\"failed to prepare thin LTO module\");\n  696              return Err(write::llvm_err(&diag_handler, msg))\n  697          }\n  698:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-resolve\");\n  699          timeline.record(\"resolve\");\n  700          if !llvm::LLVMRustPrepareThinLTOInternalize(self.shared.data.0, llmod) {\n  701:             let msg = format!(\"failed to prepare thin LTO module\");\n  702              return Err(write::llvm_err(&diag_handler, msg))\n  703          }\n  704:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-internalize\");\n  705          timeline.record(\"internalize\");\n  706          if !llvm::LLVMRustPrepareThinLTOImport(self.shared.data.0, llmod) {\n  707:             let msg = format!(\"failed to prepare thin LTO module\");\n  708              return Err(write::llvm_err(&diag_handler, msg))\n  709          }\n  710:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-import\");\n  711          timeline.record(\"import\");\n  712  \n  ...\n  741          // fixed in LLVM.\n  742          llvm::LLVMRustThinLTOPatchDICompileUnit(llmod, cu1);\n  743:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-patch\");\n  744          timeline.record(\"patch\");\n  745  \n  ...\n  747          // analysis it's time to run some optimizations! Here we use the same\n  748          // `run_pass_manager` as the \"fat\" LTO above except that we tell it to\n  749:         // populate a thin-specific pass manager, which presumably LLVM treats a\n  750          // little differently.\n  751:         info!(\"running thin lto passes over {}\", mtrans.name);\n  752          let config = cgcx.config(mtrans.kind);\n  753          run_pass_manager(cgcx, tm, llmod, config, true);\n  754:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-pm\");\n  755:         timeline.record(\"thin-done\");\n  756  \n  757          // FIXME: this is a hack around a bug in LLVM right now. Discovered in\n  ...\n  766          // lines.\n  767          llvm::LLVMRustThinLTORemoveAvailableExternally(llmod);\n  768:         cgcx.save_temp_bitcode(&mtrans, \"thin-lto-after-rm-ae\");\n  769          timeline.record(\"no-ae\");\n  770  \n\n/home/mw/0-rust/src/librustc_trans/back/write.rs:\n  691  \n  692      if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n  693:         let thin;\n  694          let old;\n  695          let data = if llvm::LLVMRustThinLTOAvailable() {\n  696:             thin = ThinBuffer::new(llmod);\n  697:             thin.data()\n  698          } else {\n  699              old = ModuleBuffer::new(llmod);\n  ...\n 1354                  // passed down to the backend, but we don't actually want to do\n 1355                  // anything about it yet until we've got a final product.\n 1356:                 Lto::Yes | Lto::Fat | Lto::Thin => {\n 1357                      cgcx.crate_types.len() != 1 ||\n 1358                          cgcx.crate_types[0] != config::CrateTypeRlib\n ....\n 1450                  Some(Arc::new(exported_symbols))\n 1451              }\n 1452:             Lto::Yes | Lto::Fat | Lto::Thin => {\n 1453                  exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n 1454                  for &cnum in tcx.crates().iter() {\n\n/home/mw/0-rust/src/librustc_trans/base.rs:\n  219  }\n  220  \n  221: /// Coerce `src` to `dst_ty`. `src_ty` must be a thin pointer.\n  222  pub fn unsize_thin_ptr<'a, 'tcx>(\n  223      bx: &Builder<'a, 'tcx>,\n\n/home/mw/0-rust/src/librustc_trans/mir/rvalue.rs:\n   57                  // it's a scalar pair, it's a fat pointer or newtype thereof.\n   58                  if dest.layout.is_llvm_scalar_pair() {\n   59:                     // into-coerce of a thin pointer to a fat pointer - just\n   60                      // use the operand path.\n   61                      let (bx, temp) = self.trans_rvalue_operand(bx, rvalue);\n   ..\n  255                                      cast.scalar_pair_element_llvm_type(bx.cx, 0));\n  256                                  OperandValue::Pair(data_cast, meta)\n  257:                             } else { // cast to thin-ptr\n  258:                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n  259                                  // pointer-cast of that pointer to desired pointer type.\n  260                                  let llcast_ty = cast.immediate_llvm_type(bx.cx);\n\n/home/mw/0-rust/src/librustc_trans/type_of.rs:\n  246          if let layout::Abi::Scalar(ref scalar) = self.abi {\n  247              // Use a different cache for scalars because pointers to DSTs\n  248:             // can be either fat or thin (data pointers of fat pointers).\n  249              if let Some(&llty) = cx.scalar_lltypes.borrow().get(&self.ty) {\n  250                  return llty;\n\n/home/mw/0-rust/src/librustc_typeck/check/cast.rs:\n   66  }\n   67  \n   68: /// The kind of pointer and associated metadata (thin, length or vtable) - we\n   69  /// only allow casts between fat pointers if their metadata have the same\n   70  /// kind.\n   ..\n   72  enum PointerKind<'tcx> {\n   73      /// No metadata attached, ie pointer to sized type or foreign type\n   74:     Thin,\n   75      /// A trait object\n   76      Vtable(Option<DefId>),\n   ..\n  100  \n  101          if self.type_is_known_to_be_sized(t, span) {\n  102:             return Ok(Some(PointerKind::Thin));\n  103          }\n  104  \n  ...\n  109              ty::TyAdt(def, substs) if def.is_struct() => {\n  110                  match def.non_enum_variant().fields.last() {\n  111:                     None => Some(PointerKind::Thin),\n  112                      Some(f) => {\n  113                          let field_ty = self.field_ty(span, f, substs);\n  ...\n  117              }\n  118              ty::TyTuple(fields) => match fields.last() {\n  119:                 None => Some(PointerKind::Thin),\n  120                  Some(f) => self.pointer_kind(f, span)?\n  121              },\n  122  \n  123:             // Pointers to foreign types are thin, despite being unsized\n  124:             ty::TyForeign(..) => Some(PointerKind::Thin),\n  125              // We should really try to normalize here.\n  126              ty::TyProjection(ref pi) => Some(PointerKind::OfProjection(pi)),\n  ...\n  150      CastToChar,\n  151      DifferingKinds,\n  152:     /// Cast of thin to fat raw ptr (eg. `*const () as *const [u8]`)\n  153      SizedUnsizedCast,\n  154      IllegalCast,\n  ...\n  236                                        match e {\n  237                                            CastError::NeedViaPtr => \"a raw pointer\",\n  238:                                           CastError::NeedViaThinPtr => \"a thin pointer\",\n  239                                            _ => bug!(),\n  240                                        }));\n  ...\n  531          };\n  532  \n  533:         // Cast to thin pointer is OK\n  534:         if cast_kind == PointerKind::Thin {\n  535              return Ok(CastKind::PtrPtrCast);\n  536          }\n  ...\n  542          };\n  543  \n  544:         // thin -> fat? report invalid cast (don't complain about vtable kinds)\n  545:         if expr_kind == PointerKind::Thin {\n  546              return Err(CastError::SizedUnsizedCast);\n  547          }\n  ...\n  559                             m_cast: &'tcx ty::TypeAndMut<'tcx>)\n  560                             -> Result<CastKind, CastError> {\n  561:         // fptr-ptr cast. must be to thin ptr\n  562  \n  563          match fcx.pointer_kind(m_cast.ty, self.span)? {\n  564              None => Err(CastError::UnknownCastPtrKind),\n  565:             Some(PointerKind::Thin) => Ok(CastKind::FnPtrPtrCast),\n  566              _ => Err(CastError::IllegalCast),\n  567          }\n  ...\n  572                             m_expr: &'tcx ty::TypeAndMut<'tcx>)\n  573                             -> Result<CastKind, CastError> {\n  574:         // ptr-addr cast. must be from thin ptr\n  575  \n  576          match fcx.pointer_kind(m_expr.ty, self.span)? {\n  577              None => Err(CastError::UnknownExprPtrKind),\n  578:             Some(PointerKind::Thin) => Ok(CastKind::PtrAddrCast),\n  579              _ => Err(CastError::NeedViaThinPtr),\n  580          }\n  ...\n  610                             m_cast: &'tcx ty::TypeAndMut<'tcx>)\n  611                             -> Result<CastKind, CastError> {\n  612:         // ptr-addr cast. pointer must be thin.\n  613          match fcx.pointer_kind(m_cast.ty, self.span)? {\n  614              None => Err(CastError::UnknownCastPtrKind),\n  615:             Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n  616              _ => Err(CastError::IllegalCast),\n  617          }\n\n/home/mw/0-rust/src/librustc_typeck/coherence/builtin.rs:\n  266                  // Here `U = [i32; 3]` and `V = [i32]`. At runtime,\n  267                  // when this coercion occurs, we would be changing the\n  268:                 // field `ptr` from a thin pointer of type `*mut [i32;\n  269                  // 3]` to a fat pointer of type `*mut [i32]` (with\n  270                  // extra data `3`).  **The purpose of this check is to\n  ...\n  277                  // type, which we will expect to be the pointer that\n  278                  // is becoming fat (we could probably generalize this\n  279:                 // to mutiple thin pointers of the same type becoming\n  280                  // fat, but we don't). In this case:\n  281                  //\n\n/home/mw/0-rust/src/librustc_typeck/diagnostics.rs:\n 4054  \n 4055  E0607: r##\"\n 4056: A cast between a thin and a fat pointer was attempted.\n 4057  \n 4058  Erroneous code example:\n ....\n 4063  ```\n 4064  \n 4065: First: what are thin and fat pointers?\n 4066  \n 4067: Thin pointers are \"simple\" pointers: they are purely a reference to a memory\n 4068  address.\n 4069  \n ....\n 4074  pointer holds is their size.\n 4075  \n 4076: To fix this error, don't try to cast directly between thin and fat pointers.\n 4077  \n 4078  For more information about casts, take a look at The Book:\n\n/home/mw/0-rust/src/librustc_typeck/structured_errors.rs:\n  122              self.sess.struct_span_fatal_with_code(\n  123                  self.span,\n  124:                 &format!(\"cannot cast thin pointer `{}` to fat pointer `{}`\",\n  125                           self.expr_ty,\n  126                           self.cast_ty),\n  ...\n  132      fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n  133          err.help(\n  134:             \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n  135  memory address.\n  136  \n  ...\n  141  the additional information the fat pointer holds is their size.\n  142  \n  143: To fix this error, don't try to cast directly between thin and fat\n  144  pointers.\n  145  \n\n/home/mw/0-rust/src/libstd/path.rs:\n   12  //!\n   13  //! This module provides two types, [`PathBuf`] and [`Path`][`Path`] (akin to [`String`]\n   14: //! and [`str`]), for working with paths abstractly. These types are thin wrappers\n   15  //! around [`OsString`] and [`OsStr`] respectively, meaning that they work directly\n   16  //! on strings according to the local platform's path syntax.\n\n/home/mw/0-rust/src/libsyntax/parse/lexer/unicode_chars.rs:\n   28      (' ', \"Six-Per-Em Space\", ' '),\n   29      (' ', \"Punctuation Space\", ' '),\n   30:     (' ', \"Thin Space\", ' '),\n   31      (' ', \"Hair Space\", ' '),\n   32      (' ', \"Medium Mathematical Space\", ' '),\n\n/home/mw/0-rust/src/llvm/cmake/modules/HandleLLVMOptions.cmake:\n   18  endif()\n   19  \n   20: set(LLVM_ENABLE_LTO OFF CACHE STRING \"Build LLVM with LTO. May be specified as Thin or Full to use a particular kind of LTO\")\n   21  string(TOUPPER \"${LLVM_ENABLE_LTO}\" uppercase_LLVM_ENABLE_LTO)\n   22  \n   ..\n   37    \"Define the maximum number of concurrent link jobs.\")\n   38  if(CMAKE_MAKE_PROGRAM MATCHES \"ninja\")\n   39:   if(NOT LLVM_PARALLEL_LINK_JOBS AND uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n   40      message(STATUS \"ThinLTO provides its own parallel linking - limiting parallel link jobs to 2.\")\n   41      set(LLVM_PARALLEL_LINK_JOBS \"2\")\n   ..\n  794    message(FATAL_ERROR \"When compiling for Windows, LLVM_ENABLE_LTO requires using lld as the linker (point CMAKE_LINKER at lld-link.exe)\")\n  795  endif()\n  796: if(uppercase_LLVM_ENABLE_LTO STREQUAL \"THIN\")\n  797:   append(\"-flto=thin\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  798    if(NOT LINKER_IS_LLD_LINK)\n  799:     append(\"-flto=thin\" CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS)\n  800    endif()\n  801    # If the linker supports it, enable the lto cache. This improves initial build\n\n/home/mw/0-rust/src/llvm/docs/CMake.rst:\n  387    Add ``-flto`` or ``-flto=`` flags to the compile and link command\n  388    lines, enabling link-time optimization. Possible values are ``Off``,\n  389:   ``On``, ``Thin`` and ``Full``. Defaults to OFF.\n  390  \n  391  **LLVM_USE_LINKER**:STRING\n\n/home/mw/0-rust/src/llvm/docs/CommandGuide/llvm-lib.rst:\n   25    object files in the symbol table.\n   26  \n   27: * Creating thin archives.\n   28:   The /llvmlibthin option causes **llvm-lib** to create thin archive\n   29    that contain only the symbol table and the header for the various\n   30    members. These files are much smaller, but are not compatible with\n\n/home/mw/0-rust/src/llvm/docs/ProgrammersManual.rst:\n 1885  ^^^^^^^^^^^^^^^^^^^^\n 1886  \n 1887: ``StringSet`` is a thin wrapper around :ref:`StringMap\\<char\\> <dss_stringmap>`,\n 1888  and it allows efficient storage and retrieval of unique strings.\n 1889  \n\n/home/mw/0-rust/src/llvm/include/llvm-c/lto.h:\n   96  typedef struct LLVMOpaqueLTOCodeGenerator *lto_code_gen_t;\n   97  \n   98: /** opaque reference to a thin code generator */\n   99  typedef struct LLVMOpaqueThinLTOCodeGenerator *thinlto_code_gen_t;\n  100  \n\n/home/mw/0-rust/src/llvm/include/llvm/Analysis/LazyCallGraph.h:\n  993    ///\n  994    /// These functions, because they are known to LLVM, can have calls\n  995:   /// introduced out of thin air from arbitrary IR.\n  996    ArrayRef<Function *> getLibFunctions() const {\n  997      return LibFunctions.getArrayRef();\n  ...\n 1137    /// Defined functions that are also known library functions which the\n 1138    /// optimizer can reason about and therefore might introduce calls to out of\n 1139:   /// thin air.\n 1140    SmallSetVector<Function *, 4> LibFunctions;\n 1141  \n\n/home/mw/0-rust/src/llvm/include/llvm/Bitcode/BitcodeWriter.h:\n   85      /// is used as the hash instead of computing from the generated bitcode.\n   86      /// Can be used to produce the same module hash for a minimized bitcode\n   87:     /// used just for the thin link as in the regular full bitcode that will\n   88      /// be used in the backend.\n   89      void writeModule(const Module *M, bool ShouldPreserveUseListOrder = false,\n   ..\n   91                       bool GenerateHash = false, ModuleHash *ModHash = nullptr);\n   92  \n   93:     /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n   94:     /// file) to the buffer specified at construction time. The thin link\n   95:     /// bitcode file is used for thin link, and it only contains the necessary\n   96:     /// information for thin link.\n   97      ///\n   98      /// ModHash is for use in ThinLTO incremental build, generated while the\n   ..\n  125    /// is used as the hash instead of computing from the generated bitcode.\n  126    /// Can be used to produce the same module hash for a minimized bitcode\n  127:   /// used just for the thin link as in the regular full bitcode that will\n  128    /// be used in the backend.\n  129    void WriteBitcodeToFile(const Module *M, raw_ostream &Out,\n  ...\n  133                            ModuleHash *ModHash = nullptr);\n  134  \n  135:   /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n  136    /// file) to the given raw output stream, where it will be written in a new\n  137:   /// bitcode block. The thin link bitcode file is used for thin link, and it\n  138:   /// only contains the necessary information for thin link.\n  139    ///\n  140    /// ModHash is for use in ThinLTO incremental build, generated while the IR\n\n/home/mw/0-rust/src/llvm/include/llvm/LTO/LTO.h:\n  190      NativeObjectCache;\n  191  \n  192: /// A ThinBackend defines what happens after the thin-link phase during ThinLTO.\n  193  /// The details of this type definition aren't important; clients can only\n  194  /// create a ThinBackend using one of the create*ThinBackend() functions below.\n\n/home/mw/0-rust/src/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:\n  245    /**\n  246     * Produce the combined summary index from all the bitcode files:\n  247:    * \"thin-link\".\n  248     */\n  249    std::unique_ptr<ModuleSummaryIndex> linkCombinedIndex();\n\n/home/mw/0-rust/src/llvm/include/llvm/Object/ArchiveWriter.h:\n   41  Error writeArchive(StringRef ArcName, ArrayRef<NewArchiveMember> NewMembers,\n   42                     bool WriteSymtab, object::Archive::Kind Kind,\n   43:                    bool Deterministic, bool Thin,\n   44                     std::unique_ptr<MemoryBuffer> OldArchiveBuf = nullptr);\n   45  }\n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO/PassManagerBuilder.h:\n  139  \n  140    /// The module summary index to use for importing information to the\n  141:   /// thin LTO backends, for example for the CFI and devirtualization type\n  142    /// tests.\n  143    const ModuleSummaryIndex *ImportSummary = nullptr;\n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO/ThinLTOBitcodeWriter.h:\n    9  //\n   10  // This pass prepares a module containing type metadata for ThinLTO by splitting\n   11: // it into regular and thin LTO parts if possible, and writing both parts to\n   12  // a multi-module bitcode file. Modules that do not contain type metadata are\n   13  // written unmodified as a single module.\n   ..\n   29  \n   30  public:\n   31:   // Writes bitcode to OS. Also write thin link file to ThinLinkOS, if\n   32    // it's not nullptr.\n   33    ThinLTOBitcodeWriterPass(raw_ostream &OS, raw_ostream *ThinLinkOS)\n\n/home/mw/0-rust/src/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:\n   72    /// Process globals so that they can be used in ThinLTO. This includes\n   73    /// promoting local variables so that they can be reference externally by\n   74:   /// thin lto imported globals and converting strong external globals to\n   75    /// available_externally.\n   76    void processGlobalsForThinLTO();\n\n/home/mw/0-rust/src/llvm/lib/BinaryFormat/Magic.cpp:\n   71      break;\n   72    case '!':\n   73:     if (startswith(Magic, \"!<arch>\\n\") || startswith(Magic, \"!<thin>\\n\"))\n   74        return file_magic::archive;\n   75      break;\n\n/home/mw/0-rust/src/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:\n 4101  namespace {\n 4102  \n 4103: /// Class to manage the bitcode writing for a thin link bitcode file.\n 4104  class ThinLinkBitcodeWriter : public ModuleBitcodeWriterBase {\n 4105    /// ModHash is for use in ThinLTO incremental build, generated while writing\n ....\n 4124  } // end anonymous namespace\n 4125  \n 4126: // This function writes a simpilified module info for thin link bitcode file.\n 4127  // It only contains the source file name along with the name(the offset and\n 4128  // size in strtab) and linkage for global values. For the global value info\n ....\n 4243  }\n 4244  \n 4245: // Write the specified thin link bitcode file to the given raw output stream,\n 4246  // where it will be written in a new bitcode block. This is used when\n 4247  // writing the per-module index file for ThinLTO.\n\n/home/mw/0-rust/src/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp:\n  171    // Note that we're using the compiled image, not the loaded image (as below).\n  172    if (ObjCache) {\n  173:     // MemoryBuffer is a thin wrapper around the actual memory, so it's OK\n  174      // to create a temporary object here and delete it after the call.\n  175      MemoryBufferRef MB = CompiledObjBuffer->getMemBufferRef();\n\n/home/mw/0-rust/src/llvm/lib/LTO/Caching.cpp:\n  111        // Write to a temporary to avoid race condition\n  112        SmallString<64> TempFilenameModel;\n  113:       sys::path::append(TempFilenameModel, CacheDirectoryPath, \"Thin-%%%%%%.tmp.o\");\n  114        Expected<sys::fs::TempFile> Temp = sys::fs::TempFile::create(\n  115            TempFilenameModel, sys::fs::owner_read | sys::fs::owner_write);\n\n/home/mw/0-rust/src/llvm/lib/LTO/LTO.cpp:\n  524  // comdat is empty rather than leaving an incomplete comdat. It is needed for\n  525  // regular LTO modules, in case we are in a mixed-LTO mode (both regular\n  526: // and thin LTO modules) compilation. Since the regular LTO module will be\n  527  // linked first in the final native link, we want to make sure the linker\n  528  // doesn't select any of these incomplete comdats that would be left\n  ...\n 1181    std::string Filename = LTORemarksFilename;\n 1182    if (Count != -1)\n 1183:     Filename += \".thin.\" + llvm::utostr(Count) + \".yaml\";\n 1184  \n 1185    std::error_code EC;\n\n/home/mw/0-rust/src/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // This file implements the Thin Link Time Optimization library. This library is\n   11  // intended to be used by linker to optimize code at link time.\n   12  //\n   ..\n  403      int TempFD;\n  404      std::error_code EC =\n  405:         sys::fs::createTemporaryFile(\"Thin\", \"tmp.o\", TempFD, TempFilename);\n  406      if (EC) {\n  407        errs() << \"Error: \" << EC.message() << \"\\n\";\n  ...\n  589  /**\n  590   * Produce the combined summary index from all the bitcode files:\n  591:  * \"thin-link\".\n  592   */\n  593  std::unique_ptr<ModuleSummaryIndex> ThinLTOCodeGenerator::linkCombinedIndex() {\n\n/home/mw/0-rust/src/llvm/lib/Object/Archive.cpp:\n   41  \n   42  static const char *const Magic = \"!<arch>\\n\";\n   43: static const char *const ThinMagic = \"!<thin>\\n\";\n   44  \n   45  void Archive::anchor() {}\n\n/home/mw/0-rust/src/llvm/lib/Object/ArchiveWriter.cpp:\n  193  }\n  194  \n  195: static bool useStringTable(bool Thin, StringRef Name) {\n  196:   return Thin || Name.size() >= 16 || Name.contains('/');\n  197  }\n  198  \n  ...\n  241  \n  242  static void addToStringTable(raw_ostream &Out, StringRef ArcName,\n  243:                              const NewArchiveMember &M, bool Thin) {\n  244    StringRef ID = M.Buf->getBufferIdentifier();\n  245:   if (Thin) {\n  246      if (M.IsNew)\n  247        Out << computeRelativePath(ArcName, ID);\n  ...\n  255  static void printMemberHeader(raw_ostream &Out, uint64_t Pos,\n  256                                raw_ostream &StringTable,\n  257:                               object::Archive::Kind Kind, bool Thin,\n  258                                StringRef ArcName, const NewArchiveMember &M,\n  259                                unsigned Size) {\n  ...\n  261      return printBSDMemberHeader(Out, Pos, M.MemberName, M.ModTime, M.UID, M.GID,\n  262                                  M.Perms, Size);\n  263:   if (!useStringTable(Thin, M.MemberName))\n  264      return printGNUSmallMemberHeader(Out, M.MemberName, M.ModTime, M.UID, M.GID,\n  265                                       M.Perms, Size);\n  266    Out << '/';\n  267    uint64_t NamePos = StringTable.tell();\n  268:   addToStringTable(StringTable, ArcName, M, Thin);\n  269    printWithSpacePadding(Out, NamePos, 15);\n  270    printRestOfMemberHeader(Out, M.ModTime, M.UID, M.GID, M.Perms, Size);\n  ...\n  410  static Expected<std::vector<MemberData>>\n  411  computeMemberData(raw_ostream &StringTable, raw_ostream &SymNames,\n  412:                   object::Archive::Kind Kind, bool Thin, StringRef ArcName,\n  413                    ArrayRef<NewArchiveMember> NewMembers) {\n  414    static char PaddingData[8] = {'\\n', '\\n', '\\n', '\\n', '\\n', '\\n', '\\n', '\\n'};\n  ...\n  425  \n  426      MemoryBufferRef Buf = M.Buf->getMemBufferRef();\n  427:     StringRef Data = Thin ? \"\" : Buf.getBuffer();\n  428  \n  429      // ld64 expects the members to be 8-byte aligned for 64-bit content and at\n  ...\n  437      StringRef Padding = StringRef(PaddingData, MemberPadding + TailPadding);\n  438  \n  439:     printMemberHeader(Out, Pos, StringTable, Kind, Thin, ArcName, M,\n  440                        Buf.getBufferSize() + MemberPadding);\n  441      Out.flush();\n  ...\n  460                           ArrayRef<NewArchiveMember> NewMembers,\n  461                           bool WriteSymtab, object::Archive::Kind Kind,\n  462:                          bool Deterministic, bool Thin,\n  463                           std::unique_ptr<MemoryBuffer> OldArchiveBuf) {\n  464:   assert((!Thin || !isBSDLike(Kind)) && \"Only the gnu format has a thin mode\");\n  465  \n  466    SmallString<0> SymNamesBuf;\n  ...\n  470  \n  471    Expected<std::vector<MemberData>> DataOrErr =\n  472:       computeMemberData(StringTable, SymNames, Kind, Thin, ArcName, NewMembers);\n  473    if (Error E = DataOrErr.takeError())\n  474      return E;\n  ...\n  503  \n  504    raw_fd_ostream Out(Temp->FD, false);\n  505:   if (Thin)\n  506:     Out << \"!<thin>\\n\";\n  507    else\n  508      Out << \"!<arch>\\n\";\n\n/home/mw/0-rust/src/llvm/lib/Object/COFFImportFile.cpp:\n  604    return writeArchive(Path, Members, /*WriteSymtab*/ true,\n  605                        object::Archive::K_GNU,\n  606:                       /*Deterministic*/ true, /*Thin*/ false);\n  607  }\n  608  \n\n/home/mw/0-rust/src/llvm/lib/Passes/PassBuilder.cpp:\n  868    // FIXME: It isn't clear whether this is really the right place to run this\n  869    // in ThinLTO. Because there is another canonicalization and simplification\n  870:   // phase that will run after the thin link, running this here ends up with\n  871    // less information than will be available later and it may grow functions in\n  872    // ways that aren't beneficial.\n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp:\n  221  }\n  222  \n  223: // If it's possible to split M into regular and thin LTO parts, do so and write\n  224  // a multi-module bitcode file with the two parts to OS. Otherwise, write only a\n  225  // regular LTO bitcode file to OS.\n  ...\n  243    // Returns whether a global has attached type metadata. Such globals may\n  244    // participate in CFI or whole-program devirtualization, so they need to\n  245:   // appear in the merged module instead of the thin LTO module.\n  246    auto HasTypeMetadata = [&](const GlobalObject *GO) {\n  247      SmallVector<MDNode *, 1> MDs;\n  ...\n  303      if (!F.isDeclaration()) {\n  304        // Reset the linkage of all functions eligible for virtual constant\n  305:       // propagation. The canonical definitions live in the thin LTO module so\n  306        // that they can be imported.\n  307        F.setLinkage(GlobalValue::AvailableExternallyLinkage);\n  ...\n  315  \n  316    // Remove all globals with type metadata, globals with comdats that live in\n  317:   // MergedM, and aliases pointing to such globals from the thin LTO module.\n  318    filterModule(&M, [&](const GlobalValue *GV) {\n  319      if (auto *GVar = dyn_cast_or_null<GlobalVariable>(GV->getBaseObject()))\n  ...\n  385    OS << Buffer;\n  386  \n  387:   // If a minimized bitcode module was requested for the thin link, only\n  388:   // the information that is needed by thin link will be written in the\n  389    // given OS (the merged module will be written as usual).\n  390    if (ThinLinkOS) {\n  ...\n  428    WriteBitcodeToFile(&M, OS, /*ShouldPreserveUseListOrder=*/false, Index,\n  429                       /*GenerateHash=*/true, &ModHash);\n  430:   // If a minimized bitcode module was requested for the thin link, only\n  431:   // the information that is needed by thin link will be written in the\n  432    // given OS.\n  433    if (ThinLinkOS && Index)\n  ...\n  438    raw_ostream &OS; // raw_ostream to print on\n  439    // The output stream on which to emit a minimized module for use\n  440:   // just in the thin link, if requested.\n  441    raw_ostream *ThinLinkOS;\n  442  \n\n/home/mw/0-rust/src/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:\n   26  //   call with a comparison of the vptr against that vtable's address.\n   27  //\n   28: // This pass is intended to be used during the regular and thin LTO pipelines.\n   29  // During regular LTO, the pass determines the best optimization for each\n   30  // virtual call and applies the resolutions directly to virtual calls that are\n   ..\n   32  // llvm.assume(llvm.type.test) or llvm.type.checked.load intrinsics). During\n   33  // ThinLTO, the pass operates in two phases:\n   34: // - Export phase: this is run during the thin link over a single merged module\n   35  //   that contains all vtables with !type metadata that participate in the link.\n   36  //   The pass computes a resolution for each virtual call and stores it in the\n   37  //   type identifier summary.\n   38: // - Import phase: this is run during the thin backends over the individual\n   39  //   modules. The pass applies the resolutions previously computed during the\n   40  //   import phase to each eligible virtual call.\n   ..\n  761  \n  762    // If the only implementation has local linkage, we must promote to external\n  763:   // to make it visible to thin LTO objects. We can only get here during the\n  764    // ThinLTO export phase.\n  765    if (TheFn->hasLocalLinkage()) {\n\n/home/mw/0-rust/src/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:\n 4517      return;\n 4518    // Ok, we have too many of formulae on our hands to conveniently handle.\n 4519:   // Use a rough heuristic to thin out the list.\n 4520  \n 4521    // Set of Regs wich will be 100% used in final solution.\n ....\n 4616    while (EstimateSearchSpaceComplexity() >= ComplexityLimit) {\n 4617      // Ok, we have too many of formulae on our hands to conveniently handle.\n 4618:     // Use a rough heuristic to thin out the list.\n 4619      DEBUG(dbgs() << \"The search space is too complex.\\n\");\n 4620  \n\n/home/mw/0-rust/src/llvm/test/Bitcode/thinlto-summary-local-5.0.ll:\n    1: ; Bitcode compatibility test for dso_local flag in thin-lto summaries.\n    2  ; Checks that older bitcode summaries without the dso_local op are still\n    3  ; properly parsed and don't set GlobalValues as dso_local.\n\n/home/mw/0-rust/src/llvm/test/LTO/Resolution/X86/dead-strip-fulllto.ll:\n    6  ; RUN: -save-temps -o %t3\n    7  ; RUN: llvm-nm %t3.0 | FileCheck --check-prefix=FULL %s\n    8: ; RUN: llvm-nm %t3.1 | FileCheck --check-prefix=THIN %s\n    9  \n   10  ; RUN: llvm-lto2 run %t -r %t,main,px -r %t,live1,p -r %t,live2,p -r %t,dead2,p \\\n   ..\n   12  ; RUN: -save-temps -o %t3 -O0\n   13  ; RUN: llvm-nm %t3.0 | FileCheck --check-prefix=FULL %s\n   14: ; RUN: llvm-nm %t3.1 | FileCheck --check-prefix=THIN %s\n   15  \n   16  ; FULL-NOT: dead\n   ..\n   19  ; FULL: T main\n   20  \n   21: ; THIN-NOT: dead\n   22: ; THIN: T live1\n   23: ; THIN: U live2\n   24: ; THIN-NOT: odr\n   25  \n   26  target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\n/home/mw/0-rust/src/llvm/test/LTO/Resolution/X86/mixed_lto.ll:\n    1: ; Test mixed-mode LTO (mix of regular and thin LTO objects)\n    2  ; RUN: opt %s -o %t1.o\n    3  ; RUN: opt -module-summary %p/Inputs/mixed_lto.ll -o %t2.o\n    .\n   14  ; NM1-DAG: U g\n   15  \n   16: ; Do the same test again, but with the regular and thin LTO modules in the same file.\n   17  ; RUN: llvm-cat -b -o %t4.o %t2.o %t1.o\n   18  ; RUN: llvm-lto2 run -o %t5.o %t4.o -r %t4.o,main,px -r %t4.o,g, -r %t4.o,g,px\n\n/home/mw/0-rust/src/llvm/test/LTO/X86/strip-debug-info.ll:\n    6  ; RUN:     FileCheck %s -allow-empty -check-prefix=CHECK-WARN\n    7  ; RUN: llvm-nm %t.o | FileCheck %s \n    8: ; ---- Thin LTO (codegen only) ------------------------------\n    9  ; RUN: llvm-lto -thinlto -thinlto-action=codegen \\\n   10  ; RUN:     %t.bc -disable-verify 2>&1 | \\\n   11  ; RUN:     FileCheck %s -allow-empty -check-prefix=CHECK-WARN\n   12: ; ---- Thin LTO (optimize, strip main file) -----------------\n   13  ; RUN: opt -disable-verify -module-summary %s -o %t.bc\n   14  ; RUN: opt -disable-verify -module-summary %S/Inputs/strip-debug-info-bar.ll \\\n   ..\n   17  ; RUN:     %t.bc -disable-verify 2>&1 | \\\n   18  ; RUN:     FileCheck %s -allow-empty -check-prefix=CHECK-WARN\n   19: ; ---- Thin LTO (optimize, strip imported file) -------------\n   20  ; RUN: opt -disable-verify -strip-debug -module-summary %t.bc -o %t-stripped.bc\n   21  ; RUN: llvm-lto -thinlto-action=thinlink -o %t.index.bc %t-stripped.bc %t2.bc\n\n/home/mw/0-rust/src/llvm/test/Object/archive-extract.test:\n   52  NOTFOUND: foo.o was not found\n   53  \n   54: RUN: not llvm-ar x %p/Inputs/thin.a foo.o 2>&1 | FileCheck %s --check-prefix=THINEXTRACT\n   55: THINEXTRACT: extracting from a thin archive is not supported\n   56  \n   57: RUN: llvm-ar p %p/Inputs/thin.a evenlen | FileCheck %s --check-prefix=EVENLEN\n   58  EVENLEN: evenlen\n   59  \n   60: RUN: not llvm-ar p %p/Inputs/thin-path.a t/test2.o 2>&1 | FileCheck %s --check-prefix=MISSING\n   61  MISSING: {{N|n}}o such file or directory.\n   62  \n\n/home/mw/0-rust/src/llvm/test/Object/archive-format.test:\n   53  RUN: rm -f test.a\n   54  RUN: llvm-ar --format=gnu rcT test.a 0123456789abcde 0123456789abcdef\n   55: RUN: cat test.a | FileCheck -strict-whitespace --check-prefix=THIN %s\n   56: THIN: !<thin>\n   57: THIN-NEXT: //                                              36        `\n   58: THIN-NEXT: 0123456789abcde/\n   59: THIN-NEXT: 0123456789abcdef/{{$}}\n   60: THIN: {{^$}}\n   61: THIN: /0              0           0     0     644     4         `\n   62: THIN-NEXT: /17             0           0     0     644     4         `\n   63  \n   64  RUN: mkdir -p bar\n   65  RUN: rm -f bar/test.a\n   66  RUN: llvm-ar --format=gnu rcT bar/test.a 0123456789abcde 0123456789abcdef foo/0123456789abcde foo/0123456789abcdef\n   67: RUN: cat bar/test.a | FileCheck -strict-whitespace --check-prefix=THIN-PATH %s\n   68: THIN-PATH: !<thin>\n   69: THIN-PATH-NEXT: //                                              90        `\n   70: THIN-PATH-NEXT: ..{{/|\\\\}}0123456789abcde/\n   71: THIN-PATH-NEXT: ..{{/|\\\\}}0123456789abcdef/\n   72: THIN-PATH-NEXT: ..{{/|\\\\}}foo{{/|\\\\}}0123456789abcde/\n   73: THIN-PATH-NEXT: ..{{/|\\\\}}foo{{/|\\\\}}0123456789abcdef/\n   74: THIN-PATH-NEXT: /0              0           0     0     644     4         `\n   75: THIN-PATH-NEXT: /20             0           0     0     644     4         `\n   76: THIN-PATH-NEXT: /41             0           0     0     644     4         `\n   77: THIN-PATH-NEXT: /65             0           0     0     644     4         `\n   78  \n   79: RUN: not llvm-ar --format=bsd rcT bad.a 0123456789abcde 0123456789abcdef 2>&1 | FileCheck --check-prefix=BSD-THIN %s\n   80: BSD-THIN: Only the gnu format has a thin mode.\n   81  \n   82  If an archive has an object with no symbols, the linker and some other\n\n/home/mw/0-rust/src/llvm/test/Object/archive-symtab.test:\n   12  RUN: rm -f %t.a\n   13  RUN: llvm-ar --format=gnu rcT %t.a %p/Inputs/trivial-object-test.elf-x86-64 %p/Inputs/trivial-object-test2.elf-x86-64\n   14: RUN: llvm-nm -M %t.a | FileCheck --check-prefix=THIN %s\n   15  \n   16: THIN: Archive map\n   17: THIN-NEXT: main in {{.*}}/Inputs/trivial-object-test.elf-x86-64\n   18: THIN-NEXT: foo in {{.*}}/Inputs/trivial-object-test2.elf-x86-64\n   19: THIN-NEXT: main in {{.*}}/Inputs/trivial-object-test2.elf-x86-64\n   20  \n   21  \n\n/home/mw/0-rust/src/llvm/test/Object/archive-thin-paths.test:\n    2  \n    3  RUN: rm -rf %t && mkdir -p %t && cd %t\n    4: RUN: mkdir -p archive-thin-paths.dir\n    5: RUN: echo foo > archive-thin-paths.dir/foo.o\n    6  \n    7: RUN: rm -f archive-thin-paths.a\n    8: RUN: llvm-ar rcsT archive-thin-paths.a archive-thin-paths.dir\\foo.o\n    9: RUN: grep archive-thin-paths.dir/foo.o archive-thin-paths.a\n   10  \n\n/home/mw/0-rust/src/llvm/test/Object/archive-toc.test:\n   30  CHECK-NEXT: rw-r--r-- 1002/102   2280 2004-11-19 03:24:02.000000000 IsNAN.o\n   31  \n   32: Test reading a thin archive created by gnu ar\n   33: RUN: env TZ=GMT llvm-ar tv Inputs/thin.a | FileCheck %s --check-prefix=THIN -strict-whitespace\n   34  \n   35: THIN:      rw-r--r-- 1000/1000      8 2014-12-16 00:56:27.000000000 Inputs/evenlen\n   36: THIN-NEXT: rw-r--r-- 1000/1000      7 2014-12-16 00:56:27.000000000 Inputs/oddlen\n   37: THIN-NEXT: rwxr-xr-x 1000/1000   1465 2014-12-16 00:56:27.000000000 Inputs/very_long_bytecode_file_name.bc\n   38: THIN-NEXT: rw-r--r-- 1000/1000   2280 2014-12-16 00:56:27.000000000 Inputs/IsNAN.o\n   39  \n   40  Test reading an archive with just a symbol table. We use to reject them.\n   ..\n   42  EMPTY-NOT: {{.}}\n   43  \n   44: Test reading a thin archive with directory names.\n   45: RUN: env TZ=GMT llvm-ar tv Inputs/thin-path.a | FileCheck %s --check-prefix=THINPATH -strict-whitespace\n   46  \n   47  THINPATH: rw-r--r-- 0/0   1224 1970-01-01 00:00:00.000000000 Inputs/test.o\n\n/home/mw/0-rust/src/llvm/test/Object/archive-update.test:\n   49  RUN: llvm-ar --format=gnu rc %t/tmp.a foo\n   50  RUN: not llvm-ar --format=gnu rcT %t/tmp.a bar 2>&1 | FileCheck --check-prefix=ERROR %s\n   51: ERROR: Cannot convert a regular archive to a thin one.\n   52  \n\n/home/mw/0-rust/src/llvm/test/Object/nm-archive.test:\n   62  \n   63  \n   64: RUN: llvm-nm %p/Inputs/thin.a | FileCheck %s -check-prefix THIN\n   65  \n   66: THIN: IsNAN.o:\n   67: THIN: 00000014 T _ZN4llvm5IsNANEd\n   68: THIN: 00000000 T _ZN4llvm5IsNANEf\n   69: THIN:          U __isnan\n   70: THIN:          U __isnanf\n   71  \n\n/home/mw/0-rust/src/llvm/test/ThinLTO/X86/diagnostic-handler-remarks-with-hotness.ll:\n   16  \n   17  ; Verify that bar is imported and inlined into foo\n   18: ; RUN: cat %t.yaml.thin.0.yaml | FileCheck %s -check-prefix=YAML1\n   19  ; YAML1:      --- !Passed\n   20  ; YAML1-NEXT: Pass:            inline\n   ..\n   35  \n   36  ; Verify that bar is imported and inlined into foo\n   37: ; RUN: cat %t.yaml.thin.1.yaml | FileCheck %s -check-prefix=YAML2\n   38  ; YAML2:      --- !Passed\n   39  ; YAML2-NEXT: Pass:            inline\n\n/home/mw/0-rust/src/llvm/test/ThinLTO/X86/diagnostic-handler-remarks.ll:\n    3  \n    4  ; Optimization records are collected regardless of the diagnostic handler\n    5: ; RUN: rm -f %t.yaml.thin.0.yaml %t.yaml.thin.1.yaml\n    6  ; RUN: llvm-lto -thinlto-action=run \\\n    7  ; RUN:          -lto-pass-remarks-output=%t.yaml \\\n    .\n   14  \n   15  ; Verify that bar is imported and inlined into foo\n   16: ; RUN: cat %t.yaml.thin.0.yaml | FileCheck %s -check-prefix=YAML1\n   17  ; YAML1:      --- !Passed\n   18  ; YAML1-NEXT: Pass:            inline\n   ..\n   32  \n   33  ; Verify that bar is imported and inlined into foo\n   34: ; RUN: cat %t.yaml.thin.1.yaml | FileCheck %s -check-prefix=YAML2\n   35  ; YAML2: --- !Passed\n   36  ; YAML2-NEXT: Pass:            inline\n\n/home/mw/0-rust/src/llvm/test/ThinLTO/X86/distributed_import.ll:\n    1: ; Test distributed build thin link output from llvm-lto2\n    2  \n    3  ; Generate bitcode files with summary, as well as minimized bitcode without\n    4: ; the debug metadata for the thin link.\n    5: ; RUN: opt -thinlto-bc %s -thin-link-bitcode-file=%t1.thinlink.bc -o %t1.bc\n    6: ; RUN: opt -thinlto-bc %p/Inputs/distributed_import.ll -thin-link-bitcode-file=%t2.thinlink.bc -o %t2.bc\n    7  ; RUN: llvm-bcanalyzer -dump %t1.thinlink.bc | FileCheck --check-prefix=THINLINKBITCODE %s\n    8  \n    9: ; First perform the thin link on the normal bitcode file.\n   10  ; RUN: llvm-lto2 run %t1.bc %t2.bc -o %t.o -save-temps \\\n   11  ; RUN:     -thinlto-distributed-indexes \\\n   ..\n   33  ; RUN: cp %t2.thinlink.bc %t2.bc\n   34  \n   35: ; Next perform the thin link on the minimized bitcode files, and compare dumps\n   36  ; of the resulting indexes to the above dumps to ensure they are identical.\n   37  ; RUN: rm -f %t1.bc.thinlto.bc %t2.bc.thinlto.bc\n\n/home/mw/0-rust/src/llvm/test/ThinLTO/X86/save_objects.ll:\n    3  \n    4  ; Check that the generating object files is working without cache\n    5: ; RUN: rm -Rf %t.thin.out\n    6: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main \n    7: ; RUN: ls %t.thin.out | count 2\n    8  \n    9  ; Same with cache\n   10: ; RUN: rm -Rf %t.thin.out\n   11  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   12: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache \n   13: ; RUN: ls %t.thin.out | count 2\n   14  ; RUN: ls %t.cache | count 3\n   15  \n   16  ; Same with hot cache\n   17: ; RUN: rm -Rf %t.thin.out\n   18  ; RUN: rm -Rf %t.cache && mkdir %t.cache\n   19: ; RUN: llvm-lto -thinlto-save-objects=%t.thin.out -thinlto-action=run %t2.bc  %t.bc -exported-symbol=main -thinlto-cache-dir %t.cache \n   20: ; RUN: ls %t.thin.out | count 2\n   21  ; RUN: ls %t.cache | count 3\n   22  \n\n/home/mw/0-rust/src/llvm/test/Transforms/ThinLTOBitcodeWriter/comdat.ll:\n    1  ; RUN: opt -thinlto-bc -o %t %s\n    2: ; RUN: llvm-modextract -n 0 -o - %t | llvm-dis | FileCheck --check-prefix=THIN %s\n    3  ; RUN: llvm-modextract -n 1 -o - %t | llvm-dis | FileCheck --check-prefix=MERGED %s\n    4  \n    .\n   19  ; Comdat with two members without type metadata. All comdat members live in\n   20  ; the ThinLTO module and no renaming needs to take place.\n   21: ; THIN: $nt = comdat any\n   22  $nt = comdat any\n   23  \n   ..\n   28  ; MERGED: {{@\"?lwt_nl[^ ]+}} = hidden unnamed_addr global\n   29  ; MERGED-SAME: comdat(${{\"?lwt[^ ]+}})\n   30: ; THIN: {{@\"?lwt_nl[^ ]+}} = external hidden\n   31  @lwt_nl = internal unnamed_addr global i32 0, comdat($lwt)\n   32  \n   ..\n   37  ; MERGED: @nlwt = unnamed_addr global\n   38  ; MERGED-SAME: comdat\n   39: ; THIN: @nlwt = external\n   40  @nlwt = unnamed_addr global i32 0, comdat\n   41  \n   42: ; THIN: @nt = internal\n   43: ; THIN-SAME: comdat\n   44  @nt = internal unnamed_addr global [1 x i8*] [i8* null], comdat\n   45  \n   46: ; THIN: @nt_nl = internal\n   47: ; THIN-SAME: comdat($nt)\n   48  @nt_nl = internal unnamed_addr global i32 0, comdat($nt)\n   49  \n   50  ; MERGED: {{@\"?lwt[^ ]+}} = hidden unnamed_addr alias\n   51: ; THIN: {{@\"?lwt[^ ]+}} = external hidden\n   52  @lwt = internal unnamed_addr alias [1 x i8*], [1 x i8*]* @lwt_aliasee\n   53  \n   54  ; MERGED: {{@\"?nlwt_nl[^ ]+}} = hidden unnamed_addr alias\n   55: ; THIN: {{@\"?nlwt_nl[^ ]+}} = external hidden\n   56  @nlwt_nl = internal unnamed_addr alias [1 x i8*], [1 x i8*]* @nlwt_aliasee\n   57  \n\n/home/mw/0-rust/src/llvm/test/Transforms/ThinLTOBitcodeWriter/new-pm.ll:\n    1: ; RUN: opt -passes='no-op-module' -debug-pass-manager -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s 2>&1 | FileCheck %s --check-prefix=DEBUG_PM\n    2  ; RUN: llvm-bcanalyzer -dump %t2 | FileCheck %s --check-prefix=BITCODE\n    3  \n\n/home/mw/0-rust/src/llvm/test/Transforms/ThinLTOBitcodeWriter/no-type-md.ll:\n    1  ; Generate bitcode files with summary, as well as minimized bitcode without\n    2: ; the debug metadata for the thin link.\n    3: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t.thinlink.bc -o %t.bc %s\n    4  ; RUN: llvm-dis -o - %t.bc | FileCheck %s\n    5  ; RUN: llvm-bcanalyzer -dump %t.bc | FileCheck --check-prefix=BCA %s\n    6  \n    7  ; Make sure the combined index files produced by both the normal and the\n    8: ; thin link bitcode files are identical\n    9  ; RUN: llvm-lto -thinlto -o %t3 %t.bc\n   10  ; Copy the minimized bitcode to the regular bitcode path so the module\n\n/home/mw/0-rust/src/llvm/test/Transforms/ThinLTOBitcodeWriter/split.ll:\n    1  ; Generate bitcode files with summary, as well as minimized bitcode without\n    2: ; the debug metadata for the thin link.\n    3: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s\n    4  ; RUN: llvm-modextract -b -n 0 -o %t0.bc %t\n    5  ; RUN: llvm-modextract -b -n 1 -o %t1.bc %t\n    .\n   13  \n   14  ; Make sure the combined index files produced by both the normal and the\n   15: ; thin link bitcode files are identical\n   16  ; RUN: llvm-lto -thinlto -o %t3 %t0.bc\n   17  ; Copy the minimized bitcode to the regular bitcode path so the module\n\n/home/mw/0-rust/src/llvm/test/Transforms/ThinLTOBitcodeWriter/unsplittable.ll:\n    1: ; RUN: opt -thinlto-bc -thin-link-bitcode-file=%t2 -o %t %s\n    2  ; RUN: llvm-dis -o - %t | FileCheck %s\n    3  ; RUN: llvm-bcanalyzer -dump %t | FileCheck --check-prefix=BCA %s\n    4: ; When not splitting the module, the thin link bitcode file should simply be a\n    5  ; copy of the regular module.\n    6  ; RUN: diff %t %t2\n\n/home/mw/0-rust/src/llvm/test/tools/dsymutil/Inputs/fat-test.c:\n    7  \n    8     To reduce the size of the fat binary:\n    9:    lipo -thin i386 -o fat-test.i386.o fat-test.o \n   10:    lipo -thin x86_64 -o fat-test.x86_64.o fat-test.o \n   11:    lipo -thin x86_64h -o fat-test.x86_64h.o fat-test.o \n   12     lipo -create -arch x86_64h fat-test.x86_64h.o -arch x86_64 fat-test.x86_64.o -arch i386 fat-test.i386.o -o fat-test.o -segalign i386 8 -segalign x86_64 8 -segalign x86_64h 8\n   13   */\n\n/home/mw/0-rust/src/llvm/test/tools/gold/X86/mixed_lto.ll:\n    1: ; Test mixed-mode LTO (mix of regular and thin LTO objects)\n    2  ; RUN: opt %s -o %t.o\n    3  ; RUN: opt -module-summary %p/Inputs/mixed_lto.ll -o %t2.o\n\n/home/mw/0-rust/src/llvm/test/tools/gold/X86/thinlto_object_suffix_replace.ll:\n    3  \n    4  ; Generate bitcode file with summary, as well as a minimized bitcode without\n    5: ; the debug metadata for the thin link.\n    6: ; RUN: opt -thinlto-bc %s -thin-link-bitcode-file=%t1.thinlink.bc -o %t1.o\n    7  \n    8: ; First perform the thin link on the normal bitcode file, and save the\n    9  ; resulting index.\n   10  ; RUN: %gold -plugin %llvmshlibdir/LLVMgold%shlibext \\\n   ..\n   15  ; RUN: cp %t1.o.thinlto.bc %t1.o.thinlto.bc.orig\n   16  \n   17: ; Next perform the thin link on the minimized bitcode file, and compare dump\n   18  ; of the resulting index to the above dump to ensure they are identical.\n   19  ; RUN: rm -f %t1.o.thinlto.bc\n\n/home/mw/0-rust/src/llvm/test/tools/llvm-lib/thin.test:\n    5  FAT: !<arch>\n    6  \n    7: RUN: llvm-lib  -out:%t.thin.a -llvmlibthin %t\n    8: RUN: FileCheck --check-prefix=THIN %s < %t.thin.a\n    9: THIN: !<thin>\n   10  \n\n/home/mw/0-rust/src/llvm/test/tools/llvm-lto/error.ll:\n    5  ; CHECK-LIST: llvm-lto: error loading file '{{.*}}/Inputs/empty.bc': The file was not recognized as a valid object file\n    6  \n    7: ; RUN: not llvm-lto --thinlto %S/Inputs/empty.bc 2>&1 | FileCheck %s --check-prefix=CHECK-THIN\n    8: ; CHECK-THIN: llvm-lto: error loading file '{{.*}}/Inputs/empty.bc': Invalid bitcode signature\n    9  \n\n/home/mw/0-rust/src/llvm/test/tools/opt-viewer/Inputs/suppress/s.opt.yaml:\n   11    - Function:        '\"Swift.CountableRange.init(uncheckedBounds:)\"'\n   12    - String:          ' with type '\n   13:   - FuncType:        '(Int, Int, @thin CountableRange<Int>.Type) -> CountableRange<Int>'\n   14  ...\n   15  --- !Passed\n   ..\n  143    - Function:        '\"Swift.Array.init(arrayLiteral:)\"'\n  144    - String:          ' with type '\n  145:   - FuncType:        '(@owned Array<Int>, @thin Array<Int>.Type) -> @owned Array<Int>'\n  146  ...\n  147  --- !Passed\n\n/home/mw/0-rust/src/llvm/tools/dsymutil/MachOUtils.cpp:\n   78    Args.push_back(\"-create\");\n   79  \n   80:   for (auto &Thin : ArchFiles)\n   81:     Args.push_back(Thin.Path.c_str());\n   82  \n   83    // Align segments to match dsymutil-classic alignment\n   84:   for (auto &Thin : ArchFiles) {\n   85:     Thin.Arch = getArchName(Thin.Arch);\n   86      Args.push_back(\"-segalign\");\n   87:     Args.push_back(Thin.Arch.c_str());\n   88      Args.push_back(\"20\");\n   89    }\n\n/home/mw/0-rust/src/llvm/tools/gold/gold-plugin.cpp:\n  170    // Option to control the name of modules encoded in the individual index\n  171    // files for a distributed backend. This enables the use of minimized\n  172:   // bitcode files for the thin link, assuming the name of the full bitcode\n  173    // file used in the backend differs just in some part of the file suffix.\n  174    // If specified, expects a string of the form \"oldsuffix:newsuffix\".\n  ...\n  882            F.leader_handle, llvm::make_unique<PluginInputFile>(F.handle)));\n  883      const void *View = getSymbolsAndView(F);\n  884:     // In case we are thin linking with a minimized bitcode file, ensure\n  885      // the module paths encoded in the index reflect where the backends\n  886      // will locate the full bitcode files for compiling/importing.\n\n/home/mw/0-rust/src/llvm/tools/llvm-ar/llvm-ar.cpp:\n  117    \"  [s] - create an archive index (cf. ranlib)\\n\"\n  118    \"  [S] - do not build a symbol table\\n\"\n  119:   \"  [T] - create a thin archive\\n\"\n  120    \"  [u] - update only files newer than archive contents\\n\"\n  121    \"\\nMODIFIERS (generic):\\n\"\n  ...\n  148  static bool Symtab = true;         ///< 's' modifier\n  149  static bool Deterministic = true;  ///< 'D' and 'U' modifiers\n  150: static bool Thin = false;          ///< 'T' modifier\n  151  \n  152  // Relative Positional Argument (for insert/move). This variable holds\n  ...\n  264        break;\n  265      case 'T':\n  266:       Thin = true;\n  267        break;\n  268      default:\n  ...\n  420                                   object::Archive *OldArchive) {\n  421    if (Operation == Extract && OldArchive->isThin())\n  422:     fail(\"extracting from a thin archive is not supported\");\n  423  \n  424    bool Filter = !Members.empty();\n  ...\n  478  static void addMember(std::vector<NewArchiveMember> &Members,\n  479                        const object::Archive::Child &M, int Pos = -1) {\n  480:   if (Thin && !M.getParent()->isThin())\n  481:     fail(\"Cannot convert a regular archive to a thin one\");\n  482    Expected<NewArchiveMember> NMOrErr =\n  483        NewArchiveMember::getOldMember(M, Deterministic);\n  ...\n  654    switch (FormatOpt) {\n  655    case Default:\n  656:     if (Thin)\n  657        Kind = object::Archive::K_GNU;\n  658      else if (OldArchive)\n  ...\n  669      break;\n  670    case BSD:\n  671:     if (Thin)\n  672:       fail(\"Only the gnu format has a thin mode\");\n  673      Kind = object::Archive::K_BSD;\n  674      break;\n  675    case DARWIN:\n  676:     if (Thin)\n  677:       fail(\"Only the gnu format has a thin mode\");\n  678      Kind = object::Archive::K_DARWIN;\n  679      break;\n  ...\n  682    Error E =\n  683        writeArchive(ArchiveName, NewMembersP ? *NewMembersP : NewMembers, Symtab,\n  684:                    Kind, Deterministic, Thin, std::move(OldArchiveBuf));\n  685    failIfError(std::move(E), ArchiveName);\n  686  }\n\n/home/mw/0-rust/src/llvm/tools/opt/opt.cpp:\n  105  \n  106  static cl::opt<std::string> ThinLinkBitcodeFile(\n  107:     \"thin-link-bitcode-file\", cl::value_desc(\"filename\"),\n  108      cl::desc(\n  109:         \"A file in which to write minimized bitcode for the thin link only\"));\n  110  \n  111  static cl::opt<bool>\n\n/home/mw/0-rust/src/llvm/unittests/ADT/ArrayRefTest.cpp:\n  243    EXPECT_EQ(&AR1, &AR1Ref);\n  244  \n  245:   // A copy is expected for non-const ArrayRef (thin copy)\n  246    const ArrayRef<int> AR2(A1);\n  247    const ArrayRef<int> &AR2Ref = makeArrayRef(AR2);\n\n/home/mw/0-rust/src/test/compile-fail/issue-31511.rs:\n   11  fn cast_thin_to_fat(x: *const ()) {\n   12      x as *const [u8];\n   13:     //~^ ERROR: cannot cast thin pointer `*const ()` to fat pointer `*const [u8]`\n   14  }\n   15  \n\n/home/mw/0-rust/src/test/compile-fail/transmute-fat-pointers.rs:\n    9  // except according to those terms.\n   10  \n   11: // Tests that are conservative around thin/fat pointer mismatches.\n   12  \n   13  #![allow(dead_code)]\n\n/home/mw/0-rust/src/test/compile-fail/transmute-impl.rs:\n    9  // except according to those terms.\n   10  \n   11: // Tests that are conservative around thin/fat pointer mismatches.\n   12  \n   13  #![allow(dead_code)]\n\n/home/mw/0-rust/src/test/run-make-fulldeps/codegen-options-parsing/Makefile:\n   17  \t#Option taking no argument\n   18  \t$(RUSTC) -C lto= dummy.rs 2>&1 | \\\n   19: \t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n   20  \t$(RUSTC) -C lto=1 dummy.rs 2>&1 | \\\n   21: \t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n   22  \t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n   23: \t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n   24  \t$(RUSTC) -C lto dummy.rs\n   25  \n\n/home/mw/0-rust/src/test/run-pass/cast-rfc0401.rs:\n   76      assert_eq!(-9.223372036854776e18f64 as i64, 0x8000000000000000u64 as i64);\n   77  \n   78:     // addr-ptr-cast/ptr-addr-cast (thin ptr)\n   79      let p: *const [u8; 1] = lsz as *const [u8; 1];\n   80      assert_eq!(p as usize, lsz);\n   81  \n   82:     // ptr-ptr-cast (thin ptr)\n   83      let w: *const () = p as *const ();\n   84      assert_eq!(w as usize, lsz);\n   85  \n   86:     // ptr-ptr-cast (fat->thin)\n   87      let u: *const [u8] = unsafe{&*p};\n   88      assert_eq!(u as *const u8, p as *const u8);\n\n/home/mw/0-rust/src/test/run-pass/extern-types-thin-pointer.rs:\n    9  // except according to those terms.\n   10  \n   11: // Test that pointers and references to extern types are thin, ie they have the same size and\n   12  // alignment as a pointer to ().\n   13  \n\n/home/mw/0-rust/src/test/run-pass/fat-ptr-cast.rs:\n   23  \n   24  fn main() {\n   25:     // Test we can turn a fat pointer to array back into a thin pointer.\n   26      let a: *const [i32] = &[1, 2, 3];\n   27      let b = a as *const [i32; 2];\n\n/home/mw/0-rust/src/test/run-pass/mir_misc_casts.rs:\n  286      let _ = r as *const u32;\n  287  \n  288:     // fat-ptr -> fat-ptr -> fat-raw-ptr -> thin-ptr\n  289      let c3 = STR as &str as *const str as *const u8;\n  290  \n\n/home/mw/0-rust/src/test/run-pass/thinlto/all-crates.rs:\n    9  // except according to those terms.\n   10  \n   11: // compile-flags: -Clto=thin\n   12  // no-prefer-dynamic\n   13  // min-llvm-version 4.0\n\n/home/mw/0-rust/src/test/run-pass/thinlto/thin-lto-inlines2.rs:\n    9  // except according to those terms.\n   10  \n   11: // compile-flags: -C codegen-units=8 -O -C lto=thin\n   12: // aux-build:thin-lto-inlines-aux.rs\n   13  // min-llvm-version 4.0\n   14  // no-prefer-dynamic\n\n/home/mw/0-rust/src/test/ui/error-codes/E0607.stderr:\n    1: error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n    2    --> $DIR/E0607.rs:13:5\n    3     |\n\n/home/mw/0-rust/src/test/ui/error-festival.stderr:\n   65     |                  ^\n   66  \n   67: error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   68    --> $DIR/error-festival.rs:51:5\n   69     |\n\n/home/mw/0-rust/src/test/ui/fat-ptr-cast.rs:\n   11  trait Trait {}\n   12  \n   13: // Make sure casts between thin-pointer <-> fat pointer obey RFC401\n   14  fn main() {\n   15      let a: &[i32] = &[1, 2, 3];\n\n/home/mw/0-rust/src/test/ui/fat-ptr-cast.stderr:\n   45     |     ^^^^^^^^^^\n   46     |\n   47:    = help: cast through a thin pointer first\n   48  \n   49: error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]`\n   50    --> $DIR/fat-ptr-cast.rs:29:5\n   51     |\n\n/home/mw/0-rust/src/test/ui/mismatched_types/cast-rfc0401.stderr:\n  157     |             ^^^^^^^^^^^^^^^^^^^^^^\n  158  \n  159: error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n  160    --> $DIR/cast-rfc0401.rs:62:13\n  161     |\n  ...\n  199     |             ^^^^^^^^^^^^^^^\n  200     |\n  201:    = help: cast through a thin pointer first\n  202  \n  203  error[E0606]: casting `*const Foo` as `*const [u16]` is invalid\n\n/home/mw/0-rust/src/tools/cargo/src/doc/src/reference/manifest.md:\n  296                     # and static libraries. Increases compilation time.\n  297                     # If true, passes `-C lto` flag to the compiler, and if a\n  298:                    # string is specified like 'thin' then `-C lto=thin` will\n  299                     # be passed.\n  300  debug-assertions = true # controls whether debug assertions are enabled\n\n/home/mw/0-rust/src/tools/cargo/tests/testsuite/path.rs:\n 1298  \n 1299              [profile.release]\n 1300:             lto = 'thin'\n 1301          \"#,\n 1302          )\n ....\n 1309              \"\\\n 1310  [COMPILING] top [..]\n 1311: [RUNNING] `rustc [..] -C lto=thin [..]`\n 1312  [FINISHED] [..]\n 1313  \",\n\n/home/mw/0-rust/src/tools/miri/miri/validation.rs:\n  404                  assert!(i < 2);\n  405  \n  406:                 // Reuse the fat *T type as its own thin pointer data field.\n  407                  // This provides information about e.g. DST struct pointees\n  408                  // (which may have no non-DST form), and will work as long\n\n/home/mw/llvm/include/llvm-c/lto.h:\n   96  typedef struct LLVMOpaqueLTOCodeGenerator *lto_code_gen_t;\n   97  \n   98: /** opaque reference to a thin code generator */\n   99  typedef struct LLVMOpaqueThinLTOCodeGenerator *thinlto_code_gen_t;\n  100  \n\n/home/mw/llvm/include/llvm/Analysis/LazyCallGraph.h:\n  993    ///\n  994    /// These functions, because they are known to LLVM, can have calls\n  995:   /// introduced out of thin air from arbitrary IR.\n  996    ArrayRef<Function *> getLibFunctions() const {\n  997      return LibFunctions.getArrayRef();\n  ...\n 1137    /// Defined functions that are also known library functions which the\n 1138    /// optimizer can reason about and therefore might introduce calls to out of\n 1139:   /// thin air.\n 1140    SmallSetVector<Function *, 4> LibFunctions;\n 1141  \n\n/home/mw/llvm/include/llvm/Bitcode/BitcodeWriter.h:\n   85      /// is used as the hash instead of computing from the generated bitcode.\n   86      /// Can be used to produce the same module hash for a minimized bitcode\n   87:     /// used just for the thin link as in the regular full bitcode that will\n   88      /// be used in the backend.\n   89      void writeModule(const Module &M, bool ShouldPreserveUseListOrder = false,\n   ..\n   91                       bool GenerateHash = false, ModuleHash *ModHash = nullptr);\n   92  \n   93:     /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n   94:     /// file) to the buffer specified at construction time. The thin link\n   95:     /// bitcode file is used for thin link, and it only contains the necessary\n   96:     /// information for thin link.\n   97      ///\n   98      /// ModHash is for use in ThinLTO incremental build, generated while the\n   ..\n  125    /// is used as the hash instead of computing from the generated bitcode.\n  126    /// Can be used to produce the same module hash for a minimized bitcode\n  127:   /// used just for the thin link as in the regular full bitcode that will\n  128    /// be used in the backend.\n  129    void WriteBitcodeToFile(const Module &M, raw_ostream &Out,\n  ...\n  133                            ModuleHash *ModHash = nullptr);\n  134  \n  135:   /// Write the specified thin link bitcode file (i.e., the minimized bitcode\n  136    /// file) to the given raw output stream, where it will be written in a new\n  137:   /// bitcode block. The thin link bitcode file is used for thin link, and it\n  138:   /// only contains the necessary information for thin link.\n  139    ///\n  140    /// ModHash is for use in ThinLTO incremental build, generated while the IR\n\n/home/mw/llvm/include/llvm/IR/ModuleSummaryIndex.h:\n  118      /// string table and is valid until module data is stored in memory.\n  119      /// This is guaranteed to happen until runThinLTOBackend function is\n  120:     /// called, so it is safe to use this field during thin link. This field\n  121      /// is only valid if summary index was loaded from BC file.\n  122      StringRef Name;\n\n/home/mw/llvm/include/llvm/LTO/LTO.h:\n  189      NativeObjectCache;\n  190  \n  191: /// A ThinBackend defines what happens after the thin-link phase during ThinLTO.\n  192  /// The details of this type definition aren't important; clients can only\n  193  /// create a ThinBackend using one of the create*ThinBackend() functions below.\n\n/home/mw/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:\n  260    /**\n  261     * Produce the combined summary index from all the bitcode files:\n  262:    * \"thin-link\".\n  263     */\n  264    std::unique_ptr<ModuleSummaryIndex> linkCombinedIndex();\n\n/home/mw/llvm/include/llvm/Object/ArchiveWriter.h:\n   41  Error writeArchive(StringRef ArcName, ArrayRef<NewArchiveMember> NewMembers,\n   42                     bool WriteSymtab, object::Archive::Kind Kind,\n   43:                    bool Deterministic, bool Thin,\n   44                     std::unique_ptr<MemoryBuffer> OldArchiveBuf = nullptr);\n   45  }\n\n/home/mw/llvm/include/llvm/Support/Compiler.h:\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // Due to layering constraints (Support depends on Demangler) this is a thin\n   11  // wrapper around the implementation that lives in llvm-c, though most clients\n   12  // can/should think of this as being provided by Support for simplicity (not\n\n/home/mw/llvm/include/llvm/Support/DataTypes.h:\n    8  //===----------------------------------------------------------------------===//\n    9  //\n   10: // Due to layering constraints (Support depends on llvm-c) this is a thin\n   11  // wrapper around the implementation that lives in llvm-c, though most clients\n   12  // can/should think of this as being provided by Support for simplicity (not\n\n/home/mw/llvm/include/llvm/Transforms/IPO/PassManagerBuilder.h:\n  139  \n  140    /// The module summary index to use for importing information to the\n  141:   /// thin LTO backends, for example for the CFI and devirtualization type\n  142    /// tests.\n  143    const ModuleSummaryIndex *ImportSummary = nullptr;\n\n/home/mw/llvm/include/llvm/Transforms/IPO/ThinLTOBitcodeWriter.h:\n    9  //\n   10  // This pass prepares a module containing type metadata for ThinLTO by splitting\n   11: // it into regular and thin LTO parts if possible, and writing both parts to\n   12  // a multi-module bitcode file. Modules that do not contain type metadata are\n   13  // written unmodified as a single module.\n   ..\n   29  \n   30  public:\n   31:   // Writes bitcode to OS. Also write thin link file to ThinLinkOS, if\n   32    // it's not nullptr.\n   33    ThinLTOBitcodeWriterPass(raw_ostream &OS, raw_ostream *ThinLinkOS)\n\n/home/mw/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:\n   72    /// Process globals so that they can be used in ThinLTO. This includes\n   73    /// promoting local variables so that they can be reference externally by\n   74:   /// thin lto imported globals and converting strong external globals to\n   75    /// available_externally.\n   76    void processGlobalsForThinLTO();\n\n500 matches across 159 files\n\n\nSearching 55287 files for \"bytecode::encode\" (whole word)\n\n\n\nSearching 55287 files for \"bytecode::encode\"\n\n/home/mw/0-rust/src/librustc_trans/back/write.rs:\n  716          if config.emit_bc_compressed {\n  717              let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n  718:             let data = bytecode::encode(&mtrans.llmod_id, data);\n  719              if let Err(e) = fs::write(&dst, data) {\n  720                  diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n\n1 match in 1 file\n\n\nSearching 55287 files for \"embed_bitcode(\"\n\n/home/mw/0-rust/src/librustc_trans/back/write.rs:\n  710  \n  711          if config.embed_bitcode {\n  712:             embed_bitcode(cgcx, llcx, llmod, Some(data));\n  713              timeline.record(\"embed-bc\");\n  714          }\n  ...\n  723          }\n  724      } else if config.embed_bitcode_marker {\n  725:         embed_bitcode(cgcx, llcx, llmod, None);\n  726      }\n  727  \n  ...\n  849  /// Basically all of this is us attempting to follow in the footsteps of clang\n  850  /// on iOS. See #35968 for lots more info.\n  851: unsafe fn embed_bitcode(cgcx: &CodegenContext,\n  852                          llcx: ContextRef,\n  853                          llmod: ModuleRef,\n\n3 matches in 1 file\n\n\nSearching 55287 files for \"embed_bitcode\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/bin/rustdoc:\n    <binary>\n\n/home/mw/0-rust/src/librustc/session/config.rs:\n 1301      ui_testing: bool = (false, parse_bool, [UNTRACKED],\n 1302            \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n 1303:     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n 1304            \"embed LLVM bitcode in object files\"),\n 1305      strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n\n/home/mw/0-rust/src/librustc_back/target/mod.rs:\n  478  \n  479      /// Whether or not bitcode is embedded in object files\n  480:     pub embed_bitcode: bool,\n  481  \n  482      /// Whether a .debug_gdb_scripts section will be added to the output object file\n  ...\n  553              codegen_backend: \"llvm\".to_string(),\n  554              default_hidden_visibility: false,\n  555:             embed_bitcode: false,\n  556              emit_debug_gdb_scripts: true,\n  557          }\n  ...\n  803          key!(codegen_backend);\n  804          key!(default_hidden_visibility, bool);\n  805:         key!(embed_bitcode, bool);\n  806          key!(emit_debug_gdb_scripts, bool);\n  807  \n  ...\n 1007          target_option_val!(codegen_backend);\n 1008          target_option_val!(default_hidden_visibility);\n 1009:         target_option_val!(embed_bitcode);\n 1010          target_option_val!(emit_debug_gdb_scripts);\n 1011  \n\n/home/mw/0-rust/src/librustc_trans/back/write.rs:\n  267      obj_is_bitcode: bool,\n  268      no_integrated_as: bool,\n  269:     embed_bitcode: bool,\n  270:     embed_bitcode_marker: bool,\n  271  }\n  272  \n  ...\n  289              emit_obj: false,\n  290              obj_is_bitcode: false,\n  291:             embed_bitcode: false,\n  292:             embed_bitcode_marker: false,\n  293              no_integrated_as: false,\n  294  \n  ...\n  311          self.inline_threshold = sess.opts.cg.inline_threshold;\n  312          self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n  313:         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n  314:             sess.opts.debugging_opts.embed_bitcode;\n  315:         if embed_bitcode {\n  316              match sess.opts.optimize {\n  317                  config::OptLevel::No |\n  318                  config::OptLevel::Less => {\n  319:                     self.embed_bitcode_marker = embed_bitcode;\n  320                  }\n  321:                 _ => self.embed_bitcode = embed_bitcode,\n  322              }\n  323          }\n  ...\n  690  \n  691  \n  692:     if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n  693          let thin;\n  694          let old;\n  ...\n  709          }\n  710  \n  711:         if config.embed_bitcode {\n  712:             embed_bitcode(cgcx, llcx, llmod, Some(data));\n  713              timeline.record(\"embed-bc\");\n  714          }\n  ...\n  722              timeline.record(\"compress-bc\");\n  723          }\n  724:     } else if config.embed_bitcode_marker {\n  725:         embed_bitcode(cgcx, llcx, llmod, None);\n  726      }\n  727  \n  ...\n  849  /// Basically all of this is us attempting to follow in the footsteps of clang\n  850  /// on iOS. See #35968 for lots more info.\n  851: unsafe fn embed_bitcode(cgcx: &CodegenContext,\n  852                          llcx: ContextRef,\n  853                          llmod: ModuleRef,\n\n24 matches across 4 files\n\n\nSearching 55287 files for \"embed_bitcode\"\n\n/home/mw/0-rust/build/x86_64-unknown-linux-gnu/stage0/bin/rustdoc:\n    <binary>\n\n/home/mw/0-rust/src/librustc/session/config.rs:\n 1301      ui_testing: bool = (false, parse_bool, [UNTRACKED],\n 1302            \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n 1303:     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n 1304            \"embed LLVM bitcode in object files\"),\n 1305      strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n\n/home/mw/0-rust/src/librustc_back/target/mod.rs:\n  478  \n  479      /// Whether or not bitcode is embedded in object files\n  480:     pub embed_bitcode: bool,\n  481  \n  482      /// Whether a .debug_gdb_scripts section will be added to the output object file\n  ...\n  553              codegen_backend: \"llvm\".to_string(),\n  554              default_hidden_visibility: false,\n  555:             embed_bitcode: false,\n  556              emit_debug_gdb_scripts: true,\n  557          }\n  ...\n  803          key!(codegen_backend);\n  804          key!(default_hidden_visibility, bool);\n  805:         key!(embed_bitcode, bool);\n  806          key!(emit_debug_gdb_scripts, bool);\n  807  \n  ...\n 1007          target_option_val!(codegen_backend);\n 1008          target_option_val!(default_hidden_visibility);\n 1009:         target_option_val!(embed_bitcode);\n 1010          target_option_val!(emit_debug_gdb_scripts);\n 1011  \n\n/home/mw/0-rust/src/librustc_trans/back/write.rs:\n  267      obj_is_bitcode: bool,\n  268      no_integrated_as: bool,\n  269:     embed_bitcode: bool,\n  270:     embed_bitcode_marker: bool,\n  271  }\n  272  \n  ...\n  289              emit_obj: false,\n  290              obj_is_bitcode: false,\n  291:             embed_bitcode: false,\n  292:             embed_bitcode_marker: false,\n  293              no_integrated_as: false,\n  294  \n  ...\n  311          self.inline_threshold = sess.opts.cg.inline_threshold;\n  312          self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n  313:         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n  314:             sess.opts.debugging_opts.embed_bitcode;\n  315:         if embed_bitcode {\n  316              match sess.opts.optimize {\n  317                  config::OptLevel::No |\n  318                  config::OptLevel::Less => {\n  319:                     self.embed_bitcode_marker = embed_bitcode;\n  320                  }\n  321:                 _ => self.embed_bitcode = embed_bitcode,\n  322              }\n  323          }\n  ...\n  690  \n  691  \n  692:     if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n  693          let thin;\n  694          let old;\n  ...\n  709          }\n  710  \n  711:         if config.embed_bitcode {\n  712:             embed_bitcode(cgcx, llcx, llmod, Some(data));\n  713              timeline.record(\"embed-bc\");\n  714          }\n  ...\n  722              timeline.record(\"compress-bc\");\n  723          }\n  724:     } else if config.embed_bitcode_marker {\n  725:         embed_bitcode(cgcx, llcx, llmod, None);\n  726      }\n  727  \n  ...\n  849  /// Basically all of this is us attempting to follow in the footsteps of clang\n  850  /// on iOS. See #35968 for lots more info.\n  851: unsafe fn embed_bitcode(cgcx: &CodegenContext,\n  852                          llcx: ContextRef,\n  853                          llmod: ModuleRef,\n\n24 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 1049400,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/mw/0-rust/src/librustc_trans/back/write.rs",
			"settings":
			{
				"buffer_size": 96183,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Bitcode/BitcodeWriter.h",
			"settings":
			{
				"buffer_size": 6738,
				"line_ending": "Unix"
			}
		},
		{
			"file": "simple-rust-obj/func.rs",
			"settings":
			{
				"buffer_size": 61,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "simple-rust-obj/main.cpp",
			"settings":
			{
				"buffer_size": 168,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "simple-rust-obj/Makefile",
			"settings":
			{
				"buffer_size": 1124,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "7f45 4c46 0201 0100 0000 0000 0000 0000\n0100 3e00 0100 0000 0000 0000 0000 0000\n0000 0000 0000 0000 3806 0000 0000 0000\n0000 0000 4000 0000 0000 4000 0800 0100\n83cf 0189 f8c3 0000 0000 0000 0000 0000\n4243 c0de 3514 0000 0500 0000 620c 3024\n4959 bea6 eed3 3e2d 4401 3205 0000 0000\n210c 0000 0b01 0000 0b02 2100 0200 0000\n1300 0000 0781 2391 41c8 0449 0610 3239\n9201 840c 2505 0819 1e04 8b62 800c 4502\n4292 0b42 6410 3214 3808 184b 0a32 3288\n4890 1420 4346 88a5 0019 3242 0449 0e90\n9121 c450 4151 818c e183 e58a 0419 4606\n5118 0000 0f00 0000 1bce 20f8 ffff ffff\n0180 0340 0228 021e e4e1 1dc4 a11c da60\n1ee8 211c c661 1d80 5ff8 0579 a887 79a0\n875f 8007 7978 0771 2887 79a0 8770 1887\n7500 0000 4918 0000 0100 0000 1382 0000\n8920 0000 0b00 0000 3222 c808 2064 8504\n9321 a484 0493 21e3 84a1 9014 124c 868c\n0b84 644c 1014 7304 6050 0480 3210 3002\n0000 0000 1330 7cc0 033b f805 3ba0 8336\na807 7758 0777 7887 7b70 8736 6087 7470\n877a c087 3638 0777 a887 0d65 500e 6dd0\n0e7a 500e 6d90 0e76 4007 7a60 0774 d006\ne680 0770 a007 7120 0778 d006 ee80 077a\n1007 76a0 0773 2007 7a60 0774 d006 b310\n0772 8007 1a21 4c0e d3c0 5c77 8f61 2ddc\n0d77 33d3 6665 194e 1626 93cb e4d9 cd26\nabe5 c6b1 3059 0cc3 8971 3097 7c3e 4402\n8600 0080 0000 0020 0000 0000 0089 0d02\n4511 0200 0062 3100 7400 0000 3308 801c\nc4e1 1c66 1401 3d88 4338 84c3 8c42 8007\n7978 0773 9871 0ce6 000f ed10 0ef4 800e\n330c 421e c2c1 1dce a11c 6630 053d 8843\n3884 831b cc03 3dc8 433d 8c03 3dcc 788c\n7470 077b 0807 7948 8770 7007 7a70 0376\n7887 7020 8719 cc11 0eec 900e e130 0f6e\n300f e3f0 0ef0 500e 3310 c41d de21 1cd8\n211d c261 1e66 3089 3bbc 833b d043 39b4\n033c bc83 3c84 033b ccf0 1476 6007 7b68\n0737 6887 7268 0737 8087 7090 8770 6007\n7628 0776 f805 7678 8777 8087 5f08 8771\n1887 7298 8779 9881 2cee f00e eee0 0ef5\nc00e ec30 0362 c8a1 1ce4 a11c cca1 1ce4\na11c dc61 1cca 211c c481 1dca 6106 d690\n4339 c843 3998 4339 c843 39b8 c338 9443\n3888 033b 94c3 2fbc 833c fc82 3bd4 033b\nb0c3 0cc7 6987 7058 8772 7083 7468 0778\n6087 7418 8774 a087 19ce 530f ee00 0ff2\n500e e490 0ee3 400f e120 0eec 500e 3320\n281d dcc1 1ec2 411e d221 1cdc 811e dce0\n1ce4 e11d ea01 1e66 1851 38b0 433a 9c83\n3bcc 5024 7660 077b 6807 3760 8777 7807\n7898 514c f490 0ff0 500e 331e 6a1e ca61\n1ce8 211d dec1 1d7e 011e e4a1 1ccc 211d\nf061 0654 8583 38cc c33b b043 3dd0 4339\nfcc2 3ce4 433b 88c3 3bb0 c38c c50a 8779\n9887 7718 8774 0807 7a28 0772 9881 5ce3\n100e ecc0 0ee5 500e f330 23c1 d241 1ee4\ne117 d8e1 1dde 011e 0000 0000 a918 0000\n0b00 0000 0b0a 7228 8777 8007 7a58 7098\n433d b8c3 38b0 4339 d0c3 82e6 1cc6 a10d\ne841 1ec2 c11d e621 1de8 211d dec1 1d00\nd110 0000 0600 0000 07cc 3ca4 833b 9c03\n3b94 033d a083 3c94 4338 90c3 0100 0000\n6120 0000 0600 0000 1304 412c 1000 0000\n0100 0000 8412 0000 2504 9b01 0000 0000\na120 0000 0a00 0000 a304 84a0 0184 c810\n2242 c408 092a 4088 0c21 2244 8c90 9403\n84c8 1821 210f 0891 2144 0080 4001 0000\n7120 0000 0300 0000 320e 1022 8400 f401\n0000 0000 8b8a f46d 6d93 16ce 71a5 5d53\na045 d59f f300 e4fd 94dc 8319 4e5d ff1c\n0000 0000 650c 0000 1d00 0000 1203 94e8\n0000 0000 0100 0000 0300 0000 0500 0000\n4400 0000 0100 0000 5000 0000 0000 0000\n5000 0000 0100 0000 6800 0000 0000 0000\n0800 0000 1800 0000 2000 0000 2900 0000\n4900 0000 0000 0000 0000 0000 0100 0000\n0000 0000 0000 0000 0300 0000 0000 0000\n0300 0000 ffff ffff 0034 0000 0000 0000\n5d0c 0000 1600 0000 1203 94a9 0000 0000\n666f 6f36 2e30 2e30 7838 365f 3634 2d75\n6e6b 6e6f 776e 2d6c 696e 7578 2d67 6e75\n6675 6e63 302d 3837 3837 6634 3365 3238\n3261 6464 6564 3337 3632 3539 6331 6164\n6230 3862 3830 2e72 7300 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0700 0000 0400 f1ff\n0000 0000 0000 0000 0000 0000 0000 0000\n3700 0000 1200 0300 0000 0000 0000 0000\n0600 0000 0000 0000 002e 7465 7874 0066\n756e 6330 2d38 3738 3766 3433 6532 3832\n6164 6465 6433 3736 3235 3963 3161 6462\n3038 6238 302e 7273 002e 7465 7874 2e66\n6f6f 002e 6e6f 7465 2e47 4e55 2d73 7461\n636b 002e 6c6c 766d 636d 6400 2e6c 6c76\n6d62 6300 2e73 7472 7461 6200 2e73 796d\n7461 6200 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 5c00 0000 0300 0000\n0000 0000 0000 0000 0000 0000 0000 0000\nc805 0000 0000 0000 6c00 0000 0000 0000\n0000 0000 0000 0000 0100 0000 0000 0000\n0000 0000 0000 0000 0100 0000 0100 0000\n0600 0000 0000 0000 0000 0000 0000 0000\n4000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0400 0000 0000 0000\n0000 0000 0000 0000 3100 0000 0100 0000\n0600 0000 0000 0000 0000 0000 0000 0000\n4000 0000 0000 0000 0600 0000 0000 0000\n0000 0000 0000 0000 1000 0000 0000 0000\n0000 0000 0000 0000 5400 0000 0100 0000\n0300 0000 0000 0000 0000 0000 0000 0000\n5000 0000 0000 0000 3005 0000 0000 0000\n0000 0000 0000 0000 1000 0000 0000 0000\n0000 0000 0000 0000 4b00 0000 0100 0000\n0300 0000 0000 0000 0000 0000 0000 0000\n8005 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0100 0000 0000 0000\n0000 0000 0000 0000 3b00 0000 0100 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n8005 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0100 0000 0000 0000\n0000 0000 0000 0000 6400 0000 0200 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n8005 0000 0000 0000 4800 0000 0000 0000\n0100 0000 0200 0000 0800 0000 0000 0000\n1800 0000 0000 0000 ",
			"file": "simple-rust-obj/func.o",
			"file_size": 2104,
			"file_write_time": 131679215107922527,
			"settings":
			{
				"buffer_size": 5260,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/llvm/tools/gold/gold-plugin.cpp",
			"settings":
			{
				"buffer_size": 39267,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/librustc_trans/back/linker.rs",
			"settings":
			{
				"buffer_size": 33291,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/librustc_trans/back/link.rs",
			"settings":
			{
				"buffer_size": 66051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/llvm/tools/opt/opt.cpp",
			"settings":
			{
				"buffer_size": 26600,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/PassSupport.h",
			"settings":
			{
				"buffer_size": 11455,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp",
			"settings":
			{
				"buffer_size": 18002,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO.h",
			"settings":
			{
				"buffer_size": 11261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/rustllvm/PassWrapper.cpp",
			"settings":
			{
				"buffer_size": 41807,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/0-rust/src/librustc_trans/back/lto.rs",
			"settings":
			{
				"buffer_size": 31234,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/llvm/include/llvm/LTO/LTOBackend.h",
			"settings":
			{
				"buffer_size": 1824,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mw/llvm/include/llvm/LTO/LTO.h",
			"settings":
			{
				"buffer_size": 16972,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 285.0,
		"last_filter": "add",
		"selected_items":
		[
			[
				"add",
				"Project: Add Folder"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"sche",
				"UI: Select Color Scheme"
			],
			[
				"them",
				"UI: Select Theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/mw/llvm",
		"/home/mw/llvm/tools",
		"/home/mw/llvm/tools/gold",
		"/home/mw/0-rust",
		"/home/mw/0-rust/src",
		"/home/mw/0-rust/src/librustc_trans",
		"/home/mw/0-rust/src/librustc_trans/back",
		"/home/mw/cross-lto",
		"/home/mw/cross-lto/simple-rust-obj"
	],
	"file_history":
	[
		"/home/mw/cross-lto/cpp/lto/main.o",
		"/home/mw/cross-lto/cpp/Makefile",
		"/home/mw/cross-lto/cpp/dosomething.cpp",
		"/home/mw/cross-lto/cpp/main.o.ll",
		"/home/mw/cross-lto/cpp/common.h",
		"/home/mw/cross-lto/cpp/main.cpp"
	],
	"find":
	{
		"height": 57.0
	},
	"find_in_files":
	{
		"height": 158.0,
		"where_history":
		[
			"/home/mw/0-rust,/home/mw/llvm/include,-*.rlib",
			"/home/mw/0-rust,/home/mw/llvm/include",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"embed_bitcode",
			"4243",
			"TheOutputType",
			"save_tem",
			"savetem",
			"message",
			"DebugPassManager",
			"debug_pass_manager",
			"embed_bitcode",
			"embed_bitcode(",
			"embed_bitcode",
			"bytecode::encode",
			"link_staticlib",
			"link_binary_output",
			"thin",
			"lto",
			"cl::opt<",
			"OutputAssembly",
			"createWriteThinLTOBitcodePass",
			"RegisterPass",
			"class RegisterPass",
			"-flto=thin",
			"WriteThinLTOBitcode",
			"createWriteThinLTOBitcodePass",
			"LLVMRustPrepareThinLTOImport",
			"ThinModule",
			"ThinShared",
			"thin_lto",
			"thin",
			"thinlto",
			"clang"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1049400,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										250,
										257
									],
									[
										547,
										554
									],
									[
										913,
										920
									],
									[
										1160,
										1167
									],
									[
										1536,
										1543
									],
									[
										1939,
										1946
									],
									[
										2275,
										2282
									],
									[
										2577,
										2584
									],
									[
										2837,
										2844
									],
									[
										3136,
										3143
									],
									[
										3501,
										3508
									],
									[
										3908,
										3915
									],
									[
										4150,
										4157
									],
									[
										4456,
										4463
									],
									[
										4627,
										4634
									],
									[
										4853,
										4860
									],
									[
										5162,
										5169
									],
									[
										5327,
										5334
									],
									[
										5571,
										5578
									],
									[
										5953,
										5960
									],
									[
										6285,
										6292
									],
									[
										6444,
										6451
									],
									[
										6731,
										6738
									],
									[
										7076,
										7083
									],
									[
										7384,
										7391
									],
									[
										7600,
										7607
									],
									[
										7971,
										7978
									],
									[
										8295,
										8302
									],
									[
										8566,
										8573
									],
									[
										8907,
										8914
									],
									[
										9165,
										9172
									],
									[
										9453,
										9460
									],
									[
										9769,
										9776
									],
									[
										9967,
										9974
									],
									[
										10143,
										10150
									],
									[
										10347,
										10354
									],
									[
										10539,
										10546
									],
									[
										10720,
										10727
									],
									[
										10926,
										10933
									],
									[
										11255,
										11262
									],
									[
										11324,
										11331
									],
									[
										11542,
										11549
									],
									[
										11848,
										11855
									],
									[
										11917,
										11924
									],
									[
										11955,
										11962
									],
									[
										12264,
										12271
									],
									[
										12571,
										12578
									],
									[
										12951,
										12958
									],
									[
										13254,
										13261
									],
									[
										13635,
										13642
									],
									[
										13919,
										13926
									],
									[
										13945,
										13952
									],
									[
										14170,
										14177
									],
									[
										14484,
										14491
									],
									[
										14735,
										14742
									],
									[
										14912,
										14919
									],
									[
										15139,
										15146
									],
									[
										15505,
										15512
									],
									[
										15749,
										15756
									],
									[
										16031,
										16038
									],
									[
										16369,
										16376
									],
									[
										16394,
										16401
									],
									[
										16572,
										16579
									],
									[
										16857,
										16864
									],
									[
										16939,
										16946
									],
									[
										17139,
										17146
									],
									[
										17186,
										17193
									],
									[
										17340,
										17347
									],
									[
										17453,
										17460
									],
									[
										17693,
										17700
									],
									[
										17728,
										17735
									],
									[
										17907,
										17914
									],
									[
										18004,
										18011
									],
									[
										18209,
										18216
									],
									[
										18231,
										18238
									],
									[
										18305,
										18312
									],
									[
										18522,
										18529
									],
									[
										18797,
										18804
									],
									[
										18914,
										18921
									],
									[
										19137,
										19144
									],
									[
										19547,
										19554
									],
									[
										19776,
										19783
									],
									[
										19842,
										19849
									],
									[
										19891,
										19898
									],
									[
										19924,
										19931
									],
									[
										19980,
										19987
									],
									[
										20047,
										20054
									],
									[
										20209,
										20216
									],
									[
										20368,
										20375
									],
									[
										20557,
										20564
									],
									[
										20710,
										20717
									],
									[
										20939,
										20946
									],
									[
										21127,
										21134
									],
									[
										21378,
										21385
									],
									[
										21535,
										21542
									],
									[
										21833,
										21840
									],
									[
										22151,
										22158
									],
									[
										22502,
										22509
									],
									[
										22757,
										22764
									],
									[
										22817,
										22824
									],
									[
										23061,
										23068
									],
									[
										23288,
										23295
									],
									[
										23529,
										23536
									],
									[
										23823,
										23830
									],
									[
										24099,
										24106
									],
									[
										24129,
										24136
									],
									[
										24343,
										24350
									],
									[
										24635,
										24642
									],
									[
										24699,
										24706
									],
									[
										24716,
										24723
									],
									[
										24889,
										24896
									],
									[
										25004,
										25011
									],
									[
										25054,
										25061
									],
									[
										25322,
										25329
									],
									[
										25649,
										25656
									],
									[
										25707,
										25714
									],
									[
										25829,
										25836
									],
									[
										25888,
										25895
									],
									[
										26099,
										26106
									],
									[
										26389,
										26396
									],
									[
										26669,
										26676
									],
									[
										26922,
										26929
									],
									[
										26963,
										26970
									],
									[
										27123,
										27130
									],
									[
										27540,
										27547
									],
									[
										27838,
										27845
									],
									[
										27874,
										27881
									],
									[
										28267,
										28274
									],
									[
										28459,
										28466
									],
									[
										28760,
										28767
									],
									[
										29000,
										29007
									],
									[
										29022,
										29029
									],
									[
										29156,
										29163
									],
									[
										29275,
										29282
									],
									[
										29380,
										29387
									],
									[
										29515,
										29522
									],
									[
										29692,
										29699
									],
									[
										29846,
										29853
									],
									[
										29865,
										29872
									],
									[
										30010,
										30017
									],
									[
										30125,
										30132
									],
									[
										30149,
										30156
									],
									[
										30220,
										30227
									],
									[
										30451,
										30458
									],
									[
										30648,
										30655
									],
									[
										30675,
										30682
									],
									[
										30952,
										30959
									],
									[
										31000,
										31007
									],
									[
										31105,
										31112
									],
									[
										31129,
										31136
									],
									[
										31233,
										31240
									],
									[
										31433,
										31440
									],
									[
										31464,
										31471
									],
									[
										31576,
										31583
									],
									[
										31650,
										31657
									],
									[
										31820,
										31827
									],
									[
										31846,
										31853
									],
									[
										32026,
										32033
									],
									[
										32219,
										32226
									],
									[
										32255,
										32262
									],
									[
										32364,
										32371
									],
									[
										32438,
										32445
									],
									[
										32602,
										32609
									],
									[
										32633,
										32640
									],
									[
										32813,
										32820
									],
									[
										32843,
										32850
									],
									[
										33021,
										33028
									],
									[
										33055,
										33062
									],
									[
										33328,
										33335
									],
									[
										33372,
										33379
									],
									[
										33470,
										33477
									],
									[
										33504,
										33511
									],
									[
										33682,
										33689
									],
									[
										33706,
										33713
									],
									[
										33838,
										33845
									],
									[
										33870,
										33877
									],
									[
										34045,
										34052
									],
									[
										34078,
										34085
									],
									[
										34259,
										34266
									],
									[
										34384,
										34391
									],
									[
										34497,
										34504
									],
									[
										34762,
										34769
									],
									[
										34877,
										34884
									],
									[
										34918,
										34925
									],
									[
										35207,
										35214
									],
									[
										35229,
										35236
									],
									[
										35301,
										35308
									],
									[
										35470,
										35477
									],
									[
										35514,
										35521
									],
									[
										35783,
										35790
									],
									[
										35885,
										35892
									],
									[
										36167,
										36174
									],
									[
										36197,
										36204
									],
									[
										36373,
										36380
									],
									[
										36416,
										36423
									],
									[
										36596,
										36603
									],
									[
										36673,
										36680
									],
									[
										36809,
										36816
									],
									[
										36852,
										36859
									],
									[
										37039,
										37046
									],
									[
										37076,
										37083
									],
									[
										37261,
										37268
									],
									[
										37298,
										37305
									],
									[
										37632,
										37639
									],
									[
										37734,
										37741
									],
									[
										37966,
										37973
									],
									[
										38078,
										38085
									],
									[
										38103,
										38110
									],
									[
										38343,
										38350
									],
									[
										38652,
										38659
									],
									[
										38975,
										38982
									],
									[
										39230,
										39237
									],
									[
										39424,
										39431
									],
									[
										39583,
										39590
									],
									[
										39846,
										39853
									],
									[
										40082,
										40089
									],
									[
										40417,
										40424
									],
									[
										40656,
										40663
									],
									[
										40856,
										40863
									],
									[
										41087,
										41094
									],
									[
										41399,
										41406
									],
									[
										41610,
										41617
									],
									[
										41731,
										41738
									],
									[
										41843,
										41850
									],
									[
										41868,
										41875
									],
									[
										41930,
										41937
									],
									[
										42304,
										42311
									],
									[
										42653,
										42660
									],
									[
										42994,
										43001
									],
									[
										43327,
										43334
									],
									[
										43456,
										43463
									],
									[
										43639,
										43646
									],
									[
										43885,
										43892
									],
									[
										44133,
										44140
									],
									[
										44388,
										44395
									],
									[
										44527,
										44534
									],
									[
										44833,
										44840
									],
									[
										45040,
										45047
									],
									[
										45283,
										45290
									],
									[
										45624,
										45631
									],
									[
										45815,
										45822
									],
									[
										46002,
										46009
									],
									[
										46016,
										46023
									],
									[
										46276,
										46283
									],
									[
										46529,
										46536
									],
									[
										46539,
										46546
									],
									[
										46657,
										46664
									],
									[
										46687,
										46694
									],
									[
										46964,
										46971
									],
									[
										47222,
										47229
									],
									[
										47341,
										47348
									],
									[
										47390,
										47397
									],
									[
										47628,
										47635
									],
									[
										47709,
										47716
									],
									[
										47893,
										47900
									],
									[
										48200,
										48207
									],
									[
										48521,
										48528
									],
									[
										48700,
										48707
									],
									[
										48845,
										48852
									],
									[
										49074,
										49081
									],
									[
										49193,
										49200
									],
									[
										49349,
										49356
									],
									[
										49557,
										49564
									],
									[
										49649,
										49656
									],
									[
										49841,
										49848
									],
									[
										50115,
										50122
									],
									[
										50346,
										50353
									],
									[
										50688,
										50695
									],
									[
										51047,
										51054
									],
									[
										51365,
										51372
									],
									[
										51552,
										51559
									],
									[
										51690,
										51697
									],
									[
										51761,
										51768
									],
									[
										51895,
										51902
									],
									[
										52066,
										52073
									],
									[
										52102,
										52109
									],
									[
										52426,
										52433
									],
									[
										52654,
										52661
									],
									[
										52757,
										52764
									],
									[
										52920,
										52927
									],
									[
										53036,
										53043
									],
									[
										53356,
										53363
									],
									[
										53670,
										53677
									],
									[
										53905,
										53912
									],
									[
										54131,
										54138
									],
									[
										54167,
										54174
									],
									[
										54350,
										54357
									],
									[
										54573,
										54580
									],
									[
										54608,
										54615
									],
									[
										54785,
										54792
									],
									[
										54807,
										54814
									],
									[
										55075,
										55082
									],
									[
										55318,
										55325
									],
									[
										55625,
										55632
									],
									[
										55845,
										55852
									],
									[
										56197,
										56204
									],
									[
										56328,
										56335
									],
									[
										56362,
										56369
									],
									[
										56634,
										56641
									],
									[
										56900,
										56907
									],
									[
										56932,
										56939
									],
									[
										57135,
										57142
									],
									[
										57459,
										57466
									],
									[
										57526,
										57533
									],
									[
										57744,
										57751
									],
									[
										57994,
										58001
									],
									[
										58110,
										58117
									],
									[
										58320,
										58327
									],
									[
										58521,
										58528
									],
									[
										58733,
										58740
									],
									[
										58906,
										58913
									],
									[
										58994,
										59001
									],
									[
										59277,
										59284
									],
									[
										59418,
										59425
									],
									[
										59557,
										59564
									],
									[
										59806,
										59813
									],
									[
										59879,
										59886
									],
									[
										59946,
										59953
									],
									[
										60045,
										60052
									],
									[
										60385,
										60392
									],
									[
										60719,
										60726
									],
									[
										61003,
										61010
									],
									[
										61159,
										61166
									],
									[
										61337,
										61344
									],
									[
										61474,
										61481
									],
									[
										61888,
										61895
									],
									[
										62192,
										62199
									],
									[
										62452,
										62459
									],
									[
										62696,
										62703
									],
									[
										62906,
										62913
									],
									[
										63060,
										63067
									],
									[
										63141,
										63148
									],
									[
										63399,
										63406
									],
									[
										63611,
										63618
									],
									[
										63735,
										63742
									],
									[
										64040,
										64047
									],
									[
										64263,
										64270
									],
									[
										64441,
										64448
									],
									[
										64698,
										64705
									],
									[
										64929,
										64936
									],
									[
										65226,
										65233
									],
									[
										65517,
										65524
									],
									[
										65825,
										65832
									],
									[
										66149,
										66156
									],
									[
										66327,
										66334
									],
									[
										66373,
										66380
									],
									[
										66548,
										66555
									],
									[
										66613,
										66620
									],
									[
										67015,
										67022
									],
									[
										67198,
										67205
									],
									[
										67229,
										67236
									],
									[
										67619,
										67626
									],
									[
										67892,
										67899
									],
									[
										68181,
										68188
									],
									[
										68440,
										68447
									],
									[
										68757,
										68764
									],
									[
										68988,
										68995
									],
									[
										69290,
										69297
									],
									[
										69307,
										69314
									],
									[
										69607,
										69614
									],
									[
										69870,
										69877
									],
									[
										70026,
										70033
									],
									[
										70326,
										70333
									],
									[
										70560,
										70567
									],
									[
										70922,
										70929
									],
									[
										71238,
										71245
									],
									[
										71302,
										71309
									],
									[
										71406,
										71413
									],
									[
										71447,
										71454
									],
									[
										71593,
										71600
									],
									[
										71799,
										71806
									],
									[
										72018,
										72025
									],
									[
										72395,
										72402
									],
									[
										72616,
										72623
									],
									[
										72866,
										72873
									],
									[
										73029,
										73036
									],
									[
										73323,
										73330
									],
									[
										73530,
										73537
									],
									[
										73764,
										73771
									],
									[
										74069,
										74076
									],
									[
										74351,
										74358
									],
									[
										74673,
										74680
									],
									[
										74937,
										74944
									],
									[
										75158,
										75165
									],
									[
										75209,
										75216
									],
									[
										75295,
										75302
									],
									[
										75337,
										75344
									],
									[
										75673,
										75680
									],
									[
										76070,
										76077
									],
									[
										76407,
										76414
									],
									[
										76765,
										76772
									],
									[
										76919,
										76926
									],
									[
										77171,
										77178
									],
									[
										77366,
										77373
									],
									[
										77590,
										77597
									],
									[
										77971,
										77978
									],
									[
										78248,
										78255
									],
									[
										78562,
										78569
									],
									[
										78821,
										78828
									],
									[
										79142,
										79149
									],
									[
										79255,
										79262
									],
									[
										79546,
										79553
									],
									[
										79661,
										79668
									],
									[
										79904,
										79911
									],
									[
										80158,
										80165
									],
									[
										80438,
										80445
									],
									[
										80572,
										80579
									],
									[
										80647,
										80654
									],
									[
										80864,
										80871
									],
									[
										80933,
										80940
									],
									[
										81278,
										81285
									],
									[
										81382,
										81389
									],
									[
										81582,
										81589
									],
									[
										81818,
										81825
									],
									[
										82177,
										82184
									],
									[
										82198,
										82205
									],
									[
										82305,
										82312
									],
									[
										82478,
										82485
									],
									[
										82504,
										82511
									],
									[
										82531,
										82538
									],
									[
										82764,
										82771
									],
									[
										83000,
										83007
									],
									[
										83118,
										83125
									],
									[
										83436,
										83443
									],
									[
										83589,
										83596
									],
									[
										83708,
										83715
									],
									[
										83824,
										83831
									],
									[
										83852,
										83859
									],
									[
										84158,
										84165
									],
									[
										84368,
										84375
									],
									[
										84567,
										84574
									],
									[
										84621,
										84628
									],
									[
										84678,
										84685
									],
									[
										84875,
										84882
									],
									[
										85134,
										85141
									],
									[
										85204,
										85211
									],
									[
										85226,
										85233
									],
									[
										85420,
										85427
									],
									[
										85653,
										85660
									],
									[
										85805,
										85812
									],
									[
										85889,
										85896
									],
									[
										86080,
										86087
									],
									[
										86140,
										86147
									],
									[
										86314,
										86321
									],
									[
										86392,
										86399
									],
									[
										86532,
										86539
									],
									[
										86700,
										86707
									],
									[
										87024,
										87031
									],
									[
										87041,
										87048
									],
									[
										87225,
										87232
									],
									[
										87443,
										87450
									],
									[
										87673,
										87680
									],
									[
										87749,
										87756
									],
									[
										88069,
										88076
									],
									[
										88348,
										88355
									],
									[
										88688,
										88695
									],
									[
										88993,
										89000
									],
									[
										89163,
										89170
									],
									[
										89215,
										89222
									],
									[
										89449,
										89456
									],
									[
										89743,
										89750
									],
									[
										89988,
										89995
									],
									[
										90393,
										90400
									],
									[
										90563,
										90570
									],
									[
										90923,
										90930
									],
									[
										91086,
										91093
									],
									[
										91357,
										91364
									],
									[
										91452,
										91459
									],
									[
										91548,
										91555
									],
									[
										91693,
										91700
									],
									[
										91824,
										91831
									],
									[
										92043,
										92050
									],
									[
										92207,
										92214
									],
									[
										92265,
										92272
									],
									[
										92288,
										92295
									],
									[
										92342,
										92349
									],
									[
										92592,
										92599
									],
									[
										92615,
										92622
									],
									[
										92667,
										92674
									],
									[
										92742,
										92749
									],
									[
										92886,
										92893
									],
									[
										92974,
										92981
									],
									[
										93177,
										93184
									],
									[
										93577,
										93584
									],
									[
										93940,
										93947
									],
									[
										93980,
										93987
									],
									[
										94277,
										94284
									],
									[
										94552,
										94559
									],
									[
										94846,
										94853
									],
									[
										95069,
										95076
									],
									[
										95261,
										95268
									],
									[
										95464,
										95471
									],
									[
										95551,
										95558
									],
									[
										95623,
										95630
									],
									[
										95708,
										95715
									],
									[
										95816,
										95823
									],
									[
										95900,
										95907
									],
									[
										96078,
										96085
									],
									[
										96140,
										96147
									],
									[
										96439,
										96446
									],
									[
										96692,
										96699
									],
									[
										96873,
										96880
									],
									[
										97020,
										97027
									],
									[
										97267,
										97274
									],
									[
										97517,
										97524
									],
									[
										97930,
										97937
									],
									[
										97980,
										97987
									],
									[
										98046,
										98053
									],
									[
										98223,
										98230
									],
									[
										98504,
										98511
									],
									[
										98821,
										98828
									],
									[
										98924,
										98931
									],
									[
										99203,
										99210
									],
									[
										99326,
										99333
									],
									[
										99564,
										99571
									],
									[
										99904,
										99911
									],
									[
										99975,
										99982
									],
									[
										100041,
										100048
									],
									[
										100197,
										100204
									],
									[
										100227,
										100234
									],
									[
										100330,
										100337
									],
									[
										100360,
										100367
									],
									[
										100585,
										100592
									],
									[
										100969,
										100976
									],
									[
										101056,
										101063
									],
									[
										101122,
										101129
									],
									[
										101231,
										101238
									],
									[
										101497,
										101504
									],
									[
										101888,
										101895
									],
									[
										101982,
										101989
									],
									[
										102048,
										102055
									],
									[
										102157,
										102164
									],
									[
										102488,
										102495
									],
									[
										102559,
										102566
									],
									[
										102625,
										102632
									],
									[
										102781,
										102788
									],
									[
										102811,
										102818
									],
									[
										102910,
										102917
									],
									[
										102940,
										102947
									],
									[
										103161,
										103168
									],
									[
										103505,
										103512
									],
									[
										103724,
										103731
									],
									[
										104067,
										104074
									],
									[
										104409,
										104416
									],
									[
										104469,
										104476
									],
									[
										104820,
										104827
									],
									[
										104880,
										104887
									],
									[
										105216,
										105223
									],
									[
										105276,
										105283
									],
									[
										105569,
										105576
									],
									[
										105629,
										105636
									],
									[
										105837,
										105844
									],
									[
										106128,
										106135
									],
									[
										106396,
										106403
									],
									[
										106702,
										106709
									],
									[
										107163,
										107170
									],
									[
										107322,
										107329
									],
									[
										107405,
										107412
									],
									[
										107608,
										107615
									],
									[
										107772,
										107779
									],
									[
										108023,
										108030
									],
									[
										108340,
										108347
									],
									[
										108670,
										108677
									],
									[
										108962,
										108969
									],
									[
										108971,
										108978
									],
									[
										109258,
										109265
									],
									[
										109267,
										109274
									],
									[
										109586,
										109593
									],
									[
										109671,
										109678
									],
									[
										109680,
										109687
									],
									[
										109723,
										109730
									],
									[
										109945,
										109952
									],
									[
										110210,
										110217
									],
									[
										110464,
										110471
									],
									[
										110672,
										110679
									],
									[
										111070,
										111077
									],
									[
										111443,
										111450
									],
									[
										111802,
										111809
									],
									[
										112206,
										112213
									],
									[
										112535,
										112542
									],
									[
										112942,
										112949
									],
									[
										113339,
										113346
									],
									[
										113681,
										113688
									],
									[
										114044,
										114051
									],
									[
										114486,
										114493
									],
									[
										114919,
										114926
									],
									[
										115017,
										115024
									],
									[
										115333,
										115340
									],
									[
										115445,
										115452
									],
									[
										115771,
										115778
									],
									[
										116008,
										116015
									],
									[
										116406,
										116413
									],
									[
										116813,
										116820
									],
									[
										116875,
										116882
									],
									[
										117046,
										117053
									],
									[
										117452,
										117459
									],
									[
										117694,
										117701
									],
									[
										118189,
										118196
									],
									[
										118447,
										118454
									],
									[
										118706,
										118713
									],
									[
										119029,
										119036
									],
									[
										119287,
										119294
									],
									[
										119578,
										119585
									],
									[
										119863,
										119870
									],
									[
										120074,
										120081
									],
									[
										120327,
										120334
									],
									[
										120539,
										120546
									],
									[
										120750,
										120757
									],
									[
										120994,
										121001
									],
									[
										121322,
										121329
									],
									[
										121399,
										121406
									],
									[
										121423,
										121430
									],
									[
										121539,
										121546
									],
									[
										121562,
										121569
									],
									[
										121940,
										121947
									],
									[
										122017,
										122024
									],
									[
										122041,
										122048
									],
									[
										122189,
										122196
									],
									[
										122213,
										122220
									],
									[
										122649,
										122656
									],
									[
										122915,
										122922
									],
									[
										123148,
										123155
									],
									[
										123219,
										123226
									],
									[
										123505,
										123512
									],
									[
										123566,
										123573
									],
									[
										123825,
										123832
									],
									[
										123886,
										123893
									],
									[
										124149,
										124156
									],
									[
										124210,
										124217
									],
									[
										124443,
										124450
									],
									[
										124504,
										124511
									],
									[
										124533,
										124540
									],
									[
										124753,
										124760
									],
									[
										124814,
										124821
									],
									[
										125027,
										125034
									],
									[
										125088,
										125095
									],
									[
										125117,
										125124
									],
									[
										125434,
										125441
									],
									[
										125495,
										125502
									],
									[
										125524,
										125531
									],
									[
										125818,
										125825
									],
									[
										125879,
										125886
									],
									[
										125908,
										125915
									],
									[
										126089,
										126096
									],
									[
										126143,
										126150
									],
									[
										126472,
										126479
									],
									[
										126578,
										126585
									],
									[
										126725,
										126732
									],
									[
										126788,
										126795
									],
									[
										127122,
										127129
									],
									[
										127230,
										127237
									],
									[
										127261,
										127268
									],
									[
										127327,
										127334
									],
									[
										127355,
										127362
									],
									[
										127382,
										127389
									],
									[
										127492,
										127499
									],
									[
										127523,
										127530
									],
									[
										127589,
										127596
									],
									[
										127617,
										127624
									],
									[
										127644,
										127651
									],
									[
										127784,
										127791
									],
									[
										127846,
										127853
									],
									[
										128123,
										128130
									],
									[
										128298,
										128305
									],
									[
										128454,
										128461
									],
									[
										128484,
										128491
									],
									[
										128805,
										128812
									],
									[
										128835,
										128842
									],
									[
										129177,
										129184
									],
									[
										129341,
										129348
									],
									[
										129547,
										129554
									],
									[
										129577,
										129584
									],
									[
										129888,
										129895
									],
									[
										130251,
										130258
									],
									[
										130602,
										130609
									],
									[
										130636,
										130643
									],
									[
										130999,
										131006
									],
									[
										131033,
										131040
									],
									[
										131387,
										131394
									],
									[
										131470,
										131477
									],
									[
										131817,
										131824
									],
									[
										132103,
										132110
									],
									[
										132206,
										132213
									],
									[
										132454,
										132461
									],
									[
										132472,
										132479
									],
									[
										132512,
										132519
									],
									[
										132530,
										132537
									],
									[
										132834,
										132841
									],
									[
										132852,
										132859
									],
									[
										132946,
										132953
									],
									[
										133160,
										133167
									],
									[
										133183,
										133190
									],
									[
										133220,
										133227
									],
									[
										133243,
										133250
									],
									[
										133476,
										133483
									],
									[
										133579,
										133586
									],
									[
										133817,
										133824
									],
									[
										133898,
										133905
									],
									[
										134155,
										134162
									],
									[
										134232,
										134239
									],
									[
										134267,
										134274
									],
									[
										134350,
										134357
									],
									[
										134443,
										134450
									],
									[
										134701,
										134708
									],
									[
										135041,
										135048
									],
									[
										135125,
										135132
									],
									[
										135153,
										135160
									],
									[
										135361,
										135368
									],
									[
										135411,
										135418
									],
									[
										135464,
										135471
									],
									[
										135580,
										135587
									],
									[
										135800,
										135807
									],
									[
										136028,
										136035
									],
									[
										136355,
										136362
									],
									[
										136411,
										136418
									],
									[
										136663,
										136670
									],
									[
										136719,
										136726
									],
									[
										137006,
										137013
									],
									[
										137157,
										137164
									],
									[
										137188,
										137195
									],
									[
										137597,
										137604
									],
									[
										137684,
										137691
									],
									[
										137714,
										137721
									],
									[
										138069,
										138076
									],
									[
										138148,
										138155
									],
									[
										138482,
										138489
									],
									[
										138512,
										138519
									],
									[
										138907,
										138914
									],
									[
										138937,
										138944
									],
									[
										139220,
										139227
									],
									[
										139420,
										139427
									],
									[
										139604,
										139611
									],
									[
										139672,
										139679
									],
									[
										139752,
										139759
									],
									[
										140061,
										140068
									],
									[
										140147,
										140154
									],
									[
										140184,
										140191
									],
									[
										140241,
										140248
									],
									[
										140327,
										140334
									],
									[
										140358,
										140365
									],
									[
										140388,
										140395
									],
									[
										140433,
										140440
									],
									[
										140800,
										140807
									],
									[
										140894,
										140901
									],
									[
										140924,
										140931
									],
									[
										140981,
										140988
									],
									[
										141067,
										141074
									],
									[
										141098,
										141105
									],
									[
										141149,
										141156
									],
									[
										141181,
										141188
									],
									[
										141238,
										141245
									],
									[
										141333,
										141340
									],
									[
										141690,
										141697
									],
									[
										141858,
										141865
									],
									[
										141887,
										141894
									],
									[
										142079,
										142086
									],
									[
										142149,
										142156
									],
									[
										142177,
										142184
									],
									[
										142293,
										142300
									],
									[
										142321,
										142328
									],
									[
										142762,
										142769
									],
									[
										142934,
										142941
									],
									[
										142964,
										142971
									],
									[
										143186,
										143193
									],
									[
										143216,
										143223
									],
									[
										143529,
										143536
									],
									[
										143642,
										143649
									],
									[
										143722,
										143729
									],
									[
										143952,
										143959
									],
									[
										144032,
										144039
									],
									[
										144316,
										144323
									],
									[
										144387,
										144394
									],
									[
										144417,
										144424
									],
									[
										144782,
										144789
									],
									[
										144854,
										144861
									],
									[
										145095,
										145102
									],
									[
										145201,
										145208
									],
									[
										145543,
										145550
									],
									[
										145630,
										145637
									],
									[
										145660,
										145667
									],
									[
										146048,
										146055
									],
									[
										146343,
										146350
									],
									[
										146372,
										146379
									],
									[
										146680,
										146687
									],
									[
										146711,
										146718
									],
									[
										146958,
										146965
									],
									[
										146989,
										146996
									],
									[
										147324,
										147331
									],
									[
										147394,
										147401
									],
									[
										147483,
										147490
									],
									[
										147749,
										147756
									],
									[
										147965,
										147972
									],
									[
										148040,
										148047
									],
									[
										148309,
										148316
									],
									[
										148393,
										148400
									],
									[
										148467,
										148474
									],
									[
										148660,
										148667
									],
									[
										149049,
										149056
									],
									[
										149092,
										149099
									],
									[
										149183,
										149190
									],
									[
										149218,
										149225
									],
									[
										149268,
										149275
									],
									[
										149375,
										149382
									],
									[
										149629,
										149636
									],
									[
										149895,
										149902
									],
									[
										149924,
										149931
									],
									[
										150331,
										150338
									],
									[
										150362,
										150369
									],
									[
										150757,
										150764
									],
									[
										150791,
										150798
									],
									[
										151005,
										151012
									],
									[
										151039,
										151046
									],
									[
										151095,
										151102
									],
									[
										151309,
										151316
									],
									[
										151343,
										151350
									],
									[
										151399,
										151406
									],
									[
										151681,
										151688
									],
									[
										151816,
										151823
									],
									[
										151847,
										151854
									],
									[
										152043,
										152050
									],
									[
										152072,
										152079
									],
									[
										152396,
										152403
									],
									[
										152585,
										152592
									],
									[
										152638,
										152645
									],
									[
										152678,
										152685
									],
									[
										152695,
										152702
									],
									[
										152855,
										152862
									],
									[
										152908,
										152915
									],
									[
										152948,
										152955
									],
									[
										152978,
										152985
									],
									[
										153219,
										153226
									],
									[
										153491,
										153498
									],
									[
										153521,
										153528
									],
									[
										153622,
										153629
									],
									[
										153652,
										153659
									],
									[
										153720,
										153727
									],
									[
										153748,
										153755
									],
									[
										153775,
										153782
									],
									[
										153910,
										153917
									],
									[
										153941,
										153948
									],
									[
										154096,
										154103
									],
									[
										154126,
										154133
									],
									[
										154459,
										154466
									],
									[
										154531,
										154538
									],
									[
										154561,
										154568
									],
									[
										154620,
										154627
									],
									[
										154648,
										154655
									],
									[
										154675,
										154682
									],
									[
										154890,
										154897
									],
									[
										155130,
										155137
									],
									[
										155523,
										155530
									],
									[
										155677,
										155684
									],
									[
										155970,
										155977
									],
									[
										156382,
										156389
									],
									[
										156610,
										156617
									],
									[
										156846,
										156853
									],
									[
										157047,
										157054
									],
									[
										157326,
										157333
									],
									[
										157624,
										157631
									],
									[
										157949,
										157956
									],
									[
										158109,
										158116
									],
									[
										158342,
										158349
									],
									[
										158498,
										158505
									],
									[
										158685,
										158692
									],
									[
										158870,
										158877
									],
									[
										159170,
										159177
									],
									[
										159527,
										159534
									],
									[
										159848,
										159855
									],
									[
										160137,
										160144
									],
									[
										160424,
										160431
									],
									[
										160612,
										160619
									],
									[
										160846,
										160853
									],
									[
										161077,
										161084
									],
									[
										161388,
										161395
									],
									[
										161563,
										161570
									],
									[
										161882,
										161889
									],
									[
										161985,
										161992
									],
									[
										162297,
										162304
									],
									[
										162400,
										162407
									],
									[
										162680,
										162687
									],
									[
										162783,
										162790
									],
									[
										163112,
										163119
									],
									[
										163215,
										163222
									],
									[
										163533,
										163540
									],
									[
										163636,
										163643
									],
									[
										163914,
										163921
									],
									[
										164017,
										164024
									],
									[
										164334,
										164341
									],
									[
										164343,
										164350
									],
									[
										164411,
										164418
									],
									[
										164420,
										164427
									],
									[
										164443,
										164450
									],
									[
										164498,
										164505
									],
									[
										164507,
										164514
									],
									[
										164567,
										164574
									],
									[
										164909,
										164916
									],
									[
										165090,
										165097
									],
									[
										165249,
										165256
									],
									[
										165463,
										165470
									],
									[
										165649,
										165656
									],
									[
										165870,
										165877
									],
									[
										166386,
										166393
									],
									[
										166837,
										166844
									],
									[
										167224,
										167231
									],
									[
										167704,
										167711
									],
									[
										168035,
										168042
									],
									[
										168412,
										168419
									],
									[
										168724,
										168731
									],
									[
										169017,
										169024
									],
									[
										169370,
										169377
									],
									[
										169697,
										169704
									],
									[
										169875,
										169882
									],
									[
										170148,
										170155
									],
									[
										170467,
										170474
									],
									[
										170643,
										170650
									],
									[
										170750,
										170757
									],
									[
										170844,
										170851
									],
									[
										171006,
										171013
									],
									[
										171259,
										171266
									],
									[
										171500,
										171507
									],
									[
										171736,
										171743
									],
									[
										172042,
										172049
									],
									[
										172111,
										172118
									],
									[
										172200,
										172207
									],
									[
										172585,
										172592
									],
									[
										172644,
										172651
									],
									[
										172898,
										172905
									],
									[
										173406,
										173413
									],
									[
										173767,
										173774
									],
									[
										173849,
										173856
									],
									[
										174215,
										174222
									],
									[
										174443,
										174450
									],
									[
										174904,
										174911
									],
									[
										175012,
										175019
									],
									[
										175157,
										175164
									],
									[
										175484,
										175491
									],
									[
										175753,
										175760
									],
									[
										176086,
										176093
									],
									[
										176368,
										176375
									],
									[
										176678,
										176685
									],
									[
										176874,
										176881
									],
									[
										177166,
										177173
									],
									[
										177410,
										177417
									],
									[
										177607,
										177614
									],
									[
										177878,
										177885
									],
									[
										178222,
										178229
									],
									[
										178500,
										178507
									],
									[
										178576,
										178583
									],
									[
										178591,
										178598
									],
									[
										178636,
										178643
									],
									[
										178701,
										178708
									],
									[
										178716,
										178723
									],
									[
										178751,
										178758
									],
									[
										178782,
										178789
									],
									[
										178981,
										178988
									],
									[
										179012,
										179019
									],
									[
										179052,
										179059
									],
									[
										179067,
										179074
									],
									[
										179337,
										179344
									],
									[
										179634,
										179641
									],
									[
										179841,
										179848
									],
									[
										180048,
										180055
									],
									[
										180260,
										180267
									],
									[
										180547,
										180554
									],
									[
										180958,
										180965
									],
									[
										181265,
										181272
									],
									[
										181471,
										181478
									],
									[
										181516,
										181523
									],
									[
										181531,
										181538
									],
									[
										181739,
										181746
									],
									[
										181996,
										182003
									],
									[
										182329,
										182336
									],
									[
										182542,
										182549
									],
									[
										182838,
										182845
									],
									[
										183081,
										183088
									],
									[
										183366,
										183373
									],
									[
										183666,
										183673
									],
									[
										183959,
										183966
									],
									[
										184216,
										184223
									],
									[
										184379,
										184386
									],
									[
										184673,
										184680
									],
									[
										184987,
										184994
									],
									[
										185228,
										185235
									],
									[
										185324,
										185331
									],
									[
										185557,
										185564
									],
									[
										185852,
										185859
									],
									[
										186185,
										186192
									],
									[
										186432,
										186439
									],
									[
										186717,
										186724
									],
									[
										187016,
										187023
									],
									[
										187280,
										187287
									],
									[
										187606,
										187613
									],
									[
										187905,
										187912
									],
									[
										187944,
										187951
									],
									[
										188119,
										188126
									],
									[
										188282,
										188289
									],
									[
										188427,
										188434
									],
									[
										188467,
										188474
									],
									[
										188686,
										188693
									],
									[
										188957,
										188964
									],
									[
										189181,
										189188
									],
									[
										189221,
										189228
									],
									[
										189326,
										189333
									],
									[
										189418,
										189425
									],
									[
										189585,
										189592
									],
									[
										189809,
										189816
									],
									[
										190013,
										190020
									],
									[
										190214,
										190221
									],
									[
										190437,
										190444
									],
									[
										190639,
										190646
									],
									[
										190848,
										190855
									],
									[
										190927,
										190934
									],
									[
										191146,
										191153
									],
									[
										191318,
										191325
									],
									[
										191431,
										191438
									],
									[
										191651,
										191658
									],
									[
										191869,
										191876
									],
									[
										192126,
										192133
									],
									[
										192239,
										192246
									],
									[
										192535,
										192542
									],
									[
										192723,
										192730
									],
									[
										192985,
										192992
									],
									[
										193226,
										193233
									],
									[
										193500,
										193507
									],
									[
										193848,
										193855
									],
									[
										193921,
										193928
									],
									[
										194126,
										194133
									],
									[
										194430,
										194437
									],
									[
										194660,
										194667
									],
									[
										194818,
										194825
									],
									[
										194921,
										194928
									],
									[
										194961,
										194968
									],
									[
										195012,
										195019
									],
									[
										195186,
										195193
									],
									[
										195354,
										195361
									],
									[
										195429,
										195436
									],
									[
										195567,
										195574
									],
									[
										195768,
										195775
									],
									[
										196084,
										196091
									],
									[
										196179,
										196186
									],
									[
										196395,
										196402
									],
									[
										196750,
										196757
									],
									[
										196790,
										196797
									],
									[
										196932,
										196939
									],
									[
										196985,
										196992
									],
									[
										197327,
										197334
									],
									[
										197516,
										197523
									],
									[
										197788,
										197795
									],
									[
										198026,
										198033
									],
									[
										198173,
										198180
									],
									[
										198437,
										198444
									],
									[
										198528,
										198535
									],
									[
										198885,
										198892
									],
									[
										199072,
										199079
									],
									[
										199188,
										199195
									],
									[
										199398,
										199405
									],
									[
										199438,
										199445
									],
									[
										199611,
										199618
									],
									[
										199837,
										199844
									],
									[
										200117,
										200124
									],
									[
										200157,
										200164
									],
									[
										200239,
										200246
									],
									[
										200256,
										200263
									],
									[
										200470,
										200477
									],
									[
										200706,
										200713
									],
									[
										200746,
										200753
									],
									[
										200797,
										200804
									],
									[
										200920,
										200927
									],
									[
										200942,
										200949
									],
									[
										201139,
										201146
									],
									[
										201253,
										201260
									],
									[
										201438,
										201445
									],
									[
										201463,
										201470
									],
									[
										201566,
										201573
									],
									[
										201606,
										201613
									],
									[
										201657,
										201664
									],
									[
										201744,
										201751
									],
									[
										201775,
										201782
									],
									[
										201826,
										201833
									],
									[
										201851,
										201858
									],
									[
										202026,
										202033
									],
									[
										202396,
										202403
									],
									[
										202474,
										202481
									],
									[
										202744,
										202751
									],
									[
										202908,
										202915
									],
									[
										202958,
										202965
									],
									[
										203251,
										203258
									],
									[
										203559,
										203566
									],
									[
										203730,
										203737
									],
									[
										203781,
										203788
									],
									[
										204012,
										204019
									],
									[
										204063,
										204070
									],
									[
										204304,
										204311
									],
									[
										204521,
										204528
									],
									[
										204590,
										204597
									],
									[
										204686,
										204693
									],
									[
										204902,
										204909
									],
									[
										205273,
										205280
									],
									[
										205313,
										205320
									],
									[
										205373,
										205380
									],
									[
										205624,
										205631
									],
									[
										205658,
										205665
									],
									[
										205692,
										205699
									],
									[
										205822,
										205829
									],
									[
										205954,
										205961
									],
									[
										206269,
										206276
									],
									[
										206526,
										206533
									],
									[
										206704,
										206711
									],
									[
										206762,
										206769
									],
									[
										206820,
										206827
									],
									[
										207078,
										207085
									],
									[
										207466,
										207473
									],
									[
										207746,
										207753
									],
									[
										208073,
										208080
									],
									[
										208356,
										208363
									],
									[
										208467,
										208474
									],
									[
										208511,
										208518
									],
									[
										208577,
										208584
									],
									[
										208766,
										208773
									],
									[
										208851,
										208858
									],
									[
										209101,
										209108
									],
									[
										209301,
										209308
									],
									[
										209344,
										209351
									],
									[
										209540,
										209547
									],
									[
										209613,
										209620
									],
									[
										209918,
										209925
									],
									[
										210014,
										210021
									],
									[
										210415,
										210422
									],
									[
										210455,
										210462
									],
									[
										210679,
										210686
									],
									[
										210750,
										210757
									],
									[
										210825,
										210832
									],
									[
										210955,
										210962
									],
									[
										211145,
										211152
									],
									[
										211171,
										211178
									],
									[
										211319,
										211326
									],
									[
										211469,
										211476
									],
									[
										211621,
										211628
									],
									[
										211861,
										211868
									],
									[
										212099,
										212106
									],
									[
										212353,
										212360
									],
									[
										212465,
										212472
									],
									[
										212712,
										212719
									],
									[
										212921,
										212928
									],
									[
										213220,
										213227
									],
									[
										213444,
										213451
									],
									[
										213747,
										213754
									],
									[
										213854,
										213861
									],
									[
										213903,
										213910
									],
									[
										214143,
										214150
									],
									[
										214220,
										214227
									],
									[
										214378,
										214385
									],
									[
										214690,
										214697
									],
									[
										214702,
										214709
									],
									[
										214891,
										214898
									],
									[
										214979,
										214986
									],
									[
										215312,
										215319
									],
									[
										215679,
										215686
									],
									[
										215714,
										215721
									],
									[
										215804,
										215811
									],
									[
										216221,
										216228
									],
									[
										216283,
										216290
									],
									[
										216432,
										216439
									],
									[
										216806,
										216813
									],
									[
										217123,
										217130
									],
									[
										217435,
										217442
									],
									[
										217678,
										217685
									],
									[
										217830,
										217837
									],
									[
										218090,
										218097
									],
									[
										218118,
										218125
									],
									[
										218249,
										218256
									],
									[
										218289,
										218296
									],
									[
										218491,
										218498
									],
									[
										218723,
										218730
									],
									[
										219001,
										219008
									],
									[
										219060,
										219067
									],
									[
										219173,
										219180
									],
									[
										219366,
										219373
									],
									[
										219456,
										219463
									],
									[
										219736,
										219743
									],
									[
										220061,
										220068
									],
									[
										220289,
										220296
									],
									[
										220354,
										220361
									],
									[
										220451,
										220458
									],
									[
										220668,
										220675
									],
									[
										220749,
										220756
									],
									[
										220979,
										220986
									],
									[
										221183,
										221190
									],
									[
										221435,
										221442
									],
									[
										221758,
										221765
									],
									[
										221984,
										221991
									],
									[
										222193,
										222200
									],
									[
										222279,
										222286
									],
									[
										222329,
										222336
									],
									[
										222768,
										222775
									],
									[
										222973,
										222980
									],
									[
										223254,
										223261
									],
									[
										223511,
										223518
									],
									[
										223700,
										223707
									],
									[
										223751,
										223758
									],
									[
										224059,
										224066
									],
									[
										224316,
										224323
									],
									[
										224529,
										224536
									],
									[
										224574,
										224581
									],
									[
										224954,
										224961
									],
									[
										225090,
										225097
									],
									[
										225180,
										225187
									],
									[
										225197,
										225204
									],
									[
										225347,
										225354
									],
									[
										225364,
										225371
									],
									[
										225703,
										225710
									],
									[
										225893,
										225900
									],
									[
										226231,
										226238
									],
									[
										226427,
										226434
									],
									[
										226583,
										226590
									],
									[
										226668,
										226675
									],
									[
										226780,
										226787
									],
									[
										226968,
										226975
									],
									[
										227053,
										227060
									],
									[
										227149,
										227156
									],
									[
										227280,
										227287
									],
									[
										227378,
										227385
									],
									[
										227556,
										227563
									],
									[
										227647,
										227654
									],
									[
										227779,
										227786
									],
									[
										227812,
										227819
									],
									[
										227967,
										227974
									],
									[
										228081,
										228088
									],
									[
										228306,
										228313
									],
									[
										228515,
										228522
									],
									[
										228716,
										228723
									],
									[
										228777,
										228784
									],
									[
										228794,
										228801
									],
									[
										229117,
										229124
									],
									[
										229349,
										229356
									],
									[
										229463,
										229470
									],
									[
										229480,
										229487
									],
									[
										229749,
										229756
									],
									[
										229878,
										229885
									],
									[
										229985,
										229992
									],
									[
										230009,
										230016
									],
									[
										230274,
										230281
									],
									[
										230449,
										230456
									],
									[
										230508,
										230515
									],
									[
										230710,
										230717
									],
									[
										231027,
										231034
									],
									[
										231046,
										231053
									],
									[
										231304,
										231311
									],
									[
										231323,
										231330
									],
									[
										231540,
										231547
									],
									[
										231585,
										231592
									],
									[
										231644,
										231651
									],
									[
										231845,
										231852
									],
									[
										232094,
										232101
									],
									[
										232113,
										232120
									],
									[
										232372,
										232379
									],
									[
										232391,
										232398
									],
									[
										232605,
										232612
									],
									[
										232640,
										232647
									],
									[
										232699,
										232706
									],
									[
										232892,
										232899
									],
									[
										232911,
										232918
									],
									[
										233122,
										233129
									],
									[
										233220,
										233227
									],
									[
										233282,
										233289
									],
									[
										233299,
										233306
									],
									[
										233384,
										233391
									],
									[
										233401,
										233408
									],
									[
										233655,
										233662
									],
									[
										233736,
										233743
									],
									[
										233926,
										233933
									],
									[
										233943,
										233950
									],
									[
										234214,
										234221
									],
									[
										234257,
										234264
									],
									[
										234418,
										234425
									],
									[
										234435,
										234442
									],
									[
										234545,
										234552
									],
									[
										234713,
										234720
									],
									[
										234731,
										234738
									],
									[
										234842,
										234849
									],
									[
										234918,
										234925
									],
									[
										234997,
										235004
									],
									[
										235092,
										235099
									],
									[
										235110,
										235117
									],
									[
										235335,
										235342
									],
									[
										235510,
										235517
									],
									[
										235527,
										235534
									],
									[
										235700,
										235707
									],
									[
										235717,
										235724
									],
									[
										236013,
										236020
									],
									[
										236030,
										236037
									],
									[
										236299,
										236306
									],
									[
										236547,
										236554
									],
									[
										236824,
										236831
									],
									[
										237172,
										237179
									],
									[
										237403,
										237410
									],
									[
										237638,
										237645
									],
									[
										237843,
										237850
									],
									[
										238074,
										238081
									],
									[
										238441,
										238448
									],
									[
										238741,
										238748
									],
									[
										238972,
										238979
									],
									[
										239207,
										239214
									],
									[
										239358,
										239365
									],
									[
										239397,
										239404
									],
									[
										239486,
										239493
									],
									[
										239503,
										239510
									],
									[
										239559,
										239566
									],
									[
										239592,
										239599
									],
									[
										239612,
										239619
									],
									[
										239762,
										239769
									],
									[
										239779,
										239786
									],
									[
										239890,
										239897
									],
									[
										240099,
										240106
									],
									[
										240210,
										240217
									],
									[
										240272,
										240279
									],
									[
										240289,
										240296
									],
									[
										240612,
										240619
									],
									[
										240833,
										240840
									],
									[
										240998,
										241005
									],
									[
										241037,
										241044
									],
									[
										241080,
										241087
									],
									[
										241467,
										241474
									],
									[
										241757,
										241764
									],
									[
										242170,
										242177
									],
									[
										242532,
										242539
									],
									[
										242905,
										242912
									],
									[
										243285,
										243292
									],
									[
										243369,
										243376
									],
									[
										243465,
										243472
									],
									[
										243713,
										243720
									],
									[
										243738,
										243745
									],
									[
										243784,
										243791
									],
									[
										243820,
										243827
									],
									[
										243885,
										243892
									],
									[
										243923,
										243930
									],
									[
										243963,
										243970
									],
									[
										244012,
										244019
									],
									[
										244066,
										244073
									],
									[
										244110,
										244117
									],
									[
										244183,
										244190
									],
									[
										244225,
										244232
									],
									[
										244269,
										244276
									],
									[
										244314,
										244321
									],
									[
										244405,
										244412
									],
									[
										244494,
										244501
									],
									[
										244543,
										244550
									],
									[
										244611,
										244618
									],
									[
										244663,
										244670
									],
									[
										244784,
										244791
									],
									[
										245140,
										245147
									],
									[
										245449,
										245456
									],
									[
										245642,
										245649
									],
									[
										245781,
										245788
									],
									[
										245924,
										245931
									],
									[
										245990,
										245997
									],
									[
										246095,
										246102
									],
									[
										246375,
										246382
									],
									[
										246605,
										246612
									],
									[
										246737,
										246744
									],
									[
										246899,
										246906
									],
									[
										247275,
										247282
									],
									[
										247602,
										247609
									],
									[
										247683,
										247690
									],
									[
										247862,
										247869
									],
									[
										248107,
										248114
									],
									[
										248451,
										248458
									],
									[
										248777,
										248784
									],
									[
										248917,
										248924
									],
									[
										249112,
										249119
									],
									[
										249246,
										249253
									],
									[
										249524,
										249531
									],
									[
										249629,
										249636
									],
									[
										249718,
										249725
									],
									[
										249859,
										249866
									],
									[
										250026,
										250033
									],
									[
										250345,
										250352
									],
									[
										250609,
										250616
									],
									[
										250643,
										250650
									],
									[
										250752,
										250759
									],
									[
										250873,
										250880
									],
									[
										251197,
										251204
									],
									[
										251523,
										251530
									],
									[
										251804,
										251811
									],
									[
										251987,
										251994
									],
									[
										252258,
										252265
									],
									[
										252476,
										252483
									],
									[
										252714,
										252721
									],
									[
										252887,
										252894
									],
									[
										253088,
										253095
									],
									[
										253097,
										253104
									],
									[
										253190,
										253197
									],
									[
										253231,
										253238
									],
									[
										253329,
										253336
									],
									[
										253343,
										253350
									],
									[
										253368,
										253375
									],
									[
										253412,
										253419
									],
									[
										253678,
										253685
									],
									[
										253909,
										253916
									],
									[
										254104,
										254111
									],
									[
										254179,
										254186
									],
									[
										254342,
										254349
									],
									[
										254420,
										254427
									],
									[
										254434,
										254441
									],
									[
										254661,
										254668
									],
									[
										254695,
										254702
									],
									[
										254965,
										254972
									],
									[
										254994,
										255001
									],
									[
										255197,
										255204
									],
									[
										255214,
										255221
									],
									[
										255251,
										255258
									],
									[
										255318,
										255325
									],
									[
										255347,
										255354
									],
									[
										255421,
										255428
									],
									[
										255503,
										255510
									],
									[
										255529,
										255536
									],
									[
										255585,
										255592
									],
									[
										255690,
										255697
									],
									[
										255716,
										255723
									],
									[
										255791,
										255798
									],
									[
										255895,
										255902
									],
									[
										255931,
										255938
									],
									[
										255978,
										255985
									],
									[
										256141,
										256148
									],
									[
										256181,
										256188
									],
									[
										256230,
										256237
									],
									[
										256485,
										256492
									],
									[
										256576,
										256583
									],
									[
										256839,
										256846
									],
									[
										256979,
										256986
									],
									[
										257099,
										257106
									],
									[
										257231,
										257238
									],
									[
										257365,
										257372
									],
									[
										257413,
										257420
									],
									[
										257500,
										257507
									],
									[
										257805,
										257812
									],
									[
										258044,
										258051
									],
									[
										258204,
										258211
									],
									[
										258266,
										258273
									],
									[
										258284,
										258291
									],
									[
										258377,
										258384
									],
									[
										258486,
										258493
									],
									[
										258578,
										258585
									],
									[
										258778,
										258785
									],
									[
										258862,
										258869
									],
									[
										258906,
										258913
									],
									[
										258959,
										258966
									],
									[
										259157,
										259164
									],
									[
										259224,
										259231
									],
									[
										259300,
										259307
									],
									[
										259373,
										259380
									],
									[
										259525,
										259532
									],
									[
										259735,
										259742
									],
									[
										259950,
										259957
									],
									[
										260187,
										260194
									],
									[
										260448,
										260455
									],
									[
										260505,
										260512
									],
									[
										260740,
										260747
									],
									[
										260940,
										260947
									],
									[
										261006,
										261013
									],
									[
										261235,
										261242
									],
									[
										261468,
										261475
									],
									[
										261701,
										261708
									],
									[
										261946,
										261953
									],
									[
										262002,
										262009
									],
									[
										262244,
										262251
									],
									[
										262485,
										262492
									],
									[
										262541,
										262548
									],
									[
										262809,
										262816
									],
									[
										262967,
										262974
									],
									[
										263119,
										263126
									],
									[
										263292,
										263299
									],
									[
										263348,
										263355
									],
									[
										263379,
										263386
									],
									[
										263476,
										263483
									],
									[
										263551,
										263558
									],
									[
										263600,
										263607
									],
									[
										263694,
										263701
									],
									[
										263921,
										263928
									],
									[
										264092,
										264099
									],
									[
										264187,
										264194
									],
									[
										264237,
										264244
									],
									[
										264340,
										264347
									],
									[
										264369,
										264376
									],
									[
										264378,
										264385
									],
									[
										264396,
										264403
									],
									[
										264434,
										264441
									],
									[
										264511,
										264518
									],
									[
										264683,
										264690
									],
									[
										264710,
										264717
									],
									[
										265027,
										265034
									],
									[
										265198,
										265205
									],
									[
										265533,
										265540
									],
									[
										265779,
										265786
									],
									[
										265801,
										265808
									],
									[
										265929,
										265936
									],
									[
										265962,
										265969
									],
									[
										265981,
										265988
									],
									[
										266048,
										266055
									],
									[
										266084,
										266091
									],
									[
										266271,
										266278
									],
									[
										266295,
										266302
									],
									[
										266361,
										266368
									],
									[
										266388,
										266395
									],
									[
										266604,
										266611
									],
									[
										266628,
										266635
									],
									[
										266702,
										266709
									],
									[
										266733,
										266740
									],
									[
										266848,
										266855
									],
									[
										266874,
										266881
									],
									[
										267098,
										267105
									],
									[
										267134,
										267141
									],
									[
										267248,
										267255
									],
									[
										267279,
										267286
									],
									[
										267480,
										267487
									],
									[
										267512,
										267519
									],
									[
										267676,
										267683
									],
									[
										267709,
										267716
									],
									[
										267882,
										267889
									],
									[
										268083,
										268090
									],
									[
										268142,
										268149
									],
									[
										268182,
										268189
									],
									[
										268223,
										268230
									],
									[
										268422,
										268429
									],
									[
										268466,
										268473
									],
									[
										268674,
										268681
									],
									[
										268698,
										268705
									],
									[
										268810,
										268817
									],
									[
										268840,
										268847
									],
									[
										269011,
										269018
									],
									[
										269054,
										269061
									],
									[
										269240,
										269247
									],
									[
										269283,
										269290
									],
									[
										269478,
										269485
									],
									[
										269555,
										269562
									],
									[
										269711,
										269718
									],
									[
										269760,
										269767
									],
									[
										269901,
										269908
									],
									[
										269950,
										269957
									],
									[
										270091,
										270098
									],
									[
										270125,
										270132
									],
									[
										270314,
										270321
									],
									[
										270348,
										270355
									],
									[
										270549,
										270556
									],
									[
										270579,
										270586
									],
									[
										270805,
										270812
									],
									[
										270835,
										270842
									],
									[
										270866,
										270873
									],
									[
										270900,
										270907
									],
									[
										270931,
										270938
									],
									[
										270969,
										270976
									],
									[
										271002,
										271009
									],
									[
										271039,
										271046
									],
									[
										271076,
										271083
									],
									[
										271126,
										271133
									],
									[
										271176,
										271183
									],
									[
										271248,
										271255
									],
									[
										271292,
										271299
									],
									[
										271336,
										271343
									],
									[
										271377,
										271384
									],
									[
										271408,
										271415
									],
									[
										271451,
										271458
									],
									[
										271466,
										271473
									],
									[
										271514,
										271521
									],
									[
										271565,
										271572
									],
									[
										271605,
										271612
									],
									[
										271644,
										271651
									],
									[
										271687,
										271694
									],
									[
										271725,
										271732
									],
									[
										271940,
										271947
									],
									[
										272196,
										272203
									],
									[
										272474,
										272481
									],
									[
										272513,
										272520
									],
									[
										272565,
										272572
									],
									[
										272583,
										272590
									],
									[
										272740,
										272747
									],
									[
										272758,
										272765
									],
									[
										272787,
										272794
									],
									[
										272943,
										272950
									],
									[
										273065,
										273072
									],
									[
										273113,
										273120
									],
									[
										273321,
										273328
									],
									[
										273332,
										273339
									],
									[
										273398,
										273405
									],
									[
										273600,
										273607
									],
									[
										273621,
										273628
									],
									[
										273918,
										273925
									],
									[
										273964,
										273971
									],
									[
										274667,
										274677
									],
									[
										274806,
										274816
									],
									[
										274873,
										274883
									],
									[
										275412,
										275422
									],
									[
										275572,
										275582
									],
									[
										275704,
										275714
									],
									[
										275811,
										275821
									],
									[
										276433,
										276461
									],
									[
										276737,
										276765
									],
									[
										277022,
										277050
									],
									[
										277269,
										277297
									],
									[
										277813,
										277842
									],
									[
										278085,
										278114
									],
									[
										278395,
										278424
									],
									[
										278778,
										278807
									],
									[
										278993,
										279022
									],
									[
										279155,
										279184
									],
									[
										279357,
										279386
									],
									[
										279953,
										279972
									],
									[
										280279,
										280298
									],
									[
										280609,
										280628
									],
									[
										280908,
										280927
									],
									[
										281264,
										281283
									],
									[
										281446,
										281465
									],
									[
										281806,
										281825
									],
									[
										281969,
										281988
									],
									[
										282240,
										282259
									],
									[
										282335,
										282354
									],
									[
										282431,
										282450
									],
									[
										282576,
										282595
									],
									[
										282791,
										282810
									],
									[
										282955,
										282974
									],
									[
										283013,
										283032
									],
									[
										283340,
										283359
									],
									[
										283490,
										283509
									],
									[
										283634,
										283653
									],
									[
										283823,
										283842
									],
									[
										284193,
										284212
									],
									[
										284408,
										284427
									],
									[
										284570,
										284589
									],
									[
										284830,
										284849
									],
									[
										285118,
										285137
									],
									[
										285506,
										285516
									],
									[
										285604,
										285614
									],
									[
										285949,
										285959
									],
									[
										286047,
										286057
									],
									[
										286378,
										286388
									],
									[
										286803,
										286813
									],
									[
										287134,
										287144
									],
									[
										287353,
										287363
									],
									[
										287451,
										287461
									],
									[
										287922,
										287940
									],
									[
										288290,
										288308
									],
									[
										288647,
										288665
									],
									[
										289402,
										289414
									],
									[
										289462,
										289474
									],
									[
										289686,
										289698
									],
									[
										289745,
										289757
									],
									[
										290126,
										290138
									],
									[
										290393,
										290405
									],
									[
										290612,
										290624
									],
									[
										290781,
										290793
									],
									[
										290899,
										290911
									],
									[
										291201,
										291213
									],
									[
										291489,
										291501
									],
									[
										291838,
										291850
									],
									[
										292267,
										292279
									],
									[
										292440,
										292452
									],
									[
										292711,
										292723
									],
									[
										293030,
										293042
									],
									[
										293189,
										293201
									],
									[
										293400,
										293412
									],
									[
										293863,
										293875
									],
									[
										294307,
										294319
									],
									[
										294666,
										294678
									],
									[
										294972,
										294984
									],
									[
										295218,
										295230
									],
									[
										295315,
										295327
									],
									[
										295654,
										295666
									],
									[
										295898,
										295910
									],
									[
										296342,
										296354
									],
									[
										296818,
										296830
									],
									[
										297116,
										297128
									],
									[
										297526,
										297538
									],
									[
										297912,
										297924
									],
									[
										297953,
										297965
									],
									[
										298421,
										298433
									],
									[
										298461,
										298473
									],
									[
										298759,
										298771
									],
									[
										299002,
										299014
									],
									[
										299404,
										299416
									],
									[
										299639,
										299651
									],
									[
										299797,
										299809
									],
									[
										300044,
										300056
									],
									[
										300434,
										300446
									],
									[
										300630,
										300642
									],
									[
										300920,
										300932
									],
									[
										301199,
										301211
									],
									[
										301558,
										301570
									],
									[
										301826,
										301838
									],
									[
										302084,
										302096
									],
									[
										302440,
										302452
									],
									[
										302793,
										302805
									],
									[
										303150,
										303162
									],
									[
										303506,
										303518
									],
									[
										303861,
										303873
									],
									[
										304206,
										304218
									],
									[
										304520,
										304532
									],
									[
										304580,
										304592
									],
									[
										304804,
										304816
									],
									[
										304863,
										304875
									],
									[
										305217,
										305229
									],
									[
										305484,
										305496
									],
									[
										305703,
										305715
									],
									[
										305872,
										305884
									],
									[
										305990,
										306002
									],
									[
										306265,
										306277
									],
									[
										306526,
										306538
									],
									[
										306848,
										306860
									],
									[
										307250,
										307262
									],
									[
										307423,
										307435
									],
									[
										307694,
										307706
									],
									[
										307986,
										307998
									],
									[
										308145,
										308157
									],
									[
										308356,
										308368
									],
									[
										308792,
										308804
									],
									[
										309236,
										309248
									],
									[
										309595,
										309607
									],
									[
										309901,
										309913
									],
									[
										310147,
										310159
									],
									[
										310244,
										310256
									],
									[
										310583,
										310595
									],
									[
										310827,
										310839
									],
									[
										311271,
										311283
									],
									[
										311747,
										311759
									],
									[
										312018,
										312030
									],
									[
										312355,
										312367
									],
									[
										312749,
										312761
									],
									[
										313114,
										313126
									],
									[
										313436,
										313448
									],
									[
										313621,
										313633
									],
									[
										313858,
										313870
									],
									[
										314085,
										314097
									],
									[
										314307,
										314319
									],
									[
										314656,
										314668
									],
									[
										314927,
										314939
									],
									[
										315202,
										315214
									],
									[
										315469,
										315481
									],
									[
										315724,
										315736
									],
									[
										315808,
										315820
									],
									[
										315891,
										315903
									],
									[
										315972,
										315984
									],
									[
										316056,
										316068
									],
									[
										316140,
										316152
									],
									[
										316222,
										316234
									],
									[
										316415,
										316427
									],
									[
										316550,
										316562
									],
									[
										316829,
										316841
									],
									[
										317160,
										317172
									],
									[
										317400,
										317412
									],
									[
										317619,
										317631
									],
									[
										317703,
										317715
									],
									[
										317793,
										317805
									],
									[
										318104,
										318116
									],
									[
										318291,
										318303
									],
									[
										318482,
										318494
									],
									[
										318682,
										318694
									],
									[
										318897,
										318909
									],
									[
										319173,
										319185
									],
									[
										319448,
										319460
									],
									[
										319703,
										319715
									],
									[
										319884,
										319896
									],
									[
										320141,
										320153
									],
									[
										320399,
										320411
									],
									[
										320615,
										320627
									],
									[
										320755,
										320767
									],
									[
										321118,
										321130
									],
									[
										321432,
										321444
									],
									[
										321502,
										321514
									],
									[
										321572,
										321584
									],
									[
										321658,
										321670
									],
									[
										321743,
										321755
									],
									[
										321826,
										321838
									],
									[
										321909,
										321921
									],
									[
										321995,
										322007
									],
									[
										322190,
										322202
									],
									[
										322325,
										322337
									],
									[
										322493,
										322505
									],
									[
										322615,
										322627
									],
									[
										322880,
										322892
									],
									[
										323161,
										323173
									],
									[
										323424,
										323436
									],
									[
										323681,
										323693
									],
									[
										323948,
										323960
									],
									[
										324211,
										324223
									],
									[
										324516,
										324528
									],
									[
										324812,
										324824
									],
									[
										324927,
										324939
									],
									[
										325191,
										325203
									],
									[
										325306,
										325318
									],
									[
										325580,
										325592
									],
									[
										325695,
										325707
									],
									[
										325960,
										325972
									],
									[
										326163,
										326175
									],
									[
										326241,
										326253
									],
									[
										326349,
										326361
									],
									[
										326555,
										326567
									],
									[
										326642,
										326654
									],
									[
										326883,
										326895
									],
									[
										327086,
										327098
									],
									[
										327164,
										327176
									],
									[
										327272,
										327284
									],
									[
										327478,
										327490
									],
									[
										327565,
										327577
									],
									[
										327885,
										327897
									],
									[
										328144,
										328156
									],
									[
										328335,
										328347
									],
									[
										328418,
										328430
									],
									[
										328502,
										328514
									],
									[
										328730,
										328742
									],
									[
										328978,
										328990
									],
									[
										329065,
										329077
									],
									[
										329174,
										329186
									],
									[
										329368,
										329380
									],
									[
										329451,
										329463
									],
									[
										329535,
										329547
									],
									[
										329847,
										329859
									],
									[
										329987,
										329999
									],
									[
										330057,
										330069
									],
									[
										330225,
										330237
									],
									[
										330283,
										330295
									],
									[
										330350,
										330362
									],
									[
										330422,
										330434
									],
									[
										330492,
										330504
									],
									[
										330603,
										330615
									],
									[
										330687,
										330699
									],
									[
										330771,
										330783
									],
									[
										330857,
										330869
									],
									[
										331078,
										331090
									],
									[
										331147,
										331159
									],
									[
										331395,
										331407
									],
									[
										331624,
										331636
									],
									[
										331718,
										331730
									],
									[
										331783,
										331795
									],
									[
										331918,
										331930
									],
									[
										332007,
										332019
									],
									[
										332189,
										332201
									],
									[
										332430,
										332442
									],
									[
										332703,
										332715
									],
									[
										332762,
										332774
									],
									[
										333019,
										333031
									],
									[
										333079,
										333091
									],
									[
										333380,
										333392
									],
									[
										333647,
										333659
									],
									[
										333866,
										333878
									],
									[
										334035,
										334047
									],
									[
										334153,
										334165
									],
									[
										334417,
										334429
									],
									[
										334667,
										334679
									],
									[
										334978,
										334990
									],
									[
										335369,
										335381
									],
									[
										335542,
										335554
									],
									[
										335813,
										335825
									],
									[
										336094,
										336106
									],
									[
										336253,
										336265
									],
									[
										336464,
										336476
									],
									[
										336889,
										336901
									],
									[
										337333,
										337345
									],
									[
										337692,
										337704
									],
									[
										337998,
										338010
									],
									[
										338244,
										338256
									],
									[
										338341,
										338353
									],
									[
										338680,
										338692
									],
									[
										338924,
										338936
									],
									[
										339368,
										339380
									],
									[
										339844,
										339856
									],
									[
										340145,
										340157
									],
									[
										340296,
										340308
									],
									[
										340366,
										340378
									],
									[
										340542,
										340554
									],
									[
										341057,
										341086
									],
									[
										341329,
										341358
									],
									[
										341639,
										341668
									],
									[
										342022,
										342051
									],
									[
										342237,
										342266
									],
									[
										342399,
										342428
									],
									[
										342601,
										342630
									],
									[
										343029,
										343037
									],
									[
										343339,
										343347
									],
									[
										343605,
										343613
									],
									[
										343884,
										343892
									],
									[
										344034,
										344042
									],
									[
										344241,
										344249
									],
									[
										344403,
										344411
									],
									[
										344631,
										344639
									],
									[
										344846,
										344854
									],
									[
										345084,
										345092
									],
									[
										345327,
										345335
									],
									[
										345535,
										345543
									],
									[
										345732,
										345740
									],
									[
										345929,
										345937
									],
									[
										346124,
										346132
									],
									[
										346331,
										346339
									],
									[
										346574,
										346582
									],
									[
										346852,
										346860
									],
									[
										347107,
										347115
									],
									[
										347411,
										347419
									],
									[
										347702,
										347710
									],
									[
										347906,
										347914
									],
									[
										348053,
										348061
									],
									[
										348271,
										348279
									],
									[
										348505,
										348513
									],
									[
										348726,
										348734
									],
									[
										348928,
										348936
									],
									[
										349131,
										349139
									],
									[
										349329,
										349337
									],
									[
										349538,
										349546
									],
									[
										349750,
										349758
									],
									[
										349960,
										349968
									],
									[
										350158,
										350166
									],
									[
										350373,
										350381
									],
									[
										350635,
										350643
									],
									[
										350919,
										350927
									],
									[
										351215,
										351223
									],
									[
										351427,
										351435
									],
									[
										351469,
										351477
									],
									[
										351687,
										351695
									],
									[
										352019,
										352027
									],
									[
										352239,
										352247
									],
									[
										352460,
										352468
									],
									[
										352574,
										352582
									],
									[
										352713,
										352721
									],
									[
										352925,
										352933
									],
									[
										353067,
										353075
									],
									[
										353250,
										353258
									],
									[
										353410,
										353418
									],
									[
										353780,
										353788
									],
									[
										353808,
										353816
									],
									[
										354191,
										354199
									],
									[
										354469,
										354477
									],
									[
										354752,
										354760
									],
									[
										354981,
										354989
									],
									[
										355214,
										355222
									],
									[
										355445,
										355453
									],
									[
										355669,
										355677
									],
									[
										355752,
										355760
									],
									[
										355840,
										355848
									],
									[
										356061,
										356069
									],
									[
										356133,
										356141
									],
									[
										356342,
										356350
									],
									[
										356542,
										356550
									],
									[
										356807,
										356815
									],
									[
										357096,
										357104
									],
									[
										357246,
										357254
									],
									[
										357432,
										357440
									],
									[
										357531,
										357539
									],
									[
										357750,
										357758
									],
									[
										357929,
										357937
									],
									[
										358144,
										358152
									],
									[
										358341,
										358349
									],
									[
										358462,
										358470
									],
									[
										358710,
										358718
									],
									[
										358958,
										358966
									],
									[
										359067,
										359075
									],
									[
										359195,
										359203
									],
									[
										359308,
										359316
									],
									[
										359537,
										359545
									],
									[
										359825,
										359833
									],
									[
										360066,
										360074
									],
									[
										360321,
										360329
									],
									[
										360642,
										360650
									],
									[
										360851,
										360859
									],
									[
										361089,
										361097
									],
									[
										361314,
										361322
									],
									[
										361508,
										361516
									],
									[
										361701,
										361709
									],
									[
										361899,
										361907
									],
									[
										362084,
										362092
									],
									[
										362420,
										362428
									],
									[
										362703,
										362711
									],
									[
										362942,
										362950
									],
									[
										363194,
										363202
									],
									[
										363344,
										363352
									],
									[
										363551,
										363559
									],
									[
										363713,
										363721
									],
									[
										363941,
										363949
									],
									[
										364156,
										364164
									],
									[
										364394,
										364402
									],
									[
										364637,
										364645
									],
									[
										364845,
										364853
									],
									[
										365042,
										365050
									],
									[
										365239,
										365247
									],
									[
										365434,
										365442
									],
									[
										365641,
										365649
									],
									[
										365884,
										365892
									],
									[
										366162,
										366170
									],
									[
										366417,
										366425
									],
									[
										366721,
										366729
									],
									[
										367012,
										367020
									],
									[
										367216,
										367224
									],
									[
										367363,
										367371
									],
									[
										367581,
										367589
									],
									[
										367815,
										367823
									],
									[
										368036,
										368044
									],
									[
										368238,
										368246
									],
									[
										368441,
										368449
									],
									[
										368639,
										368647
									],
									[
										368848,
										368856
									],
									[
										369060,
										369068
									],
									[
										369270,
										369278
									],
									[
										369468,
										369476
									],
									[
										369683,
										369691
									],
									[
										369945,
										369953
									],
									[
										370229,
										370237
									],
									[
										370498,
										370506
									],
									[
										370683,
										370691
									],
									[
										370725,
										370733
									],
									[
										370916,
										370924
									],
									[
										371248,
										371256
									],
									[
										371468,
										371476
									],
									[
										371689,
										371697
									],
									[
										371803,
										371811
									],
									[
										371942,
										371950
									],
									[
										372154,
										372162
									],
									[
										372296,
										372304
									],
									[
										372479,
										372487
									],
									[
										372639,
										372647
									],
									[
										372982,
										372990
									],
									[
										373010,
										373018
									],
									[
										373393,
										373401
									],
									[
										373644,
										373652
									],
									[
										374054,
										374062
									],
									[
										374301,
										374309
									],
									[
										374396,
										374404
									],
									[
										374476,
										374484
									],
									[
										374558,
										374566
									],
									[
										374648,
										374656
									],
									[
										374740,
										374748
									],
									[
										374820,
										374828
									],
									[
										374889,
										374897
									],
									[
										374958,
										374966
									],
									[
										375033,
										375041
									],
									[
										375104,
										375112
									],
									[
										375181,
										375189
									],
									[
										375258,
										375266
									],
									[
										375349,
										375357
									],
									[
										375608,
										375616
									],
									[
										375874,
										375882
									],
									[
										376182,
										376190
									],
									[
										376511,
										376519
									],
									[
										376801,
										376809
									],
									[
										377053,
										377061
									],
									[
										377341,
										377349
									],
									[
										377596,
										377604
									],
									[
										377751,
										377759
									],
									[
										378040,
										378048
									],
									[
										378199,
										378207
									],
									[
										378486,
										378494
									],
									[
										378696,
										378704
									],
									[
										379012,
										379020
									],
									[
										379386,
										379394
									],
									[
										379784,
										379792
									],
									[
										380185,
										380193
									],
									[
										380469,
										380477
									],
									[
										380805,
										380813
									],
									[
										381014,
										381022
									],
									[
										381201,
										381209
									],
									[
										381461,
										381469
									],
									[
										381650,
										381658
									],
									[
										381894,
										381902
									],
									[
										382108,
										382116
									],
									[
										382381,
										382389
									],
									[
										382650,
										382658
									],
									[
										383013,
										383021
									],
									[
										383327,
										383335
									],
									[
										383576,
										383584
									],
									[
										383841,
										383849
									],
									[
										384134,
										384142
									],
									[
										384404,
										384412
									],
									[
										384621,
										384629
									],
									[
										384960,
										384968
									],
									[
										385334,
										385342
									],
									[
										385643,
										385651
									],
									[
										385985,
										385993
									],
									[
										386246,
										386254
									],
									[
										386571,
										386579
									],
									[
										386827,
										386835
									],
									[
										387194,
										387202
									],
									[
										387505,
										387513
									],
									[
										387789,
										387797
									],
									[
										388077,
										388085
									],
									[
										388411,
										388419
									],
									[
										388725,
										388733
									],
									[
										388888,
										388896
									],
									[
										389264,
										389272
									],
									[
										389566,
										389574
									],
									[
										389859,
										389867
									],
									[
										390016,
										390024
									],
									[
										390251,
										390259
									],
									[
										390478,
										390486
									],
									[
										390700,
										390708
									],
									[
										390932,
										390940
									],
									[
										391201,
										391209
									],
									[
										391435,
										391443
									],
									[
										391665,
										391673
									],
									[
										391886,
										391894
									],
									[
										392105,
										392113
									],
									[
										392340,
										392348
									],
									[
										392709,
										392717
									],
									[
										392966,
										392974
									],
									[
										393281,
										393289
									],
									[
										393688,
										393696
									],
									[
										393963,
										393971
									],
									[
										394232,
										394240
									],
									[
										394559,
										394567
									],
									[
										394761,
										394769
									],
									[
										395063,
										395071
									],
									[
										395422,
										395430
									],
									[
										395614,
										395622
									],
									[
										395897,
										395905
									],
									[
										396200,
										396208
									],
									[
										396487,
										396495
									],
									[
										396669,
										396677
									],
									[
										396893,
										396901
									],
									[
										397194,
										397202
									],
									[
										397460,
										397468
									],
									[
										397687,
										397695
									],
									[
										397885,
										397893
									],
									[
										398188,
										398196
									],
									[
										398530,
										398538
									],
									[
										398861,
										398869
									],
									[
										399103,
										399111
									],
									[
										399407,
										399415
									],
									[
										399716,
										399724
									],
									[
										399906,
										399914
									],
									[
										400101,
										400109
									],
									[
										400287,
										400295
									],
									[
										400460,
										400468
									],
									[
										400643,
										400651
									],
									[
										400849,
										400857
									],
									[
										401057,
										401065
									],
									[
										401316,
										401324
									],
									[
										401577,
										401585
									],
									[
										401781,
										401789
									],
									[
										402020,
										402028
									],
									[
										402316,
										402324
									],
									[
										402515,
										402523
									],
									[
										402746,
										402754
									],
									[
										403005,
										403013
									],
									[
										403195,
										403203
									],
									[
										403396,
										403404
									],
									[
										403603,
										403611
									],
									[
										403807,
										403815
									],
									[
										404017,
										404025
									],
									[
										404323,
										404331
									],
									[
										404712,
										404720
									],
									[
										404950,
										404958
									],
									[
										405163,
										405171
									],
									[
										405461,
										405469
									],
									[
										405782,
										405790
									],
									[
										406090,
										406098
									],
									[
										406457,
										406465
									],
									[
										406662,
										406670
									],
									[
										406893,
										406901
									],
									[
										407087,
										407095
									],
									[
										407320,
										407328
									],
									[
										407676,
										407684
									],
									[
										407972,
										407980
									],
									[
										408057,
										408065
									],
									[
										408140,
										408148
									],
									[
										408220,
										408228
									],
									[
										408358,
										408366
									],
									[
										408504,
										408512
									],
									[
										408648,
										408656
									],
									[
										408798,
										408806
									],
									[
										408950,
										408958
									],
									[
										409108,
										409116
									],
									[
										409249,
										409257
									],
									[
										409407,
										409415
									],
									[
										409652,
										409660
									],
									[
										409875,
										409883
									],
									[
										410207,
										410215
									],
									[
										410502,
										410510
									],
									[
										410784,
										410792
									],
									[
										411036,
										411044
									],
									[
										411247,
										411255
									],
									[
										411511,
										411519
									],
									[
										411770,
										411778
									],
									[
										412037,
										412045
									],
									[
										412318,
										412326
									],
									[
										412627,
										412635
									],
									[
										412919,
										412927
									],
									[
										413127,
										413135
									],
									[
										413187,
										413195
									],
									[
										413516,
										413524
									],
									[
										413766,
										413774
									],
									[
										414080,
										414088
									],
									[
										414317,
										414325
									],
									[
										414579,
										414587
									],
									[
										414807,
										414815
									],
									[
										415004,
										415012
									],
									[
										415243,
										415251
									],
									[
										415496,
										415504
									],
									[
										415702,
										415710
									],
									[
										415921,
										415929
									],
									[
										416135,
										416143
									],
									[
										416345,
										416353
									],
									[
										416592,
										416600
									],
									[
										416852,
										416860
									],
									[
										417092,
										417100
									],
									[
										417305,
										417313
									],
									[
										417355,
										417363
									],
									[
										417588,
										417596
									],
									[
										417808,
										417816
									],
									[
										418045,
										418053
									],
									[
										418271,
										418279
									],
									[
										418574,
										418582
									],
									[
										418883,
										418891
									],
									[
										419201,
										419209
									],
									[
										419460,
										419468
									],
									[
										419668,
										419676
									],
									[
										419886,
										419894
									],
									[
										420153,
										420161
									],
									[
										420457,
										420465
									],
									[
										420739,
										420747
									],
									[
										421057,
										421065
									],
									[
										421347,
										421355
									],
									[
										421629,
										421637
									],
									[
										421897,
										421905
									],
									[
										422106,
										422114
									],
									[
										422212,
										422220
									],
									[
										422550,
										422558
									],
									[
										422807,
										422815
									],
									[
										422951,
										422959
									],
									[
										423099,
										423107
									],
									[
										423302,
										423310
									],
									[
										423617,
										423625
									],
									[
										423788,
										423796
									],
									[
										423947,
										423955
									],
									[
										424080,
										424088
									],
									[
										424387,
										424395
									],
									[
										424544,
										424552
									],
									[
										424709,
										424717
									],
									[
										424873,
										424881
									],
									[
										425108,
										425116
									],
									[
										425361,
										425369
									],
									[
										425594,
										425602
									],
									[
										425791,
										425799
									],
									[
										426063,
										426071
									],
									[
										426261,
										426269
									],
									[
										426471,
										426479
									],
									[
										426702,
										426710
									],
									[
										426976,
										426984
									],
									[
										427253,
										427261
									],
									[
										427528,
										427536
									],
									[
										427842,
										427850
									],
									[
										427996,
										428004
									],
									[
										428172,
										428180
									],
									[
										428360,
										428368
									],
									[
										428687,
										428695
									],
									[
										428974,
										428982
									],
									[
										429348,
										429356
									],
									[
										429573,
										429581
									],
									[
										429845,
										429853
									],
									[
										430048,
										430056
									],
									[
										430325,
										430333
									],
									[
										430667,
										430675
									],
									[
										431011,
										431019
									],
									[
										431246,
										431254
									],
									[
										431483,
										431491
									],
									[
										431706,
										431714
									],
									[
										431921,
										431929
									],
									[
										432150,
										432158
									],
									[
										432422,
										432430
									],
									[
										432649,
										432657
									],
									[
										432970,
										432978
									],
									[
										433163,
										433171
									],
									[
										433435,
										433443
									],
									[
										433761,
										433769
									],
									[
										433990,
										433998
									],
									[
										434275,
										434283
									],
									[
										434500,
										434508
									],
									[
										434718,
										434726
									],
									[
										434988,
										434996
									],
									[
										435281,
										435289
									],
									[
										435602,
										435610
									],
									[
										435886,
										435894
									],
									[
										436157,
										436165
									],
									[
										436356,
										436364
									],
									[
										436677,
										436685
									],
									[
										437016,
										437024
									],
									[
										437329,
										437337
									],
									[
										437520,
										437528
									],
									[
										437705,
										437713
									],
									[
										438047,
										438055
									],
									[
										438280,
										438288
									],
									[
										438597,
										438605
									],
									[
										438833,
										438841
									],
									[
										439020,
										439028
									],
									[
										439368,
										439376
									],
									[
										439702,
										439710
									],
									[
										439893,
										439901
									],
									[
										440074,
										440082
									],
									[
										440262,
										440270
									],
									[
										440439,
										440447
									],
									[
										440615,
										440623
									],
									[
										440810,
										440818
									],
									[
										440995,
										441003
									],
									[
										441168,
										441176
									],
									[
										441397,
										441405
									],
									[
										441801,
										441809
									],
									[
										442117,
										442125
									],
									[
										442344,
										442352
									],
									[
										442657,
										442665
									],
									[
										442994,
										443002
									],
									[
										443218,
										443226
									],
									[
										443469,
										443477
									],
									[
										443624,
										443632
									],
									[
										443891,
										443899
									],
									[
										444103,
										444111
									],
									[
										444282,
										444290
									],
									[
										444444,
										444452
									],
									[
										444657,
										444665
									],
									[
										444886,
										444894
									],
									[
										445050,
										445058
									],
									[
										445218,
										445226
									],
									[
										445489,
										445497
									],
									[
										445800,
										445808
									],
									[
										446083,
										446091
									],
									[
										446351,
										446359
									],
									[
										446610,
										446618
									],
									[
										446871,
										446879
									],
									[
										447159,
										447167
									],
									[
										447445,
										447453
									],
									[
										447723,
										447731
									],
									[
										447933,
										447941
									],
									[
										448214,
										448222
									],
									[
										448412,
										448420
									],
									[
										448631,
										448639
									],
									[
										448853,
										448861
									],
									[
										449093,
										449101
									],
									[
										449379,
										449387
									],
									[
										449593,
										449601
									],
									[
										449793,
										449801
									],
									[
										450048,
										450056
									],
									[
										450319,
										450327
									],
									[
										450689,
										450697
									],
									[
										450979,
										450987
									],
									[
										451236,
										451244
									],
									[
										451371,
										451379
									],
									[
										451500,
										451508
									],
									[
										451637,
										451645
									],
									[
										451796,
										451804
									],
									[
										451953,
										451961
									],
									[
										452125,
										452133
									],
									[
										452244,
										452252
									],
									[
										452388,
										452396
									],
									[
										452529,
										452537
									],
									[
										452658,
										452666
									],
									[
										452813,
										452821
									],
									[
										452996,
										453004
									],
									[
										453149,
										453157
									],
									[
										453281,
										453289
									],
									[
										453409,
										453417
									],
									[
										453552,
										453560
									],
									[
										453667,
										453675
									],
									[
										453798,
										453806
									],
									[
										453962,
										453970
									],
									[
										454172,
										454180
									],
									[
										454387,
										454395
									],
									[
										454528,
										454536
									],
									[
										454661,
										454669
									],
									[
										454778,
										454786
									],
									[
										454970,
										454978
									],
									[
										455119,
										455127
									],
									[
										455388,
										455396
									],
									[
										455554,
										455562
									],
									[
										455743,
										455751
									],
									[
										455978,
										455986
									],
									[
										456287,
										456295
									],
									[
										456521,
										456529
									],
									[
										456810,
										456818
									],
									[
										457079,
										457087
									],
									[
										457337,
										457345
									],
									[
										457600,
										457608
									],
									[
										457852,
										457860
									],
									[
										458087,
										458095
									],
									[
										458467,
										458475
									],
									[
										458771,
										458779
									],
									[
										458929,
										458937
									],
									[
										459216,
										459224
									],
									[
										459502,
										459510
									],
									[
										459799,
										459807
									],
									[
										459951,
										459959
									],
									[
										460236,
										460244
									],
									[
										460551,
										460559
									],
									[
										460816,
										460824
									],
									[
										461111,
										461119
									],
									[
										461436,
										461444
									],
									[
										461785,
										461793
									],
									[
										462057,
										462065
									],
									[
										462329,
										462337
									],
									[
										462542,
										462550
									],
									[
										462766,
										462774
									],
									[
										462993,
										463001
									],
									[
										463220,
										463228
									],
									[
										463506,
										463514
									],
									[
										463927,
										463935
									],
									[
										464146,
										464154
									],
									[
										464349,
										464357
									],
									[
										464577,
										464585
									],
									[
										464910,
										464918
									],
									[
										464960,
										464968
									],
									[
										465015,
										465023
									],
									[
										465114,
										465122
									],
									[
										465321,
										465329
									],
									[
										465608,
										465616
									],
									[
										466018,
										466026
									],
									[
										466247,
										466255
									],
									[
										466411,
										466419
									],
									[
										466655,
										466663
									],
									[
										466860,
										466868
									],
									[
										467080,
										467088
									],
									[
										467281,
										467289
									],
									[
										467566,
										467574
									],
									[
										467948,
										467956
									],
									[
										468359,
										468367
									],
									[
										468609,
										468617
									],
									[
										468941,
										468949
									],
									[
										469237,
										469245
									],
									[
										469535,
										469543
									],
									[
										469734,
										469742
									],
									[
										469965,
										469973
									],
									[
										470369,
										470377
									],
									[
										470627,
										470635
									],
									[
										470841,
										470849
									],
									[
										471193,
										471201
									],
									[
										471504,
										471512
									],
									[
										471581,
										471589
									],
									[
										471855,
										471863
									],
									[
										472113,
										472121
									],
									[
										472287,
										472295
									],
									[
										472557,
										472565
									],
									[
										472780,
										472788
									],
									[
										473067,
										473075
									],
									[
										473232,
										473240
									],
									[
										473400,
										473408
									],
									[
										473754,
										473762
									],
									[
										474060,
										474068
									],
									[
										474455,
										474463
									],
									[
										474857,
										474865
									],
									[
										475103,
										475111
									],
									[
										475369,
										475377
									],
									[
										475749,
										475757
									],
									[
										476085,
										476093
									],
									[
										476320,
										476328
									],
									[
										476622,
										476630
									],
									[
										476818,
										476826
									],
									[
										477014,
										477022
									],
									[
										477373,
										477381
									],
									[
										477653,
										477661
									],
									[
										477912,
										477920
									],
									[
										478207,
										478215
									],
									[
										478493,
										478501
									],
									[
										478746,
										478754
									],
									[
										478957,
										478965
									],
									[
										479235,
										479243
									],
									[
										479456,
										479464
									],
									[
										479697,
										479705
									],
									[
										479916,
										479924
									],
									[
										480169,
										480177
									],
									[
										480382,
										480390
									],
									[
										480624,
										480632
									],
									[
										480846,
										480854
									],
									[
										481113,
										481121
									],
									[
										481326,
										481334
									],
									[
										481648,
										481656
									],
									[
										481865,
										481873
									],
									[
										482090,
										482098
									],
									[
										482305,
										482313
									],
									[
										482527,
										482535
									],
									[
										482741,
										482749
									],
									[
										482995,
										483003
									],
									[
										483188,
										483196
									],
									[
										483440,
										483448
									],
									[
										483662,
										483670
									],
									[
										483953,
										483961
									],
									[
										484229,
										484237
									],
									[
										484521,
										484529
									],
									[
										484729,
										484737
									],
									[
										485011,
										485019
									],
									[
										485309,
										485317
									],
									[
										485564,
										485572
									],
									[
										485757,
										485765
									],
									[
										486050,
										486058
									],
									[
										486219,
										486227
									],
									[
										486380,
										486388
									],
									[
										486598,
										486606
									],
									[
										486784,
										486792
									],
									[
										487003,
										487011
									],
									[
										487201,
										487209
									],
									[
										487424,
										487432
									],
									[
										487589,
										487597
									],
									[
										487780,
										487788
									],
									[
										488006,
										488014
									],
									[
										488213,
										488221
									],
									[
										488393,
										488401
									],
									[
										488560,
										488568
									],
									[
										488827,
										488835
									],
									[
										489056,
										489064
									],
									[
										489279,
										489287
									],
									[
										489583,
										489591
									],
									[
										489717,
										489725
									],
									[
										489977,
										489985
									],
									[
										490240,
										490248
									],
									[
										490441,
										490449
									],
									[
										490725,
										490733
									],
									[
										491072,
										491080
									],
									[
										491349,
										491357
									],
									[
										491554,
										491562
									],
									[
										491798,
										491806
									],
									[
										492076,
										492084
									],
									[
										492370,
										492378
									],
									[
										492689,
										492697
									],
									[
										492886,
										492894
									],
									[
										493083,
										493091
									],
									[
										493395,
										493403
									],
									[
										493671,
										493679
									],
									[
										493968,
										493976
									],
									[
										494254,
										494262
									],
									[
										494448,
										494456
									],
									[
										494753,
										494761
									],
									[
										494975,
										494983
									],
									[
										495364,
										495372
									],
									[
										495668,
										495676
									],
									[
										495811,
										495819
									],
									[
										496079,
										496087
									],
									[
										496303,
										496311
									],
									[
										496551,
										496559
									],
									[
										496778,
										496786
									],
									[
										497014,
										497022
									],
									[
										497331,
										497339
									],
									[
										497626,
										497634
									],
									[
										497887,
										497895
									],
									[
										497985,
										497993
									],
									[
										498187,
										498195
									],
									[
										498503,
										498511
									],
									[
										498627,
										498635
									],
									[
										498762,
										498770
									],
									[
										499000,
										499008
									],
									[
										499180,
										499188
									],
									[
										499380,
										499388
									],
									[
										499584,
										499592
									],
									[
										499767,
										499775
									],
									[
										499952,
										499960
									],
									[
										500240,
										500248
									],
									[
										500540,
										500548
									],
									[
										500694,
										500702
									],
									[
										500832,
										500840
									],
									[
										500981,
										500989
									],
									[
										501157,
										501165
									],
									[
										501548,
										501556
									],
									[
										501831,
										501839
									],
									[
										501955,
										501963
									],
									[
										502073,
										502081
									],
									[
										502304,
										502312
									],
									[
										502509,
										502517
									],
									[
										502765,
										502773
									],
									[
										503059,
										503067
									],
									[
										503340,
										503348
									],
									[
										503619,
										503627
									],
									[
										503772,
										503780
									],
									[
										503917,
										503925
									],
									[
										504198,
										504206
									],
									[
										504350,
										504358
									],
									[
										504622,
										504630
									],
									[
										504913,
										504921
									],
									[
										505077,
										505085
									],
									[
										505275,
										505283
									],
									[
										505470,
										505478
									],
									[
										505662,
										505670
									],
									[
										505874,
										505882
									],
									[
										506070,
										506078
									],
									[
										506294,
										506302
									],
									[
										506503,
										506511
									],
									[
										506673,
										506681
									],
									[
										506845,
										506853
									],
									[
										507123,
										507131
									],
									[
										507423,
										507431
									],
									[
										507735,
										507743
									],
									[
										507882,
										507890
									],
									[
										508130,
										508138
									],
									[
										508438,
										508446
									],
									[
										508637,
										508645
									],
									[
										508795,
										508803
									],
									[
										508995,
										509003
									],
									[
										509107,
										509115
									],
									[
										509351,
										509359
									],
									[
										509568,
										509576
									],
									[
										509731,
										509739
									],
									[
										509944,
										509952
									],
									[
										510278,
										510286
									],
									[
										510554,
										510562
									],
									[
										510779,
										510787
									],
									[
										510990,
										510998
									],
									[
										511186,
										511194
									],
									[
										511476,
										511484
									],
									[
										511661,
										511669
									],
									[
										511859,
										511867
									],
									[
										512029,
										512037
									],
									[
										512202,
										512210
									],
									[
										512380,
										512388
									],
									[
										512568,
										512576
									],
									[
										512749,
										512757
									],
									[
										512940,
										512948
									],
									[
										513118,
										513126
									],
									[
										513408,
										513416
									],
									[
										513644,
										513652
									],
									[
										513815,
										513823
									],
									[
										514027,
										514035
									],
									[
										514209,
										514217
									],
									[
										514377,
										514385
									],
									[
										514545,
										514553
									],
									[
										514711,
										514719
									],
									[
										515001,
										515009
									],
									[
										515196,
										515204
									],
									[
										515394,
										515402
									],
									[
										515614,
										515622
									],
									[
										515915,
										515923
									],
									[
										516108,
										516116
									],
									[
										516319,
										516327
									],
									[
										516623,
										516631
									],
									[
										516762,
										516770
									],
									[
										516903,
										516911
									],
									[
										517036,
										517044
									],
									[
										517169,
										517177
									],
									[
										517427,
										517435
									],
									[
										517718,
										517726
									],
									[
										517912,
										517920
									],
									[
										518189,
										518197
									],
									[
										518489,
										518497
									],
									[
										518687,
										518695
									],
									[
										518872,
										518880
									],
									[
										519074,
										519082
									],
									[
										519385,
										519393
									],
									[
										519499,
										519507
									],
									[
										519700,
										519708
									],
									[
										519833,
										519841
									],
									[
										520100,
										520108
									],
									[
										520327,
										520335
									],
									[
										520564,
										520572
									],
									[
										520775,
										520783
									],
									[
										520900,
										520908
									],
									[
										521039,
										521047
									],
									[
										521227,
										521235
									],
									[
										521362,
										521370
									],
									[
										521554,
										521562
									],
									[
										521763,
										521771
									],
									[
										521966,
										521974
									],
									[
										522155,
										522163
									],
									[
										522284,
										522292
									],
									[
										522427,
										522435
									],
									[
										522735,
										522743
									],
									[
										522914,
										522922
									],
									[
										523072,
										523080
									],
									[
										523233,
										523241
									],
									[
										523435,
										523443
									],
									[
										523628,
										523636
									],
									[
										523795,
										523803
									],
									[
										523950,
										523958
									],
									[
										524133,
										524141
									],
									[
										524292,
										524300
									],
									[
										524446,
										524454
									],
									[
										524619,
										524627
									],
									[
										524776,
										524784
									],
									[
										524953,
										524961
									],
									[
										525155,
										525163
									],
									[
										525349,
										525357
									],
									[
										525500,
										525508
									],
									[
										525639,
										525647
									],
									[
										525786,
										525794
									],
									[
										525934,
										525942
									],
									[
										526135,
										526143
									],
									[
										526440,
										526448
									],
									[
										526639,
										526647
									],
									[
										526798,
										526806
									],
									[
										526992,
										527000
									],
									[
										527157,
										527165
									],
									[
										527353,
										527361
									],
									[
										527669,
										527677
									],
									[
										527968,
										527976
									],
									[
										528146,
										528154
									],
									[
										528328,
										528336
									],
									[
										528549,
										528557
									],
									[
										528727,
										528735
									],
									[
										528929,
										528937
									],
									[
										529178,
										529186
									],
									[
										529494,
										529502
									],
									[
										529826,
										529834
									],
									[
										530080,
										530088
									],
									[
										530392,
										530400
									],
									[
										530663,
										530671
									],
									[
										530980,
										530988
									],
									[
										531142,
										531150
									],
									[
										531354,
										531362
									],
									[
										531475,
										531483
									],
									[
										531596,
										531604
									],
									[
										531721,
										531729
									],
									[
										531846,
										531854
									],
									[
										531971,
										531979
									],
									[
										532126,
										532134
									],
									[
										532373,
										532381
									],
									[
										532627,
										532635
									],
									[
										532679,
										532687
									],
									[
										532873,
										532881
									],
									[
										533103,
										533111
									],
									[
										533391,
										533399
									],
									[
										533770,
										533778
									],
									[
										534142,
										534150
									],
									[
										534438,
										534446
									],
									[
										534739,
										534747
									],
									[
										535042,
										535050
									],
									[
										535317,
										535325
									],
									[
										535618,
										535626
									],
									[
										535906,
										535914
									],
									[
										536206,
										536214
									],
									[
										536448,
										536456
									],
									[
										536696,
										536704
									],
									[
										536848,
										536856
									],
									[
										537002,
										537010
									],
									[
										537154,
										537162
									],
									[
										537299,
										537307
									],
									[
										537573,
										537581
									],
									[
										537727,
										537735
									],
									[
										538027,
										538035
									],
									[
										538167,
										538175
									],
									[
										538377,
										538385
									],
									[
										538693,
										538701
									],
									[
										538985,
										538993
									],
									[
										539288,
										539296
									],
									[
										539511,
										539519
									],
									[
										539685,
										539693
									],
									[
										540084,
										540092
									],
									[
										540284,
										540292
									],
									[
										540575,
										540583
									],
									[
										540808,
										540816
									],
									[
										541047,
										541055
									],
									[
										541305,
										541313
									],
									[
										541522,
										541530
									],
									[
										541710,
										541718
									],
									[
										541920,
										541928
									],
									[
										542265,
										542273
									],
									[
										542604,
										542612
									],
									[
										542828,
										542836
									],
									[
										543123,
										543131
									],
									[
										543288,
										543296
									],
									[
										543535,
										543543
									],
									[
										543755,
										543763
									],
									[
										543954,
										543962
									],
									[
										544250,
										544258
									],
									[
										544623,
										544631
									],
									[
										544946,
										544954
									],
									[
										545272,
										545280
									],
									[
										545654,
										545662
									],
									[
										545927,
										545935
									],
									[
										546182,
										546190
									],
									[
										546424,
										546432
									],
									[
										546662,
										546670
									],
									[
										547047,
										547055
									],
									[
										547317,
										547325
									],
									[
										547458,
										547466
									],
									[
										547692,
										547700
									],
									[
										547907,
										547915
									],
									[
										548136,
										548144
									],
									[
										548439,
										548447
									],
									[
										548597,
										548605
									],
									[
										548766,
										548774
									],
									[
										548927,
										548935
									],
									[
										549139,
										549147
									],
									[
										549395,
										549403
									],
									[
										549542,
										549550
									],
									[
										549730,
										549738
									],
									[
										550095,
										550103
									],
									[
										550410,
										550418
									],
									[
										550692,
										550700
									],
									[
										550885,
										550893
									],
									[
										551126,
										551134
									],
									[
										551446,
										551454
									],
									[
										551782,
										551790
									],
									[
										551979,
										551987
									],
									[
										552180,
										552188
									],
									[
										552488,
										552496
									],
									[
										552649,
										552657
									],
									[
										552903,
										552911
									],
									[
										553195,
										553203
									],
									[
										553463,
										553471
									],
									[
										553653,
										553661
									],
									[
										553866,
										553874
									],
									[
										554100,
										554108
									],
									[
										554334,
										554342
									],
									[
										554617,
										554625
									],
									[
										554908,
										554916
									],
									[
										555282,
										555290
									],
									[
										555576,
										555584
									],
									[
										555862,
										555870
									],
									[
										556083,
										556091
									],
									[
										556318,
										556326
									],
									[
										556695,
										556703
									],
									[
										557135,
										557143
									],
									[
										557484,
										557492
									],
									[
										557755,
										557763
									],
									[
										558106,
										558114
									],
									[
										558346,
										558354
									],
									[
										558617,
										558625
									],
									[
										558885,
										558893
									],
									[
										559165,
										559173
									],
									[
										559440,
										559448
									],
									[
										559749,
										559757
									],
									[
										559986,
										559994
									],
									[
										560232,
										560240
									],
									[
										560574,
										560582
									],
									[
										560925,
										560933
									],
									[
										561215,
										561223
									],
									[
										561486,
										561494
									],
									[
										561720,
										561728
									],
									[
										562018,
										562026
									],
									[
										562203,
										562211
									],
									[
										562490,
										562498
									],
									[
										562698,
										562706
									],
									[
										563006,
										563014
									],
									[
										563287,
										563295
									],
									[
										563562,
										563570
									],
									[
										563916,
										563924
									],
									[
										564167,
										564175
									],
									[
										564529,
										564537
									],
									[
										564780,
										564788
									],
									[
										565144,
										565152
									],
									[
										565531,
										565539
									],
									[
										565858,
										565866
									],
									[
										566074,
										566082
									],
									[
										566342,
										566350
									],
									[
										566576,
										566584
									],
									[
										566806,
										566814
									],
									[
										567035,
										567043
									],
									[
										567265,
										567273
									],
									[
										567440,
										567448
									],
									[
										567607,
										567615
									],
									[
										567854,
										567862
									],
									[
										568119,
										568127
									],
									[
										568462,
										568470
									],
									[
										568682,
										568690
									],
									[
										569033,
										569041
									],
									[
										569395,
										569403
									],
									[
										569743,
										569751
									],
									[
										569953,
										569961
									],
									[
										570168,
										570176
									],
									[
										570370,
										570378
									],
									[
										570681,
										570689
									],
									[
										570991,
										570999
									],
									[
										571294,
										571302
									],
									[
										571590,
										571598
									],
									[
										571909,
										571917
									],
									[
										572229,
										572237
									],
									[
										572524,
										572532
									],
									[
										572823,
										572831
									],
									[
										573165,
										573173
									],
									[
										573500,
										573508
									],
									[
										573878,
										573886
									],
									[
										574069,
										574077
									],
									[
										574408,
										574416
									],
									[
										574759,
										574767
									],
									[
										575011,
										575019
									],
									[
										575329,
										575337
									],
									[
										575539,
										575547
									],
									[
										575718,
										575726
									],
									[
										575884,
										575892
									],
									[
										576100,
										576108
									],
									[
										576304,
										576312
									],
									[
										576458,
										576466
									],
									[
										576622,
										576630
									],
									[
										576876,
										576884
									],
									[
										577156,
										577164
									],
									[
										577356,
										577364
									],
									[
										577560,
										577568
									],
									[
										577725,
										577733
									],
									[
										577926,
										577934
									],
									[
										578195,
										578203
									],
									[
										578400,
										578408
									],
									[
										578594,
										578602
									],
									[
										578850,
										578858
									],
									[
										579051,
										579059
									],
									[
										579233,
										579241
									],
									[
										579488,
										579496
									],
									[
										579744,
										579752
									],
									[
										580096,
										580104
									],
									[
										580310,
										580318
									],
									[
										580607,
										580615
									],
									[
										580895,
										580903
									],
									[
										581183,
										581191
									],
									[
										581536,
										581544
									],
									[
										581755,
										581763
									],
									[
										581961,
										581969
									],
									[
										582289,
										582297
									],
									[
										582592,
										582600
									],
									[
										582764,
										582772
									],
									[
										583111,
										583119
									],
									[
										583406,
										583414
									],
									[
										583583,
										583591
									],
									[
										583800,
										583808
									],
									[
										584042,
										584050
									],
									[
										584218,
										584226
									],
									[
										584423,
										584431
									],
									[
										584630,
										584638
									],
									[
										584853,
										584861
									],
									[
										585073,
										585081
									],
									[
										585369,
										585377
									],
									[
										585642,
										585650
									],
									[
										585790,
										585798
									],
									[
										585966,
										585974
									],
									[
										586205,
										586213
									],
									[
										586523,
										586531
									],
									[
										586827,
										586835
									],
									[
										587029,
										587037
									],
									[
										587266,
										587274
									],
									[
										587486,
										587494
									],
									[
										587692,
										587700
									],
									[
										587886,
										587894
									],
									[
										588112,
										588120
									],
									[
										588366,
										588374
									],
									[
										588595,
										588603
									],
									[
										588819,
										588827
									],
									[
										589044,
										589052
									],
									[
										589199,
										589207
									],
									[
										589371,
										589379
									],
									[
										589596,
										589604
									],
									[
										589767,
										589775
									],
									[
										589977,
										589985
									],
									[
										590177,
										590185
									],
									[
										590434,
										590442
									],
									[
										590729,
										590737
									],
									[
										590918,
										590926
									],
									[
										591055,
										591063
									],
									[
										591214,
										591222
									],
									[
										591372,
										591380
									],
									[
										591529,
										591537
									],
									[
										591815,
										591823
									],
									[
										592202,
										592210
									],
									[
										592539,
										592547
									],
									[
										592793,
										592801
									],
									[
										593109,
										593117
									],
									[
										593363,
										593371
									],
									[
										593766,
										593774
									],
									[
										593942,
										593950
									],
									[
										594154,
										594162
									],
									[
										594338,
										594346
									],
									[
										594539,
										594547
									],
									[
										594701,
										594709
									],
									[
										595043,
										595051
									],
									[
										595370,
										595378
									],
									[
										595531,
										595539
									],
									[
										595851,
										595859
									],
									[
										596081,
										596089
									],
									[
										596314,
										596322
									],
									[
										596558,
										596566
									],
									[
										596736,
										596744
									],
									[
										596943,
										596951
									],
									[
										597293,
										597301
									],
									[
										597522,
										597530
									],
									[
										597830,
										597838
									],
									[
										598133,
										598141
									],
									[
										598517,
										598525
									],
									[
										598864,
										598872
									],
									[
										599203,
										599211
									],
									[
										599543,
										599551
									],
									[
										599889,
										599897
									],
									[
										600140,
										600148
									],
									[
										600331,
										600339
									],
									[
										600544,
										600552
									],
									[
										600752,
										600760
									],
									[
										600936,
										600944
									],
									[
										601132,
										601140
									],
									[
										601452,
										601460
									],
									[
										601673,
										601681
									],
									[
										601910,
										601918
									],
									[
										602109,
										602117
									],
									[
										602397,
										602405
									],
									[
										602669,
										602677
									],
									[
										603107,
										603115
									],
									[
										603298,
										603306
									],
									[
										603469,
										603477
									],
									[
										603647,
										603655
									],
									[
										603856,
										603864
									],
									[
										604071,
										604079
									],
									[
										604231,
										604239
									],
									[
										604413,
										604421
									],
									[
										604747,
										604755
									],
									[
										604963,
										604971
									],
									[
										605181,
										605189
									],
									[
										605450,
										605458
									],
									[
										605771,
										605779
									],
									[
										606142,
										606150
									],
									[
										606483,
										606491
									],
									[
										606866,
										606874
									],
									[
										607211,
										607219
									],
									[
										607601,
										607609
									],
									[
										607904,
										607912
									],
									[
										608204,
										608212
									],
									[
										608533,
										608541
									],
									[
										608788,
										608796
									],
									[
										609064,
										609072
									],
									[
										609332,
										609340
									],
									[
										609573,
										609581
									],
									[
										609928,
										609936
									],
									[
										610147,
										610155
									],
									[
										610438,
										610446
									],
									[
										610742,
										610750
									],
									[
										610987,
										610995
									],
									[
										611247,
										611255
									],
									[
										611486,
										611494
									],
									[
										611761,
										611769
									],
									[
										611887,
										611895
									],
									[
										612131,
										612139
									],
									[
										612348,
										612356
									],
									[
										612568,
										612576
									],
									[
										612963,
										612971
									],
									[
										613202,
										613210
									],
									[
										613460,
										613468
									],
									[
										613688,
										613696
									],
									[
										613923,
										613931
									],
									[
										614158,
										614166
									],
									[
										614387,
										614395
									],
									[
										614730,
										614738
									],
									[
										614913,
										614921
									],
									[
										615103,
										615111
									],
									[
										615320,
										615328
									],
									[
										615480,
										615488
									],
									[
										615859,
										615867
									],
									[
										616126,
										616134
									],
									[
										616413,
										616421
									],
									[
										616786,
										616794
									],
									[
										617047,
										617055
									],
									[
										617263,
										617271
									],
									[
										617524,
										617532
									],
									[
										617829,
										617837
									],
									[
										617948,
										617956
									],
									[
										618077,
										618085
									],
									[
										618401,
										618409
									],
									[
										618661,
										618669
									],
									[
										618919,
										618927
									],
									[
										619191,
										619199
									],
									[
										619605,
										619613
									],
									[
										619849,
										619857
									],
									[
										620149,
										620157
									],
									[
										620373,
										620381
									],
									[
										620683,
										620691
									],
									[
										620837,
										620845
									],
									[
										620995,
										621003
									],
									[
										621150,
										621158
									],
									[
										621316,
										621324
									],
									[
										621492,
										621500
									],
									[
										621830,
										621838
									],
									[
										622046,
										622054
									],
									[
										622218,
										622226
									],
									[
										622527,
										622535
									],
									[
										622726,
										622734
									],
									[
										623110,
										623118
									],
									[
										623282,
										623290
									],
									[
										623494,
										623502
									],
									[
										623670,
										623678
									],
									[
										623962,
										623970
									],
									[
										624189,
										624197
									],
									[
										624422,
										624430
									],
									[
										624680,
										624688
									],
									[
										624949,
										624957
									],
									[
										625283,
										625291
									],
									[
										625577,
										625585
									],
									[
										625889,
										625897
									],
									[
										626114,
										626122
									],
									[
										626436,
										626444
									],
									[
										626608,
										626616
									],
									[
										626934,
										626942
									],
									[
										627104,
										627112
									],
									[
										627382,
										627390
									],
									[
										627745,
										627753
									],
									[
										628034,
										628042
									],
									[
										628412,
										628420
									],
									[
										628645,
										628653
									],
									[
										628872,
										628880
									],
									[
										629147,
										629155
									],
									[
										629416,
										629424
									],
									[
										629680,
										629688
									],
									[
										629858,
										629866
									],
									[
										630044,
										630052
									],
									[
										630357,
										630365
									],
									[
										630672,
										630680
									],
									[
										630918,
										630926
									],
									[
										631145,
										631153
									],
									[
										631360,
										631368
									],
									[
										631537,
										631545
									],
									[
										631809,
										631817
									],
									[
										632043,
										632051
									],
									[
										632228,
										632236
									],
									[
										632457,
										632465
									],
									[
										632714,
										632722
									],
									[
										632984,
										632992
									],
									[
										633262,
										633270
									],
									[
										633527,
										633535
									],
									[
										633902,
										633910
									],
									[
										634240,
										634248
									],
									[
										634494,
										634502
									],
									[
										634771,
										634779
									],
									[
										634968,
										634976
									],
									[
										635275,
										635283
									],
									[
										635656,
										635664
									],
									[
										635905,
										635913
									],
									[
										636223,
										636231
									],
									[
										636525,
										636533
									],
									[
										636802,
										636810
									],
									[
										636969,
										636977
									],
									[
										637051,
										637059
									],
									[
										637131,
										637139
									],
									[
										637388,
										637396
									],
									[
										637521,
										637529
									],
									[
										637727,
										637735
									],
									[
										637999,
										638007
									],
									[
										638188,
										638196
									],
									[
										638436,
										638444
									],
									[
										638800,
										638808
									],
									[
										639072,
										639080
									],
									[
										639289,
										639297
									],
									[
										639589,
										639597
									],
									[
										639927,
										639935
									],
									[
										640271,
										640279
									],
									[
										640559,
										640567
									],
									[
										640866,
										640874
									],
									[
										641070,
										641078
									],
									[
										641250,
										641258
									],
									[
										641443,
										641451
									],
									[
										641644,
										641652
									],
									[
										642040,
										642048
									],
									[
										642361,
										642369
									],
									[
										642626,
										642634
									],
									[
										643036,
										643044
									],
									[
										643401,
										643409
									],
									[
										643683,
										643691
									],
									[
										643901,
										643909
									],
									[
										644168,
										644176
									],
									[
										644484,
										644492
									],
									[
										644756,
										644764
									],
									[
										645049,
										645057
									],
									[
										645249,
										645257
									],
									[
										645626,
										645634
									],
									[
										645934,
										645942
									],
									[
										646292,
										646300
									],
									[
										646662,
										646670
									],
									[
										646898,
										646906
									],
									[
										647088,
										647096
									],
									[
										647284,
										647292
									],
									[
										647494,
										647502
									],
									[
										647755,
										647763
									],
									[
										648072,
										648080
									],
									[
										648323,
										648331
									],
									[
										648631,
										648639
									],
									[
										648939,
										648947
									],
									[
										649288,
										649296
									],
									[
										649551,
										649559
									],
									[
										649837,
										649845
									],
									[
										650125,
										650133
									],
									[
										650405,
										650413
									],
									[
										650627,
										650635
									],
									[
										650910,
										650918
									],
									[
										651185,
										651193
									],
									[
										651464,
										651472
									],
									[
										651747,
										651755
									],
									[
										651965,
										651973
									],
									[
										652265,
										652273
									],
									[
										652520,
										652528
									],
									[
										652729,
										652737
									],
									[
										652939,
										652947
									],
									[
										653150,
										653158
									],
									[
										653435,
										653443
									],
									[
										653726,
										653734
									],
									[
										653934,
										653942
									],
									[
										654314,
										654322
									],
									[
										654551,
										654559
									],
									[
										654745,
										654753
									],
									[
										654985,
										654993
									],
									[
										655299,
										655307
									],
									[
										655498,
										655506
									],
									[
										655692,
										655700
									],
									[
										655900,
										655908
									],
									[
										656093,
										656101
									],
									[
										656323,
										656331
									],
									[
										656629,
										656637
									],
									[
										656801,
										656809
									],
									[
										656992,
										657000
									],
									[
										657178,
										657186
									],
									[
										657399,
										657407
									],
									[
										657591,
										657599
									],
									[
										657796,
										657804
									],
									[
										658012,
										658020
									],
									[
										658283,
										658291
									],
									[
										658462,
										658470
									],
									[
										658649,
										658657
									],
									[
										658876,
										658884
									],
									[
										659110,
										659118
									],
									[
										659279,
										659287
									],
									[
										659472,
										659480
									],
									[
										659731,
										659739
									],
									[
										659957,
										659965
									],
									[
										660224,
										660232
									],
									[
										660498,
										660506
									],
									[
										660771,
										660779
									],
									[
										660871,
										660879
									],
									[
										660999,
										661007
									],
									[
										661286,
										661294
									],
									[
										661446,
										661454
									],
									[
										661649,
										661657
									],
									[
										661914,
										661922
									],
									[
										661980,
										661988
									],
									[
										662292,
										662300
									],
									[
										662374,
										662382
									],
									[
										662537,
										662545
									],
									[
										662775,
										662783
									],
									[
										662939,
										662947
									],
									[
										663088,
										663096
									],
									[
										663235,
										663243
									],
									[
										663382,
										663390
									],
									[
										663532,
										663540
									],
									[
										663779,
										663787
									],
									[
										663953,
										663961
									],
									[
										664217,
										664225
									],
									[
										664485,
										664493
									],
									[
										664754,
										664762
									],
									[
										664978,
										664986
									],
									[
										665146,
										665154
									],
									[
										665269,
										665277
									],
									[
										665392,
										665400
									],
									[
										665563,
										665571
									],
									[
										665686,
										665694
									],
									[
										665955,
										665963
									],
									[
										666080,
										666088
									],
									[
										666194,
										666202
									],
									[
										666322,
										666330
									],
									[
										666554,
										666562
									],
									[
										666723,
										666731
									],
									[
										666950,
										666958
									],
									[
										667117,
										667125
									],
									[
										667239,
										667247
									],
									[
										667434,
										667442
									],
									[
										667587,
										667595
									],
									[
										667768,
										667776
									],
									[
										667935,
										667943
									],
									[
										668116,
										668124
									],
									[
										668314,
										668322
									],
									[
										668532,
										668540
									],
									[
										668789,
										668797
									],
									[
										668993,
										669001
									],
									[
										669226,
										669234
									],
									[
										669443,
										669451
									],
									[
										669725,
										669733
									],
									[
										669925,
										669933
									],
									[
										670258,
										670266
									],
									[
										670464,
										670472
									],
									[
										670678,
										670686
									],
									[
										671023,
										671031
									],
									[
										671302,
										671310
									],
									[
										671516,
										671524
									],
									[
										671684,
										671692
									],
									[
										671803,
										671811
									],
									[
										672011,
										672019
									],
									[
										672194,
										672202
									],
									[
										672398,
										672406
									],
									[
										672626,
										672634
									],
									[
										672800,
										672808
									],
									[
										672996,
										673004
									],
									[
										673283,
										673291
									],
									[
										673335,
										673343
									],
									[
										673485,
										673493
									],
									[
										673749,
										673757
									],
									[
										673968,
										673976
									],
									[
										674198,
										674206
									],
									[
										674293,
										674301
									],
									[
										674449,
										674457
									],
									[
										674606,
										674614
									],
									[
										674742,
										674750
									],
									[
										674919,
										674927
									],
									[
										675196,
										675204
									],
									[
										675323,
										675331
									],
									[
										675605,
										675613
									],
									[
										675760,
										675768
									],
									[
										675956,
										675964
									],
									[
										676120,
										676128
									],
									[
										676278,
										676286
									],
									[
										676521,
										676529
									],
									[
										676637,
										676645
									],
									[
										676971,
										676979
									],
									[
										677207,
										677215
									],
									[
										677455,
										677463
									],
									[
										677748,
										677756
									],
									[
										677889,
										677897
									],
									[
										678089,
										678097
									],
									[
										678380,
										678388
									],
									[
										678597,
										678605
									],
									[
										678784,
										678792
									],
									[
										679029,
										679037
									],
									[
										679164,
										679172
									],
									[
										679469,
										679477
									],
									[
										679711,
										679719
									],
									[
										679949,
										679957
									],
									[
										680187,
										680195
									],
									[
										680424,
										680432
									],
									[
										680656,
										680664
									],
									[
										680912,
										680920
									],
									[
										681104,
										681112
									],
									[
										681288,
										681296
									],
									[
										681522,
										681530
									],
									[
										681744,
										681752
									],
									[
										681936,
										681944
									],
									[
										682178,
										682186
									],
									[
										682399,
										682407
									],
									[
										682652,
										682660
									],
									[
										682916,
										682924
									],
									[
										683106,
										683114
									],
									[
										683271,
										683279
									],
									[
										683581,
										683589
									],
									[
										683892,
										683900
									],
									[
										684050,
										684058
									],
									[
										684278,
										684286
									],
									[
										684497,
										684505
									],
									[
										684734,
										684742
									],
									[
										685045,
										685053
									],
									[
										685280,
										685288
									],
									[
										685522,
										685530
									],
									[
										685741,
										685749
									],
									[
										685998,
										686006
									],
									[
										686237,
										686245
									],
									[
										686541,
										686549
									],
									[
										686692,
										686700
									],
									[
										686855,
										686863
									],
									[
										687144,
										687152
									],
									[
										687380,
										687388
									],
									[
										687683,
										687691
									],
									[
										687893,
										687901
									],
									[
										688094,
										688102
									],
									[
										688391,
										688399
									],
									[
										688516,
										688524
									],
									[
										688675,
										688683
									],
									[
										688777,
										688785
									],
									[
										688900,
										688908
									],
									[
										689098,
										689106
									],
									[
										689265,
										689273
									],
									[
										689487,
										689495
									],
									[
										689859,
										689867
									],
									[
										690130,
										690138
									],
									[
										690309,
										690317
									],
									[
										690482,
										690490
									],
									[
										690584,
										690592
									],
									[
										690697,
										690705
									],
									[
										690921,
										690929
									],
									[
										691062,
										691070
									],
									[
										691281,
										691289
									],
									[
										691562,
										691570
									],
									[
										691729,
										691737
									],
									[
										691966,
										691974
									],
									[
										692301,
										692309
									],
									[
										692495,
										692503
									],
									[
										692669,
										692677
									],
									[
										692780,
										692788
									],
									[
										692962,
										692970
									],
									[
										693070,
										693078
									],
									[
										693172,
										693180
									],
									[
										693328,
										693336
									],
									[
										693451,
										693459
									],
									[
										693559,
										693567
									],
									[
										693666,
										693674
									],
									[
										693832,
										693840
									],
									[
										694051,
										694059
									],
									[
										694316,
										694324
									],
									[
										694553,
										694561
									],
									[
										694760,
										694768
									],
									[
										694939,
										694947
									],
									[
										695110,
										695118
									],
									[
										695291,
										695299
									],
									[
										695482,
										695490
									],
									[
										695667,
										695675
									],
									[
										695859,
										695867
									],
									[
										696038,
										696046
									],
									[
										696273,
										696281
									],
									[
										696525,
										696533
									],
									[
										696755,
										696763
									],
									[
										696976,
										696984
									],
									[
										697105,
										697113
									],
									[
										697263,
										697271
									],
									[
										697509,
										697517
									],
									[
										697747,
										697755
									],
									[
										698028,
										698036
									],
									[
										698317,
										698325
									],
									[
										698501,
										698509
									],
									[
										698676,
										698684
									],
									[
										698842,
										698850
									],
									[
										699026,
										699034
									],
									[
										699287,
										699295
									],
									[
										699524,
										699532
									],
									[
										699773,
										699781
									],
									[
										700008,
										700016
									],
									[
										700176,
										700184
									],
									[
										700402,
										700410
									],
									[
										700631,
										700639
									],
									[
										700726,
										700734
									],
									[
										701009,
										701017
									],
									[
										701201,
										701209
									],
									[
										701370,
										701378
									],
									[
										701565,
										701573
									],
									[
										701743,
										701751
									],
									[
										702001,
										702009
									],
									[
										702168,
										702176
									],
									[
										702363,
										702371
									],
									[
										702678,
										702686
									],
									[
										702877,
										702885
									],
									[
										703094,
										703102
									],
									[
										703287,
										703295
									],
									[
										703578,
										703586
									],
									[
										703777,
										703785
									],
									[
										703994,
										704002
									],
									[
										704237,
										704245
									],
									[
										704359,
										704367
									],
									[
										704509,
										704517
									],
									[
										704623,
										704631
									],
									[
										704798,
										704806
									],
									[
										705062,
										705070
									],
									[
										705182,
										705190
									],
									[
										705339,
										705347
									],
									[
										705505,
										705513
									],
									[
										705759,
										705767
									],
									[
										705958,
										705966
									],
									[
										706177,
										706185
									],
									[
										706358,
										706366
									],
									[
										706549,
										706557
									],
									[
										706739,
										706747
									],
									[
										706887,
										706895
									],
									[
										707118,
										707126
									],
									[
										707300,
										707308
									],
									[
										707482,
										707490
									],
									[
										707662,
										707670
									],
									[
										707830,
										707838
									],
									[
										707989,
										707997
									],
									[
										708164,
										708172
									],
									[
										708464,
										708472
									],
									[
										708684,
										708692
									],
									[
										708801,
										708809
									],
									[
										709036,
										709044
									],
									[
										709165,
										709173
									],
									[
										709504,
										709512
									],
									[
										709768,
										709776
									],
									[
										710059,
										710067
									],
									[
										710336,
										710344
									],
									[
										710611,
										710619
									],
									[
										710847,
										710855
									],
									[
										710965,
										710973
									],
									[
										711089,
										711097
									],
									[
										711267,
										711275
									],
									[
										711502,
										711510
									],
									[
										711774,
										711782
									],
									[
										712092,
										712100
									],
									[
										712312,
										712320
									],
									[
										712534,
										712542
									],
									[
										712772,
										712780
									],
									[
										713024,
										713032
									],
									[
										713110,
										713118
									],
									[
										713263,
										713271
									],
									[
										713526,
										713534
									],
									[
										713789,
										713797
									],
									[
										714099,
										714107
									],
									[
										714264,
										714272
									],
									[
										714480,
										714488
									],
									[
										714670,
										714678
									],
									[
										714872,
										714880
									],
									[
										715115,
										715123
									],
									[
										715202,
										715210
									],
									[
										715356,
										715364
									],
									[
										715670,
										715678
									],
									[
										715838,
										715846
									],
									[
										716130,
										716138
									],
									[
										716267,
										716275
									],
									[
										716410,
										716418
									],
									[
										716555,
										716563
									],
									[
										716671,
										716679
									],
									[
										716825,
										716833
									],
									[
										717071,
										717079
									],
									[
										717214,
										717222
									],
									[
										717362,
										717370
									],
									[
										717520,
										717528
									],
									[
										717672,
										717680
									],
									[
										717908,
										717916
									],
									[
										718138,
										718146
									],
									[
										718383,
										718391
									],
									[
										718622,
										718630
									],
									[
										718843,
										718851
									],
									[
										719079,
										719087
									],
									[
										719306,
										719314
									],
									[
										719534,
										719542
									],
									[
										719750,
										719758
									],
									[
										719987,
										719995
									],
									[
										720225,
										720233
									],
									[
										720399,
										720407
									],
									[
										720721,
										720729
									],
									[
										720924,
										720932
									],
									[
										721137,
										721145
									],
									[
										721253,
										721261
									],
									[
										721366,
										721374
									],
									[
										721464,
										721472
									],
									[
										721580,
										721588
									],
									[
										721682,
										721690
									],
									[
										721779,
										721787
									],
									[
										721890,
										721898
									],
									[
										722001,
										722009
									],
									[
										722158,
										722166
									],
									[
										722363,
										722371
									],
									[
										722562,
										722570
									],
									[
										722734,
										722742
									],
									[
										722928,
										722936
									],
									[
										723178,
										723186
									],
									[
										723447,
										723455
									],
									[
										723561,
										723569
									],
									[
										723734,
										723742
									],
									[
										723889,
										723897
									],
									[
										724120,
										724128
									],
									[
										724274,
										724282
									],
									[
										724426,
										724434
									],
									[
										724645,
										724653
									],
									[
										724797,
										724805
									],
									[
										725082,
										725090
									],
									[
										725269,
										725277
									],
									[
										725542,
										725550
									],
									[
										725589,
										725597
									],
									[
										725634,
										725642
									],
									[
										725771,
										725779
									],
									[
										725812,
										725820
									],
									[
										725856,
										725864
									],
									[
										725899,
										725907
									],
									[
										725942,
										725950
									],
									[
										725986,
										725994
									],
									[
										726034,
										726042
									],
									[
										726075,
										726083
									],
									[
										726111,
										726119
									],
									[
										726145,
										726153
									],
									[
										726183,
										726191
									],
									[
										726221,
										726229
									],
									[
										726262,
										726270
									],
									[
										726308,
										726316
									],
									[
										726352,
										726360
									],
									[
										726397,
										726405
									],
									[
										726437,
										726445
									],
									[
										726479,
										726487
									],
									[
										726518,
										726526
									],
									[
										726558,
										726566
									],
									[
										726595,
										726603
									],
									[
										726637,
										726645
									],
									[
										726684,
										726692
									],
									[
										726724,
										726732
									],
									[
										726765,
										726773
									],
									[
										726809,
										726817
									],
									[
										726854,
										726862
									],
									[
										726895,
										726903
									],
									[
										726935,
										726943
									],
									[
										726976,
										726984
									],
									[
										727175,
										727183
									],
									[
										727387,
										727395
									],
									[
										727643,
										727651
									],
									[
										727890,
										727898
									],
									[
										728060,
										728068
									],
									[
										728225,
										728233
									],
									[
										728401,
										728409
									],
									[
										728579,
										728587
									],
									[
										728902,
										728910
									],
									[
										729063,
										729071
									],
									[
										729264,
										729272
									],
									[
										729417,
										729425
									],
									[
										729712,
										729720
									],
									[
										729913,
										729921
									],
									[
										730066,
										730074
									],
									[
										730212,
										730220
									],
									[
										730370,
										730378
									],
									[
										730591,
										730599
									],
									[
										730819,
										730827
									],
									[
										731119,
										731127
									],
									[
										731330,
										731338
									],
									[
										731469,
										731477
									],
									[
										731652,
										731660
									],
									[
										731856,
										731864
									],
									[
										732023,
										732031
									],
									[
										732346,
										732354
									],
									[
										732625,
										732633
									],
									[
										732915,
										732923
									],
									[
										733179,
										733187
									],
									[
										733398,
										733406
									],
									[
										733654,
										733662
									],
									[
										733913,
										733921
									],
									[
										734116,
										734124
									],
									[
										734344,
										734352
									],
									[
										734623,
										734631
									],
									[
										734840,
										734848
									],
									[
										734968,
										734976
									],
									[
										735171,
										735179
									],
									[
										735413,
										735421
									],
									[
										735688,
										735696
									],
									[
										735844,
										735852
									],
									[
										735987,
										735995
									],
									[
										736163,
										736171
									],
									[
										736309,
										736317
									],
									[
										736459,
										736467
									],
									[
										736609,
										736617
									],
									[
										736774,
										736782
									],
									[
										736987,
										736995
									],
									[
										737228,
										737236
									],
									[
										737394,
										737402
									],
									[
										737609,
										737617
									],
									[
										737818,
										737826
									],
									[
										737936,
										737944
									],
									[
										738091,
										738099
									],
									[
										738293,
										738301
									],
									[
										738490,
										738498
									],
									[
										738705,
										738713
									],
									[
										738881,
										738889
									],
									[
										739087,
										739095
									],
									[
										739289,
										739297
									],
									[
										739581,
										739589
									],
									[
										739779,
										739787
									],
									[
										739998,
										740006
									],
									[
										740280,
										740288
									],
									[
										740473,
										740481
									],
									[
										740641,
										740649
									],
									[
										740817,
										740825
									],
									[
										740982,
										740990
									],
									[
										741213,
										741221
									],
									[
										741381,
										741389
									],
									[
										741571,
										741579
									],
									[
										741736,
										741744
									],
									[
										741933,
										741941
									],
									[
										742125,
										742133
									],
									[
										742328,
										742336
									],
									[
										742540,
										742548
									],
									[
										742752,
										742760
									],
									[
										743056,
										743064
									],
									[
										743324,
										743332
									],
									[
										743505,
										743513
									],
									[
										743777,
										743785
									],
									[
										743942,
										743950
									],
									[
										744177,
										744185
									],
									[
										744379,
										744387
									],
									[
										744558,
										744566
									],
									[
										744818,
										744826
									],
									[
										744998,
										745006
									],
									[
										745212,
										745220
									],
									[
										745418,
										745426
									],
									[
										745618,
										745626
									],
									[
										745826,
										745834
									],
									[
										746033,
										746041
									],
									[
										746210,
										746218
									],
									[
										746425,
										746433
									],
									[
										746632,
										746640
									],
									[
										746871,
										746879
									],
									[
										747041,
										747049
									],
									[
										747412,
										747420
									],
									[
										747662,
										747670
									],
									[
										748053,
										748061
									],
									[
										748379,
										748387
									],
									[
										748425,
										748433
									],
									[
										748468,
										748476
									],
									[
										748511,
										748519
									],
									[
										748554,
										748562
									],
									[
										748595,
										748603
									],
									[
										748639,
										748647
									],
									[
										748678,
										748686
									],
									[
										748746,
										748754
									],
									[
										749031,
										749039
									],
									[
										749088,
										749096
									],
									[
										749143,
										749151
									],
									[
										749196,
										749204
									],
									[
										749252,
										749260
									],
									[
										749317,
										749325
									],
									[
										749381,
										749389
									],
									[
										749578,
										749586
									],
									[
										749621,
										749629
									],
									[
										749668,
										749676
									],
									[
										749724,
										749732
									],
									[
										749770,
										749778
									],
									[
										749817,
										749825
									],
									[
										749861,
										749869
									],
									[
										749910,
										749918
									],
									[
										750066,
										750074
									],
									[
										750117,
										750125
									],
									[
										750163,
										750171
									],
									[
										750208,
										750216
									],
									[
										750253,
										750261
									],
									[
										750368,
										750376
									],
									[
										750415,
										750423
									],
									[
										750458,
										750466
									],
									[
										750505,
										750513
									],
									[
										750556,
										750564
									],
									[
										750604,
										750612
									],
									[
										750664,
										750672
									],
									[
										750709,
										750717
									],
									[
										750761,
										750769
									],
									[
										750804,
										750812
									],
									[
										750847,
										750855
									],
									[
										750898,
										750906
									],
									[
										750943,
										750951
									],
									[
										750991,
										750999
									],
									[
										751095,
										751103
									],
									[
										751149,
										751157
									],
									[
										751211,
										751219
									],
									[
										751254,
										751262
									],
									[
										751300,
										751308
									],
									[
										751400,
										751408
									],
									[
										751448,
										751456
									],
									[
										751494,
										751502
									],
									[
										751541,
										751549
									],
									[
										751595,
										751603
									],
									[
										751642,
										751650
									],
									[
										751694,
										751702
									],
									[
										751741,
										751749
									],
									[
										751793,
										751801
									],
									[
										751848,
										751856
									],
									[
										751898,
										751906
									],
									[
										751945,
										751953
									],
									[
										751996,
										752004
									],
									[
										752083,
										752091
									],
									[
										752122,
										752130
									],
									[
										752171,
										752179
									],
									[
										752214,
										752222
									],
									[
										752264,
										752272
									],
									[
										752315,
										752323
									],
									[
										752362,
										752370
									],
									[
										752407,
										752415
									],
									[
										752452,
										752460
									],
									[
										752497,
										752505
									],
									[
										752599,
										752607
									],
									[
										752646,
										752654
									],
									[
										752767,
										752775
									],
									[
										752880,
										752888
									],
									[
										752933,
										752941
									],
									[
										753049,
										753057
									],
									[
										753100,
										753108
									],
									[
										753402,
										753410
									],
									[
										753722,
										753730
									],
									[
										753915,
										753923
									],
									[
										754279,
										754287
									],
									[
										754522,
										754530
									],
									[
										754866,
										754874
									],
									[
										755011,
										755019
									],
									[
										755245,
										755253
									],
									[
										755391,
										755399
									],
									[
										755540,
										755548
									],
									[
										755684,
										755692
									],
									[
										755861,
										755869
									],
									[
										756071,
										756079
									],
									[
										756436,
										756444
									],
									[
										756591,
										756599
									],
									[
										756742,
										756750
									],
									[
										757047,
										757055
									],
									[
										757290,
										757298
									],
									[
										757546,
										757554
									],
									[
										757740,
										757748
									],
									[
										757969,
										757977
									],
									[
										758150,
										758158
									],
									[
										758381,
										758389
									],
									[
										758593,
										758601
									],
									[
										758799,
										758807
									],
									[
										758995,
										759003
									],
									[
										759206,
										759214
									],
									[
										759367,
										759375
									],
									[
										759540,
										759548
									],
									[
										759734,
										759742
									],
									[
										759911,
										759919
									],
									[
										760148,
										760156
									],
									[
										760293,
										760301
									],
									[
										760526,
										760534
									],
									[
										760657,
										760665
									],
									[
										760801,
										760809
									],
									[
										760956,
										760964
									],
									[
										761124,
										761132
									],
									[
										761339,
										761347
									],
									[
										761553,
										761561
									],
									[
										761817,
										761825
									],
									[
										761988,
										761996
									],
									[
										762160,
										762168
									],
									[
										762328,
										762336
									],
									[
										762501,
										762509
									],
									[
										762642,
										762650
									],
									[
										762786,
										762794
									],
									[
										762963,
										762971
									],
									[
										763143,
										763151
									],
									[
										763332,
										763340
									],
									[
										763510,
										763518
									],
									[
										763687,
										763695
									],
									[
										763875,
										763883
									],
									[
										764066,
										764074
									],
									[
										764244,
										764252
									],
									[
										764414,
										764422
									],
									[
										764592,
										764600
									],
									[
										764756,
										764764
									],
									[
										764922,
										764930
									],
									[
										765145,
										765153
									],
									[
										765445,
										765453
									],
									[
										765675,
										765683
									],
									[
										766011,
										766019
									],
									[
										766060,
										766068
									],
									[
										766106,
										766114
									],
									[
										766162,
										766170
									],
									[
										766214,
										766222
									],
									[
										766263,
										766271
									],
									[
										766312,
										766320
									],
									[
										766357,
										766365
									],
									[
										766409,
										766417
									],
									[
										766457,
										766465
									],
									[
										766507,
										766515
									],
									[
										766553,
										766561
									],
									[
										766614,
										766622
									],
									[
										766665,
										766673
									],
									[
										766756,
										766764
									],
									[
										766915,
										766923
									],
									[
										767137,
										767145
									],
									[
										767308,
										767316
									],
									[
										767424,
										767432
									],
									[
										767605,
										767613
									],
									[
										767797,
										767805
									],
									[
										768006,
										768014
									],
									[
										768213,
										768221
									],
									[
										768430,
										768438
									],
									[
										768721,
										768729
									],
									[
										768946,
										768954
									],
									[
										769165,
										769173
									],
									[
										769351,
										769359
									],
									[
										769576,
										769584
									],
									[
										769738,
										769746
									],
									[
										769949,
										769957
									],
									[
										770191,
										770199
									],
									[
										770360,
										770368
									],
									[
										770519,
										770527
									],
									[
										770680,
										770688
									],
									[
										770950,
										770958
									],
									[
										771066,
										771074
									],
									[
										771227,
										771235
									],
									[
										771517,
										771525
									],
									[
										771761,
										771769
									],
									[
										771998,
										772006
									],
									[
										772212,
										772220
									],
									[
										772485,
										772493
									],
									[
										772707,
										772715
									],
									[
										772976,
										772984
									],
									[
										773219,
										773227
									],
									[
										773396,
										773404
									],
									[
										773516,
										773524
									],
									[
										773773,
										773781
									],
									[
										774031,
										774039
									],
									[
										774324,
										774332
									],
									[
										774497,
										774505
									],
									[
										774666,
										774674
									],
									[
										774845,
										774853
									],
									[
										775139,
										775147
									],
									[
										775361,
										775369
									],
									[
										775685,
										775693
									],
									[
										776002,
										776010
									],
									[
										776306,
										776314
									],
									[
										776523,
										776531
									],
									[
										776753,
										776761
									],
									[
										777050,
										777058
									],
									[
										777361,
										777369
									],
									[
										777739,
										777747
									],
									[
										778032,
										778040
									],
									[
										778384,
										778392
									],
									[
										778642,
										778650
									],
									[
										778869,
										778877
									],
									[
										779164,
										779172
									],
									[
										779538,
										779546
									],
									[
										779757,
										779765
									],
									[
										780077,
										780085
									],
									[
										780500,
										780508
									],
									[
										780735,
										780743
									],
									[
										780978,
										780986
									],
									[
										781276,
										781284
									],
									[
										781593,
										781601
									],
									[
										781836,
										781844
									],
									[
										782141,
										782149
									],
									[
										782454,
										782462
									],
									[
										782695,
										782703
									],
									[
										783020,
										783028
									],
									[
										783342,
										783350
									],
									[
										783611,
										783619
									],
									[
										783900,
										783908
									],
									[
										784187,
										784195
									],
									[
										784440,
										784448
									],
									[
										784691,
										784699
									],
									[
										784951,
										784959
									],
									[
										785336,
										785344
									],
									[
										785559,
										785567
									],
									[
										785806,
										785814
									],
									[
										786106,
										786114
									],
									[
										786327,
										786335
									],
									[
										786564,
										786572
									],
									[
										786811,
										786819
									],
									[
										787053,
										787061
									],
									[
										787302,
										787310
									],
									[
										787628,
										787636
									],
									[
										787897,
										787905
									],
									[
										788117,
										788125
									],
									[
										788357,
										788365
									],
									[
										788582,
										788590
									],
									[
										788788,
										788796
									],
									[
										788963,
										788971
									],
									[
										789241,
										789249
									],
									[
										789408,
										789416
									],
									[
										789553,
										789561
									],
									[
										789710,
										789718
									],
									[
										789901,
										789909
									],
									[
										790106,
										790114
									],
									[
										790364,
										790372
									],
									[
										790615,
										790623
									],
									[
										790898,
										790906
									],
									[
										791212,
										791220
									],
									[
										791488,
										791496
									],
									[
										791739,
										791747
									],
									[
										792036,
										792044
									],
									[
										792346,
										792354
									],
									[
										792650,
										792658
									],
									[
										792932,
										792940
									],
									[
										793249,
										793257
									],
									[
										793371,
										793379
									],
									[
										793736,
										793744
									],
									[
										793944,
										793952
									],
									[
										794113,
										794121
									],
									[
										794272,
										794280
									],
									[
										794374,
										794382
									],
									[
										794490,
										794498
									],
									[
										794635,
										794643
									],
									[
										794742,
										794750
									],
									[
										794898,
										794906
									],
									[
										795134,
										795142
									],
									[
										795254,
										795262
									],
									[
										795365,
										795373
									],
									[
										795547,
										795555
									],
									[
										795697,
										795705
									],
									[
										795816,
										795824
									],
									[
										795972,
										795980
									],
									[
										796132,
										796140
									],
									[
										796258,
										796266
									],
									[
										796393,
										796401
									],
									[
										796528,
										796536
									],
									[
										796685,
										796693
									],
									[
										796838,
										796846
									],
									[
										796973,
										796981
									],
									[
										797140,
										797148
									],
									[
										797262,
										797270
									],
									[
										797459,
										797467
									],
									[
										797674,
										797682
									],
									[
										797895,
										797903
									],
									[
										798119,
										798127
									],
									[
										798337,
										798345
									],
									[
										798494,
										798502
									],
									[
										798661,
										798669
									],
									[
										798842,
										798850
									],
									[
										798961,
										798969
									],
									[
										799138,
										799146
									],
									[
										799440,
										799448
									],
									[
										799659,
										799667
									],
									[
										799881,
										799889
									],
									[
										800087,
										800095
									],
									[
										800292,
										800300
									],
									[
										800456,
										800464
									],
									[
										800660,
										800668
									],
									[
										800893,
										800901
									],
									[
										801117,
										801125
									],
									[
										801309,
										801317
									],
									[
										801468,
										801476
									],
									[
										801649,
										801657
									],
									[
										801828,
										801836
									],
									[
										802003,
										802011
									],
									[
										802281,
										802289
									],
									[
										802438,
										802446
									],
									[
										802724,
										802732
									],
									[
										803022,
										803030
									],
									[
										803167,
										803175
									],
									[
										803414,
										803422
									],
									[
										803518,
										803526
									],
									[
										803672,
										803680
									],
									[
										803965,
										803973
									],
									[
										803995,
										804003
									],
									[
										804141,
										804149
									],
									[
										804423,
										804431
									],
									[
										804516,
										804524
									],
									[
										804711,
										804719
									],
									[
										804836,
										804844
									],
									[
										805127,
										805135
									],
									[
										805346,
										805354
									],
									[
										805612,
										805620
									],
									[
										805847,
										805855
									],
									[
										806111,
										806119
									],
									[
										806315,
										806323
									],
									[
										806440,
										806448
									],
									[
										806572,
										806580
									],
									[
										806849,
										806857
									],
									[
										807158,
										807166
									],
									[
										807381,
										807389
									],
									[
										807672,
										807680
									],
									[
										807897,
										807905
									],
									[
										808206,
										808214
									],
									[
										808441,
										808449
									],
									[
										808668,
										808676
									],
									[
										808894,
										808902
									],
									[
										809201,
										809209
									],
									[
										809461,
										809469
									],
									[
										809692,
										809700
									],
									[
										809936,
										809944
									],
									[
										810041,
										810049
									],
									[
										810154,
										810162
									],
									[
										810258,
										810266
									],
									[
										810471,
										810479
									],
									[
										810634,
										810642
									],
									[
										810813,
										810821
									],
									[
										810908,
										810916
									],
									[
										811021,
										811029
									],
									[
										811208,
										811216
									],
									[
										811474,
										811482
									],
									[
										811746,
										811754
									],
									[
										812018,
										812026
									],
									[
										812246,
										812254
									],
									[
										812487,
										812495
									],
									[
										812637,
										812645
									],
									[
										812844,
										812852
									],
									[
										813006,
										813014
									],
									[
										813234,
										813242
									],
									[
										813449,
										813457
									],
									[
										813694,
										813702
									],
									[
										813937,
										813945
									],
									[
										814145,
										814153
									],
									[
										814342,
										814350
									],
									[
										814539,
										814547
									],
									[
										814734,
										814742
									],
									[
										814941,
										814949
									],
									[
										815184,
										815192
									],
									[
										815462,
										815470
									],
									[
										815717,
										815725
									],
									[
										816021,
										816029
									],
									[
										816312,
										816320
									],
									[
										816516,
										816524
									],
									[
										816663,
										816671
									],
									[
										816881,
										816889
									],
									[
										817115,
										817123
									],
									[
										817336,
										817344
									],
									[
										817538,
										817546
									],
									[
										817741,
										817749
									],
									[
										817939,
										817947
									],
									[
										818148,
										818156
									],
									[
										818360,
										818368
									],
									[
										818570,
										818578
									],
									[
										818768,
										818776
									],
									[
										818983,
										818991
									],
									[
										819245,
										819253
									],
									[
										819529,
										819537
									],
									[
										819798,
										819806
									],
									[
										819973,
										819981
									],
									[
										820147,
										820155
									],
									[
										820189,
										820197
									],
									[
										820369,
										820377
									],
									[
										820701,
										820709
									],
									[
										820921,
										820929
									],
									[
										821142,
										821150
									],
									[
										821256,
										821264
									],
									[
										821395,
										821403
									],
									[
										821607,
										821615
									],
									[
										821749,
										821757
									],
									[
										821932,
										821940
									],
									[
										822092,
										822100
									],
									[
										822424,
										822432
									],
									[
										822452,
										822460
									],
									[
										822835,
										822843
									],
									[
										823075,
										823083
									],
									[
										923622,
										923626
									],
									[
										923780,
										923784
									],
									[
										924298,
										924302
									],
									[
										944902,
										944906
									],
									[
										945630,
										945634
									],
									[
										945950,
										945954
									],
									[
										946321,
										946325
									],
									[
										946351,
										946355
									],
									[
										946449,
										946453
									],
									[
										946792,
										946796
									],
									[
										947110,
										947114
									],
									[
										947424,
										947428
									],
									[
										947786,
										947790
									],
									[
										948098,
										948102
									],
									[
										948221,
										948225
									],
									[
										948271,
										948275
									],
									[
										948348,
										948352
									],
									[
										948658,
										948662
									],
									[
										948926,
										948930
									],
									[
										949095,
										949099
									],
									[
										949130,
										949134
									],
									[
										949205,
										949209
									],
									[
										949485,
										949489
									],
									[
										949888,
										949892
									],
									[
										950276,
										950280
									],
									[
										950575,
										950579
									],
									[
										950957,
										950961
									],
									[
										951219,
										951223
									],
									[
										951640,
										951644
									],
									[
										951987,
										951991
									],
									[
										952307,
										952311
									],
									[
										952678,
										952682
									],
									[
										952708,
										952712
									],
									[
										952806,
										952810
									],
									[
										953193,
										953197
									],
									[
										953626,
										953630
									],
									[
										954106,
										954110
									],
									[
										954539,
										954543
									],
									[
										955293,
										955297
									],
									[
										955726,
										955730
									],
									[
										956118,
										956122
									],
									[
										956484,
										956488
									],
									[
										956841,
										956845
									],
									[
										957354,
										957358
									],
									[
										957855,
										957859
									],
									[
										958273,
										958277
									],
									[
										958627,
										958631
									],
									[
										958898,
										958902
									],
									[
										959231,
										959235
									],
									[
										959571,
										959575
									],
									[
										960004,
										960008
									],
									[
										960414,
										960418
									],
									[
										960735,
										960739
									],
									[
										961094,
										961098
									],
									[
										961121,
										961125
									],
									[
										961145,
										961149
									],
									[
										961205,
										961209
									],
									[
										961245,
										961249
									],
									[
										961272,
										961276
									],
									[
										961296,
										961300
									],
									[
										961356,
										961360
									],
									[
										961699,
										961703
									],
									[
										961779,
										961783
									],
									[
										962045,
										962049
									],
									[
										962084,
										962088
									],
									[
										962306,
										962310
									],
									[
										962474,
										962478
									],
									[
										962996,
										963000
									],
									[
										963153,
										963157
									],
									[
										963642,
										963646
									],
									[
										963788,
										963792
									],
									[
										964275,
										964279
									],
									[
										964412,
										964416
									],
									[
										964875,
										964879
									],
									[
										965038,
										965042
									],
									[
										965643,
										965647
									],
									[
										966068,
										966072
									],
									[
										966399,
										966403
									],
									[
										966662,
										966666
									],
									[
										966938,
										966942
									],
									[
										967240,
										967244
									],
									[
										967510,
										967514
									],
									[
										967768,
										967772
									],
									[
										968036,
										968040
									],
									[
										968396,
										968400
									],
									[
										968703,
										968707
									],
									[
										969011,
										969015
									],
									[
										969264,
										969268
									],
									[
										969519,
										969523
									],
									[
										969534,
										969538
									],
									[
										969832,
										969836
									],
									[
										970129,
										970133
									],
									[
										970363,
										970367
									],
									[
										970453,
										970457
									],
									[
										970828,
										970832
									],
									[
										970897,
										970901
									],
									[
										970973,
										970977
									],
									[
										971288,
										971292
									],
									[
										971744,
										971748
									],
									[
										972047,
										972051
									],
									[
										972483,
										972487
									],
									[
										972703,
										972707
									],
									[
										972985,
										972989
									],
									[
										973241,
										973245
									],
									[
										973388,
										973392
									],
									[
										973568,
										973572
									],
									[
										973724,
										973728
									],
									[
										973737,
										973741
									],
									[
										973746,
										973750
									],
									[
										973992,
										973996
									],
									[
										974164,
										974168
									],
									[
										974405,
										974409
									],
									[
										974641,
										974645
									],
									[
										974812,
										974816
									],
									[
										975176,
										975180
									],
									[
										975318,
										975322
									],
									[
										975602,
										975606
									],
									[
										975801,
										975805
									],
									[
										975807,
										975811
									],
									[
										975992,
										975996
									],
									[
										976160,
										976164
									],
									[
										976471,
										976475
									],
									[
										976713,
										976717
									],
									[
										976937,
										976941
									],
									[
										977208,
										977212
									],
									[
										977520,
										977524
									],
									[
										977742,
										977746
									],
									[
										978020,
										978024
									],
									[
										978197,
										978201
									],
									[
										978583,
										978587
									],
									[
										978734,
										978738
									],
									[
										978945,
										978949
									],
									[
										979096,
										979100
									],
									[
										979309,
										979313
									],
									[
										979460,
										979464
									],
									[
										979676,
										979680
									],
									[
										979827,
										979831
									],
									[
										980057,
										980061
									],
									[
										980336,
										980340
									],
									[
										980463,
										980467
									],
									[
										980669,
										980673
									],
									[
										980722,
										980726
									],
									[
										980978,
										980982
									],
									[
										981207,
										981211
									],
									[
										981320,
										981324
									],
									[
										981370,
										981374
									],
									[
										981681,
										981685
									],
									[
										981954,
										981958
									],
									[
										982228,
										982232
									],
									[
										982563,
										982567
									],
									[
										982961,
										982965
									],
									[
										983031,
										983035
									],
									[
										983496,
										983500
									],
									[
										983778,
										983782
									],
									[
										984032,
										984036
									],
									[
										984223,
										984227
									],
									[
										984449,
										984453
									],
									[
										984714,
										984718
									],
									[
										984865,
										984869
									],
									[
										984951,
										984955
									],
									[
										985183,
										985187
									],
									[
										985522,
										985526
									],
									[
										985707,
										985711
									],
									[
										985770,
										985774
									],
									[
										985896,
										985900
									],
									[
										986009,
										986013
									],
									[
										986280,
										986284
									],
									[
										986460,
										986464
									],
									[
										986756,
										986760
									],
									[
										986936,
										986940
									],
									[
										987237,
										987241
									],
									[
										987406,
										987410
									],
									[
										987769,
										987773
									],
									[
										988150,
										988154
									],
									[
										988380,
										988384
									],
									[
										988505,
										988509
									],
									[
										988543,
										988547
									],
									[
										988755,
										988759
									],
									[
										989048,
										989052
									],
									[
										989325,
										989329
									],
									[
										989574,
										989578
									],
									[
										989832,
										989836
									],
									[
										990172,
										990176
									],
									[
										990454,
										990458
									],
									[
										990774,
										990778
									],
									[
										991145,
										991149
									],
									[
										991175,
										991179
									],
									[
										991273,
										991277
									],
									[
										991648,
										991652
									],
									[
										991855,
										991859
									],
									[
										991933,
										991937
									],
									[
										992213,
										992217
									],
									[
										992510,
										992514
									],
									[
										992801,
										992805
									],
									[
										993115,
										993119
									],
									[
										993450,
										993454
									],
									[
										993762,
										993766
									],
									[
										993885,
										993889
									],
									[
										993935,
										993939
									],
									[
										994012,
										994016
									],
									[
										994322,
										994326
									],
									[
										994590,
										994594
									],
									[
										994759,
										994763
									],
									[
										994794,
										994798
									],
									[
										994869,
										994873
									],
									[
										995122,
										995126
									],
									[
										995498,
										995502
									],
									[
										995859,
										995863
									],
									[
										996131,
										996135
									],
									[
										996486,
										996490
									],
									[
										996748,
										996752
									],
									[
										997142,
										997146
									],
									[
										997448,
										997452
									],
									[
										997662,
										997666
									],
									[
										997953,
										997957
									],
									[
										998196,
										998200
									],
									[
										998592,
										998596
									],
									[
										999017,
										999021
									],
									[
										999416,
										999420
									],
									[
										999750,
										999754
									],
									[
										1000020,
										1000024
									],
									[
										1000260,
										1000264
									],
									[
										1000479,
										1000483
									],
									[
										1000747,
										1000751
									],
									[
										1000910,
										1000914
									],
									[
										1000950,
										1000954
									],
									[
										1001171,
										1001175
									],
									[
										1001246,
										1001250
									],
									[
										1001540,
										1001544
									],
									[
										1001861,
										1001865
									],
									[
										1002150,
										1002154
									],
									[
										1002472,
										1002476
									],
									[
										1002752,
										1002756
									],
									[
										1003031,
										1003035
									],
									[
										1003352,
										1003356
									],
									[
										1003455,
										1003459
									],
									[
										1003511,
										1003515
									],
									[
										1003698,
										1003702
									],
									[
										1003866,
										1003870
									],
									[
										1003893,
										1003897
									],
									[
										1004179,
										1004183
									],
									[
										1004477,
										1004481
									],
									[
										1004790,
										1004794
									],
									[
										1005177,
										1005181
									],
									[
										1005488,
										1005492
									],
									[
										1005784,
										1005788
									],
									[
										1006040,
										1006044
									],
									[
										1006102,
										1006106
									],
									[
										1006442,
										1006446
									],
									[
										1006504,
										1006508
									],
									[
										1006750,
										1006754
									],
									[
										1007040,
										1007044
									],
									[
										1007418,
										1007422
									],
									[
										1007716,
										1007720
									],
									[
										1008025,
										1008029
									],
									[
										1008360,
										1008364
									],
									[
										1008652,
										1008656
									],
									[
										1008872,
										1008876
									],
									[
										1009262,
										1009266
									],
									[
										1009528,
										1009532
									],
									[
										1009613,
										1009617
									],
									[
										1009637,
										1009641
									],
									[
										1009660,
										1009664
									],
									[
										1009683,
										1009687
									],
									[
										1009885,
										1009889
									],
									[
										1010093,
										1010097
									],
									[
										1010447,
										1010451
									],
									[
										1010692,
										1010696
									],
									[
										1011033,
										1011037
									],
									[
										1011401,
										1011405
									],
									[
										1011499,
										1011503
									],
									[
										1011569,
										1011573
									],
									[
										1011690,
										1011694
									],
									[
										1012042,
										1012046
									],
									[
										1012057,
										1012061
									],
									[
										1012065,
										1012069
									],
									[
										1012078,
										1012082
									],
									[
										1012156,
										1012160
									],
									[
										1012191,
										1012195
									],
									[
										1012232,
										1012236
									],
									[
										1012252,
										1012256
									],
									[
										1012325,
										1012329
									],
									[
										1012653,
										1012657
									],
									[
										1012673,
										1012677
									],
									[
										1012686,
										1012690
									],
									[
										1012699,
										1012703
									],
									[
										1012782,
										1012786
									],
									[
										1012832,
										1012836
									],
									[
										1012883,
										1012887
									],
									[
										1012944,
										1012948
									],
									[
										1013006,
										1013010
									],
									[
										1013089,
										1013093
									],
									[
										1013172,
										1013176
									],
									[
										1013255,
										1013259
									],
									[
										1013455,
										1013459
									],
									[
										1013474,
										1013478
									],
									[
										1013506,
										1013510
									],
									[
										1013865,
										1013869
									],
									[
										1013888,
										1013892
									],
									[
										1013913,
										1013917
									],
									[
										1013984,
										1013988
									],
									[
										1014055,
										1014059
									],
									[
										1014282,
										1014286
									],
									[
										1014328,
										1014332
									],
									[
										1014383,
										1014387
									],
									[
										1014429,
										1014433
									],
									[
										1014450,
										1014454
									],
									[
										1014496,
										1014500
									],
									[
										1014525,
										1014529
									],
									[
										1014715,
										1014719
									],
									[
										1014787,
										1014791
									],
									[
										1014824,
										1014828
									],
									[
										1014863,
										1014867
									],
									[
										1014953,
										1014957
									],
									[
										1015042,
										1015046
									],
									[
										1015156,
										1015160
									],
									[
										1015387,
										1015391
									],
									[
										1015463,
										1015467
									],
									[
										1015878,
										1015882
									],
									[
										1015997,
										1016001
									],
									[
										1016033,
										1016037
									],
									[
										1016053,
										1016057
									],
									[
										1016075,
										1016079
									],
									[
										1016116,
										1016120
									],
									[
										1016157,
										1016161
									],
									[
										1016189,
										1016193
									],
									[
										1016402,
										1016406
									],
									[
										1016625,
										1016629
									],
									[
										1016941,
										1016945
									],
									[
										1016961,
										1016965
									],
									[
										1017174,
										1017178
									],
									[
										1017397,
										1017401
									],
									[
										1017615,
										1017619
									],
									[
										1017774,
										1017778
									],
									[
										1017819,
										1017823
									],
									[
										1017931,
										1017935
									],
									[
										1018113,
										1018117
									],
									[
										1018344,
										1018348
									],
									[
										1018708,
										1018712
									],
									[
										1018765,
										1018769
									],
									[
										1018851,
										1018855
									],
									[
										1018927,
										1018931
									],
									[
										1019032,
										1019036
									],
									[
										1019146,
										1019150
									],
									[
										1019262,
										1019266
									],
									[
										1019367,
										1019371
									],
									[
										1019481,
										1019485
									],
									[
										1019738,
										1019742
									],
									[
										1020008,
										1020012
									],
									[
										1020189,
										1020193
									],
									[
										1020395,
										1020399
									],
									[
										1020484,
										1020488
									],
									[
										1020514,
										1020518
									],
									[
										1020620,
										1020624
									],
									[
										1020653,
										1020657
									],
									[
										1020818,
										1020822
									],
									[
										1021017,
										1021021
									],
									[
										1021299,
										1021303
									],
									[
										1021662,
										1021666
									],
									[
										1021704,
										1021708
									],
									[
										1021976,
										1021980
									],
									[
										1022329,
										1022333
									],
									[
										1022371,
										1022375
									],
									[
										1022612,
										1022616
									],
									[
										1022885,
										1022889
									],
									[
										1023084,
										1023088
									],
									[
										1023326,
										1023330
									],
									[
										1023383,
										1023387
									],
									[
										1023444,
										1023448
									],
									[
										1023795,
										1023799
									],
									[
										1024116,
										1024120
									],
									[
										1024161,
										1024165
									],
									[
										1024244,
										1024248
									],
									[
										1024479,
										1024483
									],
									[
										1024769,
										1024773
									],
									[
										1024829,
										1024833
									],
									[
										1024842,
										1024846
									],
									[
										1024856,
										1024860
									],
									[
										1024864,
										1024868
									],
									[
										1025166,
										1025170
									],
									[
										1025186,
										1025190
									],
									[
										1025516,
										1025520
									],
									[
										1025763,
										1025767
									],
									[
										1025958,
										1025962
									],
									[
										1026002,
										1026006
									],
									[
										1026113,
										1026117
									],
									[
										1026144,
										1026148
									],
									[
										1026168,
										1026172
									],
									[
										1026246,
										1026250
									],
									[
										1026559,
										1026563
									],
									[
										1026938,
										1026942
									],
									[
										1027329,
										1027333
									],
									[
										1027602,
										1027606
									],
									[
										1027789,
										1027793
									],
									[
										1028013,
										1028017
									],
									[
										1028261,
										1028265
									],
									[
										1028350,
										1028354
									],
									[
										1028545,
										1028549
									],
									[
										1028685,
										1028689
									],
									[
										1028736,
										1028740
									],
									[
										1028846,
										1028850
									],
									[
										1028897,
										1028901
									],
									[
										1029133,
										1029137
									],
									[
										1029345,
										1029349
									],
									[
										1029486,
										1029490
									],
									[
										1029697,
										1029701
									],
									[
										1029966,
										1029970
									],
									[
										1030199,
										1030203
									],
									[
										1030418,
										1030422
									],
									[
										1030689,
										1030693
									],
									[
										1030801,
										1030805
									],
									[
										1030915,
										1030919
									],
									[
										1031163,
										1031167
									],
									[
										1031307,
										1031311
									],
									[
										1031444,
										1031448
									],
									[
										1031730,
										1031734
									],
									[
										1031960,
										1031964
									],
									[
										1032209,
										1032213
									],
									[
										1032426,
										1032430
									],
									[
										1032660,
										1032664
									],
									[
										1032685,
										1032689
									],
									[
										1032856,
										1032860
									],
									[
										1033078,
										1033082
									],
									[
										1033295,
										1033299
									],
									[
										1033516,
										1033520
									],
									[
										1033576,
										1033580
									],
									[
										1033838,
										1033842
									],
									[
										1034035,
										1034039
									],
									[
										1034417,
										1034421
									],
									[
										1034436,
										1034440
									],
									[
										1034694,
										1034698
									],
									[
										1034828,
										1034832
									],
									[
										1035030,
										1035034
									],
									[
										1035364,
										1035368
									],
									[
										1035644,
										1035648
									],
									[
										1035958,
										1035962
									],
									[
										1036282,
										1036286
									],
									[
										1036594,
										1036598
									],
									[
										1036717,
										1036721
									],
									[
										1036767,
										1036771
									],
									[
										1036844,
										1036848
									],
									[
										1037154,
										1037158
									],
									[
										1037422,
										1037426
									],
									[
										1037591,
										1037595
									],
									[
										1037626,
										1037630
									],
									[
										1037701,
										1037705
									],
									[
										1038085,
										1038089
									],
									[
										1038338,
										1038342
									],
									[
										1038703,
										1038707
									],
									[
										1039053,
										1039057
									],
									[
										1039375,
										1039379
									],
									[
										1039773,
										1039777
									],
									[
										1040112,
										1040116
									],
									[
										1040456,
										1040460
									],
									[
										1040718,
										1040722
									],
									[
										1041101,
										1041105
									],
									[
										1041588,
										1041604
									],
									[
										1041958,
										1041972
									],
									[
										1042158,
										1042172
									],
									[
										1042378,
										1042392
									],
									[
										1042878,
										1042891
									],
									[
										1043215,
										1043228
									],
									[
										1043470,
										1043483
									],
									[
										1043676,
										1043689
									],
									[
										1043911,
										1043924
									],
									[
										1044124,
										1044137
									],
									[
										1044156,
										1044169
									],
									[
										1044304,
										1044317
									],
									[
										1044345,
										1044358
									],
									[
										1044601,
										1044614
									],
									[
										1044644,
										1044657
									],
									[
										1044705,
										1044718
									],
									[
										1044738,
										1044751
									],
									[
										1044929,
										1044942
									],
									[
										1044952,
										1044965
									],
									[
										1045025,
										1045038
									],
									[
										1045041,
										1045054
									],
									[
										1045178,
										1045191
									],
									[
										1045299,
										1045312
									],
									[
										1045334,
										1045347
									],
									[
										1045547,
										1045560
									],
									[
										1045585,
										1045598
									],
									[
										1045805,
										1045818
									],
									[
										1046311,
										1046324
									],
									[
										1046648,
										1046661
									],
									[
										1046903,
										1046916
									],
									[
										1047109,
										1047122
									],
									[
										1047344,
										1047357
									],
									[
										1047557,
										1047570
									],
									[
										1047589,
										1047602
									],
									[
										1047737,
										1047750
									],
									[
										1047778,
										1047791
									],
									[
										1048034,
										1048047
									],
									[
										1048077,
										1048090
									],
									[
										1048138,
										1048151
									],
									[
										1048171,
										1048184
									],
									[
										1048362,
										1048375
									],
									[
										1048385,
										1048398
									],
									[
										1048458,
										1048471
									],
									[
										1048474,
										1048487
									],
									[
										1048611,
										1048624
									],
									[
										1048732,
										1048745
									],
									[
										1048767,
										1048780
									],
									[
										1048980,
										1048993
									],
									[
										1049018,
										1049031
									],
									[
										1049238,
										1049251
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1048147,
								1048147
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 17,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 503160.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/mw/0-rust/src/librustc_trans/back/write.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96183,
						"regions":
						{
						},
						"selection":
						[
							[
								11233,
								11233
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7027.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/Bitcode/BitcodeWriter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6738,
						"regions":
						{
						},
						"selection":
						[
							[
								3933,
								3933
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 747.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "simple-rust-obj/func.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "simple-rust-obj/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 168,
						"regions":
						{
						},
						"selection":
						[
							[
								139,
								139
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "simple-rust-obj/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1124,
						"regions":
						{
						},
						"selection":
						[
							[
								458,
								458
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "simple-rust-obj/func.o",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5260,
						"regions":
						{
						},
						"selection":
						[
							[
								289,
								289
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/mw/llvm/tools/gold/gold-plugin.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 39267,
						"regions":
						{
						},
						"selection":
						[
							[
								8610,
								8610
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4608.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/mw/0-rust/src/librustc_trans/back/linker.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33291,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4536.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/mw/0-rust/src/librustc_trans/back/link.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66051,
						"regions":
						{
						},
						"selection":
						[
							[
								62586,
								62590
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 35873.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/mw/0-rust/src/llvm/tools/opt/opt.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26600,
						"regions":
						{
						},
						"selection":
						[
							[
								3510,
								3524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1769.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/mw/0-rust/build/x86_64-unknown-linux-gnu/llvm/include/llvm/PassSupport.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11455,
						"regions":
						{
						},
						"selection":
						[
							[
								4192,
								4192
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1381.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/mw/0-rust/src/llvm/lib/Transforms/IPO/ThinLTOBitcodeWriter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18002,
						"regions":
						{
						},
						"selection":
						[
							[
								14585,
								14604
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3116.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/home/mw/0-rust/src/llvm/include/llvm/Transforms/IPO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11261,
						"regions":
						{
						},
						"selection":
						[
							[
								11090,
								11090
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5845.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/mw/0-rust/src/rustllvm/PassWrapper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41807,
						"regions":
						{
						},
						"selection":
						[
							[
								25803,
								25803
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19817.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/mw/0-rust/src/librustc_trans/back/lto.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31234,
						"regions":
						{
						},
						"selection":
						[
							[
								27669,
								27697
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15884.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/mw/llvm/include/llvm/LTO/LTOBackend.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1824,
						"regions":
						{
						},
						"selection":
						[
							[
								569,
								569
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 72.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/mw/llvm/include/llvm/LTO/LTO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16972,
						"regions":
						{
						},
						"selection":
						[
							[
								2474,
								2474
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1135.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 56.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "cross-lto.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"cross-lto/simple-rust-obj/Makefile"
			],
			[
				"func.o",
				"~/cross-lto/simple-rust-obj/func.o"
			],
			[
				"make",
				"cross-lto/simple-rust-obj/Makefile"
			],
			[
				"linker.rs",
				"0-rust/src/librustc_trans/back/linker.rs"
			],
			[
				"link.rs",
				"0-rust/src/librustc_trans/back/link.rs"
			],
			[
				"lto.rs",
				"0-rust/src/librustc_trans/back/lto.rs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
